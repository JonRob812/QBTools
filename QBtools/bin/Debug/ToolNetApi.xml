<?xml version="1.0"?>
<doc>
    <assembly>
        "ToolNetApi"
    </assembly>
    <members>
        <member name="M:Cnc.Tool.Interop.TlToolFunctions.GetTlAssemblyFactory">
            <summary> Gets TlAssembly factory. </summary>
            <returns> nullptr if it fails, else the TlAssembly factory. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFunctions.GetTlAssemblyItemFactory">
            <summary> Gets TlAssemblyItem factory. </summary>
            <returns> nullptr if it fails, else theTlAssemblyItem factory. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFunctions.GetToolSystem">
            <summary> Gets tool system interface. </summary>
            <returns> The tool system interface. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolFunctions">
            <summary> Implementation of the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.IsEmpty">
            <summary> Query if the main part tool list is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.LaunchManager(System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Classic Tool Manager Dialog. </summary>
            <param name="launchLathe"> True to launch the lathe tool manager.  False to launch the mill tool manager. </param>
            <param name="parent">     (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlCutParam@,System.Int16,System.Double,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a cutting parameter from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. IsoGroup and
		  ToolDiameter parameters exist to provide initial filtering functionality. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="isoGroup"> ISO group that the current workpiece material belongs to. </param>
            <param name="toolDia">  The diameter of the current tool being used. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a cutting parameter was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlToolLathe@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a lathe tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.SelectFromPart(Cnc.Tool.Interop.TlToolLathe@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a lathe tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.SelectFromPart(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.EditAssemblyProjections(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the GAF Projection editing feature to edit the projections of the assembly provided at the input parameter "spResult".
		  If the assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="parent">    (Optional, defaults to null) If non-null, (Optional) the parent. </param>
            <returns> true if the assembly has changed, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.EditAssemblyHolder(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Int32,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the holder wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the holder is successfully edited, and the input parameter "updatePart" is set to true, the holder
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		  The result. </param>
            <param name="updatePart">	  true to update part. </param>
            <param name="compositeIndex"> (Optional, defaults to -1) If the holder is a composite holder, the index of the holder to edit. </param>
            <param name="parent">		  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.EditAssemblyTool(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the tool wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		   The result. </param>
            <param name="updatePart">	   true to update part. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properties page) of the wizard. </param>
            <param name="readOnly">        (Optional) true to present the editor in read-only mode. </param>
            <param name="parent">		   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Edit(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit assembly dialog to edit the assembly provided at the input parameter "spResult". If the
		  assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="parent">    (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Edit(Cnc.Tool.Interop.TlToolLathe,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit lathe tool dialog to edit the assembly provided at the input parameter "spResult". If
		  the lathe tool is successfully edited, and the input parameter "updatePart" is set to true, the lathe
		  tool will be updated in the Mastercam part tool list. </summary>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="parent">    (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Edit(Cnc.Tool.Interop.TlHolder,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit holder wizard to allow users to modify existing holders. The result of the edit holder
		  wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="readOnly"> (Optional, defaults to false) true to launch the editor in a read only mode. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Edit(Cnc.Tool.Interop.TlToolMill,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		   The result. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properites page) of the wizard. </param>
            <param name="readOnly">        (Optional, defaults to false) true to launch the editor in a read only mode. </param>
            <param name="parent">		   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Create(Cnc.Tool.Interop.TlToolLathe@,System.Int32!System.Runtime.CompilerServices.IsLong,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create lathe tool dialog to allow users to create their desired tools. The result of the
		  create lathe tool dialog, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		  The result. </param>
            <param name="machineGroupId"> Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <param name="parent">		  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Create(Cnc.Tool.Interop.TlHolder@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new holder wizard to allow users to create their desired holders. The result of the
		  create new holder wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Create(Cnc.Tool.Interop.TlToolMill@,System.Int32,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new tool wizard to allow users to create their desired tools. The result of the
		  create new tool wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">    The result. </param>
            <param name="initialType"> (Optional, defaults to END_MILL) The initial tool type. </param>
            <param name="parent">	   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.DeleteAll">
            <summary> Deletes all lathe tools and mill assemblies from the main part tool list. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.DeleteLathe(System.Int32)">
            <summary> Deletes a lathe tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot"> The slot number of the tool to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.DeleteMill(System.Int32,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Deletes a mill tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot">         The slot number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="parent">      (Optional, defaults to null) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Delete(System.Guid,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Deletes an item from the main part tool list with identification information matching the input parameter
          "id". </summary>
            <param name="toolId">           The identification number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="parent">      (Optional, defaults to null) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Update(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Update(Cnc.Tool.Interop.TlAssembly)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.GetLatheTools">
            <summary> Constructs a list of all items of type TlToolLathe from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolLathe. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.GetAssemblies">
            <summary> Constructs a list of all items of type TlAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Find(System.Int32,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Find(System.Guid,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Find(System.Int32,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Find(System.Guid,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item.  This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Add(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Adds input. </summary>
            <param name="spInput">			  The input to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.Add(Cnc.Tool.Interop.TlAssembly)">
            <summary> Adds input. </summary>
            <param name="spInput">			  The input to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolSystem.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolSystem">
            <summary> Implementation of the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.IsEmpty">
            <summary> Query if the main part tool list is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.LaunchManager(System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Classic Tool Manager Dialog. </summary>
            <param name="launchLathe"> True to launch the lathe tool manager.  False to launch the mill tool manager. </param>
            <param name="parent">     (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlCutParam@,System.Int16,System.Double,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a cutting parameter from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. IsoGroup and
		  ToolDiameter parameters exist to provide initial filtering functionality. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="isoGroup"> ISO group that the current workpiece material belongs to. </param>
            <param name="toolDia">  The diameter of the current tool being used. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a cutting parameter was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlToolLathe@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a lathe tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromPart(Cnc.Tool.Interop.TlToolLathe@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a lathe tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromPart(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyProjections(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the GAF Projection editing feature to edit the projections of the assembly provided at the input parameter "spResult".
		  If the assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="parent">    (Optional, defaults to null) If non-null, (Optional) the parent. </param>
            <returns> true if the assembly has changed, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyHolder(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Int32,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the holder wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the holder is successfully edited, and the input parameter "updatePart" is set to true, the holder
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		  The result. </param>
            <param name="updatePart">	  true to update part. </param>
            <param name="compositeIndex"> (Optional, defaults to -1) If the holder is a composite holder, the index of the holder to edit. </param>
            <param name="parent">		  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyTool(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the tool wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		   The result. </param>
            <param name="updatePart">	   true to update part. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properties page) of the wizard. </param>
            <param name="readOnly">        (Optional) true to present the editor in read-only mode. </param>
            <param name="parent">		   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit assembly dialog to edit the assembly provided at the input parameter "spResult". If the
		  assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="parent">    (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlToolLathe,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit lathe tool dialog to edit the assembly provided at the input parameter "spResult". If
		  the lathe tool is successfully edited, and the input parameter "updatePart" is set to true, the lathe
		  tool will be updated in the Mastercam part tool list. </summary>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="parent">    (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlHolder,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit holder wizard to allow users to modify existing holders. The result of the edit holder
		  wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="readOnly"> (Optional, defaults to false) true to launch the editor in a read only mode. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlToolMill,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		   The result. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properites page) of the wizard. </param>
            <param name="readOnly">        (Optional, defaults to false) true to launch the editor in a read only mode. </param>
            <param name="parent">		   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create(Cnc.Tool.Interop.TlToolLathe@,System.Int32!System.Runtime.CompilerServices.IsLong,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create lathe tool dialog to allow users to create their desired tools. The result of the
		  create lathe tool dialog, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		  The result. </param>
            <param name="machineGroupId"> Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <param name="parent">		  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create(Cnc.Tool.Interop.TlHolder@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new holder wizard to allow users to create their desired holders. The result of the
		  create new holder wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create(Cnc.Tool.Interop.TlToolMill@,System.Int32,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new tool wizard to allow users to create their desired tools. The result of the
		  create new tool wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">    The result. </param>
            <param name="initialType"> (Optional, defaults to END_MILL) The initial tool type. </param>
            <param name="parent">	   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.DeleteAll">
            <summary> Deletes all lathe tools and mill assemblies from the main part tool list. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.DeleteLathe(System.Int32)">
            <summary> Deletes a lathe tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot"> The slot number of the tool to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.DeleteMill(System.Int32,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Deletes a mill tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot">         The slot number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="parent">      (Optional, defaults to null) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Delete(System.Guid,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Deletes an item from the main part tool list with identification information matching the input parameter
          "id". </summary>
            <param name="toolId">           The identification number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="parent">      (Optional, defaults to null) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.TlAssembly)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.GetLatheTools">
            <summary> Constructs a list of all items of type TlToolLathe from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolLathe. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.GetAssemblies">
            <summary> Constructs a list of all items of type TlAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Int32,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Guid,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Int32,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Guid,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item.  This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Add(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Add(Cnc.Tool.Interop.TlAssembly)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolSystem">
            <summary> Interface into the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Compress">
            <summary> Utility function that compresses the database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BrowseForToolLibraryToSaveOrAppend(System.String,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Display the browse for tool library to save or append dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional, defaults to NULL) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BrowseForToolLibraryToSave(System.String,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Display the browse for tool library to save dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional, defaults to NULL) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BrowseForToolLibraryToOpen(System.String,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Display the browse for tool library to open dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional, defaults to NULL) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.WasMigrated">
            <summary> Queries if the library has been migrated.  If it has, callers should call "GetLibraryPath" to retrieve an
		  updated library path. </summary>
            <returns> true if the library has been migrated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.IsUpdated">
            <summary> Query if the library is updated. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if updated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.IsOpen">
            <summary> Query if this object is open. </summary>
            <returns> true if open, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetLibraryPath">
            <summary> Gets the full library path including the filename. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library path. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetLibraryFilename">
            <summary> Gets library filename including the extension. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library filename. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetLibraryDataVersion">
            <summary> Gets the library data version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library data version. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetLibrarySchemaVersion">
            <summary> Gets the library schema version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library schema version. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.PerformBatchChanges(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject},System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject},System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Performs a batch of changes including the addition of items, deletion of items, and the update of items. </summary>
            <param name="itemsToAdd">    The items to add. </param>
            <param name="itemsToDelete"> The items to delete. </param>
            <param name="itemsToUpdate"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAll">
            <summary> Deletes all items in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlCutParams">
            <summary> Deletes all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolGrades">
            <summary> Deletes all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlManufacturers">
            <summary> Deletes all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolTypes">
            <summary> Deletes all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolGroups">
            <summary> Deletes all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlMaterials">
            <summary> Deletes all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlOpTypes">
            <summary> Deletes all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlOpGroups">
            <summary> Deletes all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlHolderLathes">
            <summary> Deletes all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlInserts">
            <summary> Deletes all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlHolders">
            <summary> Deletes all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolLathes">
            <summary> Deletes all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolMills">
            <summary> Deletes all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlTools">
            <summary> Deletes all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlAssemblies">
            <summary> Deletes all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Delete(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Deletes the given items from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Delete(Cnc.Tool.Interop.TlObject)">
            <summary> Deletes the given item from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Update(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Updates the given items in the library. The items must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Update(Cnc.Tool.Interop.TlObject)">
            <summary> Updates the given item in the library. The item must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllItems(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllItems(Cnc.Tool.Interop.TlMgr)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlCutParams(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlCutParam})">
            <summary> Gets all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolGrades(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolGrade})">
            <summary> Gets all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlManufacturers(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlManufacturer})">
            <summary> Gets all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolTypes(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolType})">
            <summary> Gets all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolGroups(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolGroup})">
            <summary> Gets all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlMaterials(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlMaterial})">
            <summary> Gets all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlOpTypes(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlOpType})">
            <summary> Gets all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlOpGroups(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlOpGroup})">
            <summary> Gets all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlHolderLathes(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlHolderLathe})">
            <summary> Gets all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlInserts(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlInsert})">
            <summary> Gets all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlHolders(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlHolder})">
            <summary> Gets all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolLathes(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolLathe})">
            <summary> Gets all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolMills(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolMill})">
            <summary> Gets all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlTools(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlTool})">
            <summary> Gets all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlAssemblies(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlAssembly},System.Boolean)">
            <summary> Gets all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items">				    The resulting items. </param>
            <param name="includeDefaultAssemblies"> (Optional, defaults to false) True to locally convert mill tools that are not in an assembly into
										an assembly with a default holder, and include them in the resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Add(Cnc.Tool.Interop.TlMgr)">
            <summary> Adds the contents of a TlMgr to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The TlMgr to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Add(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Adds a vector of TlObjectPtrs to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Add(Cnc.Tool.Interop.TlObject)">
            <summary> Adds a TlObject item to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.CreateNewLibrary(System.String)">
            <summary> Creates new library at the specified libraryPath. </summary>
            <param name="libraryPath"> The library file path, including the filename. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BackupLibrary">
            <summary> Creates a backup up the opened library. Auto-generates backup filename, and places it in the same location
		  as the opened library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.UpdateLibrary(System.Boolean)">
            <summary> Updates the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="createBackup"> (Optional, defaults to true) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.CloseLibrary">
            <summary> Closes the library. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.OpenLibrary(System.String,System.Boolean,System.Boolean)">
            <summary> Opens the specified library. Will create the library if it does not exist. </summary>
            <param name="libraryPath">   Full pathname of the library file to open. </param>
            <param name="updateLibrary"> true to update the library to the latest schema version. </param>
            <param name="createBackup">  (Optional, defaults to true) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Finalize">
            <summary> Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Dispose">
            <summary>Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolLibrarySystem">
            <summary> The tool library system class. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Compress">
            <summary> Utility function that compresses the database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BrowseForToolLibraryToSaveOrAppend(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to save or append dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BrowseForToolLibraryToSave(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to save dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BrowseForToolLibraryToOpen(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to open dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.WasMigrated">
            <summary> Queries if the library has been migrated.  If it has, callers should call "GetLibraryPath" to retrieve an
		  updated library path. </summary>
            <returns> true if the library has been migrated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.IsUpdated">
            <summary> Query if the library is updated. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if updated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.IsOpen">
            <summary> Query if this object is open. </summary>
            <returns> true if open, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibraryPath">
            <summary> Gets the full library path including the filename. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library path. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibraryFilename">
            <summary> Gets library filename including the extension. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library filename. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibraryDataVersion">
            <summary> Gets the library data version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library data version. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibrarySchemaVersion">
            <summary> Gets the library schema version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library schema version. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.PerformBatchChanges(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Performs a batch of changes including the addition of items, deletion of items, and the update of items. </summary>
            <param name="itemsToAdd">    The items to add. </param>
            <param name="itemsToDelete"> The items to delete. </param>
            <param name="itemsToUpdate"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAll">
            <summary> Deletes all items in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlCutParams">
            <summary> Deletes all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolGrades">
            <summary> Deletes all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlManufacturers">
            <summary> Deletes all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolTypes">
            <summary> Deletes all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolGroups">
            <summary> Deletes all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlMaterials">
            <summary> Deletes all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlOpTypes">
            <summary> Deletes all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlOpGroups">
            <summary> Deletes all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlHolderLathes">
            <summary> Deletes all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlInserts">
            <summary> Deletes all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlHolders">
            <summary> Deletes all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolLathes">
            <summary> Deletes all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolMills">
            <summary> Deletes all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlTools">
            <summary> Deletes all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlAssemblies">
            <summary> Deletes all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Delete(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given items from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Delete(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given item from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Update(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given items in the library. The items must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Update(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given item in the library. The item must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllItems(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllItems(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlCutParams(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolGrades(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGrade&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGrade&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlManufacturers(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlManufacturer&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlManufacturer&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolTypes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolType&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolType&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolGroups(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGroup&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGroup&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlMaterials(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlMaterial&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlMaterial&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlOpTypes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlOpType&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlOpType&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlOpGroups(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlOpGroup&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlOpGroup&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlTurnHolders(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlTurnHolder&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlTurnHolder&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTurnHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlHolderLathes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderLathe&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderLathe&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlInserts(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlHolders(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolLathes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolMills(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlTools(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlTool&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlAssemblies(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items">				    The resulting items. </param>
            <param name="includeDefaultAssemblies"> True to locally convert mill tools that are not in an assembly into
										an assembly with a default holder, and include them in the resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the contents of a TlMgr to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The TlMgr to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a vector of TlObjectPtrs to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a TlObject item to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetFilterString(System.Boolean)">
            <summary>	Gets filter string. </summary>
            <param name="wireMachine">	true if wire machine. </param>
            <returns>	The filter string. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.CreateNewLibrary(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Creates new library at the specified libraryPath. </summary>
            <param name="libraryPath"> The library file path, including the filename. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BackupLibrary">
            <summary> Creates a backup up the opened library. Auto-generates backup filename, and places it in the same location
		  as the opened library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.UpdateLibrary(System.Boolean)">
            <summary> Updates the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="createBackup"> (Optional) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.CloseLibrary">
            <summary> Closes the library. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.OpenLibrary(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean)">
            <summary> Opens the specified library. Will create the library if it does not exist. </summary>
            <param name="libraryPath">   Full pathname of the library file to open. </param>
            <param name="updateLibrary"> true to update the library to the latest schema version. </param>
            <param name="createBackup">  (Optional) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.ToolLibrarySystem">
            <summary> The tool library system class. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileBuilderParametric.CalcProfile(System.ValueType!Cnc.Tool.Interop.MillToolProfileParams!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Calculates the profile. </summary>
            <param name="profileParams"> The profile calculation parameters. </param>
            <returns> The profile result. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileBuilderParametric">
            <summary> Service class providing functionality to build parametric profiles for milling and holemaking tools. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.MillToolProfileParams">
            <summary> Parametric profile parameters for milling/hole-making tools. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeReducedNeckShankAboveShoulder(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes reduced neck shank above shoulder. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="xStart">  The start. </param>
            <param name="yStart">  The start. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeTaperedShankAboveShoulder(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes tapered shank above shoulder. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="xStart">  The start. </param>
            <param name="yStart">  The start. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeStraightShankAboveShoulder(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes straight shank above shoulder. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="xStart">  The start. </param>
            <param name="yStart">  The start. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeShankAboveShoulder(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes shank above shoulder. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="xStart">  The start. </param>
            <param name="yStart">  The start. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeFeedMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes feed mill. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.MakeLensBarrelHybrid(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Makes a lens barrel form AF tool. </summary>
            <param name="code">   	The code. </param>
            <param name="profile">	The profile. </param>
            <param name="params"> 	Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.MakeLensBarrelMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Makes a lens form AF tool. </summary>
            <param name="code">   	The code. </param>
            <param name="profile">	The profile. </param>
            <param name="params"> 	Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.MakeTaperBarrelMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Makes a taper form AF tool. </summary>
            <param name="code">   	The code. </param>
            <param name="profile">	The profile. </param>
            <param name="params"> 	Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeOvalFormBarrelMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes oval form AF tool. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeBarrelMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes barrel orm AF tool. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeUndefinedThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates an undefined thread profile. </summary>
            <param name="code">   [out] The result code. </param>
            <param name="yValue"> [in] The starting Y value for the thread. [out] The ending Y value for the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A set of profile segments representing the thread. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeNPTThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes npt thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeButtressThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes buttress thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeACMEThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes ACME thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeUNISOThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes Unified/ISO thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeThreadMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes thread mill. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeCounterBore(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a Counter bore. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeBullEndMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a bull end mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeLolliPopMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a lollipop mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeTaperMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a taper mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeRadiusMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes the radius mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeSlotMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a slot mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeFaceMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a face mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeChamferMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a chamfer mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeBallEndMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a ball end mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeBoringBar(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a boring bar. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeDoveTailMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a dove tail mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeReamer(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a reamer. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeFlatEndMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a flat end mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeDrill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a drill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeCenterDrill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a center drill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeCounterSinkOrTapOrNullTool(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a counter sink or tap or null tool. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.CheckToolValidity(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check tool validity. </summary>
            <param name="profileParams"> [in] The parameters to validate. </param>
            <returns> The result code. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.CalcProfile(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the profile. </summary>
            <param name="profileParams"> The profile calculation parameters. </param>
            <returns> The profile result. </returns>
        </member>
        <member name="T:Cnc.Tool.TlProfileBuilderParametric">
            <summary> Service class providing functionality to build parametric profiles for milling and holemaking tools. </summary>
        </member>
        <member name="T:Cnc.Tool.MillToolProfileParams">
            <summary> Parametric profile parameters for milling/hole-making tools. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItemFactory.CreateMillHolder(System.Boolean)">
            <summary> Creates a mill holder based on the input metric flag. </summary>
            <param name="metric"> True for the created holder to have metric values. </param>
            <returns> The new mill holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItemFactory.CreateMillTool(Cnc.Tool.Interop.MCToolType,System.Boolean)">
            <summary> Creates a mill tool using the passed in type and metric flag. </summary>
            <param name="type">   The type. </param>
            <param name="metric"> true for the created mill tool to have metric values. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItemFactory.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyItemFactory">
            <summary> Implementation of the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlAssemblyItemFactory.CreateMillHolder(System.Boolean)">
            <summary> Creates a mill holder based on the input metric flag. </summary>
            <param name="metric"> True for the created holder to have metric values. </param>
            <returns> The new mill holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlAssemblyItemFactory.CreateMillTool(Cnc.Tool.Interop.MCToolType,System.Boolean)">
            <summary> Creates a mill tool using the passed in type and metric flag. </summary>
            <param name="type">   The type. </param>
            <param name="metric"> true for the created mill tool to have metric values. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlAssemblyItemFactory">
            <summary> Factory service class providing functionality for creating instances of the classes TlToolMill, TlHolder,
		  and TlToolLathe. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolSlotMill.SecondaryChamferAngle">
            <summary> Chamfer Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.SetSecondaryChamferDist(System.Double,System.Boolean)">
            <summary> Sets SecondaryChamferDist property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.GetSecondaryChamferDist(System.Boolean)">
            <summary> Gets SecondaryChamferDist property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheSecondaryChamferDist property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolSlotMill.SecondaryChamferDist">
            <summary> Chamfer Distance </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.SetSecondaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets SecondaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.GetSecondaryCornerRadius(System.Boolean)">
            <summary> Gets SecondaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheSecondaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolSlotMill.SecondaryCornerRadius">
            <summary> Corner Radius </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolSlotMill.SecondaryCornerType">
            <summary> Corner Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.op_Assign(Cnc.Tool.Interop.TlToolSlotMill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.CopyFrom(Cnc.Tool.Interop.TlToolSlotMill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.#ctor(Cnc.Tool.Interop.TlToolSlotMill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.op_Assign(Cnc.Tool.Interop.TlToolLatheISO!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.CopyFrom(Cnc.Tool.Interop.TlToolLatheISO)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.#ctor(Cnc.Tool.Interop.TlToolLatheISO!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.HolderEntityID">
            <summary> Identifier for the holder entity. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.InsertEntityID">
            <summary> Identifier for the insert entity. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.ToolType">
            <summary> Type of the tool. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.ToolOrientation">
            <summary> The tool orientation. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.SetNoseRadius(System.Double,System.Boolean)">
            <summary> Sets NoseRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.GetNoseRadius(System.Boolean)">
            <summary> Gets NoseRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheNoseRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.NoseRadius">
            <summary> The nose radius. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.op_Assign(Cnc.Tool.Interop.TlToolLatheCustom!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.CopyFrom(Cnc.Tool.Interop.TlToolLatheCustom)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.#ctor(Cnc.Tool.Interop.TlToolLatheCustom!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetProgramRadius">
            <summary> Gets program radius. </summary>
            <returns> The program radius. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetTaperedHeight">
            <summary> Gets tapered height. </summary>
            <returns> The tapered height. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.LowerTaperAngle">
            <summary> Lower Taper Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.ReliefTaperAngle">
            <summary> Relief Taper Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.UpperTaperAngle">
            <summary> Upper Taper Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.SetUpperRadius(System.Double,System.Boolean)">
            <summary> Sets UpperRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetUpperRadius(System.Boolean)">
            <summary> Gets UpperRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheUpperRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.UpperRadius">
            <summary> Upper Radius </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.SetLowerRadius(System.Double,System.Boolean)">
            <summary> Sets LowerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetLowerRadius(System.Boolean)">
            <summary> Gets LowerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLowerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.LowerRadius">
            <summary> Lower Radius </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.TipDiameter">
            <summary> Tip Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.op_Assign(Cnc.Tool.Interop.TlToolFeedMill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.CopyFrom(Cnc.Tool.Interop.TlToolFeedMill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.#ctor(Cnc.Tool.Interop.TlToolFeedMill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.SetDrillLength(System.Double,System.Boolean)">
            <summary> Sets DrillLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.GetDrillLength(System.Boolean)">
            <summary> Gets DrillLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheDrillLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolCenterDrill.DrillLength">
            <summary> Drill Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.SetDrillDiameter(System.Double,System.Boolean)">
            <summary> Sets DrillDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.GetDrillDiameter(System.Boolean)">
            <summary> Gets DrillDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheDrillDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolCenterDrill.DrillDiameter">
            <summary> Drill Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.op_Assign(Cnc.Tool.Interop.TlToolCenterDrill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.CopyFrom(Cnc.Tool.Interop.TlToolCenterDrill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.#ctor(Cnc.Tool.Interop.TlToolCenterDrill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.SetRadiusType(Cnc.Tool.Interop.TlCornerType)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBoring.RadiusType">
            <summary> Radius Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.SetShift(System.Double,System.Boolean)">
            <summary> Sets Shift property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.GetShift(System.Boolean)">
            <summary> Gets Shift property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShift property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBoring.Shift">
            <summary> Shift </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBoring.TaperAngle">
            <summary> Taper Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.op_Assign(Cnc.Tool.Interop.TlToolBoring!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.CopyFrom(Cnc.Tool.Interop.TlToolBoring)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.#ctor(Cnc.Tool.Interop.TlToolBoring!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.TipDiameter">
            <summary> Gets or sets the tip diameter (for use on lens form tools) </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.TaperAngle">
            <summary> Gets or sets the taper angle (for use on tapered form tools) </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetUpperRadius(System.Double,System.Boolean)">
            <summary> Sets UpperRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetUpperRadius(System.Boolean)">
            <summary> Gets UpperRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheUpperRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.UpperRadius">
            <summary> Gets or sets the upper radius (for use on tapered form tools) </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetPrimaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets PrimaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetPrimaryCornerRadius(System.Boolean)">
            <summary> Gets PrimaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePrimaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.PrimaryCornerRadius">
            <summary> Gets or sets the primary corner radius. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetProfileRadius(System.Double,System.Boolean)">
            <summary> Sets ProfileRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetProfileRadius(System.Boolean)">
            <summary> Gets ProfileRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheProfileRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.ProfileRadius">
            <summary> Profile Radius </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetBarrelLength(System.Double,System.Boolean)">
            <summary> Sets BarrelLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetBarrelLength(System.Boolean)">
            <summary> Gets BarrelLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheBarrelLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.BarrelLength">
            <summary> Barrel Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.op_Assign(Cnc.Tool.Interop.TlToolBarrelMill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.CopyFrom(Cnc.Tool.Interop.TlToolBarrelMill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.#ctor(Cnc.Tool.Interop.TlToolBarrelMill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.op_Assign(Cnc.Tool.Interop.TlHolderLatheTurning!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.CopyFrom(Cnc.Tool.Interop.TlHolderLatheTurning)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.#ctor(Cnc.Tool.Interop.TlHolderLatheTurning!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.TaperSize">
            <summary> Taper Size </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.TaperStyle">
            <summary> Taper Style </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.MaxRPM">
            <summary> Maximum RPM </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.MaxWorkpieceWeight">
            <summary> Maximum Workpiece Weight </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.SetCompressionLength(System.Double,System.Boolean)">
            <summary> Sets CompressionLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.GetCompressionLength(System.Boolean)">
            <summary> Gets CompressionLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCompressionLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.CompressionLength">
            <summary> Compression Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.PointStyle">
            <summary> Point Style </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.op_Assign(Cnc.Tool.Interop.TlHolderLatheLiveCenter!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.CopyFrom(Cnc.Tool.Interop.TlHolderLatheLiveCenter)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.#ctor(Cnc.Tool.Interop.TlHolderLatheLiveCenter!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLatheISO.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.GetCornerRadius">
            <summary> Gets corner radius. </summary>
            <returns> The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.GetProgramRadius">
            <summary> Gets program radius. </summary>
            <returns> The program radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.GetTaperedHeight">
            <summary> Gets tapered height. </summary>
            <returns> The tapered height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.#ctor(Cnc.Tool.TlToolDrill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor taking a base class type. This is used to sepparate the CenterDrill tool type from it's
		  previous home (TlToolDrill) to this class definition. </summary>
            <param name="other"> The const TlToolDrill to process. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.SetCornerRadius(System.Double)">
            <summary> Sets corner radius. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.GetCornerRadius">
            <summary> Gets corner radius. </summary>
            <returns> The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheTurning.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheTurning.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheTurning.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.op_Assign(Cnc.Tool.Interop.TlHolderLatheDrill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.CopyFrom(Cnc.Tool.Interop.TlHolderLatheDrill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.#ctor(Cnc.Tool.Interop.TlHolderLatheDrill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheDrill.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheDrill.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheDrill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.GetHolemakingOpParams">
            <summary> Gets holemaking operation parameters. </summary>
            <returns> The holemaking operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.SetChamferLength(System.Double,System.Boolean)">
            <summary> Sets ChamferLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.GetChamferLength(System.Boolean)">
            <summary> Gets ChamferLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolReamer.ChamferLength">
            <summary> Chamfer Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolReamer.TipAngle">
            <summary> Tip Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.op_Assign(Cnc.Tool.Interop.TlToolReamer!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.CopyFrom(Cnc.Tool.Interop.TlToolReamer)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.#ctor(Cnc.Tool.Interop.TlToolReamer!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetManufacturer(Cnc.Tool.Interop.TlManufacturer)">
            <summary>   Sets a manufacturer. </summary>
            <param name="manufacturer"> The manufacturer. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetWorkMaterial(Cnc.Tool.Interop.TlWorkMaterial)">
            <summary>   Sets a work material. </summary>
            <param name="material"> The material. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetOpType(Cnc.Tool.Interop.TlOpType)">
            <summary>   Sets an operation type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetToolType(Cnc.Tool.Interop.TlToolType)">
            <summary>   Sets a tool type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetGrade(Cnc.Tool.Interop.TlToolGrade)">
            <summary>   Sets a grade. </summary>
            <param name="grade">    The grade. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MachineName">
            <summary> Gets or sets the machine name. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.Manufacturer">
            <summary> Manufacturer </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.WorkMaterial">
            <summary> Work Material </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.OpType">
            <summary> Op Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.ToolType">
            <summary> Tool Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.Grade">
            <summary> Grade </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.CutSource">
            <summary> Cut Source </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.CutQuality">
            <summary> Cut Quality </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.IsProven">
            <summary> Proven Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.IsMetric">
            <summary> Metric Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.FeedFactor">
            <summary> Feed Factor </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MaxFPT">
            <summary> Maximum FPT </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MinFPT">
            <summary> Minimum FPT </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MaxCutSpeed">
            <summary> Maximum Cut Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MinCutSpeed">
            <summary> Minimum Cut Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.ToolLifeMinutes">
            <summary> Tool Life Minutes </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.ToolLifeLinear">
            <summary> Tool Life Linear </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.FinishAxialDoC">
            <summary> Gets or sets the finish axial depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.FinishRadialDoC">
            <summary> Gets or sets the finish radial depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.RoughAxialDoC">
            <summary> Gets or sets the rough axial depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.RoughRadialDoC">
            <summary> Gets or sets the rough radial depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.SurfaceFinish">
            <summary> Surface Finish </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.FPT">
            <summary> FPT </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.CutSpeed">
            <summary> Cut Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MaxDiameter">
            <summary> Maximum Diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MinDiameter">
            <summary> Minimum Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.op_Assign(Cnc.Tool.Interop.TlCutParam!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.CopyFrom(Cnc.Tool.Interop.TlCutParam)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.#ctor(Cnc.Tool.Interop.TlCutParam!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetManufacturer(Cnc.Tool.TlManufacturer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a manufacturer. </summary>
            <param name="manufacturer"> The manufacturer. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetWorkMaterial(Cnc.Tool.TlWorkMaterial!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a work material. </summary>
            <param name="material"> The material. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetOpType(Cnc.Tool.TlOpType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets an operation type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetToolType(Cnc.Tool.TlToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a tool type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetGrade(Cnc.Tool.TlToolGrade!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a grade. </summary>
            <param name="grade">    The grade. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlWorkMaterial.Density">
            <summary> Density </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlWorkMaterial.HardnessValue">
            <summary> Hardness Value </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlWorkMaterial.HardnessUnit">
            <summary> Hardness Unit </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlWorkMaterial.ISOValue">
            <summary> ISO Value </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.op_Assign(Cnc.Tool.Interop.TlWorkMaterial!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.CopyFrom(Cnc.Tool.Interop.TlWorkMaterial)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.#ctor(Cnc.Tool.Interop.TlWorkMaterial!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.SetISOValue(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets an ISO value. </summary>
            <param name="value">    The value. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.RemoveOldMaterialHardness(TlMaterialHardness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Removes the old material hardness described by scale. </summary>
            <param name="scale">    The scale. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.RemoveOldMaterialGroup(TlMaterialGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Removes the old material group described by group. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.SetOldHardnessValue(TlMaterialHardness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets an old hardness value. </summary>
            <param name="scale">    The scale. </param>
            <param name="value">    The value. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.SetOldMaterialGroupID(TlMaterialGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets an old material group identifier. </summary>
            <param name="group">    The group. </param>
            <param name="id">       The identifier. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.GetHardnessForScale(TlMaterialHardness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Gets the hardness for scale. </summary>
            <param name="scale">    The scale. </param>
            <returns>   The hardness for scale. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TransformationMatrixColumn.default(System.Int32)">
            <summary> Array indexer operator. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>	Parameterized constructor. </summary>
            <param name="a">	The double to process. </param>
            <param name="b">	The double to process. </param>
            <param name="c">	The double to process. </param>
            <param name="d">	The double to process. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.op_Assign(Cnc.Tool.Interop.TransformationMatrixColumn!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.CopyFrom(Cnc.Tool.Interop.TransformationMatrixColumn)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.#ctor(Cnc.Tool.Interop.TransformationMatrixColumn!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.SpringCuts">
            <summary> Spring cuts </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetPulloff(System.Double,System.Boolean)">
            <summary> Sets Pulloff property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetPulloff(System.Boolean)">
            <summary> Gets Pulloff property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePulloff property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.Pulloff">
            <summary> Pulloff </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetFinishAllowance(System.Double,System.Boolean)">
            <summary> Sets FinishAllowance property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetFinishAllowance(System.Boolean)">
            <summary> Gets FinishAllowance property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFinishAllowance property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.FinishAllowance">
            <summary> Finish allowance </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetLastDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets LastDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetLastDepthOfCut(System.Boolean)">
            <summary> Gets LastDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLastDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.LastDepthOfCut">
            <summary> Last depth of cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetFirstDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets FirstDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetFirstDepthOfCut(System.Boolean)">
            <summary> Gets FirstDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFirstDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.FirstDepthOfCut">
            <summary> First depth of cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetFlatWidth(System.Double,System.Boolean)">
            <summary> Sets FlatWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetFlatWidth(System.Boolean)">
            <summary> Gets FlatWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFlatWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.FlatWidth">
            <summary> Flat width </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetLaydownHeight(System.Double,System.Boolean)">
            <summary> Sets LaydownHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetLaydownHeight(System.Boolean)">
            <summary> Gets LaydownHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLaydownHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.LaydownHeight">
            <summary> Laydown height </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetNotchPointLocation(System.Double,System.Boolean)">
            <summary> Sets NotchPointLocation property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetNotchPointLocation(System.Boolean)">
            <summary> Gets NotchPointLocation property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheNotchPointLocation property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.NotchPointLocation">
            <summary> Notch point location </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetMaxThreadPitch(System.Double,System.Boolean)">
            <summary> Sets MaxThreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetMaxThreadPitch(System.Boolean)">
            <summary> Gets MaxThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheMaxThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.MaxThreadPitch">
            <summary> Gets or sets the Maximum Thread Pitch </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetMinThreadPitch(System.Double,System.Boolean)">
            <summary> Sets MinThreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetMinThreadPitch(System.Boolean)">
            <summary> Gets MinThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheMinThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.MinThreadPitch">
            <summary> Gets or sets the Minimum Thread Pitch </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.IsExternalThread">
            <summary> Is external thread </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.ThreadType">
            <summary> Thread type (UNIFIED, ACME, BUTTRESS, ETC.) </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.InsertStyle">
            <summary> Insert style (TOP NOTCH, LAYDOWN) </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.op_Assign(Cnc.Tool.Interop.TlInsertThreading!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.CopyFrom(Cnc.Tool.Interop.TlInsertThreading)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.#ctor(Cnc.Tool.Interop.TlInsertThreading!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds an operation type identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.AddOpTypeID(Cnc.Tool.TlOpType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds an operation type identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.GetOpTypeIDs">
            <summary>	Gets the operation type ids. </summary>
            <returns>	The operation type ids. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.SetOpGroupID(System.Guid)">
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.SetOpGroupID(Cnc.Tool.Interop.TlOpGroup)">
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.GetOpGroupID">
            <summary>	Gets the operation group identifier. </summary>
            <returns>	The operation group identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.op_Assign(Cnc.Tool.Interop.TlOpType!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.CopyFrom(Cnc.Tool.Interop.TlOpType)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.#ctor(Cnc.Tool.Interop.TlOpType!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlOpType.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="F:Cnc.Tool.TlOpType.m_ParentGroup">
            <summary>	Group the parent belongs to. </summary>
        </member>
        <member name="M:Cnc.Tool.TlOpType.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpType.SetOpGroupID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpType.SetOpGroupID(Cnc.Tool.TlOpGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpType.GetOpGroupID">
            <summary>	Gets the operation group identifier. </summary>
            <returns>	The operation group identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.op_Assign(Cnc.Tool.Interop.TlHolderLatheBoring!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.CopyFrom(Cnc.Tool.Interop.TlHolderLatheBoring)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.#ctor(Cnc.Tool.Interop.TlHolderLatheBoring!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheBoring.GetAnsiStringPos(System.Char)">
            <summary> Gets an ANSI string position. </summary>
            <param name="c"> The TCHAR to process. </param>
            <returns> The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheBoring.GetAnsiString">
            <summary> Gets the ANSI string. </summary>
            <returns> The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheBoring.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyFactory.Create(Cnc.Tool.Interop.TlToolMill)">
            <summary> Creates a new TlAssemblyPtr from the given tool. </summary>
            <param name="spTool"> The tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyFactory.Create(Cnc.Tool.Interop.MCToolType,System.Boolean)">
            <summary> Creates a new TlAssemblyPtr based on the tool type and metric flag. </summary>
            <param name="toolType"> Type of the tool. </param>
            <param name="isMetric"> true if this object is metric. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyFactory.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyFactory">
            <summary> Implementation of the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlAssemblyFactory.Create(Cnc.Tool.Interop.TlToolMill)">
            <summary> Creates a new TlAssemblyPtr from the given tool. </summary>
            <param name="spTool"> The tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlAssemblyFactory.Create(Cnc.Tool.Interop.MCToolType,System.Boolean)">
            <summary> Creates a new TlAssemblyPtr based on the tool type and metric flag. </summary>
            <param name="toolType"> Type of the tool. </param>
            <param name="isMetric"> true if this object is metric. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlAssemblyFactory">
            <summary> Factory service class providing functionality for creating instances of class TlAssembly. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.RemoveTypeGroup(Cnc.Tool.Interop.TlToolType)">
            <summary>   Removes the type group described by group. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.AddToolTypeID(System.Guid)">
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.AddToolTypeID(Cnc.Tool.Interop.TlToolType)">
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.GetToolTypeIDs">
            <summary>   Gets the tool type ids. </summary>
            <returns>   The tool type ids. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolGroup.ImagePath">
            <summary> Image Path </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.op_Assign(Cnc.Tool.Interop.TlToolGroup!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.CopyFrom(Cnc.Tool.Interop.TlToolGroup)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.#ctor(Cnc.Tool.Interop.TlToolGroup!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolGroup.m_ToolTypeIDs">
            <summary>   The tool type ids. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.RemoveTypeGroup(Cnc.Tool.TlToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Removes the type group described by group. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.AddToolTypeID(Cnc.Tool.TlToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.GetToolTypeIDs">
            <summary>   Gets the tool type ids. </summary>
            <returns>   The tool type ids. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolType.ImagePath">
            <summary> Image File Path </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolType.GroupID">
            <summary> Group Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.op_Assign(Cnc.Tool.Interop.TlToolType!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.CopyFrom(Cnc.Tool.Interop.TlToolType)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.#ctor(Cnc.Tool.Interop.TlToolType!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolType.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolType.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.Dwell">
            <summary> Gets or sets the Dwell measured in seconds. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.ChipBreak">
            <summary> Gets or sets the Chip Break measured as a percentage of the tool diameter. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.PeckClear">
            <summary> Gets or sets the Peck Clear measured as a percentage. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.Peck2">
            <summary> Gets or sets the Peck 2 measured as a percentage of the tool diameter. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.Peck1">
            <summary> Gets or sets the Peck 1 measured as a percentage of the tool diameter. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.CannedCycleType">
            <summary> Canned Cycle Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.op_Assign(Cnc.Tool.Interop.TlHolemakingOpParams!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.CopyFrom(Cnc.Tool.Interop.TlHolemakingOpParams)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.#ctor(Cnc.Tool.Interop.TlHolemakingOpParams!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolemakingOpParams.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolemakingOpParams.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.IsMultiDirectional">
            <summary> Is multi directional </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.Definition">
            <summary> The insert definition </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.TypeCode">
            <summary> Type code </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.IndexReliefAngle">
            <summary> Index relief angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetFacingXOvercut(System.Double,System.Boolean)">
            <summary> Sets FacingXOvercut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetFacingXOvercut(System.Boolean)">
            <summary> Gets FacingXOvercut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFacingXOvercut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.FacingXOvercut">
            <summary> Facing x coordinate overcut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetFacingRetract(System.Double,System.Boolean)">
            <summary> Sets FacingRetract property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetFacingRetract(System.Boolean)">
            <summary> Gets FacingRetract property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFacingRetract property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.FacingRetract">
            <summary> Facing retract </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetRoughOverlap(System.Double,System.Boolean)">
            <summary> Sets RoughOverlap property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetRoughOverlap(System.Boolean)">
            <summary> Gets RoughOverlap property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRoughOverlap property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.RoughOverlap">
            <summary> Rough overlap </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetFinishDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets FinishDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetFinishDepthOfCut(System.Boolean)">
            <summary> Gets FinishDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFinishDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.FinishDepthOfCut">
            <summary> Finish depth of cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetRoughDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets RoughDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetRoughDepthOfCut(System.Boolean)">
            <summary> Gets RoughDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRoughDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.RoughDepthOfCut">
            <summary> Rough depth of cut </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.ReliefAngle">
            <summary> Relief angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.AnsiCrossSectionCode">
            <summary> ANSI cross section code </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.op_Assign(Cnc.Tool.Interop.TlInsertTurningBoring!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.CopyFrom(Cnc.Tool.Interop.TlInsertTurningBoring)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.#ctor(Cnc.Tool.Interop.TlInsertTurningBoring!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.op_Assign(Cnc.Tool.Interop.TlHolderLatheGrooving!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.CopyFrom(Cnc.Tool.Interop.TlHolderLatheGrooving)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.#ctor(Cnc.Tool.Interop.TlHolderLatheGrooving!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheGrooving.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheGrooving.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheGrooving.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.BackoffPercent">
            <summary> Backoff percent </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetStockClearance(System.Double,System.Boolean)">
            <summary> Sets StockClearance property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetStockClearance(System.Boolean)">
            <summary> Gets StockClearance property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheStockClearance property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.StockClearance">
            <summary> Stock clearance </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetFinishDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets FinishDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetFinishDepthOfCut(System.Boolean)">
            <summary> Gets FinishDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFinishDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.FinishDepthOfCut">
            <summary> Finish depth of cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetRoughDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets RoughDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetRoughDepthOfCut(System.Boolean)">
            <summary> Gets RoughDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRoughDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.RoughDepthOfCut">
            <summary> Rough depth of cut </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.EndAngle">
            <summary> End angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetNotchPointLocation(System.Double,System.Boolean)">
            <summary> Sets NotchPointLocation property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetNotchPointLocation(System.Boolean)">
            <summary> Gets NotchPointLocation property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheNotchPointLocation property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.NotchPointLocation">
            <summary> Notch point location </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetEndLength(System.Double,System.Boolean)">
            <summary> Sets EndLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetEndLength(System.Boolean)">
            <summary> Gets EndLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheEndLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.EndLength">
            <summary> End length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetShankWidth(System.Double,System.Boolean)">
            <summary> Sets ShankWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetShankWidth(System.Boolean)">
            <summary> Gets ShankWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShankWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.ShankWidth">
            <summary> Shank width </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetCutLength(System.Double,System.Boolean)">
            <summary> Sets CutLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetCutLength(System.Boolean)">
            <summary> Gets CutLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCutLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.CutLength">
            <summary> Cut length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.op_Assign(Cnc.Tool.Interop.TlInsertGrooving!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.CopyFrom(Cnc.Tool.Interop.TlInsertGrooving)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.#ctor(Cnc.Tool.Interop.TlInsertGrooving!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileBuilderDXF.CalcHolderProfile(System.ValueType!Cnc.Tool.Interop.DXFProfileParams!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Calculates the holder profile. </summary>
            <param name="profileParams"> The code. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileBuilderDXF.CalcToolProfile(System.ValueType!Cnc.Tool.Interop.DXFProfileParams!System.Runtime.CompilerServices.IsBoxed,System.Double@,System.Double@,System.Double@)">
            <summary> Calculates the dxf profile and outputs additional data. </summary>
            <param name="profileParams"> The profile parameters. </param>
            <param name="maxDia">		 [out] The maximum dia. </param>
            <param name="maxLen">		 [out] Length of the maximum. </param>
            <param name="cutDepth">		 [out] Depth of the cut. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileBuilderDXF.CalcProfile(System.ValueType!Cnc.Tool.Interop.DXFProfileParams!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Calculates the profile. </summary>
            <param name="profileParams"> The profile calculation parameters. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileBuilderDXF">
            <summary> Service class providing functionality to build custom 2D profiles from DXF files for mill tools and
		  holders. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.DXFProfileParams">
            <summary> A set of parameters required for building tool component profiles from DXF files. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.PerformActionOnDXFImportModule(std.function&lt;(HINSTANCE__*,Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(HINSTANCE__**,Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Performs an action on a loaded DXF Import module. </summary>
            <param name="action">		 The action. </param>
            <param name="profileParams"> Options for controlling the profile. </param>
            <returns> Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.FindChainMaxX(std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for the first chain maximum x coordinate. </summary>
            <param name="profile"> [in] The profile. </param>
            <returns> The found chain maximum x coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.FindChainMaxY(std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for the first chain maximum y coordinate. </summary>
            <param name="profile"> [in] The profile. </param>
            <returns> The found chain maximum y coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.ScaleProfile(std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Scale profile. </summary>
            <param name="profile"> [in] The profile. </param>
            <param name="scale">   The scale. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.OrientProfile(std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Orient profile. </summary>
            <param name="profile"> [in] The cut profile. </param>
            <param name="maxX">    The maximum x coordinate. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.CalcHolderProfile(Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the holder profile. </summary>
            <param name="profileParams"> The code. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.CalcToolProfile(Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the dxf profile and outputs additional data. </summary>
            <param name="profileParams"> The profile parameters. </param>
            <param name="maxDia">		 [out] The maximum dia. </param>
            <param name="maxLen">		 [out] Length of the maximum. </param>
            <param name="cutDepth">		 [out] Depth of the cut. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.CalcProfile(Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the profile. </summary>
            <param name="profileParams"> The profile calculation parameters. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="T:Cnc.Tool.TlProfileBuilderDXF">
            <summary> Service class providing functionality to build custom 2D profiles from DXF files for mill tools and
		  holders. </summary>
        </member>
        <member name="T:Cnc.Tool.DXFProfileParams">
            <summary> A set of parameters required for building tool component profiles from DXF files. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.op_Assign(Cnc.Tool.Interop.TlHolderLatheThreading!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.CopyFrom(Cnc.Tool.Interop.TlHolderLatheThreading)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.#ctor(Cnc.Tool.Interop.TlHolderLatheThreading!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheThreading.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheThreading.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheThreading.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.GetHolderIDList">
            <summary> Gets the holder identifier list. </summary>
            <returns> The holder identifier list. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.ResetAllGuids">
            <summary> Resets all guids. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.BuildComposite">
            <summary>	Builds the composite. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.RetrieveHolderNode(System.Guid,Cnc.Tool.Interop.TlHolderTreeNode@)">
            <summary> Retrieve a specific holder node pointer. </summary>
            <param name="id">   The identifier. </param>
            <param name="root"> The root. </param>
            <returns> . </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.GetHolderTreeRoot">
            <summary> Gets the holder tree root node. </summary>
            <returns> The holder tree root node. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.ModifyToolInsertion(System.Double)">
            <summary> The Assembly tool projection was changed, so modify the main holder's CScalar to account for that. </summary>
            <param name="insertion"> The insertion. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.AddSegment(System.Double,System.Double,System.Double)">
            <summary> Adds a holder segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.GetHolderNodeList">
            <summary> Gets const holder node list. Order is from closest to the tool to the root. </summary>
            <returns> The holder node list. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.ReplaceChildHolder(System.Int32,Cnc.Tool.Interop.TlHolder@)">
            <summary> Replaces an existing child holder. </summary>
            <param name="index">    Zero-based index of the children holders. The root is index 0. </param>
            <param name="newChild"> The new child. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.AddHolder(System.Guid,Cnc.Tool.Interop.TlHolder@,Cnc.Tool.Interop.TransformationMatrix,Cnc.Tool.Interop.TransformationMatrix,Cnc.Tool.Interop.TransformationMatrix,System.Double)">
            <summary> Adds a holder. </summary>
            <param name="parentID">   Identifier for the parent. </param>
            <param name="holder">	  If non-null, the holder. </param>
            <param name="mTransform"> If non-null, the transform. </param>
            <param name="uTransform"> If non-null, the transform. </param>
            <param name="cTransform"> If non-null, the transform. </param>
            <param name="cScalar">    The scalar. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderComposite.MainHolderID">
            <summary> Main Holder Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.op_Assign(Cnc.Tool.Interop.TlHolderComposite!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.CopyFrom(Cnc.Tool.Interop.TlHolderComposite)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.#ctor(Cnc.Tool.Interop.TlHolderComposite!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_children">
            <summary>	The children. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_cScalar">
            <summary>	The scalar. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_cTransformation">
            <summary>	The c transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_uTransformation">
            <summary>	The u transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_mTransformation">
            <summary>	The m transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_holder">
            <summary>	The holder. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.InsertsOverChild">
            <summary> Determines if the holder inserts over its child. </summary>
            <returns> true if it inserts over its child, false if it inserts into its child. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.SetInsertion(System.Double)">
            <summary> Sets an insertion. </summary>
            <param name="insertion"> The insertion. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.GetInsertion">
            <summary> Gets the insertion. </summary>
            <returns> The insertion. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.GetChildren">
            <summary> Gets the children of this item. </summary>
            <returns> The children. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.SetHolder(Cnc.Tool.Interop.TlHolder@)">
            <summary> Sets a holder. </summary>
            <param name="holder"> The holder. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.GetHolder">
            <summary> Gets the holder. </summary>
            <returns> The holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.AddChild(Cnc.Tool.Interop.TlHolderTreeNode@)">
            <summary> Adds a child. </summary>
            <param name="child"> The child. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.op_Assign(Cnc.Tool.Interop.TlHolderTreeNode!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.CopyFrom(Cnc.Tool.Interop.TlHolderTreeNode)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.#ctor(Cnc.Tool.Interop.TlHolderTreeNode!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="item"> [in,out] The item. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TransformationMatrix.default(System.Int32)">
            <summary> Array indexer operator. </summary>
            <param name="i"> Zero-based index of the. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.#ctor(Cnc.Tool.Interop.TransformationMatrixColumn,Cnc.Tool.Interop.TransformationMatrixColumn,Cnc.Tool.Interop.TransformationMatrixColumn,Cnc.Tool.Interop.TransformationMatrixColumn)">
            <summary> Parameterized constructor. </summary>
            <param name="a"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="b"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="c"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="d"> The const TransformationMatrixColumn &amp; to process. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.op_Assign(Cnc.Tool.Interop.TransformationMatrix!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.CopyFrom(Cnc.Tool.Interop.TransformationMatrix)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.#ctor(Cnc.Tool.Interop.TransformationMatrix!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.MergeCompositeProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary>	Merges composite node profiles. </summary>
            <param name="currentProfile">	The current profile. </param>
            <param name="currentNode">   	The current node. </param>
            <param name="insertion">	 	The insertion. </param>
            <returns>	A merged profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.MergeHolderProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst,System.Double)">
            <summary>	Merges the given holder profiles. </summary>
            <param name="spRoot"> 	The root holder profile. </param>
            <param name="spChild">	The child holder profile. </param>
            <param name="cScalar">	The insertion depth. </param>
            <returns>	A merged profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.IsLinear(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if this object is linear. </summary>
            <param name="tree"> The tree. </param>
            <returns> true if linear, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.RetrieveAllHolderNodes(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves all holder nodes. </summary>
            <param name="root">	    The root. </param>
            <param name="nodeList"> List of nodes. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.RetrieveAllHolderNodesConst(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves all const holder nodes. </summary>
            <param name="root">	    The root. </param>
            <param name="nodeList"> List of nodes. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.RetrieveAllHolderIDs(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Cnc.Tool.TlID,std.allocator&lt;Cnc.Tool.TlID&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves all holder i ds. </summary>
            <param name="root">   The root. </param>
            <param name="idList"> [out] List of identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.InsertHolderNode(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inserts a holder node. </summary>
            <param name="id">    The identifier. </param>
            <param name="root">  [in] The root. </param>
            <param name="child"> [in] The child. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.SetHolderIds(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets a holder identifiers. </summary>
            <param name="root">		 	The root. </param>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.ResetAllGuids">
            <summary> Resets all guids. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.BuildComposite">
            <summary>	Builds the composite. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.RetrieveHolderNode(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieve a specific holder node pointer. </summary>
            <param name="id">   The identifier. </param>
            <param name="root"> The root. </param>
            <returns> . </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.GetHolderTreeRoot">
            <summary> Gets the holder tree root node. </summary>
            <returns> The holder tree root node. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.ModifyToolInsertion(System.Double!System.Runtime.CompilerServices.IsConst)">
            <summary> The Assembly tool projection was changed, so modify the main holder's CScalar to account for that. </summary>
            <param name="insertion"> The insertion. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.AddSegment(System.Double,System.Double,System.Double)">
            <summary> Adds a holder segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.GetHolderNodeList">
            <summary> Gets holder node list. Order is from closest to the tool to the root. </summary>
            <returns> The holder node list. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.GetHolderNodeListConst">
            <summary> Gets const holder node list. Order is from closest to the tool to the root. </summary>
            <returns> The holder node list. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.GetHolderIDList">
            <summary> Gets the holder identifier list. </summary>
            <returns> The holder identifier list. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.ReplaceChildHolder(System.Int32,std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces an existing child holder. </summary>
            <param name="index">    Zero-based index of the children holders. The root is index 0. </param>
            <param name="newChild"> The new child. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.AddHolder(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst)">
            <summary> Adds a holder. </summary>
            <param name="parentID">   Identifier for the parent. </param>
            <param name="holder">	  The holder. </param>
            <param name="mTransform"> The transform. </param>
            <param name="uTransform"> The transform. </param>
            <param name="cTransform"> The transform. </param>
            <param name="cScalar">    The scalar. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.op_Assign(Cnc.Tool.TlHolderComposite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="x"> The const TlHolderComposite to process. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.IsLinear">
            <summary> Query if this object is linear. </summary>
            <returns> true if linear, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.#ctor(Cnc.Tool.TlHolderComposite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="x"> The TlHolderComposite to process. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.#ctor(System.Boolean)">
            <summary> Parameterized constructor. </summary>
            <param name="IsMetric"> true if this object is metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.DoClone">
            <summary>	Executes the clone operation. </summary>
            <returns>	A TlObjectPtr. </returns>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_children">
            <summary>	The children. </summary>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_cTransformation">
            <summary>	The transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_uTransformation">
            <summary>	The transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_mTransformation">
            <summary>	The transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_holder">
            <summary>	The holder. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> MFC Serialization function. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.InsertsOverChild">
            <summary> Determines if the holder inserts over its child. </summary>
            <returns> true if it inserts over its child, false if it inserts into its child. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.GetChildren">
            <summary> Gets the children of this item. </summary>
            <returns> The children. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.GetIsMetric">
            <summary>	Gets a flag indicating whether this holder tree node is metric or not. </summary>
            <returns>	true if the node is in metric. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.SetHolder(std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a holder. </summary>
            <param name="holder"> The holder. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.GetHolder">
            <summary> Gets the holder. </summary>
            <returns> The holder. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.AddChild(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a child. </summary>
            <param name="child"> The child. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.op_Equality(Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.op_Assign(Cnc.Tool.TlHolderTreeNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.op_Assign(Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="x"> The const TlHolderTreeNode &amp; to process. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.AddChild(Cnc.Tool.TlHolderTreeNode)">
            <summary> Adds a child. </summary>
            <param name="child"> The child. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.Clone">
            <summary> Clone Function. </summary>
            <returns> A pointer to a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.#ctor(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Parameterized constructor. </summary>
            <param name="holder">		   The holder. </param>
            <param name="mTransformation"> The transformation. </param>
            <param name="uTransformation"> The transformation. </param>
            <param name="cTransformation"> The transformation. </param>
            <param name="cScalar">		   The scalar. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.#ctor(Cnc.Tool.TlHolderTreeNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="rhs">	The right hand side. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.#ctor(Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Parameterized constructor. </summary>
            <param name="node"> The node. </param>
        </member>
        <member name="F:Cnc.Tool.TransformationMatrix.m_matrix">
            <summary> The matrix. </summary>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.op_Subscript(System.UInt32)">
            <summary> Array indexer operator. </summary>
            <param name="i"> Zero-based index of the. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.#ctor(std.vector&lt;System.Double,std.allocator&lt;System.Double&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Parameterized constructor. </summary>
            <param name="matrix"> The matrix. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.#ctor(Cnc.Tool.TransformationMatrixColumn!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrixColumn!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrixColumn!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrixColumn!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Parameterized constructor. </summary>
            <param name="a"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="b"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="c"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="d"> The const TransformationMatrixColumn &amp; to process. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="F:Cnc.Tool.TransformationMatrixColumn.m_data">
            <summary> The data. </summary>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrixColumn.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrixColumn.op_Subscript(System.UInt32)">
            <summary> Array indexer operator. </summary>
            <param name="i"> Zero-based index of the. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrixColumn.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>	Parameterized constructor. </summary>
            <param name="a">	The double to process. </param>
            <param name="b">	The double to process. </param>
            <param name="c">	The double to process. </param>
            <param name="d">	The double to process. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrixColumn.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="F:CBitmapRenderTarget.m_pBitmapRenderTarget">
            <summary>
A pointer to an ID2D1BitmapRenderTarget object.
</summary>
        </member>
        <member name="M:CBitmapRenderTarget.GetBitmap(CD2DBitmap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the bitmap for this render target. The returned bitmap can be used for drawing operations. </summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="bitmap">When this method returns, contains the valid bitmap for this render target. This bitmap can be used for drawing operations.</param>
        </member>
        <member name="M:CBitmapRenderTarget.op_Implicit~ID2D1BitmapRenderTarget*">
            <summary>
Returns ID2D1BitmapRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1BitmapRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.GetBitmapRenderTarget">
            <summary>
Returns ID2D1BitmapRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1BitmapRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.Attach(ID2D1BitmapRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CBitmapRenderTarget.#ctor">
            <summary>
Constructs a CBitmapRenderTarget object.</summary>
        </member>
        <member name="F:CDCRenderTarget.m_pDCRenderTarget">
            <summary>
A pointer to an ID2D1DCRenderTarget object.
</summary>
        </member>
        <member name="M:CDCRenderTarget.op_Implicit~ID2D1DCRenderTarget*">
            <summary>
Returns ID2D1DCRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1DCRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CDCRenderTarget.GetDCRenderTarget">
            <summary>
Returns ID2D1DCRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1DCRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CDCRenderTarget.BindDC(CDC!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Binds the render target to the device context to which it issues drawing commands</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="dc">The device context to which the render target issues drawing commands</param>
            <param name="rect">The dimensions of the handle to a device context (HDC) to which the render target is bound</param>
        </member>
        <member name="M:CDCRenderTarget.Create(D2D1_RENDER_TARGET_PROPERTIES!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a CDCRenderTarget.</summary>
            <returns>
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="props">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering.</param>
        </member>
        <member name="M:CDCRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CDCRenderTarget.Attach(ID2D1DCRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CDCRenderTarget.#ctor">
            <summary>
Constructs a CDCRenderTarget object.</summary>
        </member>
        <member name="T:CDCRenderTarget">
            <summary>
ID2D1DCRenderTarget wrapper.
</summary>
        </member>
        <member name="F:CHwndRenderTarget.m_pHwndRenderTarget">
            <summary>
A pointer to an ID2D1HwndRenderTarget object.
</summary>
        </member>
        <member name="M:CHwndRenderTarget.Resize(CD2DSizeU!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Changes the size of the render target to the specified pixel size</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="size">The new size of the render target in device pixels</param>
        </member>
        <member name="M:CHwndRenderTarget.CheckWindowState">
            <summary>
Indicates whether the HWND associated with this render target is occluded.</summary>
            <returns>
A value that indicates whether the HWND associated with this render target is occluded.</returns>
        </member>
        <member name="M:CHwndRenderTarget.GetHwnd">
            <summary>
Returns the HWND associated with this render target.</summary>
            <returns>
The HWND associated with this render target.</returns>
        </member>
        <member name="M:CHwndRenderTarget.op_Implicit~ID2D1HwndRenderTarget*">
            <summary>
Returns ID2D1HwndRenderTarget interface.</summary>
            <returns>
Pointer to an ID2D1HwndRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CHwndRenderTarget.GetHwndRenderTarget">
            <summary>
Returns ID2D1HwndRenderTarget interface.</summary>
            <returns>
Pointer to an ID2D1HwndRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CHwndRenderTarget.ReCreate(HWND__*)">
            <summary>
Re-creates a render target associated with the window</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="hWnd">The HWND associated with this render target</param>
        </member>
        <member name="M:CHwndRenderTarget.Create(HWND__*)">
            <summary>
Creates a render target associated with the window </summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="hWnd">The HWND associated with this render target</param>
        </member>
        <member name="M:CHwndRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CHwndRenderTarget.Attach(ID2D1HwndRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CHwndRenderTarget.#ctor(HWND__*)">
            <summary>
Constructs a CHwndRenderTarget object from HWND.</summary>
            <param name="hwnd">The HWND associated with this render target</param>
        </member>
        <member name="T:CHwndRenderTarget">
            <summary>
ID2D1HwndRenderTarget wrapper.
</summary>
        </member>
        <member name="F:CRenderTarget.m_pTextFormatDefault">
            <summary>
A pointer to CD2DTextFormat object that contains a default text format.
</summary>
        </member>
        <member name="F:CRenderTarget.m_lstResources">
            <summary>
A list of pointers to CD2DResource objects.
</summary>
        </member>
        <member name="F:CRenderTarget.m_pRenderTarget">
            <summary>
A pointer to an ID2D1RenderTarget object.
</summary>
        </member>
        <member name="M:CRenderTarget.VerifyResource(CD2DResource*)">
            <summary>
Verifies CD2DResource object validity; creates the object if it didn't already exist.</summary>
            <param name="pResource">Pointer to CD2DResource object.</param>
            <returns> 
TRUE is object if valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CRenderTarget.PopAxisAlignedClip">
            <summary>
Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
        </member>
        <member name="M:CRenderTarget.PushAxisAlignedClip(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D1_ANTIALIAS_MODE)">
            <summary>
Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
            <param name="rectClip">The size and position of the clipping area, in device-independent pixels.</param>
            <param name="mode">The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the PopAxisAlignedClip method is called, and does not apply to each primitive within the layer.</param>
        </member>
        <member name="M:CRenderTarget.RestoreDrawingState(ID2D1DrawingStateBlock*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.</summary>
            <param name="drawingStateBlock">The new drawing state of the render target.</param>
        </member>
        <member name="M:CRenderTarget.SaveDrawingState(ID2D1DrawingStateBlock*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Saves the current drawing state to the specified ID2D1DrawingStateBlock.</summary>
            <param name="drawingStateBlock">When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.</param>
        </member>
        <member name="M:CRenderTarget.Flush(System.UInt64*,System.UInt64*)">
            <summary>
Executes all pending drawing commands.</summary>
            <param name="tag1">Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
            <param name="tag2">Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:CRenderTarget.PopLayer">
            <summary>
Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.</summary>
        </member>
        <member name="M:CRenderTarget.PushLayer(D2D1_LAYER_PARAMETERS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DLayer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.</summary>
            <param name="layerParameters">The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.</param>
            <param name="layer">The layer that receives subsequent drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.CreateCompatibleRenderTarget(CBitmapRenderTarget*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF,CD2DSizeU,D2D1_PIXEL_FORMAT*,D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS)">
            <summary>
Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target .</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="bitmapTarget">When this method returns, contains the address of a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
            <param name="sizeDesired">The desired size of the new render target in device-independent pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.</param>
            <param name="sizePixelDesired">The desired size of the new render target in pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.</param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target, or NULL. If the pixel format is set to DXGI_FORMAT_UNKNOWN or if this parameter is null, the new render target uses the same pixel format as the original render target. If the alpha mode is D2D1_ALPHA_MODE_UNKNOWN or this parameter is NULL, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see Supported Pixel Formats and Alpha Modes.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
        </member>
        <member name="M:CRenderTarget.GetTransform(D2D_MATRIX_3X2_F*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.GetTextRenderingParams(IDWriteRenderingParams**)">
            <summary>
Retrieves the render target's current text rendering options.</summary>
            <param name="textRenderingParams">When this method returns, textRenderingParamscontains the address of a pointer to the render target's current text rendering options.</param>
        </member>
        <member name="M:CRenderTarget.SetTextRenderingParams(IDWriteRenderingParams*)">
            <summary>
Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.</summary>
            <param name="textRenderingParams">The text rendering options to be applied to all subsequent text and glyph drawing operations; NULL to clear current text rendering options.</param>
        </member>
        <member name="M:CRenderTarget.GetTextAntialiasMode">
            <summary>
Gets the current antialiasing mode for text and glyph drawing operations.</summary>
            <returns>
Current antialiasing mode for text and glyph drawing operations.</returns>
        </member>
        <member name="M:CRenderTarget.SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE)">
            <summary>
Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.</summary>
            <param name="textAntialiasMode">The antialiasing mode to use for subsequent text and glyph drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.GetAntialiasMode">
            <summary>
Retrieves the current antialiasing mode for nontext drawing operations.</summary>
            <returns>
Current antialiasing mode for nontext drawing operations.</returns>
        </member>
        <member name="M:CRenderTarget.SetAntialiasMode(D2D1_ANTIALIAS_MODE)">
            <summary>
Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.</summary>
            <param name="antialiasMode">The antialiasing mode for future drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.FillMesh(CD2DMesh*,CD2DBrush*)">
            <summary>
Paints the interior of the specified mesh.</summary>
            <param name="pMesh">The mesh to paint.</param>
            <param name="pBrush">The brush used to paint the mesh.</param>
        </member>
        <member name="M:CRenderTarget.DrawGlyphRun(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DWRITE_GLYPH_RUN!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,DWRITE_MEASURING_MODE)">
            <summary>
Draws the specified glyphs.</summary>
            <param name="ptBaseLineOrigin">The origin, in device-independent pixels, of the glyphs' baseline.</param>
            <param name="glyphRun">The glyphs to render.</param>
            <param name="pForegroundBrush">The brush used to paint the specified glyphs.</param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.</param>
        </member>
        <member name="M:CRenderTarget.FillGeometry(CD2DGeometry*,CD2DBrush*,CD2DBrush*)">
            <summary>
Paints the interior of the specified geometry.</summary>
            <param name="pGeometry">The geometry to paint.</param>
            <param name="pBrush">The brush used to paint the geometry's interior.</param>
            <param name="pOpacityBrush">The opacity mask to apply to the geometry;NULL for no opacity mask. If an opacity mask (the opacityBrush parameter) is specified, brush must be an ID2D1BitmapBrush that has its x- and y-extend modes set to D2D1_EXTEND_MODE_CLAMP. For more information, see the Remarks section.</param>
        </member>
        <member name="M:CRenderTarget.DrawGeometry(CD2DGeometry*,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified geometry using the specified stroke style.</summary>
            <param name="pGeometry">The geometry to draw.</param>
            <param name="pBrush">The brush used to paint the geometry's stroke.</param>
            <param name="fStrokeWidth">The thickness of the geometry's stroke. The stroke is centered on the geometry's outline.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry's outline, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.DrawBitmap(CD2DBitmap*,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,D2D1_BITMAP_INTERPOLATION_MODE,CD2DRectF!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            <param name="pBitmap">The bitmap to render.</param>
            <param name="rectDest">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.</param>
            <param name="fOpacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.</param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation.</param>
            <param name="pRectSrc">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw.</param>
        </member>
        <member name="M:CRenderTarget.DrawTextLayout(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DTextLayout*,CD2DBrush*,D2D1_DRAW_TEXT_OPTIONS)">
            <summary>
Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            <param name="ptOrigin">The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn.</param>
            <param name="textLayout">The formatted text to draw. Any drawing effects that do not inherit from ID2D1Resource are ignored. If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.</param>
            <param name="pBrushForeground">The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the IDWriteTextLayout::SetDrawingEffect method).</param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
        </member>
        <member name="M:CRenderTarget.DrawText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,CD2DTextFormat*,D2D1_DRAW_TEXT_OPTIONS,DWRITE_MEASURING_MODE)">
            <summary>
Draws the specified text using the format information provided by an IDWriteTextFormat object.</summary>
            <param name="strText">A pointer to an array of Unicode characters to draw.</param>
            <param name="rect">The size and position of the area in which the text is drawn.</param>
            <param name="pForegroundBrush">The brush used to paint the text.</param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.</param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.</param>
        </member>
        <member name="M:CRenderTarget.FillOpacityMask(CD2DBitmap*,CD2DBrush*,D2D1_OPACITY_MASK_CONTENT,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.</summary>
            <param name="pOpacityMask">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
            <param name="pBrush">The brush used to paint the region of the render target specified by destinationRectangle.</param>
            <param name="content">The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended.</param>
            <param name="rectDest">The region of the render target to paint, in device-independent pixels.</param>
            <param name="rectSrc">The region of the bitmap to use as the opacity mask, in device-independent pixels.</param>
        </member>
        <member name="M:CRenderTarget.DrawLine(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws a line between the specified points using the specified stroke style.</summary>
            <param name="ptFrom">The start point of the line, in device-independent pixels.</param>
            <param name="ptTo">The end point of the line, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the line's stroke.</param>
            <param name="fStrokeWidth">A value greater than or equal to 0.0f that specifies the width of the stroke. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid line.</param>
        </member>
        <member name="M:CRenderTarget.FillEllipse(CD2DEllipse!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified ellipse.</summary>
            <param name="ellipse">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
            <param name="pBrush">The brush used to paint the interior of the ellipse.</param>
        </member>
        <member name="M:CRenderTarget.DrawEllipse(CD2DEllipse!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified ellipse using the specified stroke style.</summary>
            <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the ellipse's outline.</param>
            <param name="fStrokeWidth">The thickness of the ellipse's stroke. The stroke is centered on the ellipse's outline.</param>
            <param name="strokeStyle">The style of stroke to apply to the ellipse's outline, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.FillRoundedRectangle(CD2DRoundedRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified rounded rectangle.</summary>
            <param name="rectRounded">The dimensions of the rounded rectangle to paint, in device independent pixels.</param>
            <param name="pBrush">The brush used to paint the interior of the rounded rectangle.</param>
        </member>
        <member name="M:CRenderTarget.DrawRoundedRectangle(CD2DRoundedRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified rounded rectangle using the specified stroke style.</summary>
            <param name="rectRounded">The dimensions of the rounded rectangle to draw, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the rounded rectangle's outline.</param>
            <param name="fStrokeWidth">The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.</param>
            <param name="strokeStyle">The style of the rounded rectangle's stroke, or NULL to paint a solid stroke. The default value is NULL.</param>
        </member>
        <member name="M:CRenderTarget.FillRectangle(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified rectangle.</summary>
            <param name="rect">The dimension of the rectangle to paint, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the rectangle's interior.</param>
        </member>
        <member name="M:CRenderTarget.DrawRectangle(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of a rectangle that has the specified dimensions and stroke style.</summary>
            <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels</param>
            <param name="pBrush">The brush used to paint the rectangle's stroke</param>
            <param name="fStrokeWidth">A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke. The stroke is centered on the rectangle's outline.</param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.Clear(_D3DCOLORVALUE)">
            <summary>
Clears the drawing area to the specified color.</summary>
            <param name="color">The color to which the drawing area is cleared.</param>
        </member>
        <member name="M:CRenderTarget.COLORREF_TO_D2DCOLOR(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary>
Converts GDI color and alpha values to the D2D1_COLOR_F object.</summary>
            <param name="color">RGB value.</param>
            <param name="nAlpha">Alpha value.</param>
            <returns>
D2D1_COLOR_F value.</returns>
        </member>
        <member name="M:CRenderTarget.EndDraw">
            <summary>
Ends drawing operations on the render target and indicates the current error state and associated tags.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:CRenderTarget.BeginDraw">
            <summary>
Initiates drawing on this render target.</summary>
        </member>
        <member name="M:CRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CRenderTarget.Attach(ID2D1RenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pRenderTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CRenderTarget.GetMaximumBitmapSize">
            <summary>
Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target</summary>
            <returns> 
The maximum size, in pixels, of any one bitmap dimension supported by the render target</returns>
        </member>
        <member name="M:CRenderTarget.IsSupported(D2D1_RENDER_TARGET_PROPERTIES!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Indicates whether the render target supports the specified properties</summary>
            <returns> 
TRUE if the specified render target properties are supported by this render target; otherwise, FALSE</returns>
            <param name="renderTargetProperties">The render target properties to test</param>
        </member>
        <member name="M:CRenderTarget.SetTags(System.UInt64,System.UInt64)">
            <summary>
Specifies a label for subsequent drawing operations.</summary>
            <param name="tag1">A label to apply to subsequent drawing operations.</param>
            <param name="tag2">A label to apply to subsequent drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.GetTags(System.UInt64*,System.UInt64*)">
            <summary>
Gets the label for subsequent drawing operations.</summary>
            <param name="tag1">Contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.</param>
            <param name="tag2">Contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.</param>
        </member>
        <member name="M:CRenderTarget.GetPixelSize">
            <summary>
Returns the size of the render target in device pixels</summary>
            <returns> 
The size of the render target in device pixels</returns>
        </member>
        <member name="M:CRenderTarget.GetPixelFormat">
            <summary>
Retrieves the pixel format and alpha mode of the render target</summary>
            <returns> 
The pixel format and alpha mode of the render target</returns>
        </member>
        <member name="M:CRenderTarget.GetDpi">
            <summary>
Returns the render target's dots per inch (DPI)</summary>
            <returns> 
The render target's dots per inch (DPI).</returns>
        </member>
        <member name="M:CRenderTarget.SetDpi(CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the dots per inch (DPI) of the render target.</summary>
            <param name="sizeDPI">A value greater than or equal to zero that specifies the horizontal/verticalDPI of the render target.</param>
        </member>
        <member name="M:CRenderTarget.GetSize">
            <summary>
Returns the size of the render target in device-independent pixels</summary>
            <returns> 
The current size of the render target in device-independent pixels</returns>
        </member>
        <member name="M:CRenderTarget.op_Implicit~ID2D1RenderTarget*">
            <summary>
Returns ID2D1RenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CRenderTarget.GetRenderTarget">
            <summary>
Returns ID2D1RenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CRenderTarget.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CRenderTarget.Destroy(System.Int32)">
            <summary>
Deletes one or more resources</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="bDeleteResources">If bDeleteResources is TRUE, all resources located in m_lstResources will be automatically destroyed.</param>
        </member>
        <member name="M:CRenderTarget.Dispose">
            <summary>
The destructor. Called when a render target object is being destroyed.
</summary>
        </member>
        <member name="M:CRenderTarget.#ctor">
            <summary>
Constructs a CRenderTarget object.</summary>
        </member>
        <member name="T:CRenderTarget">
            <summary>
ID2D1RenderTarget wrapper.
</summary>
        </member>
        <member name="F:CD2DMesh.m_pMesh">
            <summary>
A pointer to an ID2D1Mesh.
</summary>
        </member>
        <member name="M:CD2DMesh.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DMesh.Destroy">
            <summary>
Destroys a CD2DMesh object.</summary>
        </member>
        <member name="M:CD2DMesh.Create(CRenderTarget*)">
            <summary>
Creates a CD2DMesh.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DMesh.Open">
            <summary>
Opens the mesh for population.</summary>
            <returns>
A pointer to an ID2D1TessellationSink that is used to populate the mesh.</returns>
        </member>
        <member name="M:CD2DMesh.op_Implicit~ID2D1Mesh*">
            <summary>
Returns ID2D1Mesh interface</summary>
            <returns> 
Pointer to an ID2D1Mesh interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DMesh.Get">
            <summary>
Returns ID2D1Mesh interface</summary>
            <returns> 
Pointer to an ID2D1Mesh interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DMesh.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DMesh.Attach(ID2D1Mesh*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DMesh.Dispose">
            <summary>
The destructor. Called when a D2D mesh object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DMesh.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DMesh object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DMesh">
            <summary>
ID2D1Mesh wrapper.
</summary>
        </member>
        <member name="F:CD2DGeometrySink.m_pSink">
            <summary>
A pointer to an ID2D1GeometrySink.
</summary>
        </member>
        <member name="M:CD2DGeometrySink.SetSegmentFlags(D2D1_PATH_SEGMENT)">
            <summary>
Specifies stroke and join options to be applied to new segments added to the geometry sink.</summary>
            <param name="vertexFlags">Stroke and join options to be applied to new segments added to the geometry sink.</param>
        </member>
        <member name="M:CD2DGeometrySink.SetFillMode(D2D1_FILL_MODE)">
            <summary>
Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.</summary>
            <param name="fillMode">The method used to determine whether a given point is part of the geometry.</param>
        </member>
        <member name="M:CD2DGeometrySink.Close">
            <summary>
Closes the geometry sink</summary>
            <returns> 
Nonzero if successful; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometrySink.AddLines(CArray&lt;CD2DPointF,CD2DPointF&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a sequence of lines using the specified points and adds them to the geometry sink.</summary>
            <param name="points">An array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on. An array of a sequence of the end points of the lines to draw.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddLine(CD2DPointF)">
            <summary>
Creates a line segment between the current point and the specified end point and adds it to the geometry sink.</summary>
            <param name="point">The end point of the line to draw.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddQuadraticBeziers(CArray&lt;D2D1_QUADRATIC_BEZIER_SEGMENT,D2D1_QUADRATIC_BEZIER_SEGMENT&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a sequence of quadratic Bezier segments as an array in a single call.</summary>
            <param name="beziers">An array of a sequence of quadratic Bezier segments.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddQuadraticBezier(D2D1_QUADRATIC_BEZIER_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a quadratic Bezier curve between the current point and the specified end point.</summary>
            <param name="bezier">A structure that describes the control point and the end point of the quadratic Bezier curve to add.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddBeziers(CArray&lt;D2D1_BEZIER_SEGMENT,D2D1_BEZIER_SEGMENT&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a sequence of cubic Bezier curves and adds them to the geometry sink.</summary>
            <param name="beziers">An array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddBezier(D2D1_BEZIER_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a cubic Bezier curve between the current point and the specified end point.</summary>
            <param name="bezier">A structure that describes the control points and end point of the Bezier curve to add.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddArc(D2D1_ARC_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a single arc to the path geometry</summary>
            <param name="arc">The arc segment to add to the figure</param>
        </member>
        <member name="M:CD2DGeometrySink.EndFigure(D2D1_FIGURE_END)">
            <summary>
Ends the current figure; optionally, closes it.</summary>
            <param name="figureEnd">A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by BeginFigure.</param>
        </member>
        <member name="M:CD2DGeometrySink.BeginFigure(CD2DPointF,D2D1_FIGURE_BEGIN)">
            <summary>
Starts a new figure at the specified point.</summary>
            <param name="startPoint">The point at which to begin the new figure.</param>
            <param name="figureBegin">Whether the new figure should be hollow or filled.</param>
        </member>
        <member name="M:CD2DGeometrySink.op_Implicit~ID2D1GeometrySink*">
            <summary>
Returns ID2D1GeometrySink interface</summary>
            <returns> 
Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometrySink.Get">
            <summary>
Returns ID2D1GeometrySink interface</summary>
            <returns> 
Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometrySink.IsValid">
            <summary>
Checks geometry sink validity</summary>
            <returns> 
TRUE if geometry sink is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometrySink.Dispose">
            <summary>
The destructor. Called when a D2D geometry sink object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGeometrySink.#ctor(CD2DPathGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DGeometrySink object from CD2DPathGeometry object.</summary>
            <param name="pathGeometry">An existing CD2DPathGeometry object.</param>
        </member>
        <member name="T:CD2DGeometrySink">
            <summary>
ID2D1GeometrySink wrapper.
</summary>
        </member>
        <member name="F:CD2DPathGeometry.m_pPathGeometry">
            <summary>
A pointer to an ID2D1PathGeometry.
</summary>
        </member>
        <member name="M:CD2DPathGeometry.GetFigureCount">
            <summary>
Retrieves tthe number of figures in the path geometry.</summary>
            <returns> 
Returns the number of figures in the path geometry.</returns>
        </member>
        <member name="M:CD2DPathGeometry.GetSegmentCount">
            <summary>
Retrieves the number of segments in the path geometry.</summary>
            <returns> 
Returns the number of segments in the path geometry.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Stream(ID2D1GeometrySink*)">
            <summary>
Copies the contents of the path geometry to the specified ID2D1GeometrySink.</summary>
            <returns>
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="geometrySink">The sink to which the path geometry's contents are copied. Modifying this sink does not change the contents of this path geometry.</param>
        </member>
        <member name="M:CD2DPathGeometry.Open">
            <summary>
Retrieves the geometry sink that is used to populate the path geometry with figures and segments.</summary>
            <returns>
A pointer to the ID2D1GeometrySink that is used to populate the path geometry with figures and segments.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Attach(ID2D1PathGeometry*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DPathGeometry.Destroy">
            <summary>
Destroys a CD2DPathGeometry object.</summary>
        </member>
        <member name="M:CD2DPathGeometry.Create(CRenderTarget*)">
            <summary>
Creates a CD2DPathGeometry.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DPathGeometry.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DPathGeometry object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DPathGeometry">
            <summary>
ID2D1PathGeometry wrapper.
</summary>
        </member>
        <member name="F:CD2DGeometry.m_pGeometry">
            <summary>
A pointer to an ID2D1Geometry.
</summary>
        </member>
        <member name="M:CD2DGeometry.Widen(System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Widens the geometry by the specified stroke and writes the result to an ID2D1SimplifiedGeometrySink after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="worldTransform">The transform to apply to the geometry after widening it.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the widened geometry is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Tessellate(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1TessellationSink*,System.Single)">
            <summary>
Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry, or NULL.</param>
            <param name="tessellationSink">The ID2D1TessellationSink to which the tessellated is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Simplify(D2D1_GEOMETRY_SIMPLIFICATION_OPTION,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="worldTransform">The transform to apply to the simplified geometry.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the simplified geometry is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Outline(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Computes the outline of the geometry and writes the result to an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to the geometry outline.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the geometry transformed outline is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.StrokeContainsPoint(CD2DPointF,System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*,System.Single)">
            <summary>
Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="point">The point to test for containment.</param>
            <param name="strokeWidth">The thickness of the stroke to apply.</param>
            <param name="strokeStyle">The style of the stroke to apply.</param>
            <param name="worldTransform">The transform to apply to the stroked geometry.</param>
            <param name="contains">When this method returns, contains a boolean value set to TRUE if the geometry's stroke contains the specified point; otherwise, FALSE. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.FillContainsPoint(CD2DPointF,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*,System.Single)">
            <summary>
Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="point">The point to test.</param>
            <param name="worldTransform">The transform to apply to the geometry prior to testing for containment.</param>
            <param name="contains">When this method returns, contains a bool value that is TRUE if the area filled by the geometry contains point; otherwise, FALSE. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.GetWidenedBounds(System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline.</param>
            <param name="strokeStyle">The style of the stroke that widens the geometry.</param>
            <param name="worldTransform">A transform to apply to the geometry after the geometry is transformed and after the geometry has been stroked.</param>
            <param name="bounds">When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.GetBounds(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the bounds of the geometry.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry before calculating its bounds.</param>
            <param name="bounds">When this method returns, contains the bounds of this geometry. If the bounds are empty, this will be a rect where bounds.left is greater than bounds.right. You must allocate storage for this parameter.</param>
        </member>
        <member name="M:CD2DGeometry.ComputePointAtLength(System.Single,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry.</param>
            <param name="worldTransform">The transform to apply to the geometry before calculating the specified point and tangent.</param>
            <param name="point">The location at the specified distance along the geometry. If the geometry is empty, this point contains NaN as its x and y values.</param>
            <param name="unitTangentVector">When this method returns, contains a pointer to the tangent vector at the specified distance along the geometry. If the geometry is empty, this vector contains NaN as its x and y values. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.ComputeLength(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Calculates the length of the geometry as though each segment were unrolled into a line.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to the geometry before calculating its length.</param>
            <param name="length">When this method returns, contains a pointer to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.ComputeArea(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry before computing its area.</param>
            <param name="area">When this method returns, contains a pointer to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.CompareWithGeometry(CD2DGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Describes the intersection between this geometry and the specified geometry. The comparison is performed using the specified flattening tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="inputGeometry">The geometry to test.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
        </member>
        <member name="M:CD2DGeometry.CombineWithGeometry(CD2DGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D1_COMBINE_MODE,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Combines this geometry with the specified geometry and stores the result in an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry before combining.</param>
            <param name="geometrySink">The result of the combine operation.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometry.Destroy">
            <summary>
Destroys a CD2DGeometry object.</summary>
        </member>
        <member name="M:CD2DGeometry.op_Implicit~ID2D1Geometry*">
            <summary>
Returns ID2D1Geometry interface</summary>
            <returns> 
Pointer to an ID2D1Geometry interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometry.Get">
            <summary>
Returns ID2D1Geometry interface</summary>
            <returns> 
Pointer to an ID2D1Geometry interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometry.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DGeometry.Attach(ID2D1Geometry*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DGeometry.Dispose">
            <summary>
The destructor. Called when a D2D geometry object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGeometry.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DGeometry object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DGeometry">
            <summary>
ID2D1Geometry wrapper.
</summary>
        </member>
        <member name="F:CD2DTextLayout.m_pTextLayout">
            <summary>
A pointer to an IDWriteTextLayout.
</summary>
        </member>
        <member name="M:CD2DTextLayout.GetLocaleName(System.UInt32,DWRITE_TEXT_RANGE*)">
            <summary>
Gets the locale name of the text at the specified position.</summary>
            <returns>
CString object that contains the current locale name.</returns>
            <param name="currentPosition">The position of the text to inspect.</param>
            <param name="textRange">The range of text that has the same formatting as the text at the position specified by currentPosition. This means the run has the exact formatting as the position specified, including but not limited to the locale name.</param>
        </member>
        <member name="M:CD2DTextLayout.GetFontFamilyName(System.UInt32,DWRITE_TEXT_RANGE*)">
            <summary>
Copies the font family name of the text at the specified position.</summary>
            <returns>
CString object that contains the current font family name.</returns>
            <param name="currentPosition">The position of the text to examine.</param>
            <param name="textRange">The range of text that has the same formatting as the text at the position specified by currentPosition. This means the run has the exact formatting as the position specified, including but not limited to the font family name.</param>
        </member>
        <member name="M:CD2DTextLayout.SetLocaleName(System.Char!System.Runtime.CompilerServices.IsConst*,DWRITE_TEXT_RANGE)">
            <summary>
Sets the locale name for text within a specified text range</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="pwzLocaleName">A null-terminated locale name string</param>
            <param name="textRange">Text range to which this change applies</param>
        </member>
        <member name="M:CD2DTextLayout.SetFontFamilyName(System.Char!System.Runtime.CompilerServices.IsConst*,DWRITE_TEXT_RANGE)">
            <summary>
Sets null-terminated font family name for text within a specified text range</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="pwzFontFamilyName">The font family name that applies to the entire text string within the range specified by textRange</param>
            <param name="textRange">Text range to which this change applies</param>
        </member>
        <member name="M:CD2DTextLayout.op_Implicit~IDWriteTextLayout*">
            <summary>
Returns IDWriteTextLayout interface</summary>
            <returns>
Pointer to an IDWriteTextLayout interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextLayout.Get">
            <summary>
Returns IDWriteTextLayout interface</summary>
            <returns>
Pointer to an IDWriteTextLayout interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextLayout.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DTextLayout.Destroy">
            <summary>
Destroys a CD2DTextLayout object.</summary>
        </member>
        <member name="M:CD2DTextLayout.Create(CRenderTarget*)">
            <summary>
Creates a CD2DTextLayout.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextLayout.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DTextLayout.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextLayout.Dispose">
            <summary>
The destructor. Called when a D2D text layout object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DTextLayout.#ctor(CRenderTarget*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DTextFormat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
Constructs a CD2DTextLayout object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="strText">A CString object that contains the string to create a new CD2DTextLayout object from.</param>
            <param name="textFormat">A CString object that contains the format to apply to the string.</param>
            <param name="sizeMax">The size of the layout box.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DTextLayout">
            <summary>
IDWriteTextLayout wrapper.
</summary>
        </member>
        <member name="F:CD2DTextFormat.m_pTextFormat">
            <summary>
A pointer to an IDWriteTextFormat.
</summary>
        </member>
        <member name="M:CD2DTextFormat.GetLocaleName">
            <summary>
Gets a copy of the locale name.</summary>
            <returns>
CString object that contains the current locale name.</returns>
        </member>
        <member name="M:CD2DTextFormat.GetFontFamilyName">
            <summary>
Gets a copy of the font family name.</summary>
            <returns>
CString object that contains the current font family name.</returns>
        </member>
        <member name="M:CD2DTextFormat.op_Implicit~IDWriteTextFormat*">
            <summary>
Returns IDWriteTextFormat interface</summary>
            <returns>
Pointer to an IDWriteTextFormat interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextFormat.Get">
            <summary>
Returns IDWriteTextFormat interface</summary>
            <returns> 
Pointer to an IDWriteTextFormat interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextFormat.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DTextFormat.Destroy">
            <summary>
Destroys a CD2DTextFormat object.</summary>
        </member>
        <member name="M:CD2DTextFormat.Create(CRenderTarget*)">
            <summary>
Creates a CD2DTextFormat.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextFormat.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DTextFormat.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextFormat.Dispose">
            <summary>
The destructor. Called when a D2D text format object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DTextFormat.#ctor(CRenderTarget*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,DWRITE_FONT_WEIGHT,DWRITE_FONT_STYLE,DWRITE_FONT_STRETCH,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDWriteFontCollection*,System.Int32)">
            <summary>
Constructs a CD2DTextFormat object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="strFontFamilyName">A CString object that contains the name of the font family.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIPequals 1/96 inch.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object.</param>
            <param name="fontStyle">A value that indicates the font style for the text object.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object.</param>
            <param name="strFontLocale">A CString object that contains the locale name.</param>
            <param name="pFontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DTextFormat">
            <summary>
IDWriteTextFormat wrapper.
</summary>
        </member>
        <member name="F:CD2DRadialGradientBrush.m_pRadialGradientBrush">
            <summary>
A pointer to an ID2D1RadialGradientBrush.
</summary>
        </member>
        <member name="F:CD2DRadialGradientBrush.m_RadialGradientBrushProperties">
            <summary>
The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.
</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetRadiusY">
            <summary>
Retrieves the y-radius of the gradient ellipse</summary>
            <returns> 
The y-radius of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetRadiusX">
            <summary>
Retrieves the x-radius of the gradient ellipse</summary>
            <returns> 
The x-radius of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetGradientOriginOffset">
            <summary>
Retrieves the offset of the gradient origin relative to the gradient ellipse's center</summary>
            <returns> 
The offset of the gradient origin from the center of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetCenter">
            <summary>
Retrieves the center of the gradient ellipse</summary>
            <returns> 
The center of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetRadiusY(System.Single)">
            <summary>
Specifies the y-radius of the gradient ellipse, in the brush's coordinate space</summary>
            <param name="radiusY">The y-radius of the gradient ellipse. This value is in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetRadiusX(System.Single)">
            <summary>
Specifies the x-radius of the gradient ellipse, in the brush's coordinate space</summary>
            <param name="radiusX">The x-radius of the gradient ellipse. This value is in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetGradientOriginOffset(CD2DPointF)">
            <summary>
Specifies the offset of the gradient origin relative to the gradient ellipse's center</summary>
            <param name="gradientOriginOffset">The offset of the gradient origin from the center of the gradient ellipse</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetCenter(CD2DPointF)">
            <summary>
Specifies the center of the gradient ellipse in the brush's coordinate space</summary>
            <param name="point">The center of the gradient ellipse, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.op_Implicit~ID2D1RadialGradientBrush*">
            <summary>
Returns ID2D1RadialGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1RadialGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Get">
            <summary>
Returns ID2D1RadialGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1RadialGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Attach(ID2D1RadialGradientBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.Destroy">
            <summary>
Destroys a CD2DRadialGradientBrush object.</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DRadialGradientBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D radial gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DLinearGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="RadialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DRadialGradientBrush">
            <summary>
ID2D1RadialGradientBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DLinearGradientBrush.m_pLinearGradientBrush">
            <summary>
A pointer to an ID2D1LinearGradientBrush.
</summary>
        </member>
        <member name="F:CD2DLinearGradientBrush.m_LinearGradientBrushProperties">
            <summary>
The start and end points of the gradient.
</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.GetEndPoint">
            <summary>
Retrieves the ending coordinates of the linear gradient</summary>
            <returns> 
The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.GetStartPoint">
            <summary>
Retrieves the starting coordinates of the linear gradient</summary>
            <returns> 
The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.SetEndPoint(CD2DPointF)">
            <summary>
Sets the ending coordinates of the linear gradient in the brush's coordinate space</summary>
            <param name="point">The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.SetStartPoint(CD2DPointF)">
            <summary>
Sets the starting coordinates of the linear gradient in the brush's coordinate space</summary>
            <param name="point">The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.op_Implicit~ID2D1LinearGradientBrush*">
            <summary>
Returns ID2D1LinearGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1LinearGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Get">
            <summary>
Returns ID2D1LinearGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1LinearGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Attach(ID2D1LinearGradientBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.Destroy">
            <summary>
Destroys a CD2DLinearGradientBrush object.</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DLinearGradientBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D linear gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DLinearGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="LinearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DLinearGradientBrush">
            <summary>
ID2D1LinearGradientBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_pGradientStops">
            <summary>
A pointer to an array of D2D1_GRADIENT_STOP structures.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_extendMode">
            <summary>
The behavior of the gradient outside the [0,1] normalized range.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_colorInterpolationGamma">
            <summary>
The space in which color interpolation between the gradient stops is performed.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_arGradientStops">
            <summary>
Array of the D2D1_GRADIENT_STOP structures.
</summary>
        </member>
        <member name="M:CD2DGradientBrush.Destroy">
            <summary>
Destroys a CD2DGradientBrush object.</summary>
        </member>
        <member name="M:CD2DGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DGradientBrush">
            <summary>
The base class of CD2DLinearGradientBrush and CD2DRadialGradientBrush classes.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmapBrushProperties">
            <summary>
Bitmap brush properties.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmapBrush">
            <summary>
Stores a pointer to an ID2D1BitmapBrush object.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmap">
            <summary>
Stores a pointer to a CD2DBitmap object.
</summary>
        </member>
        <member name="M:CD2DBitmapBrush.CommonInit(D2D1_BITMAP_BRUSH_PROPERTIES*)">
            <summary>
Initializes the object</summary>
            <param name="pBitmapBrushProperties">A pointer to the bitmap brush properties.</param>
        </member>
        <member name="M:CD2DBitmapBrush.Destroy">
            <summary>
Destroys a CD2DBitmapBrush object.</summary>
        </member>
        <member name="M:CD2DBitmapBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DBitmapBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DBitmapBrush.GetInterpolationMode">
            <summary>
Gets the interpolation method used when the brush bitmap is scaled or rotated</summary>
            <returns> 
The interpolation method used when the brush bitmap is scaled or rotated</returns>
        </member>
        <member name="M:CD2DBitmapBrush.GetExtendModeY">
            <summary>
Gets the method by which the brush vertically tiles those areas that extend past its bitmap</summary>
            <returns> 
A value that specifies how the brush vertically tiles those areas that extend past its bitmap</returns>
        </member>
        <member name="M:CD2DBitmapBrush.GetExtendModeX">
            <summary>
Gets the method by which the brush horizontally tiles those areas that extend past its bitmap</summary>
            <returns> 
A value that specifies how the brush horizontally tiles those areas that extend past its bitmap</returns>
        </member>
        <member name="M:CD2DBitmapBrush.SetBitmap(CD2DBitmap*)">
            <summary>
Specifies the bitmap source that this brush uses to paint</summary>
            <param name="pBitmap">The bitmap source used by the brush</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetInterpolationMode(D2D1_BITMAP_INTERPOLATION_MODE)">
            <summary>
Specifies the interpolation mode used when the brush bitmap is scaled or rotated</summary>
            <param name="interpolationMode">The interpolation mode used when the brush bitmap is scaled or rotated</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetExtendModeY(D2D1_EXTEND_MODE)">
            <summary>
Specifies how the brush vertically tiles those areas that extend past its bitmap</summary>
            <param name="extendModeY">A value that specifies how the brush vertically tiles those areas that extend past its bitmap</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetExtendModeX(D2D1_EXTEND_MODE)">
            <summary>
Specifies how the brush horizontally tiles those areas that extend past its bitmap</summary>
            <param name="extendModeX">A value that specifies how the brush horizontally tiles those areas that extend past its bitmap</param>
        </member>
        <member name="M:CD2DBitmapBrush.GetBitmap">
            <summary>
Gets the bitmap source that this brush uses to paint</summary>
            <returns> 
Pointer to an CD2DBitmap object or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.op_Implicit~ID2D1BitmapBrush*">
            <summary>
Returns ID2D1BitmapBrush interface</summary>
            <returns> 
Pointer to an ID2D1BitmapBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Get">
            <summary>
Returns ID2D1BitmapBrush interface</summary>
            <returns> 
Pointer to an ID2D1BitmapBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Attach(ID2D1BitmapBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBitmapBrush.Dispose">
            <summary>
The destructor. Called when a D2D bitmap brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object from file.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="lpszImagePath">Pointer to a null-terminated string that contains the name of file.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,System.UInt32,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object from resource.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="uiResID">The resource ID number of the resource.</param>
            <param name="lpszType">Pointer to a null-terminated string that contains the resource type.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBitmapBrush">
            <summary>
ID2D1BitmapBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DSolidColorBrush.m_colorSolid">
            <summary>
Brush solid color.
</summary>
        </member>
        <member name="F:CD2DSolidColorBrush.m_pSolidColorBrush">
            <summary>
Stores a pointer to an ID2D1SolidColorBrush object.
</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.Destroy">
            <summary>
Destroys a CD2DSolidColorBrush object.</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DSolidColorBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DSolidColorBrush.GetColor">
            <summary>
Retrieves the color of the solid color brush</summary>
            <returns> 
The color of this solid color brush</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.SetColor(_D3DCOLORVALUE)">
            <summary>
Specifies the color of this solid color brush</summary>
            <param name="color">The color of this solid color brush</param>
        </member>
        <member name="M:CD2DSolidColorBrush.op_Implicit~ID2D1SolidColorBrush*">
            <summary>
Returns ID2D1SolidColorBrush interface</summary>
            <returns> 
Pointer to an ID2D1SolidColorBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Get">
            <summary>
Returns ID2D1SolidColorBrush interface</summary>
            <returns> 
Pointer to an ID2D1SolidColorBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Attach(ID2D1SolidColorBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DSolidColorBrush.Dispose">
            <summary>
The destructor. Called when a D2D solid brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.#ctor(CRenderTarget*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DSolidColorBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="color">The red, green, and blue values of the brush's color.</param>
            <param name="nAlpha">The opacity of the brush's color.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DSolidColorBrush.#ctor(CRenderTarget*,_D3DCOLORVALUE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DSolidColorBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DSolidColorBrush">
            <summary>
ID2D1SolidColorBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DBrush.m_pBrushProperties">
            <summary>
Brush properties.
</summary>
        </member>
        <member name="F:CD2DBrush.m_pBrush">
            <summary>
Stores a pointer to an ID2D1Brush object.
</summary>
        </member>
        <member name="M:CD2DBrush.GetTransform(D2D_MATRIX_3X2_F*)">
            <summary>
Gets the current transform of the render target</summary>
            <param name="transform">When this returns, contains the current transform of the render target. This parameter is passed uninitialized</param>
        </member>
        <member name="M:CD2DBrush.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space</summary>
            <param name="transform">The transform to apply to the render target</param>
        </member>
        <member name="M:CD2DBrush.GetOpacity">
            <summary>
Gets the degree of opacity of this brush</summary>
            <returns> 
A value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0 to 1 before they are multiplied together</returns>
        </member>
        <member name="M:CD2DBrush.SetOpacity(System.Single)">
            <summary>
Sets the degree of opacity of this brush</summary>
            <param name="opacity">A value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0 to 1 before they are multiplied together</param>
        </member>
        <member name="M:CD2DBrush.Destroy">
            <summary>
Destroys a CD2DBrush object.</summary>
        </member>
        <member name="M:CD2DBrush.op_Implicit~ID2D1Brush*">
            <summary>
Returns ID2D1Brush interface</summary>
            <returns> 
Pointer to an ID2D1Brush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBrush.Get">
            <summary>
Returns ID2D1Brush interface</summary>
            <returns> 
Pointer to an ID2D1Brush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBrush.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBrush.Attach(ID2D1Brush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBrush.Dispose">
            <summary>
The destructor. Called when a D2D brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBrush.#ctor(CRenderTarget*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBrush">
            <summary>
ID2D1Brush wrapper.
</summary>
        </member>
        <member name="M:CD2DBrushProperties.CommonInit">
            <summary>
Initializes the object</summary>
        </member>
        <member name="M:CD2DBrushProperties.#ctor(D2D_MATRIX_3X2_F,System.Single)">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
            <param name="_transform">The transformation to apply to the brush</param>
            <param name="_opacity">The base opacity of the brush. The default value is 1.0.</param>
        </member>
        <member name="M:CD2DBrushProperties.#ctor(System.Single)">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
            <param name="_opacity">The base opacity of the brush. The default value is 1.0.</param>
        </member>
        <member name="M:CD2DBrushProperties.#ctor">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
        </member>
        <member name="T:CD2DBrushProperties">
            <summary>
D2D1_BRUSH_PROPERTIES wrapper.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_bAutoDestroyHBMP">
            <summary>
TRUE if m_hBmpSrc should be destroyed; otherwise FALSE.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_hBmpSrc">
            <summary>
Source bitmap handle.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_sizeDest">
            <summary>
Bitmap destination size.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_strPath">
            <summary>
Botmap file path.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_lpszType">
            <summary>
Resource type.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_uiResID">
            <summary>
Bitmap resource ID.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_pBitmap">
            <summary>
Stores a pointer to an ID2D1Bitmap object.
</summary>
        </member>
        <member name="M:CD2DBitmap.Destroy">
            <summary>
Destroys a CD2DBitmap object.</summary>
        </member>
        <member name="M:CD2DBitmap.Create(CRenderTarget*)">
            <summary>
Creates a CD2DBitmap.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DBitmap.CommonInit">
            <summary>
Initializes the object</summary>
        </member>
        <member name="M:CD2DBitmap.op_Implicit~ID2D1Bitmap*">
            <summary>
Returns ID2D1Bitmap interface</summary>
            <returns> 
Pointer to an ID2D1Bitmap interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmap.Get">
            <summary>
Returns ID2D1Bitmap interface</summary>
            <returns> 
Pointer to an ID2D1Bitmap interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmap.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DBitmap.CopyFromMemory(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from memory into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="srcData">The data to copy</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding</param>
            <param name="destRect">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
        </member>
        <member name="M:CD2DBitmap.CopyFromRenderTarget(CRenderTarget!System.Runtime.CompilerServices.IsConst*,CD2DPointU!System.Runtime.CompilerServices.IsConst*,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from the specified render target into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">The render target that contains the region to copy</param>
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
            <param name="srcRect">The area of renderTarget to copy</param>
        </member>
        <member name="M:CD2DBitmap.CopyFromBitmap(CD2DBitmap!System.Runtime.CompilerServices.IsConst*,CD2DPointU!System.Runtime.CompilerServices.IsConst*,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from the specified bitmap into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pBitmap">The bitmap to copy from</param>
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
            <param name="srcRect">The area of bitmap to copy</param>
        </member>
        <member name="M:CD2DBitmap.GetDPI">
            <summary>
Return the dots per inch (DPI) of the bitmap</summary>
            <returns> 
The horizontal and vertical DPI of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.GetPixelFormat">
            <summary>
Retrieves the pixel format and alpha mode of the bitmap</summary>
            <returns> 
The pixel format and alpha mode of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.GetPixelSize">
            <summary>
Returns the size, in device-dependent units (pixels), of the bitmap</summary>
            <returns> 
The size, in pixels, of the bitmap..</returns>
        </member>
        <member name="M:CD2DBitmap.GetSize">
            <summary>
Returns the size, in device-independent pixels (DIPs), of the bitmap</summary>
            <returns> 
The size, in DIPs, of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBitmap.Attach(ID2D1Bitmap*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBitmap.Dispose">
            <summary>
The destructor. Called when a D2D bitmap object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DBitmap object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,HBITMAP__*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from HBITMAP.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="hbmpSrc">Handle to the bitmap.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from file.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="lpszPath">Pointer to a null-terminated string that contains the name of file.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.UInt32,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from resource.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="uiResID">The resource ID number of the resource.</param>
            <param name="lpszType">Pointer to a null-terminated string that contains the resource type.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBitmap">
            <summary>
ID2D1Bitmap wrapper.
</summary>
        </member>
        <member name="F:CD2DLayer.m_pLayer">
            <summary>
Stores a pointer to an ID2D1Layer object.
</summary>
        </member>
        <member name="M:CD2DLayer.Destroy">
            <summary>
Destroys a CD2DLayer object.</summary>
        </member>
        <member name="M:CD2DLayer.Create(CRenderTarget*)">
            <summary>
Creates a CD2DLayer.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DLayer.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DLayer.Attach(ID2D1Layer*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DLayer.op_Implicit~ID2D1Layer*">
            <summary>
Returns ID2D1Layer interface</summary>
            <returns> 
Pointer to an ID2D1Layer interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLayer.Get">
            <summary>
Returns ID2D1Layer interface</summary>
            <returns> 
Pointer to an ID2D1Layer interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLayer.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DLayer.GetSize">
            <summary>
Returns the size of the render target in device-independent pixels</summary>
            <returns> 
The current size of the render target in device-independent pixels</returns>
        </member>
        <member name="M:CD2DLayer.Dispose">
            <summary>
The destructor. Called when a D2D layer object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DLayer.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DLayer object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DLayer">
            <summary>
ID2D1Layer wrapper.
</summary>
        </member>
        <member name="F:CD2DResource.m_pParentTarget">
            <summary>
Pointer to the parent CRenderTarget)</summary>
        </member>
        <member name="F:CD2DResource.m_bIsAutoDestroy">
            <summary>
Resource will be destoyed by owner (CRenderTarget)</summary>
        </member>
        <member name="M:CD2DResource.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DResource.Destroy">
            <summary>
Destroys a CD2DResource object.</summary>
        </member>
        <member name="M:CD2DResource.Create(CRenderTarget*)">
            <summary>
Creates a CD2DResource.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DResource.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DResource.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DResource.IsAutoDestroy">
            <summary>
Check auto destroy flag.</summary>
            <returns>
TRUE if the object will be destroyed by its owner; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DResource.Dispose">
            <summary>
The destructor. Called when a D2D resource object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DResource.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DResource object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DResource">
            <summary>
An abstract class, which provides a interface for creating and managing D2D resources such as brushes, layers and texts.
</summary>
        </member>
        <member name="M:CD2DEllipse.#ctor(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse from CD2DPointF and CD2DSizeF objects.</summary>
            <param name="ptCenter">The center point of the ellipse.</param>
            <param name="sizeRadius">The X-radius and Y-radius of the ellipse.</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(D2D1_ELLIPSE!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DEllipse object from D2D1_ELLIPSE object.</summary>
            <param name="ellipse">source ellipse</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(D2D1_ELLIPSE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse object from D2D1_ELLIPSE object.</summary>
            <param name="ellipse">source ellipse</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse object from CD2DRectF object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DEllipse">
            <summary>
D2D1_ELLIPSE wrapper
</summary>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(D2D1_ROUNDED_RECT!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRoundedRect object from D2D1_ROUNDED_RECT object.</summary>
            <param name="rectIn">source rectangle</param>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(D2D1_ROUNDED_RECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRoundedRect object from D2D1_ROUNDED_RECT object.</summary>
            <param name="rectIn">source rectangle</param>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRoundedRect object from CD2DRectF object.</summary>
            <param name="rectIn">source rectangle</param>
            <param name="sizeRadius">radius size</param>
        </member>
        <member name="T:CD2DRoundedRect">
            <summary>
D2D1_ROUNDED_RECT wrapper
</summary>
        </member>
        <member name="M:CD2DRectU.op_Implicit~CRect">
            <summary>
Converts CD2DRectU to CRect object.</summary>
            <returns>
Current value of D2D rectangle.
</returns>
        </member>
        <member name="M:CD2DRectU.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if rectangle's top, left, bottom, and right values are all equal to 0; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DRectU.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DRectU object from four UINT32 values.</summary>
            <param name="uLeft">source left coordinate</param>
            <param name="uTop">source top coordinate</param>
            <param name="uRight">source right coordinate</param>
            <param name="uBottom">source bottom coordinate</param>
        </member>
        <member name="M:CD2DRectU.#ctor(D2D_RECT_U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRectU object from D2D1_RECT_U object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectU.#ctor(D2D_RECT_U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectU object from D2D1_RECT_U object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectU.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectU object from CRect object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DRectU">
            <summary>
D2D1_RECT_U wrapper
</summary>
        </member>
        <member name="M:CD2DRectF.op_Implicit~CRect">
            <summary>
Converts CD2DRectF to CRect object.</summary>
            <returns>
Current value of D2D rectangle.
</returns>
        </member>
        <member name="M:CD2DRectF.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if rectangle's top, left, bottom, and right values are all equal to 0; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DRectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Constructs a CD2DRectF object from four FLOAT values.</summary>
            <param name="fLeft">source left coordinate</param>
            <param name="fTop">source top coordinate</param>
            <param name="fRight">source right coordinate</param>
            <param name="fBottom">source bottom coordinate</param>
        </member>
        <member name="M:CD2DRectF.#ctor(D2D_RECT_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRectF object from D2D1_RECT_F object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectF.#ctor(D2D_RECT_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectF object from D2D1_RECT_F object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectF.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectF object from CRect object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DRectF">
            <summary>
D2D1_RECT_F wrapper
</summary>
        </member>
        <member name="M:CD2DSizeU.op_Implicit~CSize">
            <summary>
Converts CD2DSizeU to CSize object.</summary>
            <returns>
Current value of D2D size.
</returns>
        </member>
        <member name="M:CD2DSizeU.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if width and height are empty; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DSizeU.#ctor(System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DSizeU object from two UINT32 values.</summary>
            <param name="cx">source width</param>
            <param name="cy">source height</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(D2D_SIZE_U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DSizeU object from D2D1_SIZE_U object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(D2D_SIZE_U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeU object from D2D1_SIZE_U object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeU object from CSize object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="T:CD2DSizeU">
            <summary>
D2D1_SIZE_U wrapper
</summary>
        </member>
        <member name="M:CD2DSizeF.op_Implicit~CSize">
            <summary>
Converts CD2DSizeF to CSize object.</summary>
            <returns>
Current value of D2D size.
</returns>
        </member>
        <member name="M:CD2DSizeF.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if width and height are empty; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DSizeF.#ctor(System.Single,System.Single)">
            <summary>
Constructs a CD2DSizeF object from two FLOAT values.</summary>
            <param name="cx">source width</param>
            <param name="cy">source height</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(D2D_SIZE_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DSizeF object from D2D1_SIZE_F object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(D2D_SIZE_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeF object from D2D1_SIZE_F object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeF object from CSize object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="T:CD2DSizeF">
            <summary>
D2D1_SIZE_F wrapper
</summary>
        </member>
        <member name="M:CD2DPointU.op_Implicit~CPoint">
            <summary>
Converts CD2DPointU to CPoint object.</summary>
            <returns>
Current value of D2D point.
</returns>
        </member>
        <member name="M:CD2DPointU.#ctor(System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DPointU object from two UINT32 values.</summary>
            <param name="uX">source X</param>
            <param name="uY">source Y</param>
        </member>
        <member name="M:CD2DPointU.#ctor(D2D_POINT_2U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DPointU from object D2D1_POINT_2U object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointU.#ctor(D2D_POINT_2U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointU from object D2D1_POINT_2U object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointU.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointU object from CPoint object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="T:CD2DPointU">
            <summary>
D2D1_POINT_2U wrapper
</summary>
        </member>
        <member name="M:CD2DPointF.op_Implicit~CPoint">
            <summary>
Converts CD2DPointF to CPoint object.</summary>
            <returns>
Current value of D2D point.
</returns>
        </member>
        <member name="M:CD2DPointF.#ctor(System.Single,System.Single)">
            <summary>
Constructs a CD2DPointF object from two FLOAT values.</summary>
            <param name="fX">source X</param>
            <param name="fY">source Y</param>
        </member>
        <member name="M:CD2DPointF.#ctor(D2D_POINT_2F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DPointF object from D2D1_POINT_2F object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointF.#ctor(D2D_POINT_2F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointF object from D2D1_POINT_2F object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointF.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointF object from CPoint object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="T:CD2DPointF">
            <summary>
D2D1_POINT_2F wrapper
</summary>
        </member>
        <member name="M:CCustomTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <remarks>
This method also can set initial value and initial velocity to be applied to an animation variable, which is
associated with this transition. For this purpose you have to call SetInitialValue and SetInitialVelocity before
the framework creates the encapsulated transition COM object (it happens when you call CAnimationController::AnimateGroup).
</remarks>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="M:CCustomTransition.SetInitialVelocity(System.Double)">
            <summary>
Sets an initial velocity, which will be applied to an animation variable associated with this transition.
</summary>
        </member>
        <member name="M:CCustomTransition.SetInitialValue(System.Double)">
            <summary>
Sets an initial value, which will be applied to an animation variable associated with this transition.
</summary>
        </member>
        <member name="M:CCustomTransition.#ctor(CCustomInterpolator*)">
            <summary>
Constructs a custom transition object.
</summary>
            <param name="pInterpolator">A pointer to custom interpolator.</param>
        </member>
        <member name="F:CCustomTransition.m_initialVelocity">
            <summary>
Stores the initial velocity.
</summary>
        </member>
        <member name="F:CCustomTransition.m_initialValue">
            <summary>
Stores the initial value.
</summary>
        </member>
        <member name="F:CCustomTransition.m_bInitialVelocitySpecified">
            <summary>
Specifies whether the initial velocity was specified with SetInitialVelocity.
</summary>
        </member>
        <member name="F:CCustomTransition.m_bInitialValueSpecified">
            <summary>
Specifies whether the initial value was specified with SetInitialValue.
</summary>
        </member>
        <member name="F:CCustomTransition.m_pInterpolator">
            <summary>
Stores a pointer to a custom interpolator.
</summary>
        </member>
        <member name="T:CCustomTransition">
            <summary>
Implements custom transition.
</summary>
            <remarks>
The CCustomTransitions class allows developers to implement custom transitions. It's created and used
as a standard transition, but its constructor accepts as parameter a pointer to a custom interpolator.
Perform the following steps to use custom transitions:
1. Derive a class from CCustomInterpolator and implement at least InterpolateValue method.
2. Ensure that the lifetime of custom interpolator object must be longer than duration of animation where it's used.
3. Instantiate (using operator new) a CCustomTransition object and pass a pointer to custom interpolator in the constructor.
4. Call CCustomTransition::SetInitialValue and CCustomTransition::SetInitialVelocity if these parameters are required for custom interpolation.
5. Pass the pointer to custom transition to AddTransition method of animation object, whose value should be animated with the custom algorithm.
6. When the value of animation object should change Windows Animation API will call InterpolateValue (and other relevant methods) in CCustomInterpolator.
</remarks>
        </member>
        <member name="M:CInterpolatorBase.GetDependencies(__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*)">
            <summary>
Gets the interpolator's dependencies.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetDependencies method.
</returns>
            <param name="initialValueDependencies">Output. Aspects of the interpolator that depend on the initial value passed to SetInitialValueAndVelocity.</param>
            <param name="initialVelocityDependencies">Output. Aspects of the interpolator that depend on the initial velocity passed to SetInitialValueAndVelocity.</param>
            <param name="durationDependencies">Output. Aspects of the interpolator that depend on the duration passed to SetDuration.</param>
        </member>
        <member name="M:CInterpolatorBase.InterpolateVelocity(System.Double,System.Double*)">
            <summary>
Interpolates the velocity at a given offset
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the InterpolateVelocity method.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than or equal to the duration of the transition.
This method is not called if the duration of the transition is zero. </param>
            <param name="velocity">Output. The velocity of the variable at the offset.</param>
        </member>
        <member name="M:CInterpolatorBase.InterpolateValue(System.Double,System.Double*)">
            <summary>
Interpolates the value at a given offset
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the InterpolateValue method.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than the duration of the transition.
This method is not called if the duration of the transition is zero.</param>
            <param name="value">Output. The interpolated value.</param>
        </member>
        <member name="M:CInterpolatorBase.GetFinalValue(System.Double*)">
            <summary>
Gets the final value to which the interpolator leads.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetFinalValue method.
</returns>
            <param name="value">Output. The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.GetDuration(System.Double*)">
            <summary>
Gets the interpolator's duration.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetDuration method.
</returns>
            <param name="duration">Output. The duration of the transition, in seconds.</param>
        </member>
        <member name="M:CInterpolatorBase.SetDuration(System.Double)">
            <summary>
Sets the interpolator's duration
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the SetDuration method.
</returns>
            <param name="duration">The duration of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.SetInitialValueAndVelocity(System.Double,System.Double)">
            <summary>
Sets the interpolator's initial value and velocity.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the SetInitialValueAndVelocity method.
</returns>
            <param name="initialValue">The value of the variable at the start of the transition.</param>
            <param name="initialVelocity">The velocity of the variable at the start of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.CreateInstance(CCustomInterpolator*,IUIAnimationInterpolator**)">
            <summary>
Creates an instance of CInterpolatorBase and stores a pointer to custom interpolator, which will be handling events.
</summary>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
<param name="pInterpolator">A pointer to custom interpolator.</param><param name="ppHandler">Output. Contains a pointer to instance of CInterpolatorBase when the function returns.</param></member>
        <member name="M:CInterpolatorBase.SetCustomInterpolator(CCustomInterpolator*)">
            <summary>
Stores  a pointer to custom interpolator, which will be handling events.
</summary>
            <param name="pInterpolator">A pointer to custom interpolator.</param>
        </member>
        <member name="M:CInterpolatorBase.#ctor">
            <summary>
Constructs the CInterpolatorBase object.
</summary>
        </member>
        <member name="T:CInterpolatorBase">
            <summary>
Implements a callback, which is called by Animation API when it needs to calculate a new value of animation variable.
</summary>
            <remarks>
This handler is created and passed to IUIAnimationTransitionFactory::CreateTransition when a CCustomTransition
object is being created as a part of animation initialization process (started by CAnimationController::AnimateGroup).
Usually you don't need to use this class directly, it just routs all events to a CCustomInterpolator-derived class, whose
pointer is passed to constructor of CCustomTransition.
</remarks>
        </member>
        <member name="M:CCustomInterpolator.GetDependencies(__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*)">
            <summary>
Gets the interpolator's dependencies.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="initialValueDependencies">Output. Aspects of the interpolator that depend on the initial value passed to SetInitialValueAndVelocity.</param>
            <param name="initialVelocityDependencies">Output. Aspects of the interpolator that depend on the initial velocity passed to SetInitialValueAndVelocity.</param>
            <param name="durationDependencies">Output. Aspects of the interpolator that depend on the duration passed to SetDuration.</param>
        </member>
        <member name="M:CCustomInterpolator.InterpolateVelocity(System.Double,System.Double*)">
            <summary>
Interpolates the velocity at a given offset
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than or equal to the duration of the transition.
This method is not called if the duration of the transition is zero. </param>
            <param name="velocity">Output. The velocity of the variable at the offset.</param>
        </member>
        <member name="M:CCustomInterpolator.InterpolateValue(System.Double,System.Double*)">
            <summary>
Interpolates the value at a given offset.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than the duration of the transition.
This method is not called if the duration of the transition is zero.</param>
            <param name="value">Output. The interpolated value.</param>
        </member>
        <member name="M:CCustomInterpolator.GetFinalValue(System.Double*)">
            <summary>
Gets the final value to which the interpolator leads.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="value">Output. The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.GetDuration(System.Double*)">
            <summary>
Gets the interpolator's duration.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="duration">Output. The duration of the transition, in seconds.</param>
        </member>
        <member name="M:CCustomInterpolator.SetDuration(System.Double)">
            <summary>
Sets the interpolator's duration.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="duration">The duration of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.SetInitialValueAndVelocity(System.Double,System.Double)">
            <summary>
Sets the interpolator's initial value and velocity.
</summary>
            <returns>
The basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="initialValue">The value of the variable at the start of the transition.</param>
            <param name="initialVelocity">The velocity of the variable at the start of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.Init(System.Double,System.Double)">
            <summary>
Initializes duration and final value.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue">The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.#ctor(System.Double,System.Double)">
            <summary>
Constructs a custom interpolator object and initializes duration and velocity to specified values.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue" />
        </member>
        <member name="M:CCustomInterpolator.#ctor">
            <summary>
Constructs a custom interpolator object and sets all values to default 0.
</summary>
            <remarks>
Use CCustomInterpolator::Init to initialize duration and final value later in the code.
</remarks>
        </member>
        <member name="F:CCustomInterpolator.m_currentVelocity">
            <summary>
The interpolated velocity.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_currentValue">
            <summary>
The interpolated value.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_initialVelocity">
            <summary>
The velocity of the variable at the start of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_initialValue">
            <summary>
The value of the variable at the start of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_finalValue">
            <summary>
The final value of a variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="T:CCustomInterpolator">
            <summary>
Implements a basic interpolator.
</summary>
            <remarks>
Derive a class from CCustomInterpolator and override all necessary methods in order to implement a custom
interpolation algorithm. A pointer to this class should be passed as a parameter to CCustomTransition.
</remarks>
        </member>
        <member name="M:CSinusoidalTransitionFromVelocity.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSinusoidalTransitionFromVelocity.m_period">
            <summary>
The period of oscillation of the sinusoidal wave in seconds.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromVelocity.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CSinusoidalTransitionFromVelocity.#ctor(System.Double,System.Double)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="period">The period of oscillation of the sinusoidal wave in seconds. </param>
        </member>
        <member name="T:CSinusoidalTransitionFromVelocity">
            <summary>
Encapsulates a sinusoidal-velocity transition, with an amplitude determined by the animation variable's initial velocity..
</summary>
            <remarks>
The value of the animation variable oscillates around the initial value over the entire duration of a
sinusoidal-range transition. The amplitude of the oscillation is determined by the animation variable's velocity
when the transition begins.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CSinusoidalTransitionFromRange.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_slope">
            <summary>
The slope at the start of the transition.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_period">
            <summary>
The period of oscillation of the sinusoidal wave in seconds.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_dblMaximumValue">
            <summary>
The value of the animation variable at a peak of the sinusoidal wave.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_dblMinimumValue">
            <summary>
The value of the animation variable at a trough of the sinusoidal wave.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CSinusoidalTransitionFromRange.#ctor(System.Double,System.Double,System.Double,System.Double,__MIDL___MIDL_itf_UIAnimation_0000_0009_0001)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="dblMinimumValue">The value of the animation variable at a trough of the sinusoidal wave.</param>
            <param name="dblMaximumValue">The value of the animation variable at a peak of the sinusoidal wave.</param>
            <param name="period">The period of oscillation of the sinusoidal wave in seconds. </param>
            <param name="slope">The slope at the start of the transition. </param>
        </member>
        <member name="T:CSinusoidalTransitionFromRange">
            <summary>
Encapsulates a sinusoidal-range transition, with a given range of oscillation.
</summary>
            <remarks>
The value of the animation variable fluctuates between the specified minimum and maximum values over the entire
duration of a sinusoidal-range transition. The slope parameter is used to disambiguate between the two possible
sine waves specified by the other parameters.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CReversalTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CReversalTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CReversalTransition.#ctor(System.Double)">
            <summary>
Constructs a reversal transition object and initializes its duration.
</summary>
            <param name="duration">The duration of the transition. </param>
        </member>
        <member name="T:CReversalTransition">
            <summary>
Encapsulates a reversal transition.
</summary>
            <remarks>
A reversal transition smoothly changes direction over a given duration.
The final value will be the same as the initial value and the final velocity will be the negative of the initial velocity.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CParabolicTransitionFromAcceleration.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblAcceleration">
            <summary>
The acceleration of the animation variable during the transition.
</summary>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblFinalVelocity">
            <summary>
The velocity of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="M:CParabolicTransitionFromAcceleration.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a parabolic-acceleration transition and initializes it with specified parameters.
</summary>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition. </param>
            <param name="dblFinalVelocity">The velocity of the animation variable at the end of the transition. </param>
            <param name="dblAcceleration">The acceleration of the animation variable during the transition.</param>
        </member>
        <member name="T:CParabolicTransitionFromAcceleration">
            <summary>
Encapsulates a parabolic-acceleration transition.
</summary>
            <remarks>
During a parabolic-acceleration transition, the value of the animation variable changes from the initial value
to the final value ending at a specified velocity. You can control how quickly the variable reaches the final
value by specifying the rate of acceleration.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CSmoothStopTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSmoothStopTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CSmoothStopTransition.m_maximumDuration">
            <summary>
The maximum duration of the transition.
</summary>
        </member>
        <member name="M:CSmoothStopTransition.#ctor(System.Double,System.Double)">
            <summary>
Constructs a smooth-stop transition and initializes its maximum duration and final value.
</summary>
            <param name="maximumDuration">The maximum duration of the transition.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CSmoothStopTransition">
            <summary>
Encapsulates a smooth-stop transition.
</summary>
            <remarks>
A smooth-stop transition slows down as it approaches a given final value, and reaches it with a velocity of zero.
The duration of the transition is determined by the initial velocity, the difference between the initial and final values,
and the specified maximum duration. If there is no solution consisting of a single parabolic arc,
this method creates a cubic transition.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CLinearTransitionFromSpeed.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CLinearTransitionFromSpeed.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CLinearTransitionFromSpeed.m_dblSpeed">
            <summary>
The absolute value of the variable's velocity.
</summary>
        </member>
        <member name="M:CLinearTransitionFromSpeed.#ctor(System.Double,System.Double)">
            <summary>
Constructs a linear-speed transition object and initializes it with speed and final value.
</summary>
            <param name="dblSpeed">The absolute value of the variable's velocity.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CLinearTransitionFromSpeed">
            <summary>
Encapsulates a linear-speed transition.
</summary>
            <remarks>
During a linear-speed transition, the value of the animation variable changes at a specified rate.
The duration of the transition is determined by the difference between the initial value and the specified final value.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CLinearTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CLinearTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CLinearTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CLinearTransition.#ctor(System.Double,System.Double)">
            <summary>
Constructs a linear transition object and initializes it with duration and final value.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CLinearTransition">
            <summary>
Encapsulates a linear transition.
</summary>
            <remarks>
During a linear transition, the value of the animation variable transitions linearly from its initial value to a specified final value.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CInstantaneousTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CInstantaneousTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="M:CInstantaneousTransition.#ctor(System.Double)">
            <summary>
Constructs a transition object and initializes its final value.
</summary>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CInstantaneousTransition">
            <summary>
Encapsulates an instantaneous transition.
</summary>
            <remarks>
During an instantaneous transition, the value of the animation variable changes instantly from its current
value to a specified final value. The duration of this transition is always zero.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CDiscreteTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CDiscreteTransition.m_hold">
            <summary>
The amount of time by which to hold the variable at its final value.
</summary>
        </member>
        <member name="F:CDiscreteTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CDiscreteTransition.m_delay">
            <summary>
The amount of time by which to delay the instantaneous switch to the final value.
</summary>
        </member>
        <member name="M:CDiscreteTransition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a discrete transition object and initializes its parameters.
</summary>
            <param name="delay">The amount of time by which to delay the instantaneous switch to the final value.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition. </param>
            <param name="hold">The amount of time by which to hold the variable at its final value.</param>
        </member>
        <member name="T:CDiscreteTransition">
            <summary>
Encapsulates a discrete transition.
</summary>
            <remarks>
During a discrete transition, the animation variable remains at the initial value for a specified delay time,
then switches instantaneously to a specified final value and remains at that value for a given hold time.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CCubicTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CCubicTransition.m_dblFinalVelocity">
            <summary>
The velocity of the variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCubicTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCubicTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CCubicTransition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a transition object and initializes its parameters.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue">The value of the animation variable at the end of the transition.</param>
            <param name="finalVelocity">The velocity of the variable at the end of the transition.</param>
        </member>
        <member name="T:CCubicTransition">
            <summary>
Encapsulates a cubic transition.
</summary>
            <remarks>
During a cubic transition, the value of the animation variable changes from its initial value to a specified
final value over the duration of the transition, ending at a specified velocity.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CConstantTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CConstantTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CConstantTransition.#ctor(System.Double)">
            <summary>
Constructs a transition object and initializes its duration.
</summary>
            <param name="duration">The duration of the transition. </param>
        </member>
        <member name="T:CConstantTransition">
            <summary>
Encapsulates a constant transition.
</summary>
            <remarks>
During a constant transition, the value of an animation variable remains at the initial value over the duration
of the transition.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CAccelerateDecelerateTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_decelerationRatio">
            <summary>
The ratio of the time spent decelerating to the duration.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_accelerationRatio">
            <summary>
The ratio of the time spent accelerating to the duration.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_finalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CAccelerateDecelerateTransition.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition. </param>
            <param name="finalValue">The value of the animation variable at the end of the transition. </param>
            <param name="accelerationRatio">The ratio of the time spent accelerating to the duration.</param>
            <param name="decelerationRatio">The ratio of the time spent decelerating to the duration. </param>
        </member>
        <member name="T:CAccelerateDecelerateTransition">
            <summary>
Implements an accelerate-decelerate transition.
</summary>
            <remarks>
During an accelerate-decelerate transition, the animation variable speeds up and then slows down over the
duration of the transition, ending at a specified value. You can control how quickly the variable accelerates and
decelerates independently, by specifying different acceleration and deceleration ratios.
When the initial velocity is zero, the acceleration ratio is the fraction of the duration that the variable will
spend accelerating; likewise with the deceleration ratio. If the initial velocity is non-zero, it is the
fraction of the time between the velocity reaching zero and the end of transition. The acceleration ratio and
the deceleration ratio should sum to a maximum of 1.0.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnRenderingTooSlow(System.UInt32)">
            <summary>
Handles events that occur when the rendering frame rate for an animation falls below the minimum desirable frame rate.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnPostUpdate">
            <summary>
Handles events that occur after an animation update is finished.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnPreUpdate">
            <summary>
Handles events that occur before an animation update begins.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationTimerEventHandler.CreateInstance(CAnimationController*,IUIAnimationTimerEventHandler**)">
            <summary>
Creates an instance of CAnimationTimerEventHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppTimerEventHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
animation timer events.</param>
        </member>
        <member name="T:CAnimationTimerEventHandler">
            <summary>
Implements a call back, which is called by Animation API when timing events occur.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationTimer::SetTimerEventHandler when you call
CAnimationController::EnableAnimationTimerEventHandler.
</remarks>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.OnStoryboardUpdated(IUIAnimationStoryboard*)">
            <summary>
Handles OnStoryboardUpdated events, which occur when a storyboard is updated
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">A pointer to storyboard, which was updated.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.OnStoryboardStatusChanged(IUIAnimationStoryboard*,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001)">
            <summary>
Handles OnStoryboardStatusChanged events, which occur when a storyboard's status changes
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">A pointer to storyboard whose status has changed.</param>
            <param name="newStatus">Specifies new storyboard status.</param>
            <param name="previousStatus">Specifies previous storyboard status.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.CreateInstance(CAnimationController*,IUIAnimationStoryboardEventHandler**)">
            <summary>
Creates an instance of CAnimationStoryboardEventHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
storyboard events.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.#ctor">
            <summary>
Constructs a CAnimationStoryboardEventHandler object.
</summary>
        </member>
        <member name="T:CAnimationStoryboardEventHandler">
            <summary>
Implements a callback, which is called by Animation API when storyboard's status is changed or storyboard is updated.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationStoryboard::SetStoryboardEventHandler method,
when you call CAnimationController::EnableStoryboardEventHandler.
</remarks>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.OnIntegerValueChanged(IUIAnimationStoryboard*,IUIAnimationVariable*,System.Int32,System.Int32)">
            <summary>
Called when a value of an animation variable has changed.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">The storyboard that is animating the variable.</param>
            <param name="variable">The animation variable that was updated.</param>
            <param name="newValue">The new rounded value.</param>
            <param name="previousValue">The previous rounded value.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.CreateInstance(CAnimationController*,IUIAnimationVariableIntegerChangeHandler**)">
            <summary>
Creates an instance of CAnimationVariableIntegerChangeHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
variable integer change events.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.#ctor">
            <summary>
Constructs a CAnimationVariableIntegerChangeHandler object.
</summary>
        </member>
        <member name="T:CAnimationVariableIntegerChangeHandler">
            <summary>
Implements a call back, which is called by Animation API when the value of an animation variable changes.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationVariable::SetVariableIntegerChangeHandler method,
when you call CAnimationVariable::EnableIntegerValueChangedEvent or CAnimationBaseObject::EnableIntegerValueChangedEvent
(which enables this event for all animation variables encapsulated in an animation object).
</remarks>
        </member>
        <member name="M:CAnimationVariableChangeHandler.OnValueChanged(IUIAnimationStoryboard*,IUIAnimationVariable*,System.Double,System.Double)">
            <summary>
Called when a value of an animation variable has changed.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="storyboard">The storyboard that is animating the variable.</param>
            <param name="variable">The animation variable that was updated.</param>
            <param name="newValue">The new value.</param>
            <param name="previousValue">The previous value.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.CreateInstance(CAnimationController*,IUIAnimationVariableChangeHandler**)">
            <summary>
Creates an instance of CAnimationVariableChangeHandler object.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
variable change events.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.#ctor">
            <summary>
Constructs a CAnimationVariableChangeHandler object.
</summary>
        </member>
        <member name="T:CAnimationVariableChangeHandler">
            <summary>
Implements a call back, which is called by Animation API when the value of an animation variable changes.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationVariable::SetVariableChangeHandler method,
when you call CAnimationVariable::EnableValueChangedEvent or CAnimationBaseObject::EnableValueChangedEvent
(which enables this event for all animation variables encapsulated in an animation object).
</remarks>
        </member>
        <member name="M:CAnimationManagerEventHandler.OnManagerStatusChanged(__MIDL___MIDL_itf_UIAnimation_0000_0000_0002,__MIDL___MIDL_itf_UIAnimation_0000_0000_0002)">
            <summary>
Called when a status of animation manager has changed.
</summary>
            <returns>
Current implementation always returns S_OK;
</returns>
            <param name="newStatus">New status.</param>
            <param name="previousStatus">Previous status.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.CreateInstance(CAnimationController*,IUIAnimationManagerEventHandler**)">
            <summary>
Creates an instance of CAnimationManagerEventHandler object.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppManagerEventHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
status updates to an animation manager.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.#ctor">
            <summary>
Constructs a CAnimationManagerEventHandler object.
</summary>
        </member>
        <member name="T:CAnimationManagerEventHandler">
            <summary>
Implements a callback, which is called by Animation API when a status of animation manager changed.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationManager::SetManagerEventHandler method,
when you call CAnimationController::EnableAnimationManagerEvent.
</remarks>
        </member>
        <member name="M:CAnimationController.CleanUpGroup(CAnimationGroup*)">
            <summary>
A helper that cleans up the group.
</summary>
            <remarks>
This method removes all transitions and keyframes from the specified group.
</remarks>
            <param name="pGroup">A pointer to animation group to clean.</param>
        </member>
        <member name="M:CAnimationController.OnAfterSchedule(CAnimationGroup*)">
            <summary>
Called by the framework when an animation for the specified group has just been scheduled.
</summary>
            <remarks>
The default implementation removes keyframes from the specified group and transitions from animation variables that
belong to the specified group. Can be overridden in a derived class to take any additional actions upon animation schedule.
</remarks>
            <param name="pGroup">A pointer to an animation group, which has been scheduled.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerRenderingTooSlow(System.UInt32)">
            <summary>
Called by the framework when the rendering frame rate for an animation falls below a minimum desirable frame rate.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
The minimum desirable frame rate is specified by calling IUIAnimationTimer::SetFrameRateThreshold.
</remarks>
            <param name="fps">The current frame rate in frames per second. </param>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerPostUpdate">
            <summary>
Called by the framework after an animation update is finished.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerPreUpdate">
            <summary>
Called by the framework before an animation update begins.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
        </member>
        <member name="M:CAnimationController.OnHasPriorityCompress(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_COMPRESS.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityTrim(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_TRIM.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityConclude(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_CONCLUDE.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityCancel(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_CANCEL.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnStoryboardUpdated(CAnimationGroup*)">
            <summary>
Called by the framework when storyboard has been updated.
</summary>
            <remarks>
This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to a group that owns the storyboard.</param>
        </member>
        <member name="M:CAnimationController.OnStoryboardStatusChanged(CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001)">
            <summary>
Called by the framework when storyboard status has changed.
</summary>
            <remarks>
This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that owns the storyboard whose status has changed.</param>
            <param name="newStatus">Specifies the new status.</param>
            <param name="previousStatus">Specifies the previous status.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationIntegerValueChanged(CAnimationGroup*,CAnimationBaseObject*,IUIAnimationVariable*,System.Int32,System.Int32)">
            <summary>
Called by the framework when integer value of animation variable has changed.
</summary>
            <remarks>
This method is called if you enable animation variable events with EnableIntegerValueChangedEvent called for a specific
animation variable or animation object.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that holds an animation object whose value has changed.</param>
            <param name="pObject">A pointer to an animation object that contains an animation variable whose value has changed.</param>
            <param name="variable">A pointer to an animation variable.</param>
            <param name="newValue">Specifies new value.</param>
            <param name="prevValue">Specifies previous value.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationValueChanged(CAnimationGroup*,CAnimationBaseObject*,IUIAnimationVariable*,System.Double,System.Double)">
            <summary>
Called by the framework when value of animation variable has changed.
</summary>
            <remarks>
This method is called if you enable animation variable events with EnableValueChangedEvent called for a specific
animation variable or animation object.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that holds an animation object whose value has changed.</param>
            <param name="pObject">A pointer to an animation object that contains an animation variable whose value has changed.</param>
            <param name="variable">A pointer to an animation variable.</param>
            <param name="newValue">Specifies new value.</param>
            <param name="prevValue">Specifies previous value.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationManagerStatusChanged(__MIDL___MIDL_itf_UIAnimation_0000_0000_0002,__MIDL___MIDL_itf_UIAnimation_0000_0000_0002)">
            <summary>
Called by the framework in response to StatusChanged event from animation manager.
</summary>
            <remarks>
This method is called if you enable animation manager events with EnableAnimationManagerEvent.
It can be overridden in a derived class to take application-specific actions. The default implementation
updates a related window if it has been set with SetRelatedWnd.
</remarks>
            <param name="newStatus">New animation manager status.</param>
            <param name="previousStatus">Previous animation manager status.</param>
        </member>
        <member name="M:CAnimationController.OnBeforeAnimationStart(CAnimationGroup*)">
            <summary>
Called by the framework right before the animation is scheduled.
</summary>
            <remarks>
This call is routed to related CWnd and can be overridden in a derived class to perform any
additional actions before the animation starts for the specified group.
</remarks>
            <param name="pGroup">A pointer to an animation group whose animation is about to start.</param>
        </member>
        <member name="M:CAnimationController.CleanUpGroup(System.UInt32)">
            <summary>
Called by the framework to clean up the group when animation has been scheduled.
</summary>
            <remarks>
This method removes all transitions and keyframes from the specified group, because they are not relevant
after an animation has been scheduled.
</remarks>
            <param name="nGroupID">Specifies GroupID.</param>
        </member>
        <member name="M:CAnimationController.ScheduleGroup(System.UInt32,System.Double)">
            <summary>
Schedules an animation.
</summary>
            <returns>
TRUE if animation was scheduled successfully. FALSE if storyboard has not been created, or other error occurs.
</returns>
            <remarks>
You must call AnimateGroup with parameter bScheduleNow set to FALSE prior ScheduleGroup. You can specify the
desired animation time obtained from IUIAnimationTimer::GetTime. If the time parameter is 0.0, the animation is scheduled for the
current time.
</remarks>
            <param name="nGroupID">Specifies animation Group ID to schedule.</param>
            <param name="time">Specifies time to schedule.</param>
        </member>
        <member name="M:CAnimationController.AnimateGroup(System.UInt32,System.Int32)">
            <summary>
Prepares a group to run animation and optionally schedules it.
</summary>
            <returns>
TRUE if animation was successfully scheduled and run.
</returns>
            <remarks>
This method does the actual work creating storyboard, adding animation variables, applying transitions and setting keyframes.
It's possible to delay scheduling if you set bScheduleNow to FALSE. In this case the specified group
will hold a storyboard that has been set up for animation. At that point you can setup events for the storyboard and
animation variables. When you actually need to run the animation call CAnimationController::ScheduleGroup.
</remarks>
            <param name="nGroupID">Specifies GroupID.</param>
            <param name="bScheduleNow">Specifies whether to run animation right away.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationObject(IUIAnimationVariable*,CAnimationBaseObject**,CAnimationGroup**)">
            <summary>
Finds animation object containing a specified animation variable.
</summary>
            <returns>
TRUE if object was found; otherwise FALSE.
</returns>
            <remarks>
Called from event handlers when it's required to find an animation object from incoming animation variable.
</remarks>
            <param name="pVariable">A pointer to animation variable.</param>
            <param name="ppObject">Output. Contains a pointer to animation object or NULL. </param>
            <param name="ppGroup">Output. Contains a pointer to animation group that holds the animation object, or NULL.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationGroup(IUIAnimationStoryboard*)">
            <summary>
Finds an animation group by its storyboard.
</summary>
            <returns>
A pointer to animation group if succeeds, or NULL if no group plays the specified storyboard.
</returns>
            <remarks>
This method is usually called from event handlers to find a group by pointer to storyboard that comes as a parameter to an event handler.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationGroup(System.UInt32)">
            <summary>
Finds an animation group by its Group ID.
</summary>
            <returns>
A pointer to animation group or NULL if the group with specified ID is not found.
</returns>
            <remarks>
Use this method to find an animation group at runtime. A group is created and added to the internal list of animation groups
when a first animation object with particular GroupID is being added to animation controller.
</remarks>
            <param name="nGroupID">Specifies a GroupID.</param>
        </member>
        <member name="M:CAnimationController.AddKeyframeToGroup(System.UInt32,CBaseKeyFrame*)">
            <summary>
Adds a keyframe to group.
</summary>
            <returns>
TRUE if the function succeeds; otherwise FALSE.
</returns>
            <remarks>
Usually you don't need to call this method, use CAnimationController::CreateKeyframe instead, which creates
and adds the created keyframe to a group automatically.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="pKeyframe">A pointer to a keyframe.</param>
        </member>
        <member name="M:CAnimationController.CreateKeyframe(System.UInt32,CBaseKeyFrame*,System.Double)">
            <summary>
Creates a keyframe that depends on other keyframe with optional offset in seconds and adds it to the specified group.
</summary>
            <returns>
A pointer to newly created keyframe if the function succeeds.
</returns>
            <remarks>
You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload).
It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes.
You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups.
Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.
</remarks>
            <param name="nGroupID">Specifies Group ID for which keyframe is created.</param>
            <param name="pKeyframe">A  pointer to base keyframe for this keyframe.</param>
            <param name="offset">Offset in seconds from the base keyframe specified by pKeyframe.</param>
        </member>
        <member name="M:CAnimationController.CreateKeyframe(System.UInt32,CBaseTransition*)">
            <summary>
Creates a keyframe that depends on transition and adds it to the specified group.
</summary>
            <returns>
A pointer to newly created keyframe if the function succeeds.
</returns>
            <remarks>
You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload).
It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes.
You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups.
Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.
</remarks>
            <param name="nGroupID">Specifies Group ID for which keyframe is created.</param>
            <param name="pTransition">A pointer to transition. Keyframe will be inserted to storyboard after this transition.</param>
        </member>
        <member name="M:CAnimationController.RemoveTransitions(System.UInt32)">
            <summary>
Removes transitions from animation objects that belong to the specified group.
</summary>
            <remarks>
The group loops over its animation objects and calls ClearTransitions(FALSE) for each animation object.
This method is called by the framework after animation has been scheduled.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
        </member>
        <member name="M:CAnimationController.RemoveAllAnimationGroups">
            <summary>
Removes all animation groups from animation controller.
</summary>
            <remarks>
All groups will be deleted, their pointer, if stored at the application level, must be invalidated.
If CAnimationGroup::m_bAutodestroyAnimationObjects for a group being deleted is TRUE,
all animation objects that belong to that group will be deleted; otherwise their references to parent animation
controller will be set to NULL and they can be added to another controller.
</remarks>
        </member>
        <member name="M:CAnimationController.RemoveAnimationGroup(System.UInt32)">
            <summary>
Removes an animation group with specified ID from animation controller.
</summary>
            <remarks>
This method removes an animation group from the internal list of groups and deletes it, therefore if you stored
a pointer to that animation group, it must be invalidated. If CAnimationGroup::m_bAutodestroyAnimationObjects is TRUE,
all animation objects that belong to that group will be deleted; otherwise their references to parent animation
controller will be set to NULL and they can be added to another controller.
</remarks>
            <param name="nGroupID">Specifies animation group ID.</param>
        </member>
        <member name="M:CAnimationController.RemoveAnimationObject(CAnimationBaseObject*,System.Int32)">
            <summary>
Remove an animation object from animation controller.
</summary>
            <remarks>
Removes an animation object from animation controller and animation group. Call this function if
a particular object should not be animated anymore, or if you need to move the object to another animation controller.
In the last case bNoDelete must be TRUE.
</remarks>
            <param name="pObject">A pointer to an animation object.</param>
            <param name="bNoDelete">If this parameter is TRUE the object will not be deleted upon remove.</param>
        </member>
        <member name="M:CAnimationController.AddAnimationObject(CAnimationBaseObject*)">
            <summary>
Adds an animation object to a group that belongs to the animation controller.
</summary>
            <returns>
A pointer to existing or new animation group where pObject has been added if function succeeds; NULL if
pObject has already been added to a group that belongs to another animation controller.
</returns>
            <remarks>
Call this method to add an animation object to the animation controller. An object will be added to a group
according to object's GroupID (see CAnimationBaseObject::SetID). The animation controller will create a new
group if it's the first object being added with the specified GroupID. An animation object can be added to
one animation controller only. If you need to add an object to another controller, call RemoveAnimationObject first.
If you call SetID with new GroupID for an object that has been already added to a group, the object will be removed
from the old group and added to another group with specified ID.
</remarks>
            <param name="pObject">A pointer to an animation object.</param>
        </member>
        <member name="M:CAnimationController.SetRelatedWnd(CWnd*)">
            <summary>
Establishes a relationship between animation controller and a window.
</summary>
            <remarks>
If a related CWnd object is set, the animation controller can automatically update it (send WM_PAINT message) when
the status of animation manager has changed or timer post update event has occurred.
</remarks>
            <param name="pWnd">A pointer to window object to set.</param>
        </member>
        <member name="M:CAnimationController.IsAnimationInProgress">
            <summary>
Tells whether at least one group is playing animation.
</summary>
            <returns>
TRUE if there is an animation in progress for this animation controller; otherwise FALSE.
</returns>
            <remarks>
Checks status of animation manager and returns TRUE if the status is UI_ANIMATION_MANAGER_BUSY.
</remarks>
        </member>
        <member name="M:CAnimationController.UpdateAnimationManager">
            <summary>
Directs the animation manager to update the values of all animation variables.
</summary>
            <remarks>
Calling this method advances the animation manager to current time, changing statuses of storyboards as necessary
and updating any animation variables to appropriate interpolated values. Internally this method calls
IUIAnimationTimer::GetTime(timeNow) and IUIAnimationManager::Update(timeNow). Override this method in a derived
class to customize this behavior.
</remarks>
        </member>
        <member name="M:CAnimationController.EnableAnimationTimerEventHandler(System.Int32,__MIDL___MIDL_itf_UIAnimation_0000_0012_0001)">
            <summary>
Sets or releases a handler for timing events and handler for timing updates.
</summary>
            <returns>
TRUE if handlers were successfully set or released; FALSE if this method is called for a second time without
releasing the handlers first, or if any other error occurs.
</returns>
            <remarks>
When the handlers are set (enabled) Windows Animation API calls OnAnimationTimerPreUpdate, OnAnimationTimerPostUpdate,
OnRenderingTooSlow methods.
You need to enable animation timers to allow Windows Animation API update storyboards. Otherwise you'll need to
call CAnimationController::UpdateAnimationManager in order to direct the animation manager to update the values
of all animation variables.
</remarks>
            <param name="bEnable">Specifies whether to set or release the handlers.</param>
            <param name="idleBehavior">Specifies idle behavior for timer update handler.</param>
        </member>
        <member name="M:CAnimationController.EnableStoryboardEventHandler(System.UInt32,System.Int32)">
            <summary>
Sets or releases a handler for storyboard status and update events.
</summary>
            <returns>
TRUE if the handler was successfully set or released; FALSE if the specified animation group is now found or
animation for the specified group has not been initiated and its internal storyboard is NULL.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation API calls OnStoryboardStatusChanges and OnStoryboardUpdated virtual methods.
A handler must be set after CAnimationController::Animate has been called for the specified animation group, because
it creates encapsulated IUIAnimationStoryboard object.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="bEnable">Specifies whether to set or release a handler.</param>
        </member>
        <member name="M:CAnimationController.EnablePriorityComparisonHandler(System.UInt64)">
            <summary>
Sets or releases the priority comparison handler to call to determine whether a scheduled storyboard can be cancelled,
concluded, trimmed or compressed.
</summary>
            <returns>
TRUE if the handler was successfully set or released.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation calls the following virtual methods depending on dwHandlerType:
OnHasPriorityCancel, OnHasPriorityConclude, OnHasPriorityTrim, OnHasPriorityCompress.
dwHandler can be a combination of the following flags:
UI_ANIMATION_PHT_NONE - release all handlers
UI_ANIMATION_PHT_CANCEL - set Cancel comparison handler
UI_ANIMATION_PHT_CONCLUDE - set Conclude comparison handler
UI_ANIMATION_PHT_COMPRESS - set Compress comparison handler
UI_ANIMATION_PHT_TRIM - set Trim comparison handler
UI_ANIMATION_PHT_CANCEL_REMOVE - remove Cancel comparison handler
UI_ANIMATION_PHT_CONCLUDE_REMOVE - remove Conclude comparison handler
UI_ANIMATION_PHT_COMPRESS_REMOVE - remove Compress comparison handler
UI_ANIMATION_PHT_TRIM_REMOVE - remove Trim comparison handler
</remarks>
            <param name="dwHandlerType">A combination of UI_ANIMATION_PHT_ flags (see remarks), which specifies what handlers to set or release.</param>
        </member>
        <member name="M:CAnimationController.EnableAnimationManagerEvent(System.Int32)">
            <summary>
Sets or releases a handler to call when animation manager's status changes.
</summary>
            <returns>
TRUE if the handler was successfully set or released.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation calls OnAnimationManagerStatusChanged when animation manager's status changes.
</remarks>
            <param name="bEnable">Specifies whether to set or release a handler.</param>
        </member>
        <member name="M:CAnimationController.GetKeyframeStoryboardStart">
            <summary>
Returns a keyframe that identifies start of storyboard.
</summary>
            <returns>
A pointer to base keyframe, which identifies start of storyboard.
</returns>
            <remarks>
Obtain this keyframe to base any other keyframes or transitions on the moment in time when a storyboard starts.
</remarks>
        </member>
        <member name="M:CAnimationController.IsValid">
            <summary>
Tells whether animation controller is valid.
</summary>
            <returns>
TRUE if animation controller is valid; otherwise FALSE.
</returns>
            <remarks>
This method returns FALSE only if Windows Animation API is not supported on the current OS and creation of
animation manager failed because it's not registered. You need to call GetUIAnimationManager at least once after initialization of
COM libraries to cause setting of this flag.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUITransitionFactory">
            <summary>
A pointer to IUIAnimationTransitionFactory interface or NULL, if creation of transition library failed.
</summary>
            <returns>
A pointer to IUIAnimationTransitionFactory or NULL, if creation of transition factory failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUIAnimationTimer">
            <summary>
Provides access to encapsulated IUIAnimationTimer object.
</summary>
            <returns>
A pointer to IUIAnimationTimer interface or NULL, if creation of animation timer failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUITransitionLibrary">
            <summary>
Provides access to encapsulated IUIAnimationTransitionLibrary object.
</summary>
            <returns>
A pointer to IUIAnimationTransitionLibrary interface or NULL, if creation of transition library failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUIAnimationManager">
            <summary>
Provides access to encapsulated IUIAnimationManager object.
</summary>
            <returns>
A pointer to IUIAnimationManager interface or NULL, if creation of animation manager failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
You may need to access IUIAnimationManager in order to call its interface methods, which are not wrapped by
animation controller.
</remarks>
        </member>
        <member name="M:CAnimationController.Dispose">
            <summary>
The destructor. Called when animation controller object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationController.#ctor">
            <summary>
Constructs an animation controller.
</summary>
        </member>
        <member name="F:CAnimationController.g_KeyframeStoryboardStart">
            <summary>
A keyframe that represents start of storyboard.
</summary>
        </member>
        <member name="F:CAnimationController.m_lstAnimationGroups">
            <summary>
A list of animation groups that belong to this animation controller.
</summary>
        </member>
        <member name="F:CAnimationController.m_pRelatedWnd">
            <summary>
A pointer to a related CWnd object, which can be automatically redrawn when
the status of animation manager has changed, or post update event has occurred. Can be NULL.
</summary>
        </member>
        <member name="F:CAnimationController.m_pTransitionFactory">
            <summary>
Stores a pointer to Transition Factory COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pAnimationTimer">
            <summary>
Stores a pointer to Animation Timer COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pTransitionLibrary">
            <summary>
Stores a pointer to Transition Library COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pAnimationManager">
            <summary>
Stores a pointer to Animation Manager COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_bIsValid">
            <summary>
Specifies whether an animation controller is valid or not.
This member is set to FALSE if current OS does not support Windows Animation API.
</summary>
        </member>
        <member name="T:CAnimationController">
            <summary>
Implements the animation controller, which provides a central interface for creating and managing UI animations.
</summary>
            <remarks>
The CAnimationController class is the key class that manages animations.
You may create one or more instances of animation controller in an application and, optionally, connect an instance of
animation controller to a CWnd object using CAnimationController::SetRelatedWnd. This connection is required to send WM_PAINT messages
to the related window automatically when animation manager status has changed or animation timer has been updated.
If you do not enable this relation, you must redraw a window that displays an animation manually. For this purpose you can derive a class
from CAnimationController and override OnAnimationManagerStatusChanged and/or OnAnimationTimerPostUpdate and invalidate one or
more windows when necessary.
</remarks>
        </member>
        <member name="F:CAnimationGroup.m_bAutodestroyAnimationObjects">
            <summary>
Specifies how to destroy animation objects. If this parameter is TRUE, animation objects will be destroyed automatically
when the group is destroyed. Otherwise animation objects must be destroyed manually. The default value is FALSE.
Set this value to TRUE only if all animation objects that belong to group are allocated dynamically with operator new.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_bAutoclearTransitions">
            <summary>
Specifies how to clear transitions from animation objects that belong to group. If this member is TRUE,
transitions are removed automatically when an animation has been scheduled. Otherwise you need to remove
transitions manually.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_bAutodestroyKeyframes">
            <summary>
Specifies how to destroy keyframes. If this value is TRUE, all keyframes are removed and destroyed;
otherwise they are removed from the list only. The default value is TRUE.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_pStoryboard">
            <summary>
Points to animation storyboard. This pointer is valid only after call on Animate.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_lstKeyFrames">
            <summary>
Contains a list of keyframes.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_lstAnimationObjects">
            <summary>
Contains a list of animation objects.
</summary>
        </member>
        <member name="M:CAnimationGroup.SetAutodestroyTransitions(System.Int32)">
            <summary>
Directs all animation objects that belong to group automatically destroy transitions.
</summary>
            <remarks>
Set this value to FALSE only if you allocate transitions on the stack. The default value is TRUE, therefore
it's highly recommended to allocate transition objects using operator new.
</remarks>
            <param name="bAutoDestroy">Specifies how to destroy transitions.</param>
        </member>
        <member name="M:CAnimationGroup.Schedule(IUIAnimationTimer*,System.Double)">
            <summary>
Schedules an animation at the specified time.
</summary>
            <returns>
TRUE if the method succeeds; FALSE if the method fails or if Animate has not been called with bScheduleNow set to FALSE.
</returns>
            <remarks>
Call this function to schedule an animation at the specified time. You must call Animate with bScheduleNow set to FALSE first.
</remarks>
            <param name="pTimer">A pointer to animation timer.</param>
            <param name="time">Specifies time to schedule the animation.</param>
        </member>
        <member name="M:CAnimationGroup.Animate(IUIAnimationManager*,IUIAnimationTimer*,System.Int32)">
            <summary>
Animates a group.
</summary>
            <returns>
TRUE if the method succeeds; otherwise FALSE.
</returns>
            <remarks>
This method creates an internal storyboard, creates and applies transitions and schedules an animation
if bScheduleNow is TRUE. If bScheduleNow is FALSE, you need to call Schedule to start animation at the
specified time.
</remarks>
            <param name="pManager" />
            <param name="pTimer" />
            <param name="bScheduleNow" />
        </member>
        <member name="M:CAnimationGroup.FindAnimationObject(IUIAnimationVariable*)">
            <summary>
Finds an animation object that contains the specified animation variable.
</summary>
            <returns>
A pointer to animation object, or NULL if animation object is not found.
</returns>
            <param name="pVariable">A pointer to animation variable.</param>
        </member>
        <member name="M:CAnimationGroup.RemoveKeyframes">
            <summary>
Removes and optionally destroys all keyframes that belong to an animation group.
</summary>
            <remarks>
If m_bAutodestroyKeyframes member is TRUE then keyframes are removed and destroyed, otherwise keyframes are
just removed from the internal list of keyframes.
</remarks>
        </member>
        <member name="M:CAnimationGroup.RemoveTransitions">
            <summary>
Removes transitions from animation objects that belong to an animation group.
</summary>
            <remarks>
If m_bAutoclearTransitions flag is set to TRUE, this method loops over all animation objects that belong to the group
and calls CAnimationObject::ClearTransitions(FALSE).
</remarks>
        </member>
        <member name="M:CAnimationGroup.ApplyTransitions">
            <summary>
Applies transitions to animation objects.
</summary>
            <remarks>
This method ASSERTS in debug mode if storyboard has not been created.
It creates all transitions first, then adds "static" keyframes (keyframes that depend on offsets),
adds transitions that do not depend on keyframes, adds keyframes depending on transitions and other keyframes,
and at last adds transitions that depend on keyframes.
</remarks>
        </member>
        <member name="M:CAnimationGroup.GetGroupID">
            <summary>
Returns GroupID.
</summary>
            <returns>
A group identifier.
</returns>
        </member>
        <member name="M:CAnimationGroup.Dispose">
            <summary>
The destructor. Called when an animation group is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationGroup.#ctor(CAnimationController*,System.UInt32)">
            <summary>
Constructs an animation group.
</summary>
            <param name="pParentController">A pointer to animation controller that creates a group.</param>
            <param name="nGroupID">Specifies GroupID.</param>
        </member>
        <member name="M:CAnimationGroup.CreateTransitions">
            <summary>
A helper that creates COM transition objects.
</summary>
            <returns>
TRUE is the method succeeds, otherwise FALSE.
</returns>
        </member>
        <member name="M:CAnimationGroup.AddTransitions(IUIAnimationStoryboard*,System.Int32)">
            <summary>
A helper that adds transitions to a storyboard.
</summary>
            <param name="pStoryboard">A pointer to a storyboard COM object.</param>
            <param name="bDependOnKeyframes">Specifies whether this method should add to the storyboard transitions that depend on other keyframes.</param>
        </member>
        <member name="M:CAnimationGroup.AddKeyframes(IUIAnimationStoryboard*,System.Int32)">
            <summary>
A helper that adds keyframes to a storyboard.
</summary>
            <param name="pStoryboard">A pointer to a storyboard COM object.</param>
            <param name="bAddDeep">Specifies whether this method should add to the storyboard keyframes that depend on other keyframes.</param>
        </member>
        <member name="F:CAnimationGroup.m_pParentController">
            <summary>
A pointer to animation controller this group belongs to.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_nGroupID">
            <summary>
A unique identifier of animation group.
</summary>
        </member>
        <member name="T:CAnimationGroup">
            <summary>
Implements an animation group, which combines an animation storyboard, animation objects and transitions
to define an animation.
</summary>
            <remarks>
Animation groups are created automatically by animation controller (CAnimationController) when you add animation
objects using CAnimationController::AddAnimationObject.
An animation group is identified by GroupID, which is usually taken as a parameter to manipulate animation groups.
The GroupID is taken from the first animation object being added to a new animation group.
An encapsulated animation storyboard is created after you call CAnimationController::AnimateGroup and can be
accessed via public member m_pStoryboard.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to four CAnimationVariable objects
representing coordinates of rectangle.</param>
        </member>
        <member name="F:CAnimationRect.m_bFixedSize">
            <summary>
Specifies whether the rectangle has fixed size.
</summary>
            <remarks>
If this member is true, then the size of rectangle is fixed and right and bottom values
are recalculated each time the top-left corner is  moved according to the fixed size.
Set this value to TRUE to easily move the rectangle around the screen. In this case transitions applied to
right and bottom coordinates are ignored. The size is stored internally when you construct the object and/or
call SetDefaultValue. By default this member is set to FALSE.
</remarks>
        </member>
        <member name="M:CAnimationRect.AddTransition(CBaseTransition*,CBaseTransition*,CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for left, top, right and bottom coordinates.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for each rectangle sides.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of the rectangle sides, you can pass NULL.
</remarks>
            <param name="pLeftTransition">Specifies transition for the left side.</param>
            <param name="pTopTransition">Specifies transition for the top side.</param>
            <param name="pRightTransition">Specifies transition for the right side.</param>
            <param name="pBottomTransition">Specifies transition for the bottom side.</param>
        </member>
        <member name="M:CAnimationRect.op_Implicit~tagRECT">
            <summary>
Converts a CAnimationRect to RECT.
</summary>
            <returns>
Current value of animation rectangle as RECT.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned RECT will contain default values for all rectangle coordinates.
</remarks>
        </member>
        <member name="M:CAnimationRect.op_Assign(tagRECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns rect to CAnimationRect.
</summary>
            <remarks>
It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for color components if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="rect">The new value of animation rectangle.</param>
        </member>
        <member name="M:CAnimationRect.GetBottom">
            <summary>
Provides access to CAnimationVariable representing bottom coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing bottom coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the bottom coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetRight">
            <summary>
Provides access to CAnimationVariable representing right coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing right coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the right coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetTop">
            <summary>
Provides access to CAnimationVariable representing top coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing top coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the top coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetLeft">
            <summary>
Provides access to CAnimationVariable representing left coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing left coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the left coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetValue(CRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation rectangle. If this method fails or underlying COM objects for
left, top, right and bottom have not been initialized, rect contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="rect">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationRect.GetDefaultValue">
            <summary>
Returns the default values for rectangle's bounds.
</summary>
            <returns>
A CRect value containing defaults for left, right, top and bottom.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationRect.SetDefaultValue(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to rectangle's bounds.
It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="rect">Specifies new default values for left, top, right and bottom.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified coordinates of each side, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="nLeft">Specifies coordinate of left bound.</param>
            <param name="nTop">Specifies coordinate of top bound.</param>
            <param name="nRight">Specifies coordinate of right bound.</param>
            <param name="nBottom">Specifies coordinate of bottom bound.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified top-left corner coordinates and size of rectangle, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="pt">Coordinate of top-left corner.</param>
            <param name="sz">Size of rectangle.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified rect coordinates, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="rect">Specifies default rectangle.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor">
            <summary>
Constructs a CAnimationRect object.
</summary>
            <remarks>
The object is constructed with default values for left, top, right and bottom, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationRect.m_szInitial">
            <summary>
Specifies initial size of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_bottomValue">
            <summary>
The encapsulated animation variable that represents Bottom bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_rightValue">
            <summary>
The encapsulated animation variable that represents Right bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_topValue">
            <summary>
The encapsulated animation variable that represents Top bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_leftValue">
            <summary>
The encapsulated animation variable that represents Left bound of animation rectangle.
</summary>
        </member>
        <member name="T:CAnimationRect">
            <summary>
Implements the functionality of a rectangle whose top, left, right and bottom sides can be animated.
</summary>
            <remarks>
The CAnimationRect class encapsulates four CAnimationVariable objects and can represent in applications
a rectangle.
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to left, right top and bottom coordinates.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to three CAnimationVariable objects
representing red, green and blue components.</param>
        </member>
        <member name="M:CAnimationColor.AddTransition(CBaseTransition*,CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for Red, Green and Blue components.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables representing color components.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of the color components, you can pass NULL.
</remarks>
            <param name="pRTransition">Transition for Red component.</param>
            <param name="pGTransition">Transition for Green component.</param>
            <param name="pBTransition">Transition for Blue component.</param>
        </member>
        <member name="M:CAnimationColor.op_Implicit~System.UInt32!System.Runtime.CompilerServices.IsLong">
            <summary>
Converts a CAnimationColor to COLORREF.
</summary>
            <returns>
Current value of animation color object as COLORREF.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned COLORREF will contain default values for all color components.
</remarks>
        </member>
        <member name="M:CAnimationColor.op_Assign(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Assigns color to CAnimationColor.
</summary>
            <remarks>
It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for color components if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="color">Specifies new value Animation Color.</param>
        </member>
        <member name="M:CAnimationColor.GetB">
            <summary>
Provides access to CAnimationVariable representing Blue component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Blue component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Blue component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetG">
            <summary>
Provides access to CAnimationVariable representing Green component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Green component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Green component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetR">
            <summary>
Provides access to CAnimationVariable representing Red component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Red component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Red component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetValue(System.UInt32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation color. If this method fails or underlying COM objects for
color components have not been initialized, color contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="color">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationColor.GetDefaultValue">
            <summary>
Returns the default values for color components.
</summary>
            <returns>
A COLORREF value containing defaults for RGB components.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationColor.SetDefaultValue(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to color components
of animation color. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="color">Specifies new default values for red, green and blue components.</param>
        </member>
        <member name="M:CAnimationColor.#ctor(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation color object.
</summary>
            <remarks>
The object is constructed with specified values for RGB components, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="color">Specifies default color.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationColor.#ctor">
            <summary>
Constructs a CAnimationColor object.
</summary>
            <remarks>
The object is constructed with default values for red, green, blue, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationColor.m_bValue">
            <summary>
The encapsulated animation variable that represents Blue component of animation color.
</summary>
        </member>
        <member name="F:CAnimationColor.m_gValue">
            <summary>
The encapsulated animation variable that represents Green component of animation color.
</summary>
        </member>
        <member name="F:CAnimationColor.m_rValue">
            <summary>
The encapsulated animation variable that represents Red component of animation color.
</summary>
        </member>
        <member name="T:CAnimationColor">
            <summary>
Implements the functionality of a color whose red, green and blue components can be animated.
</summary>
            <remarks>
The CAnimationColor class encapsulates three CAnimationVariable objects and can represent in applications
a color. For example, you can use this class to animate colors of any object on the screen (like text color, background color etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to Red, Green and Blue components.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to two CAnimationVariable objects
representing the width and height.</param>
        </member>
        <member name="M:CAnimationSize.AddTransition(CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for Width and Height.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for Width and Height.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of dimensions, you can pass NULL.
</remarks>
            <param name="pCXTransition">A pointer to transition for Width.</param>
            <param name="pCYTransition">A pointer to transition for Height.</param>
        </member>
        <member name="M:CAnimationSize.op_Implicit~CSize">
            <summary>
Converts a CAnimationSize to a CSize.
</summary>
            <returns>
Current value of animation size as CSize.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned size will contain default values for Width and Height.
</remarks>
        </member>
        <member name="M:CAnimationSize.op_Assign(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns szSrc to CAnimationSize.
</summary>
            <remarks>
Assigns szSrc to CAnimationSize. It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for Width and Height if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="szSrc">Refers to CSize or SIZE.</param>
        </member>
        <member name="M:CAnimationSize.GetCY">
            <summary>
Provides access to CAnimationVariable representing Height.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Height.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Height.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetCX">
            <summary>
Provides access to CAnimationVariable representing Width.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Width.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Width.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetValue(CSize*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation size. If this method fails or underlying COM objects for
Width and Size have not been initialized, szValue contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="szValue">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationSize.GetDefaultValue">
            <summary>
Returns the default values for Width and Height.
</summary>
            <returns>
A CSize object containing default values.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationSize.SetDefaultValue(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to Width and Height
of animation size. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="szDefault">Specifies new default size.</param>
        </member>
        <member name="M:CAnimationSize.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation size object.
</summary>
            <remarks>
The object is constructed with specified values for width, height, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="szDefault">Specifies default size.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationSize.#ctor">
            <summary>
Constructs an animation size object.
</summary>
            <remarks>
The object is constructed with default values for width, height, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationSize.m_cyValue">
            <summary>
The encapsulated animation variable that represents height of animation size.
</summary>
        </member>
        <member name="F:CAnimationSize.m_cxValue">
            <summary>
The encapsulated animation variable that represents width of animation size.
</summary>
        </member>
        <member name="T:CAnimationSize">
            <summary>
Implements the functionality of a size object whose dimensions can be animated.
</summary>
            <remarks>
The CAnimationSize class encapsulates two CAnimationVariable objects and can represent in applications
a size. For example, you can use this class to animate a size of any two dimensional object on the screen (like rectangle, control etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to Width and/or Height.
</remarks>
        </member>
        <member name="M:CAnimationPoint.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to two CAnimationVariable objects
representing the X and Y coordinates.</param>
        </member>
        <member name="M:CAnimationPoint.AddTransition(CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for X and Y coordinates.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for X and Y coordinates.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of coordinates, you can pass NULL.
</remarks>
            <param name="pXTransition">A pointer to transition for X coordinates.</param>
            <param name="pYTransition">A pointer to transition for Y coordinate.</param>
        </member>
        <member name="M:CAnimationPoint.GetY">
            <summary>
Provides access to CAnimationVariable for Y coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Y coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Y coordinate.
</remarks>
        </member>
        <member name="M:CAnimationPoint.GetX">
            <summary>
Provides access to CAnimationVariable for X coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing X coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing X coordinate.
</remarks>
        </member>
        <member name="M:CAnimationPoint.op_Implicit~CPoint">
            <summary>
Converts a CAnimationPoint to a CPoint.
</summary>
            <returns>
Current value of CAnimationPoint as CPoint.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned point will contain default values for X and Y coordinates.
</remarks>
        </member>
        <member name="M:CAnimationPoint.op_Assign(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns ptSrc to CAnimationPoint.
</summary>
            <remarks>
Assigns ptSrc to CAnimationPoint. It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for X and Y coordinates if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="ptSrc">Refers to CPoint or POINT.</param>
        </member>
        <member name="M:CAnimationPoint.GetValue(CPoint*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation point. If this method fails or underlying COM objects for
X and Y coordinates have not been initialized, ptValue contains default
value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="ptValue">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationPoint.GetDefaultValue">
            <summary>
Returns the default values for X and Y coordinates.
</summary>
            <returns>
A point containing default value.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationPoint.SetDefaultValue(tagPOINT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to X and Y
coordinates of animation point. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="ptDefault">Specifies the default point value.</param>
        </member>
        <member name="M:CAnimationPoint.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs CAnimationPoint object.
</summary>
            <remarks>
Constructs CAnimationPoint object with specified properties.
</remarks>
            <param name="ptDefault">Specifies default point coordinates.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationPoint.#ctor">
            <summary>
Constructs CAnimationPoint object.
</summary>
            <remarks>
Constructs CAnimationPoint object with default properties: default point coordinates, Group ID and Object ID are set to 0.
</remarks>
        </member>
        <member name="F:CAnimationPoint.m_yValue">
            <summary>
The encapsulated animation variable that represents Y coordinate of animation point.
</summary>
        </member>
        <member name="F:CAnimationPoint.m_xValue">
            <summary>
The encapsulated animation variable that represents X coordinate of animation point.
</summary>
        </member>
        <member name="T:CAnimationPoint">
            <summary>
Implements the functionality of a point whose coordinates can be animated.
</summary>
            <remarks>
The CAnimationPoint class encapsulates two CAnimationVariable objects and can represent in applications
a point. For example, you can use this class to animate a position of any object on the screen (like text string, circle, point etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to X and/or Y coordinates.
</remarks>
        </member>
        <member name="M:CAnimationValue.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variable into a list.
</summary>
            <param name="lst">When the function returns, it contains a pointer to CAnimationVariable representing the animated value.</param>
        </member>
        <member name="M:CAnimationValue.AddTransition(CBaseTransition*)">
            <summary>
Adds a transition to be applied to a value.
</summary>
            <remarks>
Call this function to add a transition to internal list of transitions to be applied to an animation variable.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
</remarks>
            <param name="pTransition">A pointer to transition object.</param>
        </member>
        <member name="M:CAnimationValue.GetVariable">
            <summary>
Provides access to encapsulated animation variable.
</summary>
            <returns>
A reference to encapsulated animation variable.
</returns>
            <remarks>
Use this method to access the encapsulated animation variable. From CAnimationVariable you get access
to underlying IUIAnimationVariable object, whose pointer can be NULL if animation variable has not been created.
</remarks>
        </member>
        <member name="M:CAnimationValue.op_Assign(System.Int32)">
            <summary>
Assigns an INT32 value to CAnimationValue.
</summary>
            <remarks>
Assigns an INT32 value to CAnimationValue. This value is set as a default value for encapsulated animation variable.
If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="nVal">Specifies the value to be assigned to Animation Value.</param>
        </member>
        <member name="M:CAnimationValue.op_Assign(System.Double)">
            <summary>
Assigns a DOUBLE value to CAnimationValue.
</summary>
            <remarks>
Assigns a DOUBLE value to CAnimationValue. This value is set as a default value for encapsulated animation variable.
If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="dblVal">Specifies the value to be assigned to Animation Value.</param>
        </member>
        <member name="M:CAnimationValue.op_Implicit~System.Int32">
            <summary>
Provides conversion between CAnimationValue and INT32.
</summary>
            <returns>
Current value of Animation Value as integer.
</returns>
            <remarks>
Provides conversion between CAnimationValue and INT32. This method internally calls GetValue and doesn't check for
errors. If GetValue fails, the returned value will contain a default value previously set in constructor or with SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationValue.op_Implicit~System.Double">
            <summary>
Provides conversion between CAnimationValue and DOUBLE.
</summary>
            <returns>
Current value of Animation Value.
</returns>
            <remarks>
Provides conversion between CAnimationValue and DOUBLE. This method internally calls GetValue and doesn't check for
errors. If GetValue fails, the returned value will contain a default value previously set in constructor or with SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationValue.GetValue(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the current value.
</summary>
            <returns>
TRUE if the current value was retrieved successfully; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value. This implementation calls the encapsulated COM object, and if
the call fails, this method returns the default value that was previously set in constructor or with SetDefaultValue.
</remarks>
            <param name="nValue">Output. When the function returns it contains a current value of animation variable.</param>
        </member>
        <member name="M:CAnimationValue.GetValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the current value.
</summary>
            <returns>
TRUE if the current value was retrieved successfully; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value. This implementation calls the encapsulated COM object, and if
the call fails, this method returns the default value that was previously set in constructor or with SetDefaultValue.
</remarks>
            <param name="dblValue">Output. When the function returns it contains a current value of animation variable.</param>
        </member>
        <member name="M:CAnimationValue.SetDefaultValue(System.Double)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this method to set a default value. A default value is returned to application when animation has not been started
and/or underlying COM object has not been created. If the underlying COM object encapsulated in CAnimationVarible
was already created, this method recreates it, therefore you might need to call EnableValueChanged/EnableIntegerValueChanged
methods again.
</remarks>
            <param name="dblDefaultValue">Specifies the default value.</param>
        </member>
        <member name="M:CAnimationValue.#ctor(System.Double,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs a CAnimationValue object.
</summary>
            <remarks>
Constructs CAnimationValue object with specified properties.
</remarks>
            <param name="dblDefaultValue">Specifies default value.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationValue.#ctor">
            <summary>
Constructs a CAnimationValue object.
</summary>
            <remarks>
Constructs CAnimationValue object with default properties: default value, Group ID and Object ID are set to 0.
</remarks>
        </member>
        <member name="F:CAnimationValue.m_value">
            <summary>
The encapsulated animation variable that represents animation value.
</summary>
        </member>
        <member name="T:CAnimationValue">
            <summary>
Implements the functionality of animation object with one value.
</summary>
            <remarks>
The CAnimationValue class encapsulates a single CAnimationVariable object and can represent in applications
a single animated value. For example, you can use this class for animated transparency (fade effect), angle (to rotate objects),
or for any other case when you need to create an animation depending on a single animated value.
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to the value.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetParentAnimationObjects">
            <summary>
Establishes relationship between animation variables, contained in an animation object, and their container.
</summary>
            <remarks>
This is a helper that can be used to establish relationship between animation variables, contained in an animation object,
and their container. It loops over animation variables and sets a back pointer to a parent animation object
to each animation variable.
In the current implementation the actual relationship is established in CAnimationBaseObject::ApplyTransitions, therefore
back pointers are not set until you call CAnimationGroup::Animate.
Knowing the relationship may be helpful when you processing events and need to get a parent animation object
from CAnimationVariable (use CAnimationVariable::GetParentAnimationObject).
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Collects pointers to contained animation variables.
</summary>
            <remarks>
This is a pure virtual method that must be overridden in a derived class.
An animation object, depending on its type, contains one or more animation variables. For example, CAnimationPoint
contains two variables, for X and Y coordinates respectively. The base class CAnimationBaseObject implements
some generic methods, which act on a list of animation variables: ApplyTransitions, ClearTransitions,
EnableValueChangedEvent, EnableIntegerValueChangedEvent. These methods call GetAnimationVariableList, which is filled
in a derived class with actual animation variables contained in a particular animation object, then loop over the
list and perform necessary actions.
If you create a custom animation object, you must add to lst all animation variables contained in that object.
</remarks>
            <param name="lst">A list that must be filled with animation variables contained in an animation object.</param>
        </member>
        <member name="M:CAnimationBaseObject.ContainsVariable(IUIAnimationVariable*)">
            <summary>
Determines whether an animation object contains a particular animation variable.
</summary>
            <returns>
TRUE if the animation variable is contained in the animation object; otherwise FALSE.
</returns>
            <remarks>
This method can be used to determine whether an animation variable specified by pVariable is contained
within an animation object. An animation object, depending on its type, may contain several animation variables.
For example, CAnimationColor contains three variables, one for each color component (red, green and blue). When a
value of animation variable has changed, Windows Animation API sends ValueChanged or IntegerValueChanged events (if enabled),
and the parameter of this event is a pointer to interface IUIAnimationVariable of animation variable.
This method helps to obtain a pointer to animation from a pointer to contained COM object.
</remarks>
            <param name="pVariable">A pointer to animation variable.</param>
        </member>
        <member name="M:CAnimationBaseObject.EnableIntegerValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Sets up Integer Value Changed event handler.
</summary>
            <remarks>
If the Integer Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationIntegerValueChanged method,
which should be overridden in a CAnimationController-derived class. This method is called every time the animation integer value has changed.
</remarks>
            <param name="pController">A pointer to a parent controller.</param>
            <param name="bEnable">Specifies whether to enable, or disable Integer Value Changed event.</param>
        </member>
        <member name="M:CAnimationBaseObject.EnableValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Sets up Value Changed event handler.
</summary>
            <remarks>
If the Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationValueChanged method,
which should be overridden in a CAnimationController-derived class. This method is called every time the animation value has changed.
</remarks>
            <param name="pController">A pointer to a parent controller.</param>
            <param name="bEnable">Specifies whether to enable, or disable Value Changed event.</param>
        </member>
        <member name="M:CAnimationBaseObject.ClearTransitions(System.Int32)">
            <summary>
Removes all related transitions.
</summary>
            <remarks>
Removes all related transitions and destroys them if bAutodestroy or m_bAutodestroyTransitions flag is TRUE.
Transitions should be destroyed automatically only if they are not allocated on the stack.
If the above flags are FALSE, transitions are just removed from the internal list of related transitions.
</remarks>
            <param name="bAutodestroy">Specifies whether to destroy transition objects automatically, or just remove them from the related list.</param>
        </member>
        <member name="M:CAnimationBaseObject.ApplyTransitions(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds transitions to storyboard with encapsulated animation variable.
</summary>
            <returns>
TRUE if transitions were added successfully.
</returns>
            <remarks>
Adds related transitions, that have been added with AddTransition (overloaded methods in derived classes), to storyboard.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDependOnKeyframes">With FALSE this method adds only those transitions that do not depend on keyframes.</param>
        </member>
        <member name="M:CAnimationBaseObject.GetAutodestroyTransitions">
            <summary>
Tells whether related transition are destroyed automatically.
</summary>
            <returns>
If TRUE, related transitions are destroyed automatically; if FALSE, transition objects should be deallocated by calling application.
</returns>
            <remarks>
By default this flag is TRUE. Set this flag only if you allocated transition on the stack and/or transitions should be deallocated by
the calling application.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetAutodestroyTransitions(System.Int32)">
            <summary>
Sets a flag that orders to automatically destroy transitions.
</summary>
            <remarks>
Set this flag only if you allocated transition objects using operator new. If for some reason transition
objects are allocated on the stack, the auto destroy flag should be FALSE. By default this flag is TRUE.
</remarks>
            <param name="bValue">Specifies the auto destroy flag.</param>
        </member>
        <member name="M:CAnimationBaseObject.GetUserData">
            <summary>
Returns user defined data.
</summary>
            <returns>
A value of custom data.
</returns>
            <remarks>
Call this method to retrieve the custom data at runtime. The returned value will be 0 if it was not explicitly initialized in constructor or with SetUserData.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetGroupID">
            <summary>
Returns current Group ID.
</summary>
            <returns>
Current Group ID.
</returns>
            <remarks>
Use this method to retrieve Group ID. It's 0 if Group ID has not been set explicitly in constructor or with SetID.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetObjectID">
            <summary>
Returns current Object ID.
</summary>
            <returns>
Current Object ID.
</returns>
            <remarks>
Use this method to retrieve Object ID. It's 0 if Object ID has not been set explicitly in constructor or with SetID.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.DetachFromController">
            <summary>
Detaches an animation object from parent animation controller.
</summary>
            <remarks>
This method is used internally.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetUserData(System.UInt64)">
            <summary>
Sets user-defined data.
</summary>
            <remarks>
Use this method to associate a custom data with an animation object. This data may be retrieved later at runtime by GetUserData.
</remarks>
            <param name="dwUserData">Specifies the custom data.</param>
        </member>
        <member name="M:CAnimationBaseObject.SetID(System.UInt32,System.UInt32)">
            <summary>
Sets new IDs.
</summary>
            <remarks>
Allows to change Object ID and Group ID. If the new Group ID differs from the current ID, an animation object
is moved to another group (a new group will be created, if necessary).
</remarks>
            <param name="nObjectID">Specifies new Object ID.</param>
            <param name="nGroupID">Specifies new Group ID.</param>
        </member>
        <member name="M:CAnimationBaseObject.CreateTransitions">
            <summary>
Creates transitions associated with an animation object.
</summary>
            <returns>
TRUE if transitions were created successfully; otherwise FALSE.
</returns>
            <remarks>
Loops over list of animation variables encapsulated in a derived animation object and creates transitions
associated with each animation variable.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.Dispose">
            <summary>
The destructor. Called when an animation object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationBaseObject.#ctor(System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation object.
</summary>
            <remarks>
Constructs an animation object with specified Object ID and Group ID.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">User-defined data, which can be associated with animation object and retrieved later at runtime.</param>
        </member>
        <member name="M:CAnimationBaseObject.#ctor">
            <summary>
Constructs an animation object.
</summary>
            <remarks>
Constructs an animation objects and assigns default Object ID (0) and Group ID (0).
</remarks>
        </member>
        <member name="F:CAnimationBaseObject.m_pParentController">
            <summary>
A pointer to the parent animation controller.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_bAutodestroyTransitions">
            <summary>
Specifies whether related transitions should be automatically destroyed.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_dwUserData">
            <summary>
Stores user-defined data.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_nObjectID">
            <summary>
Specifes the Object ID of the animation object.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_nGroupID">
            <summary>
Specifies the Group ID of the animation object.
</summary>
        </member>
        <member name="T:CAnimationBaseObject">
            <summary>
The base class for all animation objects.
</summary>
            <remarks>
This class implements basic methods for all animation objects. An animation object can represent a value, point,
size, rectangle or color in an application, as well as any custom entity. Animation objects are stored in animation groups
(see CAnimationGroup). Each group can be animated separately and can be treated as an analogue of storyboard.
An animation object encapsulates one or more animation variables (see CAnimationVariable), depending on its logical
representation. For example, CAnimationRect contains four animation variables - one variable for each side of rectangle.
Each animation object class exposes overloaded AddTransition method, which should be used to apply transitions to
encapsulated animation variables.
An animation object can be identified by Object ID (optionally) and by Group ID. A Group ID is necessary in order
to place an animation object to correct group, but if a Group ID is not specified, an object is placed in the default group with ID 0.
If you call SetID with different GroupID, an animation object will be moved to another group (a new group is created if necessary).
</remarks>
        </member>
        <member name="F:CAnimationVariable.m_bAutodestroyTransitions">
            <summary>
Specifies whether related transition objects should be deleted.
</summary>
            <remarks>
Set this value to TRUE to force deletion of transition objects when they are being removed from the internal list
of transitions. If this value is FALSE the transitions should be deleted by calling application.
The list of transitions is always cleared after an animation has been scheduled. The default value is FALSE.
</remarks>
        </member>
        <member name="M:CAnimationVariable.GetDefaultValue">
            <summary>
Returns default value.
</summary>
            <returns>
The default value.
</returns>
            <remarks>
Use this function to obtain default value of animation variable. The default value can be set in constructor or by
SetDefaultValue method.
</remarks>
        </member>
        <member name="M:CAnimationVariable.EnableIntegerValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Enables or disables the IntegerValueChanged event.
</summary>
            <remarks>
When ValueChanged event is enabled, the framework calls virtual method CAnimationController::OnAnimationIntegerValueChanged.
You need to override it in a class derived from CAnimationController in order to process this event. This method is called every time
the integer value of animation variable is changed.
</remarks>
            <param name="pController">A pointer to parent controller.</param>
            <param name="bEnable">TRUE - enable event, FALSE - disable event.</param>
        </member>
        <member name="M:CAnimationVariable.EnableValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Enables or disables the ValueChanged event.
</summary>
            <remarks>
When ValueChanged event is enabled, the framework calls virtual method CAnimationController::OnAnimationValueChanged.
You need to override it in a class derived from CAnimationController in order to process this event. This method is called every time
the value of animation variable is changed.
</remarks>
            <param name="pController">A pointer to parent controller.</param>
            <param name="bEnable">TRUE - enable event, FALSE - disable event.</param>
        </member>
        <member name="M:CAnimationVariable.ApplyTransitions(CAnimationController*,IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds transitions from the internal list to storyboard.
</summary>
            <remarks>
This method adds transitions from the internal list to storyboard. It's called from the
top level code several times to add transitions that do not depend on keyframes and add
transitions that depend on keyframes. If the underlying animation variable
COM object has not been created, this method creates it at this stage.
</remarks>
            <param name="pController">A pointer to parent animation controller.</param>
            <param name="pStoryboard">A pointer to storyboard.</param>
            <param name="bDependOnKeyframes">TRUE, if this method should add transitions that depend on keyframes.</param>
        </member>
        <member name="M:CAnimationVariable.ClearTransitions(System.Int32)">
            <summary>
Clears transitions.
</summary>
            <remarks>
This method removes all transitions from the internal list of transitions. If bAutodestroy is TRUE, or
m_bAutodestroyTransitions is TRUE, then transitions are deleted. Otherwise the caller should deallocate
the transition objects.
</remarks>
            <param name="bAutodestroy">Specifies whether this method should delete transition objects.</param>
        </member>
        <member name="M:CAnimationVariable.AddTransition(CBaseTransition*)">
            <summary>
Adds a transition.
</summary>
            <remarks>
This method is called to add a transition to the internal list of transitions to be applied to the animation variable.
This list should be cleared when an animation has been scheduled.
</remarks>
            <param name="pTransition">A pointer to a transition to add.</param>
        </member>
        <member name="M:CAnimationVariable.GetValue(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the current value of animation variable.
</summary>
            <returns>
S_OK if the value was obtained successfully, or underlying animation variable has not been created. Otherwise
HRESULT error code.
</returns>
            <remarks>
This method can be called to retrieve the current value of animation variable. If the underlying COM object
has not been created, dblValue will contain a default value, when the function returns.
</remarks>
            <param name="nValue">The current value of the animation variable.</param>
        </member>
        <member name="M:CAnimationVariable.GetValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the current value of animation variable.
</summary>
            <returns>
S_OK if the value was obtained successfully, or underlying animation variable has not been created. Otherwise
HRESULT error code.
</returns>
            <remarks>
This method can be called to retrieve the current value of animation variable. If the underlying COM object
has not been created, dblValue will contain a default value, when the function returns.
</remarks>
            <param name="dblValue">The current value of the animation variable.</param>
        </member>
        <member name="M:CAnimationVariable.CreateTransitions(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Creates all transitions to be applied to this animation variable.
</summary>
            <returns>
TRUE if transitions were created successfully; otherwise FALSE.
</returns>
            <remarks>
This method is called by the framework when it needs to create transitions that have been added
to the variable's internal list of transitions.
</remarks>
            <param name="pLibrary">A pointer to transition library.</param>
            <param name="pFactory">A pointer to transition factory.</param>
        </member>
        <member name="M:CAnimationVariable.Create(IUIAnimationManager*)">
            <summary>
Creates the underlying animation variable COM object.
</summary>
            <returns>
TRUE if the animation variable was successfully created; otherwise FALSE.
</returns>
            <remarks>
This method creates the underlying animation variable COM object and sets its default value.
</remarks>
            <param name="pManager">A pointer to animation manager.</param>
        </member>
        <member name="M:CAnimationVariable.SetDefaultValue(System.Double)">
            <summary>
Sets default value and releases IUIAnimationVariable COM object.
</summary>
            <remarks>
Use this method to reset the default value. This method releases the internal IUIAnimationVariable COM object,
therefore when animation variable is recreated, the underlying COM object gets the new default value.
The default value is returned by GetValue if the COM object representing the animation variable is not created,
or if the variable has not been animated.
</remarks>
            <param name="dblDefaultValue">Specifies the new default value.</param>
        </member>
        <member name="M:CAnimationVariable.GetVariable">
            <summary>
Returns a pointer to IUIAnimationVariable COM object.
</summary>
            <returns>
A valid pointer to IUIAnimationVariable COM object, or NULL if animation variable was not created, or can't be created.
</returns>
            <remarks>
Use this function to access the underlying IUIAnimationVariable COM object and call its methods directly if needed.
</remarks>
        </member>
        <member name="M:CAnimationVariable.GetParentAnimationObject">
            <summary>
Returns the parent animation object.
</summary>
            <returns>
A pointer to parent animation object, if relationship was established, otherwise NULL.
</returns>
            <remarks>
This method can be called to retrieve a pointer to a parent animation object (a container).
</remarks>
        </member>
        <member name="M:CAnimationVariable.Dispose">
            <summary>
The destructor. Called when a CAnimationVariable object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationVariable.#ctor(System.Double)">
            <summary>
Constructs an animation variable object.
</summary>
            <remarks>
Constructs an animation variable object and sets its default value. A default value is used when
a variable is not animated, or can't be animated.
</remarks>
            <param name="dblDefaultValue">Specifies the default value.</param>
        </member>
        <member name="M:CAnimationVariable.SetParentAnimationObject(CAnimationBaseObject*)">
            <summary>
Sets the relationship between an animation variable and an animation object.
</summary>
            <remarks>
This method is called internally to establish one-to-one relationship between an animation variable and an animation object that encapsulates it.
</remarks>
            <param name="pParentObject">A pointer to an animation object that contains this variable.</param>
        </member>
        <member name="F:CAnimationVariable.m_pParentObject">
            <summary>
A pointer to an animation object that encapsulates this animation variable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_lstTransitions">
            <summary>
Contains a list of transitions that animate this animation variable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_dblDefaultValue">
            <summary>
Specifies the default value, which is propagated to IUIAnimationVariable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_variable">
            <summary>
Stores a pointer to IUIAnimationVariable COM object. NULL if the COM object has not been created yet, or if creation failed.
</summary>
        </member>
        <member name="T:CAnimationVariable">
            <summary>
Represents an animation variable.
</summary>
            <remarks>
The CAnimationVariable class encapsulates IUIAnimationVariable COM object. It also holds a list of transitions
to be applied to the animation variable in a storyboard. CAnimationVariable objects are embedded to
animation objects, which can represent in an application an animated value, point, size, color and rectangle.
</remarks>
        </member>
        <member name="M:CKeyFrame.AddToStoryboardAtOffset(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard at offset.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This function is called by the framework to add a keyframe to storyboard at offset.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add a keyframe this keyframe depend on recursively.</param>
        </member>
        <member name="M:CKeyFrame.AddToStoryboardAfterTransition(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard after transition.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This function is called by the framework to add a keyframe to storyboard after transition.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add a transition recursively.</param>
        </member>
        <member name="M:CKeyFrame.AddToStoryboard(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to a storyboard.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This method adds a keyframe to storyboard. If it depends on other keyframe or transition and bDeepAdd is TRUE,
this method tries to add them recursively.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add keyframe or transition recursively.</param>
        </member>
        <member name="M:CKeyFrame.GetOffset">
            <summary>
Returns an offset from other keyframe.
</summary>
            <returns>
An offset in seconds from other keyframe.
</returns>
            <remarks>
This method should be called to determine an offset in seconds from other keyframe.
</remarks>
        </member>
        <member name="M:CKeyFrame.GetExistingKeyframe">
            <summary>
Returns a pointer to a keyframe this keyframe depends on.
</summary>
            <returns>
A valid pointer to keyframe, or NULL if this keyframe does not depend on other keyframe.
</returns>
            <remarks>
This is an accessor to a keyframe this keyframe depends on.
</remarks>
        </member>
        <member name="M:CKeyFrame.GetTransition">
            <summary>
Returns a pointer to a transition this keyframe depends on.
</summary>
            <returns>
A valid pointer to transition, or NULL if this keyframe does not depend on transition.
</returns>
            <remarks>
This is an accessor to a transition this keyframe depends on.
</remarks>
        </member>
        <member name="M:CKeyFrame.#ctor(CBaseKeyFrame*,System.Double)">
            <summary>
Constructs a keyframe that depends on other keyframe.
</summary>
            <remarks>
The constructed keyframe will represent a moment in time within a storyboard, which has a specified offset from pKeyframe.
</remarks>
            <param name="pKeyframe">A pointer to keyframe.</param>
            <param name="offset">Offset, in seconds, from keyframe specified by pKeyframe.</param>
        </member>
        <member name="M:CKeyFrame.#ctor(CBaseTransition*)">
            <summary>
Constructs a keyframe that depends on a transition.
</summary>
            <remarks>
The constructed keyframe will represent a moment in time within a storyboard when the specified transition ends.
</remarks>
            <param name="pTransition">A pointer to a transition.</param>
        </member>
        <member name="F:CKeyFrame.m_pExistingKeyFrame">
            <summary>
Stores a pointer to an existing keframe. This keyframe is added to storyboard with m_offset to the existing keyframe.
</summary>
        </member>
        <member name="F:CKeyFrame.m_offset">
            <summary>
Specifies offset of this keyframe from a keyframe stored in m_pExistingKeyFrame.
</summary>
        </member>
        <member name="F:CKeyFrame.m_pTransition">
            <summary>
Stores a pointer to transtion that begins at this keyframe.
</summary>
        </member>
        <member name="T:CKeyFrame">
            <summary>
Represents an animation keyframe.
</summary>
            <remarks>
This class implements an animation keyframe. A keyframe represents a moment in time within a
storyboard and can be used to specify the start and end times of transitions.
A keyframe may be based on other keyframe and have an offset (in seconds) from it, or may be based on a transition and
represent a moment in time when this transition ends.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.AddToStoryboard(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard.
</summary>
            <returns>
TRUE if keyframe was added to storyboard successfully; otherwise FALSE.
</returns>
            <remarks>
This method is called to add a keyframe to storyboard.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">If this parameter is TRUE and the keyframe being added depends on some other keyframe or transition, this method tries
to add this keyframe or transition to storyboard first.</param>
        </member>
        <member name="M:CBaseKeyFrame.IsKeyframeAtOffset">
            <summary>
Specifies whether the keyframe should be added to storyboard at offset, or after transition.
</summary>
            <returns>
TRUE if the keyframe should be added to storyboard at some specified offset.
FALSE if the keyframe should be added to storyboard after some transition.
</returns>
            <remarks>
Specifies whether the keyframe should be added to storyboard at offset.
The offset or transition must be specified in a derived class.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.IsAdded">
            <summary>
Tells whether a keyframe has been added to storyboard.
</summary>
            <returns>
TRUE if a keyframe is added to a storyboard; otehrwise FALSE.
</returns>
            <remarks>
In the base class IsAdded always returns TRUE, but it's overridden in derived classes.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.GetAnimationKeyframe">
            <summary>
Returns the underlying keyframe value.
</summary>
            <returns>
A current keyframe. The default value is UI_ANIMATION_KEYFRAME_STORYBOARD_START.
</returns>
            <remarks>
This is an accessor to the underlying keyframe value.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.#ctor">
            <summary>
Constructs a keyframe object.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_bIsKeyframeAtOffset">
            <summary>
Specifies whether this keyframe should be added to storyboard at an offset from
another existing keyframe, or at the end of some transition.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_bAdded">
            <summary>
Specifies whether this keyframe has been added to a storyboard.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_keyframe">
            <summary>
Represents a Windows Animation API keyframe. When a keyframe is not initialized
it is set to the predefined value UI_ANIMATION_KEYFRAME_STORYBOARD_START.
</summary>
        </member>
        <member name="T:CBaseKeyFrame">
            <summary>
Implements basic functionality of keyframe.
</summary>
            <remarks>
Encapsulates UI_ANIMATION_KEYFRAME variable. Serves as a base class for any keyframe implementation.
A keyframe represents a moment in time within a storyboard and can be used to specify the start and end times of transitions.
There are two types of keyframes - keyframes added to storyboard at the specified offset (in time), or keyframes added
after specified transition. Because durations of some transitions can't be known before animation starts, the actual values
of some keyframes are determined at runtime only.
Because keyframes may depend on transitions, which in their turn depend on keyframes, it's important to prevent
infinite recursions when building keyframe chains.
</remarks>
        </member>
        <member name="F:CBaseTransition.m_bAdded">
            <summary>
Specifies whether a transition has been added to a storyboard.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pRelatedVariable">
            <summary>
A pointer to an animation variable, which is animated with the transition stored in m_transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pEndKeyframe">
            <summary>
Stores a pointer to the keyframe that specifies the end of the transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pStartKeyframe">
            <summary>
Stores a pointer to the keyframe that specifies the beginning of the transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_transition">
            <summary>
Stores a pointer to IUIAnimationTransition. NULL if a COM transition object has not been created.
</summary>
        </member>
        <member name="F:CBaseTransition.m_type">
            <summary>
Stores the transition type.
</summary>
        </member>
        <member name="M:CBaseTransition.AddToStoryboardAtKeyframes(IUIAnimationStoryboard*)">
            <summary>
Adds a transition to a storyboard.
</summary>
            <returns>
TRUE, if transition was successfully added to a storyboard.
</returns>
            <remarks>
Applies the transition to the related variable in the storyboard. If the start keyframe was specified, the transition
begins at that keyframe. If the end keyframe was specified, the transition begins at the start keyframe and
and stops at the end keyframe. If the transition was created with a duration parameter specified, that duration is
overwritten with the duration of time between the start and end keyframes.
If no keyframe was specified, the transition is appended to the transition added most recently to the variable.
</remarks>
            <param name="pStoryboard">A pointer to storyboard, which will animate the related variable.</param>
        </member>
        <member name="M:CBaseTransition.AddToStoryboard(IUIAnimationStoryboard*)">
            <summary>
Adds a transition to a storyboard.
</summary>
            <returns>
TRUE, if transition was successfully added to a storyboard.
</returns>
            <remarks>
Applies the transition to the related variable in the storyboard.  If this is the first transition
applied to this variable in this storyboard, the transition begins at the start of the storyboard.
Otherwise, the transition is appended to the transition added most recently to the variable.
</remarks>
            <param name="pStoryboard">A pointer to storyboard, which will animate the related variable.</param>
        </member>
        <member name="M:CBaseTransition.GetRelatedVariable">
            <summary>
Returns a pointer to related variable.
</summary>
            <returns>
A valid pointer to animation variable, or NULL if an animation variable has not been set by SetRelatedVariable.
</returns>
            <remarks>
This is an accessor to related animation variable.
</remarks>
        </member>
        <member name="M:CBaseTransition.SetRelatedVariable(CAnimationVariable*)">
            <summary>
Establishes a relationship between animation variable and transition.
</summary>
            <remarks>
Establishes a relationship between animation variable and transition. A transition can be applied only to one variable.
</remarks>
            <param name="pVariable">A pointer to related animation variable.</param>
        </member>
        <member name="M:CBaseTransition.GetEndKeyframe">
            <summary>
Returns start keyframe.
</summary>
            <returns>
A valid pointer to a keyframe, or NULL if a transition should not be inserted between keyframes.
</returns>
            <remarks>
This method can be used to access a keyframe object that was previously set by SetKeyframes.
It's called by top level code when transitions are being added to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.GetStartKeyframe">
            <summary>
Returns start keyframe.
</summary>
            <returns>
A valid pointer to a keyframe, or NULL if a transition should not start after a keyframe.
</returns>
            <remarks>
This method can be used to access a keyframe object that was previously set by SetKeyframes.
It's called by top level code when transitions are being added to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.IsAdded">
            <summary>
Tells whether a transition has been added to a storyboard.
</summary>
            <returns>
Returns TRUE if a transition has been added to a storyboard, otherwise FALSE.
</returns>
            <remarks>
This flag is set internally when the top level code adds transitions to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.SetKeyframes(CBaseKeyFrame*,CBaseKeyFrame*)">
            <summary>
Sets keyframes for a transition.
</summary>
            <remarks>
This method tells the transition to start after specified keyframe and, optionally, if pEnd is not NULL, end
before the specified keyframe.
If the transition was created with a duration parameter specified, that duration is overwritten with the duration of time between the start and end keyframes.
</remarks>
            <param name="pStart">A keyframe that specifies the beginning of the transition. </param>
            <param name="pEnd">A keyframe that specifies the end of the transition.</param>
        </member>
        <member name="M:CBaseTransition.GetTransition">
            <summary>
Returns a pointer to underlying COM transition object.
</summary>
            <returns>
A valid pointer to IUIAnimationTransition or NULL if underlying transition can't be created.
</returns>
            <remarks>
It's an accessor method to underlying COM transition object. It doesn't instantiates the underlying IUIAnimationTransition COM
object if it wasn't created.
</remarks>
        </member>
        <member name="M:CBaseTransition.GetTransition(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Returns a pointer to underlying COM transition object.
</summary>
            <returns>
A valid pointer to IUIAnimationTransition or NULL if underlying transition can't be created.
</returns>
            <remarks>
This method returns a pointer to underlying COM transition object and creates it if necessary.
</remarks>
            <param name="pLibrary">A pointer to transition library, which creates standard transitions. It can be NULL for custom transitions.</param>
            <param name="pFactory">A pointer to transition factory, which creates custom transitions. It can be NULL for standard transitions.</param>
        </member>
        <member name="M:CBaseTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Creates a COM transition.
</summary>
            <returns>
TRUE if a transition COM object was created successfully; otherwise FALSE.
</returns>
            <remarks>
This is a pure virtual function that must be overridden in a derived class.
It's called by the framework to instantiate the underlying COM transition object.
</remarks>
            <param name="pLibrary">A pointer to transition library, which creates standard transitions. It can be NULL for custom transitions.</param>
            <param name="pFactory">A pointer to transition factory, which creates custom transitions. It can be NULL for standard transitions.</param>
        </member>
        <member name="M:CBaseTransition.GetType">
            <summary>
Returns transition type.
</summary>
            <returns>
One of TRANSITION_TYPE enumerated values.
</returns>
            <remarks>
This method can be used to identify a transition object by its type.
The type is set in a constructor in a derived class.
</remarks>
        </member>
        <member name="M:CBaseTransition.Clear">
            <summary>
Releases encapsulated IUIAnimationTransition COM object.
</summary>
            <remarks>
This method should be called from a derived class's Create method in order to prevent
IUITransition interface leak.
</remarks>
        </member>
        <member name="M:CBaseTransition.Dispose">
            <summary>
The destructor. Called when a transition object is being destroyed.
</summary>
        </member>
        <member name="M:CBaseTransition.#ctor">
            <summary>
Constructs a base transtion object.
</summary>
        </member>
        <member name="T:CBaseTransition.TRANSITION_TYPE">
            <summary>
Defines the transition types currently supported by the MFC implementation of Windows Animation API.
</summary>
            <remarks>
A transition type is set in the constructor of specific transition.
For example, CSinusoidalTransitionFromRange sets its type to SINUSOIDAL_FROM_RANGE.
</remarks>
        </member>
        <member name="T:CBaseTransition">
            <summary>
Represents a basic transition.
</summary>
            <remarks>
This class encapsulates IUIAnimationTransition interface and serves as a base class for all transitions.
</remarks>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.MakeHolderSegmentsFromProfile(Cnc.Tool.Interop.TlProfile)">
            <summary> Makes holder segments from profile. </summary>
            <param name="profile"> The profile. </param>
            <returns> A vector of TlHolderSegment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.MakeProfileFromHolderSegments(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlHolderSegment})">
            <summary> Makes profile from holder segments. </summary>
            <param name="holderSegments"> The holder segments. </param>
            <returns> A TlProfilePtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.GetLength">
            <summary> Gets the length. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.GetHeight">
            <summary> Gets the height. </summary>
            <returns> The height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.IsDefaultHolder">
            <summary>	Query if this object is default holder. </summary>
            <returns>	true if default holder, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.DeleteAllSegments">
            <summary> Deletes all segments. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.SetSegments(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlHolderSegment})">
            <summary>	Gets the segments </summary>
            <param name="segments">	segments to define the holder </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.GetSegments">
            <summary> Gets the segments. </summary>
            <returns> The segments. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.AddSegment(System.Double,System.Double,System.Double)">
            <summary> Adds a segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.IsDifferentEnoughToDirtyOp(Cnc.Tool.Interop.TlHolder@,System.Boolean)">
            <summary> Determines if the other holder is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other holder. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if different enough to dirty operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.IsDifferentEnoughToAffectOp(Cnc.Tool.Interop.TlHolder@,System.Boolean)">
            <summary> Determines if the other holder is different enough to affect an operation. </summary>
            <param name="other">			    The other holder. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.AccessoryCollection">
            <summary> Accessory items for this holder </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.LowerConnectionType">
            <summary> Lower Connection Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.LowerConnectionSize">
            <summary> Lower Connection Size </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.UpperConnectionType">
            <summary> Upper Connection Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.UpperConnectionSize">
            <summary> Upper Connection Size </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.HolderType">
            <summary> Holder Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.LibraryName">
            <summary> Library Name </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.op_Assign(Cnc.Tool.Interop.TlHolder!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.CopyFrom(Cnc.Tool.Interop.TlHolder)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.#ctor(Cnc.Tool.Interop.TlHolder!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderSegment">
            <summary> A tl holder segment. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.IsCustom">
            <summary> Is this object is custom </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.VerticallyMountedTool">
            <summary> Is vertically mounted tool </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.LeftHandTool">
            <summary> Is left hand tool </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.RoundShank">
            <summary> Is round shank </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.SideCuttingEdgeAngle">
            <summary> Side cutting edge angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.EndCuttingEdgeAngle">
            <summary> End cutting edge angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetChamferHeight(System.Double,System.Boolean)">
            <summary> Sets ChamferHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetChamferHeight(System.Boolean)">
            <summary> Gets ChamferHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.ChamferHeight">
            <summary> Height of the chamfer </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetChamferWidth(System.Double,System.Boolean)">
            <summary> Sets ChamferWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetChamferWidth(System.Boolean)">
            <summary> Gets ChamferWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.ChamferWidth">
            <summary> Width of the chamfer </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetHeadWidth(System.Double,System.Boolean)">
            <summary> Sets HeadWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetHeadWidth(System.Boolean)">
            <summary> Gets HeadWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHeadWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.HeadWidth">
            <summary> Width of the head </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetHeadLength(System.Double,System.Boolean)">
            <summary> Sets HeadLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetHeadLength(System.Boolean)">
            <summary> Gets HeadLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHeadLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.HeadLength">
            <summary> Length of the head </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetShankHeight(System.Double,System.Boolean)">
            <summary> Sets ShankHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetShankHeight(System.Boolean)">
            <summary> Gets ShankHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShankHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.ShankHeight">
            <summary> Height of the shank </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetShankWidth(System.Double,System.Boolean)">
            <summary> Sets ShankWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetShankWidth(System.Boolean)">
            <summary> Gets ShankWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShankWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.ShankWidth">
            <summary> Width of the shank </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetWidth(System.Double,System.Boolean)">
            <summary> Sets Width property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetWidth(System.Boolean)">
            <summary> Gets Width property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.Width">
            <summary> Width </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetLength(System.Double,System.Boolean)">
            <summary> Sets Length property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetLength(System.Boolean)">
            <summary> Gets Length property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.Length">
            <summary> Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.InsertShapes">
            <summary> Insert shapes </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.AnsiShapeCode">
            <summary> ANSI shape code </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.Type">
            <summary> Type		 </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.op_Assign(Cnc.Tool.Interop.TlHolderLathe!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.CopyFrom(Cnc.Tool.Interop.TlHolderLathe)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.#ctor(Cnc.Tool.Interop.TlHolderLathe!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolGrade.Manufacturer">
            <summary> Manufacturer Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.op_Assign(Cnc.Tool.Interop.TlToolGrade!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.CopyFrom(Cnc.Tool.Interop.TlToolGrade)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.#ctor(Cnc.Tool.Interop.TlToolGrade!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsIDValidMaterialID(System.Guid)">
            <summary> Query if 'testID' is a valid material identifier. </summary>
            <param name="testID"> Identifier for the test. </param>
            <returns> true if identifier a valid material identifier, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsUser2">
            <summary> Query if this object is user 2. </summary>
            <returns> true if user 2, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsUser1">
            <summary> Query if this object is user 1. </summary>
            <returns> true if user 1, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsCeramic">
            <summary> Query if this object is ceramic. </summary>
            <returns> true if ceramic, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsTinCoated">
            <summary> Query if this object is tin coated. </summary>
            <returns> true if tin coated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsCarbide">
            <summary> Query if this object is carbide. </summary>
            <returns> true if carbide, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsHighSpeedSteel">
            <summary> Query if this object is high speed steel. </summary>
            <returns> true if high speed steel, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsDefinedMaterial">
            <summary> Query if this object is defined material. </summary>
            <returns> true if defined material, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsKnownMaterial">
            <summary> Query if this object is known material. </summary>
            <returns> true if known material, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMaterial.ToolMaterialCode">
            <summary> Tool Material Code </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.op_Assign(Cnc.Tool.Interop.TlToolMaterial!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.CopyFrom(Cnc.Tool.Interop.TlToolMaterial)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.#ctor(Cnc.Tool.Interop.TlToolMaterial!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.SetWidth(System.Double,System.Boolean)">
            <summary> Sets Width property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.GetWidth(System.Boolean)">
            <summary> Gets Width property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Width">
            <summary> Gets or sets the width of the connection. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.SetThickness(System.Double,System.Boolean)">
            <summary> Sets Thickness property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.GetThickness(System.Boolean)">
            <summary> Gets Thickness property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheThickness property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Thickness">
            <summary> Gets or sets the thickness of the connection. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.IsRound">
            <summary> Gets or sets a value indicating whether the connection is round or square. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Locator">
            <summary> Gets or sets the locator for the connection defined relative to the parent origin. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Size">
            <summary> Gets or sets the connection size string. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Type">
            <summary> Gets or sets the connection type string. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.op_Assign(Cnc.Tool.Interop.TlConnection!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.CopyFrom(Cnc.Tool.Interop.TlConnection)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.#ctor(Cnc.Tool.Interop.TlConnection!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_US_Union_Tool">
            <summary>   The us union tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_HPI">
            <summary>   The hpi id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_MariTool">
            <summary>   The mari tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Lyndex_Nikken">
            <summary>   The lyndex nikken id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_YG_1">
            <summary>   The yg id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Fraisa">
            <summary>   The fraisa id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Redline">
            <summary>   The redline id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Micro100">
            <summary>   The micro 100 id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Harvey_Tool">
            <summary>   The harvey tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Garr">
            <summary>   The garr id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Everede">
            <summary>   The everede id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_MA_Ford">
            <summary>   The ma ford id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Emuge">
            <summary>   The emuge id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_OSG">
            <summary>   The osg id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Mitsubishi">
            <summary>   The mitsubishi id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Helical_Solutions">
            <summary>   The Helical ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Holex_Hoffman_Group">
            <summary>   The Holex - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Garant_Hoffman_Group">
            <summary>   The Garant - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Sumitomo">
            <summary>   The Sumitomo ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Onsrud">
            <summary>   The Onsrud ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Harvey">
            <summary>   The Harvey ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Greenleaf">
            <summary>   The Greenleaf ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Vortex">
            <summary>   The Vortex ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Widia_Valenite">
            <summary>   The Widia - Valenite ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Widia_Hanita">
            <summary>   The Widia-Hanita ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Seco">
            <summary>   The Seco ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Dapra">
            <summary>   The Dapra ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Duramill">
            <summary>   The Duramill ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Niagara">
            <summary>   The Niagara ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Dataflute">
            <summary>   The Dataflute ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_MillStar">
            <summary>   The Millstar ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Intersoll">
            <summary>   The Intersoll ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Robbjack">
            <summary>   The Robbjack ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Sandvik">
            <summary> The Sandvik ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Kennametal">
            <summary>   The Kennemetal ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Command_Tool">
            <summary>   The Command Tool ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Mastercam">
            <summary>   The mastercam id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Iscar">
            <summary>   The iscar id. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.#cctor">
            <summary> Static Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.op_Assign(Cnc.Tool.Interop.TlManufacturer!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.CopyFrom(Cnc.Tool.Interop.TlManufacturer)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.#ctor(Cnc.Tool.Interop.TlManufacturer!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertTurningBoring.TlInsertTurningBoringDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.GetAnsiCrossSectionStringPos(System.Char)">
            <summary>	Gets an ANSI cross section string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI cross section string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.GetAnsiCrossSectionString">
            <summary>	Gets the ANSI cross section string. </summary>
            <returns>	The ANSI cross section string. </returns>
        </member>
        <member name="T:Cnc.Tool.TlInsertThreading.TlInsertThreadingDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlInsertGrooving.TlInsertGroovingDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheLiveCenter.TlHolderLatheLiveCenterDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.IsCompleteProfile">
            <summary> Query if this object is complete profile. </summary>
            <returns> true if complete profile, false if not or if empty profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.CompleteProfile">
            <summary> Completes the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.HalfProfile">
            <summary> Half the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolSlotMill.TlToolSlotMillDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The sp other. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.#ctor(Cnc.Tool.TlToolEndmill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor taking a base class type. This is used to sepparate the SlotMill tool type from it's
		  previous home (TlToolEndmill) to this class definition. </summary>
            <param name="other"> The const TlToolEndmill to process. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolReamer.TlToolReamerDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.GetHolemakingOpParams">
            <summary> Gets holemaking operation parameters. </summary>
            <returns> The holemaking operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLatheCustom.TlToolLatheCustomDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLatheCustom.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolLatheCustom.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlToolBoring.TlToolBoringDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.DifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.SetRadiusType(TlCornerType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the radius type. </summary>
            <param name="radiusType">	Type of the radius. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.GetCornerType">
            <summary> Gets the corner type. </summary>
            <returns> The corner type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation tool information. </summary>
            <param name="info">	The information. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetMillingOpParams">
            <summary> Gets milling operation parameters. </summary>
            <returns> The milling operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetRadiusType(Cnc.Tool.Interop.TlCornerType)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetRadiusType(Cnc.Tool.Interop.TlRadiusType)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetRadiusType">
            <summary>	Gets the radius type. </summary>
            <returns>	The radius type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetPrimaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets PrimaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetPrimaryCornerRadius(System.Boolean)">
            <summary> Gets PrimaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePrimaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.PrimaryCornerRadius">
            <summary> Gets or sets the primary corner radius. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetChamferLength(System.Double,System.Boolean)">
            <summary> Sets ChamferLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetChamferLength(System.Boolean)">
            <summary> Gets ChamferLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.ChamferLength">
            <summary> ChamferLength </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.CornerType">
            <summary> Corner Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.TipDiameter">
            <summary> Tip Diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.TaperAngle">
            <summary> Taper Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.op_Assign(Cnc.Tool.Interop.TlToolEndmill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.CopyFrom(Cnc.Tool.Interop.TlToolEndmill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.#ctor(Cnc.Tool.Interop.TlToolEndmill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolEndmill.TlToolEndmillDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The sp other. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.GetMillingOpParams">
            <summary> Gets milling operation parameters. </summary>
            <returns> The milling operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetRadiusType(TlCornerType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetRadiusType(TlRadiusType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetRadiusType(System.Int16)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.GetRadiusType">
            <summary>	Gets the radius type. </summary>
            <returns>	The radius type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetCornerRadius(System.Double)">
            <summary>	Sets the corner radius. </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.GetCornerRadius">
            <summary>	Gets the corner radius. </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets an operation tool information. </summary>
            <param name="info"> The information. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom7Time">
            <summary> Custom Option 7 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom7State">
            <summary> Custom Option 7 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom6Time">
            <summary> Custom Option 6 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom6State">
            <summary> Custom Option 6 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom5Time">
            <summary> Custom Option 5 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom5State">
            <summary> Custom Option 5 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom4Time">
            <summary> Custom Option 4 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom4State">
            <summary> Custom Option 4 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom3Time">
            <summary> Custom Option 3 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom3State">
            <summary> Custom Option 3 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom2Time">
            <summary> Custom Option 2 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom2State">
            <summary> Custom Option 2 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom1Time">
            <summary> Custom Option 1 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom1State">
            <summary> Custom Option 1 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.ToolTime">
            <summary> Tool Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.ToolState">
            <summary> Tool State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.MistTime">
            <summary> Mist Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.MistState">
            <summary> Mist State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.FloodTime">
            <summary> Flood Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.FloodState">
            <summary> Flood State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.IsOldStyle">
            <summary> Old Style Flag </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.op_Assign(Cnc.Tool.Interop.TlCoolant!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.CopyFrom(Cnc.Tool.Interop.TlCoolant)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.#ctor(Cnc.Tool.Interop.TlCoolant!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.SetPilotLength(System.Double,System.Boolean)">
            <summary> Sets PilotLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.GetPilotLength(System.Boolean)">
            <summary> Gets PilotLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePilotLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolCounterBore.PilotLength">
            <summary> Pilot Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.SetPilotDiameter(System.Double,System.Boolean)">
            <summary> Sets PilotDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.GetPilotDiameter(System.Boolean)">
            <summary> Gets PilotDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePilotDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolCounterBore.PilotDiameter">
            <summary> Pilot Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.op_Assign(Cnc.Tool.Interop.TlToolCounterBore!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.CopyFrom(Cnc.Tool.Interop.TlToolCounterBore)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.#ctor(Cnc.Tool.Interop.TlToolCounterBore!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.GetHolemakingOpParams">
            <summary> Gets drilling operation parameters. </summary>
            <returns> The drilling operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.SetPrimaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets PrimaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.GetPrimaryCornerRadius(System.Boolean)">
            <summary> Gets PrimaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePrimaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolDrill.PrimaryCornerRadius">
            <summary> Gets or sets the primary corner radius. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolDrill.ShoulderAngle">
            <summary> Shoulder Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolDrill.TipAngle">
            <summary> Tip Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.op_Assign(Cnc.Tool.Interop.TlToolDrill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.CopyFrom(Cnc.Tool.Interop.TlToolDrill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.#ctor(Cnc.Tool.Interop.TlToolDrill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.#ctor(Cnc.Tool.TlToolDrill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor taking a base class type. This is used to sepparate the CounterBore tool type from it's
		  previous home (TlToolDrill) to this class definition. </summary>
            <param name="other"> The const TlToolDrill to process. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolDrill.TlToolDrillDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.GetHolemakingOpParams">
            <summary> Gets drilling operation parameters. </summary>
            <returns> The drilling operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.SetCornerRadius(System.Double)">
            <summary>	Sets a corner radius. </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.GetCornerRadius">
            <summary>	Gets the corner radius. </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation tool information. </summary>
            <param name="info">	The information. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Cycle">
            <summary> Cycle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.DwellTime">
            <summary> Dwell time </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetRetract(System.Double,System.Boolean)">
            <summary> Sets Retract property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetRetract(System.Boolean)">
            <summary> Gets Retract property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRetract property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Retract">
            <summary> Retract </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetPeckClr(System.Double,System.Boolean)">
            <summary> Sets PeckClr property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetPeckClr(System.Boolean)">
            <summary> Gets PeckClr property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePeckClr property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.PeckClr">
            <summary> Peck clearance </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetPeck2(System.Double,System.Boolean)">
            <summary> Sets Peck2 property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetPeck2(System.Boolean)">
            <summary> Gets Peck2 property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePeck2 property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Peck2">
            <summary> Peck 2 </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetPeck1(System.Double,System.Boolean)">
            <summary> Sets Peck1 property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetPeck1(System.Boolean)">
            <summary> Gets Peck1 property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePeck1 property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Peck1">
            <summary> Peck 1 </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.TapType">
            <summary> Tap type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetPitch(System.Double,System.Boolean)">
            <summary> Sets Pitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetPitch(System.Boolean)">
            <summary> Gets Pitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Pitch">
            <summary> Pitch </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.ShoulderAngle">
            <summary> Shoulder angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetTipLength(System.Double,System.Boolean)">
            <summary> Sets TipLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetTipLength(System.Boolean)">
            <summary> Gets TipLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.TipLength">
            <summary> Tip length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.TipDiameter">
            <summary> Tip diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetChamferHeight(System.Double,System.Boolean)">
            <summary> Sets ChamferHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetChamferHeight(System.Boolean)">
            <summary> Gets ChamferHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.ChamferHeight">
            <summary> Chamfer height </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.FluteCount">
            <summary> Flutes count </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.FluteAngle">
            <summary> Flute angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetCutLength(System.Double,System.Boolean)">
            <summary> Sets CutLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetCutLength(System.Boolean)">
            <summary> Gets CutLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCutLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.CutLength">
            <summary> Cut length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetFluteLength(System.Double,System.Boolean)">
            <summary> Sets FluteLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetFluteLength(System.Boolean)">
            <summary> Gets FluteLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFluteLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.FluteLength">
            <summary> Flute length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.TipAngle">
            <summary> Tip angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetShankDiameter(System.Double,System.Boolean)">
            <summary> Sets ShankDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetShankDiameter(System.Boolean)">
            <summary> Gets ShankDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShankDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.ShankDiameter">
            <summary> Shank diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetDiameter(System.Double,System.Boolean)">
            <summary> Sets Diameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetDiameter(System.Boolean)">
            <summary> Gets Diameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Diameter">
            <summary> Diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.DrillType">
            <summary> Drill type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.op_Assign(Cnc.Tool.Interop.TlInsertLatheDrill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.CopyFrom(Cnc.Tool.Interop.TlInsertLatheDrill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.#ctor(Cnc.Tool.Interop.TlInsertLatheDrill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.CuttingSide">
            <summary> The handedness of the insert </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Is3d">
            <summary> Gets or sets a value indicating whether the insert is a 3d insert </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IsCustom">
            <summary> Is custom </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.MaterialName">
            <summary> Material name </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexMaterial">
            <summary> Index material </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexThickness">
            <summary> Index thickness </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexCornerRadius">
            <summary> Index corner radius </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexWidth">
            <summary> Width of the index </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexICDiameter">
            <summary> Mastercam old-style lathe insert compatibility data </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.HasGrade">
            <summary> Tests if Grade reference property is set. </summary>
            <returns> true if Grade is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Grade">
            <summary> The insert grade.  </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetThickness(System.Double,System.Boolean)">
            <summary> Sets Thickness property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetThickness(System.Boolean)">
            <summary> Gets Thickness property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheThickness property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Thickness">
            <summary> Thickness </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetCornerRadius(System.Double,System.Boolean)">
            <summary> Sets CornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetCornerRadius(System.Boolean)">
            <summary> Gets CornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.CornerRadius">
            <summary> Corner radius </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetWidth(System.Double,System.Boolean)">
            <summary> Sets Width property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetWidth(System.Boolean)">
            <summary> Gets Width property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Width">
            <summary> Width </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetLength(System.Double,System.Boolean)">
            <summary> Sets Length property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetLength(System.Boolean)">
            <summary> Gets Length property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Length">
            <summary> Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetICDiameter(System.Double,System.Boolean)">
            <summary> Sets ICDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetICDiameter(System.Boolean)">
            <summary> Gets ICDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheICDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.ICDiameter">
            <summary> IC diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.AnsiShapeCode">
            <summary> ANSI shape code </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.op_Assign(Cnc.Tool.Interop.TlInsert!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.CopyFrom(Cnc.Tool.Interop.TlInsert)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.#ctor(Cnc.Tool.Interop.TlInsert!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertLatheDrill.TlInsertLatheDrillDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsertLatheDrill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertLatheDrill.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertLatheDrill.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertLatheDrill.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertLatheDrill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.SetCommercialName(System.String)">
            <summary>   Sets a commercial name. </summary>
            <param name="name"> The name. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.GetCommercialName">
            <summary>   Gets the commercial name. </summary>
            <returns>   The commercial name. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.op_Assign(Cnc.Tool.Interop.TlMaterial!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.CopyFrom(Cnc.Tool.Interop.TlMaterial)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.#ctor(Cnc.Tool.Interop.TlMaterial!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetNativeTlObjectPointer">
            <summary> Gets native tl object pointer. </summary>
            <returns> The native tl object pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.DeleteAll">
            <summary> Removes all the items and deletes all the memory used by those items. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetLatheTools">
            <summary> Gets lathe tools. </summary>
            <returns> The lathe tools. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetAssemblies">
            <summary> Gets the assemblies. </summary>
            <returns> The assemblies. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetAll">
            <summary>	Gets the objects. </summary>
            <returns>	nullptr if it fails, else the objects. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetLiveCenterIDs">
            <summary> Returns all the live center component IDs in the manager. </summary>
            <returns> A list of IDs of all the live center components in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetToolTypeIDs">
            <summary> Returns all the tool type IDs in the manager. </summary>
            <returns> A list of IDs of all the tool type in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetToolGroupIDs">
            <summary> Returns all the tool group IDs in the manager. </summary>
            <returns> A list of IDs of all the tool group in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetCutParamIDs">
            <summary> Returns all the cut params IDs in the manager. </summary>
            <returns> A list of IDs of all the cut params in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetOpTypeIDs">
            <summary> Returns all the op type IDs in the manager. </summary>
            <returns> A list of IDs of all the op types in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetOpGroupIDs">
            <summary> Returns all the op group IDs in the manager. </summary>
            <returns> A list of IDs of all the op groups in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetWorkMaterialIDs">
            <summary> Returns all the work material IDs in the manager. </summary>
            <returns> A list of IDs of all the work materials in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetHolderIDs">
            <summary> Returns all the holder IDs in the manager. </summary>
            <returns> A list of IDs of all the holders in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetLatheToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetAssemblyIDs">
            <summary> Returns all the assembly IDs in the manager. </summary>
            <returns> A list of IDs of all the assemblies in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetIDs">
            <summary> Returns all the IDs in the manager. </summary>
            <returns> A list of IDs of all the objects in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsLatheTool(System.Guid)">
            <summary> Returns true if the item is a lathe tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a lathe tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsWorkMaterial(System.Guid)">
            <summary> Returns true if the item is a work material, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a work material, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsHolder(System.Guid)">
            <summary> Returns true if the item is a holder, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a holder, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsTool(System.Guid)">
            <summary> Returns true if the item is a tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsAssembly(System.Guid)">
            <summary> Returns true if the item is an assembly, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies and assembly, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.LatheSlotByID(System.Guid)">
            <summary> Find the lathe tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.LatheIDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Find the lathe tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> Tlid of the lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.SlotByID(System.Guid)">
            <summary> Find the mill tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Find the mill tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> the corresponding TlID. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.CopyObjects(Cnc.Tool.Interop.TlMgr,System.Guid)">
            <summary> Copies an object from the other manager into this one. IF that object is an assembly, also copies all
		  associated AssemblyItems. </summary>
            <param name="otherManager"> Manager for other. </param>
            <param name="toolId">		    The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.SaveAsTooldb(System.String)">
            <summary> Saves the current TlMgr as a tooldb file of the current .tooldb version. </summary>
            <param name="destinationFile"> The file name a path for the output .tooldb file. </param>
            <returns> true if the file is converted and saved correclty. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.FindId(Cnc.Tool.Interop.TlToolLathe,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.FindId(Cnc.Tool.Interop.TlAssembly,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Attempts to locate a similar assembly to the input parameter "similarAssembly". </summary>
            <param name="similarAssembly"> The similar assembly. </param>
            <param name="machineGroupId">  Identifier for the machine group. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot"> The slot. </param>
            <param name="tool"> The tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot">	    The slot. </param>
            <param name="assembly"> [out] The assembly. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Guid,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="id"> The id of the item to search for. </param>
            <param name="tool"> The tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Guid,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="id"> The id of the item to search for. </param>
            <param name="assembly"> [out] The assembly. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Add(Cnc.Tool.Interop.TlObject,System.Boolean)">
            <summary> Adds an item to the tool manager.  The item must be a TlObject. This is a templated function which
		  determines its type based on the type of the first parameter.  This function will create a new object
		  copied from the item parameter and store that copy. </summary>
            <typeparam name="TYPE"> Type of the type. </typeparam>
            <param name="item">			  The item to add to the list.  A copy of the item will be created and added to the
							  list, not the parameter itself. </param>
            <param name="updateExisting"> (Optional, defaults to false)
							  If this parameter is true, then the function will update an existing item if one
							  exists, or add if it does not.  If the parameter is false, then this function
							  returns false if the item provided already exists in the manager. </param>
            <returns> true if the item is added, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Delete(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Deletes ALL tool records that contain the provided slot. </summary>
            <param name="slot"> The id of the tool to look for. </param>
            <param name="mill"> Flag indicating whether to remove the Mill tool associated at the provided slot, or the Lathe
					tool associated at the provided slot. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Delete(System.Guid)">
            <summary> Deletes the given ID. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.DoesObjectExist(System.Guid)">
            <summary> Determines if the specified item exists in this tool manager. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if the item exists, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Size">
            <summary> Returns the number of items stored in the manager. </summary>
            <returns> The number of items stored in the tool manager. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.op_Equality(Cnc.Tool.Interop.TlMgr)">
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.op_Assign(Cnc.Tool.Interop.TlMgr)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Finalize">
            <summary> Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Dispose">
            <summary>Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Copy(Cnc.Tool.Interop.TlMgr)">
            <summary>   Copies the given TlMgr. </summary>
            <param name="other">    The other tlMgr. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.#ctor(Cnc.Tool.Interop.TlMgr)">
            <summary> Copy Constructor.  Creates a copy tool manager. </summary>
            <param name="other"> The other tlMgr. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.#ctor">
            <summary> Default Constructor.  Creates a copy tool manager. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlMgr">
            <summary> Class to maintain a list of tool items.  Can be added to the database to store a file tool item list, or
		  can be kept unattached to function as a "local" tool item list. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RequiresToolLocator">
            <summary> Gets or sets whether the tool requires a tool locator </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MachineSideConnectionType">
            <summary> Gets or sets the machine side connection type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.HolderDirection">
            <summary> Gets or sets the holder direction. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.CannedTxtCoolant">
            <summary> Canned Text Coolant </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RetractForce">
            <summary> Retract Force </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RetractOutput">
            <summary> Retract Output </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RetractType">
            <summary> Retract Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RetractSelect">
            <summary> Retract Select </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ApproachForce">
            <summary> Approach Force </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ApproachOutput">
            <summary> Approach Output </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ApproachType">
            <summary> Approach Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ApproachSelect">
            <summary> Approach Select </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SpindleSpeed">
            <summary> Spindle Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SlowFeedRateType">
            <summary> Slow Feed Rate type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetSlowFeedRate(System.Double,System.Boolean)">
            <summary> Sets SlowFeedRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetSlowFeedRate(System.Boolean)">
            <summary> Gets SlowFeedRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheSlowFeedRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SlowFeedRate">
            <summary> Slow Feed Rate </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.FastFeedRateType">
            <summary> Fast Feed Rate Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetFastFeedRate(System.Double,System.Boolean)">
            <summary> Sets FastFeedRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetFastFeedRate(System.Boolean)">
            <summary> Gets FastFeedRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFastFeedRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.FastFeedRate">
            <summary> Fast Feed Rate </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.CoolantStatus">
            <summary> Coolant Status </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetToolHeight(System.Double,System.Boolean)">
            <summary> Sets ToolHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetToolHeight(System.Boolean)">
            <summary> Gets ToolHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheToolHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolHeight">
            <summary> Tool Height </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetToolWidth(System.Double,System.Boolean)">
            <summary> Sets ToolWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetToolWidth(System.Boolean)">
            <summary> Gets ToolWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheToolWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolWidth">
            <summary> Tool Width </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolRakeAngle">
            <summary> Tool Rake Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolClearanceAngle">
            <summary> Tool Clearance Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.PercentMaterialCSS">
            <summary> Percentage Material CSS </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.PercentMaterialFeed">
            <summary> Percentage Material Feed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.TurretAngle">
            <summary> Turret Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetToolCenterY(System.Double,System.Boolean)">
            <summary> Sets ToolCenterY property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetToolCenterY(System.Boolean)">
            <summary> Gets ToolCenterY property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheToolCenterY property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolCenterY">
            <summary> Tool Center Y Coordinate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetToolCenterX(System.Double,System.Boolean)">
            <summary> Sets ToolCenterX property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetToolCenterX(System.Boolean)">
            <summary> Gets ToolCenterX property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheToolCenterX property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolCenterX">
            <summary> Tool Center X Coordinate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetHomePositionY(System.Double,System.Boolean)">
            <summary> Sets HomePositionY property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetHomePositionY(System.Boolean)">
            <summary> Gets HomePositionY property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHomePositionY property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.HomePositionY">
            <summary> Home Position Y Coordinate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetHomePositionX(System.Double,System.Boolean)">
            <summary> Sets HomePositionX property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetHomePositionX(System.Boolean)">
            <summary> Gets HomePositionX property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHomePositionX property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.HomePositionX">
            <summary> Home Position X Coordinate </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolBackOffsetNum">
            <summary> Tool Back Offset Number </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolOffsetNum">
            <summary> Tool Offset Number </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.CompType">
            <summary> Component Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ActiveTurret">
            <summary> Active Turret </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ActiveSpindle">
            <summary> Active Spindle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SpindleDirection">
            <summary> Spindle Direction </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SpindleSpeedCSS">
            <summary> Spindle Speed CSS </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.IsToolInverted">
            <summary> Inverted Tool Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SelectionFlag">
            <summary> Selection Flag </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.HasMainHolder">
            <summary> Tests if MainHolder reference property is set. </summary>
            <returns> true if MainHolder is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MainHolder">
            <summary> Gets or sets the main holder of this lathe tool assembly. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.HasMainInsert">
            <summary> Tests if MainInsert reference property is set. </summary>
            <returns> true if MainInsert is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MainInsert">
            <summary> Gets or sets the main insert of this lathe tool assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MainHolderID">
            <summary> Main Holder Identifier </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MainInsertID">
            <summary> Main Insert Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.op_Assign(Cnc.Tool.Interop.TlToolLathe!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.CopyFrom(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.#ctor(Cnc.Tool.Interop.TlToolLathe!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.CompareLatheTools(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two old lathe tools, compare them to find if they are equal. </summary>
            <param name="left">  The first lathe tool. </param>
            <param name="right"> The second lathe tool. </param>
            <returns> true if the lathe tools are equal. </returns>
        </member>
        <member name="M:Cnc.Tool.CompareInserts(Cnc.Tool.INSERT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.INSERT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two old inserts, compare them to find if they are equal. </summary>
            <param name="left">  The first insert. </param>
            <param name="right"> The second insert. </param>
            <returns> true if the inserts are equal. </returns>
        </member>
        <member name="M:Cnc.Tool.CompareHolders(Cnc.Tool.LHOLDER!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.LHOLDER!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two old holders, compare them to find if they are equal. </summary>
            <param name="left">  The first holder. </param>
            <param name="right"> The second holder. </param>
            <returns> true if the holders are equal. </returns>
        </member>
        <member name="M:Cnc.Tool.EqWithinTol(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two double, returns true if they are equal within tolerance. </summary>
            <param name="first">  The first double to compare. </param>
            <param name="second"> The double to compare against "first". </param>
            <returns> true if the attributes match within tol, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.GetTlMgr">
            <summary> Gets tl manager. </summary>
            <returns> The tl manager. </returns>
        </member>
        <member name="M:Cnc.Tool.GetToolDataImporterManager">
            <summary> Gets a pointer to the tool data importer manager. </summary>
            <returns> The tool data importer manager. </returns>
        </member>
        <member name="M:Cnc.Tool.GetTlAssemblyFactory">
            <summary> Gets a pointer to the assembly factory. </summary>
            <returns> The tool assembly factory. </returns>
        </member>
        <member name="M:Cnc.Tool.GetTlAssemblyItemFactory">
            <summary> Gets a pointer to the assembly item factory. </summary>
            <returns> The tool assembly item factory. </returns>
        </member>
        <member name="M:Cnc.Tool.GetToolSystem">
            <summary> Gets a pointer to the global tool system. </summary>
            <returns> The tool system. </returns>
        </member>
        <member name="D:Cnc.Tool.IToolDataImporterManagerUPtr">
            <summary> Defines an alias representing zero-based index of the tool data importer manager pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.ImportSilently(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Import tool data using the importer at the specified identifier.  All user interfaces will be suppressed
		  and the provided path will be given to the importer to allow for silent execution. </summary>
            <param name="importerIndex">  Identifier of the importer to use for this operation. </param>
            <param name="resultMgr">	  Manager that result data should be injected into. </param>
            <param name="importFilePath"> Full pathname of the file to import from. </param>
            <param name="logPath">		  Full pathname of the file to log results to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.Import(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Import tool data. Any user interface will be provided by the importer at the specified index should it
		  supply one. If it does not supply a user interface, a Mastercam interface will be used instead. </summary>
            <param name="importerId"> Identifier of the importer to use for this operation. </param>
            <param name="resultMgr">  Manager that result data should be injected into. </param>
            <param name="pParent">    (Optional) handle of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.GetImporterNames">
            <summary> Retrieves names of the current set of available importers. </summary>
            <returns> The names and identifiers of the available importers. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.GetImporterCount">
            <summary> Gets a count of the importers stored within this importer manager. </summary>
            <returns> The importer count. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.RemoveImporter(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Removes the importer described by the indentifier from the current set of available importers. </summary>
            <param name="importerId"> The identifier. </param>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.AddImporter(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.IToolDataImporter!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds an importer identified by 'importerId' to the list of importers. </summary>
            <param name="importerId">	Identifier for the importer. </param>
            <param name="spImporter">  	The importer. </param>
            <returns>	true if the importer was added, false if it was not. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.AddImporter(std.shared_ptr&lt;Cnc.Tool.IToolDataImporter!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds an importer to the list of importers. </summary>
            <param name="importer"> The importer. </param>
            <returns> The index of the newly added importer to be used for future access. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolDataImporterManager">
            <summary> Manager for tool data importers. </summary>
        </member>
        <member name="D:Cnc.Tool.IToolDataImporterCPtr">
            <summary> Defines an alias representing a constant zero-based index of the tool data importer pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.Import(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.IToolDataImportLogger&gt;,System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,CWnd*)">
            <summary> Imports tool data into the provided TlMgr. </summary>
            <param name="mgr">	    The storage container to put all imported data. </param>
            <param name="spLogger"> The logger service to log any result messages. </param>
            <param name="path">	    (Optional) Full pathname of the file. </param>
            <param name="silent">   (Optional) false to warn the user on warnings/errors during the import process. </param>
            <param name="pParent">  (Optional) If non-null, the parent window. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.ProvidesUI">
            <summary> Queries the importer on whether or not it will provide a interface for the user.  If an interface is not
		  provided, and an interface is desired, a value of 'false' should be returned. Mastercam will supply
		  an interface in this case when one is supported. </summary>
            <returns> True to put the responsibility for any user interaction within this importer. False to let Mastercam
		  handle the user interface responsibility. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.GetImportFileTypes">
            <summary> Retrieves a set of possible file types that can be imported by this importer. </summary>
            <returns> The import file types. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.GetName">
            <summary> Retrieves the localized name of this tool data importer. </summary>
            <returns> The name. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolDataImporter">
            <summary> The IToolDataImporter interface. </summary>
        </member>
        <member name="D:Cnc.Tool.IToolDataImportLoggerPtr">
            <summary> Defines an alias representing zero-based index of the tool data import logger pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.GetMessages">
            <summary> Gets the messages. </summary>
            <returns> The messages. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.SaveLogToDisk(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves the log to disk. </summary>
            <param name="path"> I/O Full pathname of the file. </param>
            <returns> True if the log was successfully saved to disk. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.Log(System.UInt32,HINSTANCE__*,Cnc.Tool.MessageType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Logs a message. </summary>
            <param name="resourceId">	  The Resource Identifier of the message to log. </param>
            <param name="resourceHandle"> Handle of the resource. </param>
            <param name="messageType">    (Optional) type of the message. </param>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.Log(System.Char!System.Runtime.CompilerServices.IsConst*,Cnc.Tool.MessageType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Logs a message. </summary>
            <param name="message">	   The message. </param>
            <param name="messageType"> (Optional) type of the message. </param>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.ClearAllMessages">
            <summary> Clears all messages. </summary>
        </member>
        <member name="T:Cnc.Tool.IToolDataImportLogger">
            <summary> A tool data import logger. </summary>
        </member>
        <member name="T:Cnc.Tool.MessageType">
            <summary> Values that represent the type of message. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateITlAssemblyItemFactory">
            <summary>	Creates a new new instance of the ITlAssemblyItemFactory interface. </summary>
            <returns>	The new ITlAssemblyItemFactory instance. </returns>
        </member>
        <member name="D:Cnc.Tool.ITlAssemblyItemFactoryUPtr">
            <summary> Defines an alias representing zero-based index of the tl assembly item factory pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateTurnHolder(System.Boolean)">
            <summary>	Creates a turn holder. </summary>
            <param name="metric">	True if metric. </param>
            <returns>	The new turn holder. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateThreadingInsert(System.Int32,System.Int32,System.Boolean)">
            <summary>	Creates threading insert. </summary>
            <param name="insertStyle">	The insert style. </param>
            <param name="threadType"> 	Type of the thread. </param>
            <param name="metric">	  	True for the created insert to have metric values. </param>
            <returns>	The new threading insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateGroovingInsert(System.Char,System.Boolean)">
            <summary>	Creates a grooving insert using the passed in style and metric flag. </summary>
            <param name="style"> 	The style. </param>
            <param name="metric">	True for the created insert to have metric values. </param>
            <returns>	The new grooving insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateTurnInsert(System.Char,System.Boolean)">
            <summary>	Creates a turning boring insert using the passed in shape code and metric flag. </summary>
            <param name="shapeCode">	The shape code. </param>
            <param name="metric">   	True for the created insert to have metric values. </param>
            <returns>	The new turn insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateLatheTool(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a lathe tool using the values from the legacy tool. </summary>
            <param name="oldTool"> The old tool. </param>
            <returns> The new lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateMillHolder(System.Boolean)">
            <summary> Creates a mill holder based on the input metric flag. </summary>
            <param name="metric"> True for the created holder to have metric values. </param>
            <returns> The new mill holder. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateMillTool(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a mill tool using the values from the legacy tool. </summary>
            <param name="oldTool"> The old tool. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateMillTool(MCToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Creates a mill tool using the passed in type and metric flag. </summary>
            <param name="type">   The type. </param>
            <param name="metric"> true for the created mill tool to have metric values. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="T:Cnc.Tool.ITlAssemblyItemFactory">
            <summary> Factory service class providing functionality for creating instances of the classes TlToolMill, TlHolder,
		  and TlToolLathe. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateITlAssemblyFactory">
            <summary>	Creates a new new instance of the ITlAssemblyFactory interface. </summary>
            <returns>	The new ITlAssemblyFactory instance. </returns>
        </member>
        <member name="D:Cnc.Tool.ITlAssemblyFactoryUPtr">
            <summary> Defines an alias representing zero-based index of the tl assembly factory pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new TlAssemblyPtr from the parameters in the specified operation. </summary>
            <param name="op"> The operation. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new TlAssemblyPtr from the old tool. </summary>
            <param name="oldTool"> The old tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new TlAssemblyPtr from the given tool. </summary>
            <param name="spTool"> The tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(MCToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Creates a new TlAssemblyPtr based on the tool type and metric flag. </summary>
            <param name="toolType"> Type of the tool. </param>
            <param name="isMetric"> true if this object is metric. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="T:Cnc.Tool.ITlAssemblyFactory">
            <summary> Factory service class providing functionality for creating instances of class TlAssembly. </summary>
        </member>
        <member name="D:Cnc.Tool.IToolSystemUPtr">
            <summary> Defines an alias representing zero-based index of the tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.IsEmpty">
            <summary> Query if the main part tool list is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary> Assigns the specified lathe tool to the provided operation. </summary>
            <param name="spInput">		 The lathe tool to be assigned. </param>
            <param name="result">		 The operation to have tool information assigned to it. </param>
            <param name="setOffsets">    Flag specifying how to initialize the operation tool offsets. 0 - from the tool, 1 -
							 from the configuration. </param>
            <param name="setStation">    true to initialize the operation tool station. </param>
            <param name="setSteps">		 true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed"> Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece material,
							 1 - From the tool, 2 - From defaults. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assigns the specified tool holder to the provided operation. </summary>
            <param name="spInput"> The tool holder to be assigned. </param>
            <param name="result">  The operation to have tool holder information assigned to it. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool to the provided operation. </summary>
            <param name="spInput">			   The tool to be assigned. </param>
            <param name="result">			   The operation to have tool assembly information assigned to it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool assembly to the provided operation. </summary>
            <param name="spInput">			   The tool assembly to be assigned. </param>
            <param name="result">			   The operation to have tool assembly information assigned to it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.LaunchManager(System.Boolean,CWnd*)">
            <summary> Launches the Classic Tool Manager Dialog. </summary>
            <param name="launchLathe"> True to launch the lathe tool manager.  False to launch the mill tool manager. </param>
            <param name="pParent">     (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromLibrary(std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Double,CWnd*)">
            <summary> Prompts the user to select a cutting parameter from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. IsoGroup and
		  ToolDiameter parameters exist to provide initial filtering functionality. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="isoGroup"> ISO group that the current workpiece material belongs to. </param>
            <param name="toolDia">  The diameter of the current tool being used. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a cutting parameter was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromLibrary(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a lathe tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromLibrary(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromPart(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a lathe tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromPart(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssemblyProjections(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the GAF Projection editing feature to edit the projections of the assembly provided at the input parameter "spResult".
		  If the assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="pParent">    (Optional) If non-null, the parent dialog to suspend. </param>
            <returns> true if the assembly has changed, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssemblyHolder(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32,CWnd*)">
            <summary> Launches the holder wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the holder is successfully edited, and the input parameter "updatePart" is set to true, the holder
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		  The result. </param>
            <param name="updatePart">	  true to update part. </param>
            <param name="compositeIndex"> (Optional) If the holder is a composite holder, the index of the holder to edit. </param>
            <param name="pParent">		  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssemblyTool(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,CWnd*)">
            <summary> Launches the tool wizard to edit the tool of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		   The result. </param>
            <param name="updatePart">	   true to update part. </param>
            <param name="startOnLastPage"> (Optional) true to start on the last page (properties page) of the wizard. </param>
            <param name="readOnly">        (Optional) true to present the editor in read-only mode. </param>
            <param name="pParent">		   (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the edit assembly dialog to edit the assembly provided at the input parameter "spResult". If the
		  assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="pParent">    (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the edit lathe tool dialog to edit the assembly provided at the input parameter "spResult". If
		  the lathe tool is successfully edited, and the input parameter "updatePart" is set to true, the lathe
		  tool will be updated in the Mastercam part tool list. </summary>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="pParent">    (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the edit holder wizard to allow users to modify existing holders. The result of the edit holder
		  wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="readOnly"> (Optional) true to present the editor in read-only mode. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,CWnd*)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		   The result. </param>
            <param name="startOnLastPage"> (Optional) true to start on the last page (properites page) of the wizard. </param>
            <param name="readOnly">		   (Optional) true to present the editor in read-only mode. </param>
            <param name="pParent">		   (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,CWnd*)">
            <summary> Launches the create lathe tool dialog to allow users to create their desired tools. The result of the
		  create lathe tool dialog, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		  The result. </param>
            <param name="machineGroupId"> Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <param name="pParent">		  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create(std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Launches the create new holder wizard to allow users to create their desired holders. The result of the
		  create new holder wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,CWnd*)">
            <summary> Launches the create new tool wizard to allow users to create their desired tools. The result of the
		  create new tool wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">    The result. </param>
            <param name="initialType"> (Optional) The initial tool type. </param>
            <param name="pParent">	   (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.DeleteAll">
            <summary> Deletes all lathe tools and mill assemblies from the main part tool list. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.DeleteLathe(System.Int32)">
            <summary> Deletes a lathe tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot"> The slot number of the tool to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.DeleteMill(System.Int32,System.Boolean,System.Boolean,CWnd*)">
            <summary> Deletes a mill tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot">         The slot number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="pParent">      (Optional) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Delete(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,CWnd*)">
            <summary> Deletes an item from the main part tool list with identification information matching the input parameter
          "id". </summary>
            <param name="id">           The identification number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="pParent">      (Optional) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Update(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Update(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.GetLatheTools">
            <summary> Constructs a list of all items of type TlToolLathe from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolLathe. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.GetAssemblies">
            <summary> Constructs a list of all items of type TlAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(System.Int32,std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(System.Int32,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item.  This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AddToMachineGroup(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AddToMachineGroup(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolSystem">
            <summary> Interface into the main Mastercam tool system. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMgr.TlMgrDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.CheckStickoutsAreLessThanPhysicalLength">
            <summary> Pass through check that stickouts are safe and not putting tools in midair, throws debug only asserts. </summary>
            <returns> stickout are safe? </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.PrepareObjectsForStoring">
            <summary> Prepares objects for storing. </summary>
            <returns> map of TlIds, TlObjects. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SetupAssemblies">
            <summary> Similar to FixObjects but to only be called to setup assembly relationships from old TlMgr's. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FixSlicedMillTools">
            <summary> Fix Sliced Tools from old files. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FixAssemblies">
            <summary> Fix assemblies. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FixObjects">
            <summary> Fix objects. </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_CorruptedAssemblies">
            <summary> A vector of all Assemblies that need to have their operations updated due to the
issue of multiple assemblies per tool bad bad relationship </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_ToolObjects">
            <summary> The base map that stores the objects, indexed by the TlID of
the object. </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_LatheSlotToID">
            <summary> A map which stores which slot number goes with which TlID
Used to support quick looked in the parts of Mastercam which
still depend on slot number </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_SlotToID">
            <summary> A map which stores which slot number goes with which TlID
Used to support quick looked in the parts of Mastercam which
still depend on slot number </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_AssemblyToMachineGroup">
            <summary> A map that stores which TlID goes with which machine
group number.  This map will only contain assemblies that belong
to a machine group </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetEntType">
            <summary> Gets the ent type. </summary>
            <returns> The ent type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlMgr.DeleteAll">
            <summary> Removes all the items and deletes all the memory used by those items. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLatheTools">
            <summary> Gets lathe tools. </summary>
            <returns> The lathe tools. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetAssemblies">
            <summary> Gets the assemblies. </summary>
            <returns> The assemblies. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetAll">
            <summary>	Gets all tool class objects in this manager. </summary>
            <returns>	All objects. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLiveCenterIDs">
            <summary> Returns all the live center component IDs in the manager. </summary>
            <returns> A list of IDs of all the live center components in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetToolTypeIDs">
            <summary> Returns all the tool type IDs in the manager. </summary>
            <returns> A list of IDs of all the tool type in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetToolGroupIDs">
            <summary> Returns all the tool group IDs in the manager. </summary>
            <returns> A list of IDs of all the tool group in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetCutParamIDs">
            <summary> Returns all the cut params IDs in the manager. </summary>
            <returns> A list of IDs of all the cut params in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetOpTypeIDs">
            <summary> Returns all the op type IDs in the manager. </summary>
            <returns> A list of IDs of all the op types in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetOpGroupIDs">
            <summary> Returns all the op group IDs in the manager. </summary>
            <returns> A list of IDs of all the op groups in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetWorkMaterialIDs">
            <summary> Returns all the work material IDs in the manager. </summary>
            <returns> A list of IDs of all the work materials in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetHolderIDs">
            <summary> Returns all the holder IDs in the manager. </summary>
            <returns> A list of IDs of all the holders in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLatheToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetAssemblyIDs">
            <summary> Returns all the assembly IDs in the manager. </summary>
            <returns> A list of IDs of all the assemblies in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetIDs">
            <summary> Returns all the IDs in the manager. </summary>
            <returns> A list of IDs of all the objects in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsLatheTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a lathe tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a lathe tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsWorkMaterial(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a work material, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a work material, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsHolder(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a holder, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a holder, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsAssembly(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is an assembly, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies and assembly, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.RetrieveCorruptedAssemblyList">
            <summary> Retrieves the corrupted assembly list. </summary>
            <returns> List of corrupted TlIds. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.LatheSlotByID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the lathe tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.LatheIDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Find the lathe tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> Tlid of the lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SlotByID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the mill tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Find the mill tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> the corresponding TlID. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.CopyObjects(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID)">
            <summary> Copies an object from the other manager into this one. IF that object is an assembly, also copies all
		  associated AssemblyItems. </summary>
            <param name="otherManager"> Manager for other. </param>
            <param name="id">		    The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.RetrieveLatheSlotMap">
            <summary> Maps slots for use by wrapper lists when trying to open a slot. </summary>
            <returns> map of slots. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.RetrieveSlotMap">
            <summary> Retrieves the slot map. </summary>
            <returns> map of slots. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SaveAsTooldb(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves the current TlMgr as a tooldb file of the current .tooldb version. </summary>
            <param name="destinationFile"> The file name a path for the output .tooldb file. </param>
            <returns> true if the file is converted and saved correclty. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Attempts to locate a similar assembly to the input parameter "similarAssembly". </summary>
            <param name="similarAssembly"> The similar assembly. </param>
            <param name="machineGroupId">  Identifier for the machine group. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(DUPTOOL_CHK!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a tool assembly matching the provided set of search parameters. </summary>
            <param name="searchSettings"> The search settings. </param>
            <param name="searchParams">   Options for controlling the search. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary>	Attempts to locate a tool assembly matching the provided set of search parameters. </summary>
            <param name="searchParams">			Options for controlling the search. </param>
            <param name="machineGroupId">   	Identifier for the machine group. </param>
            <param name="displayDupWarning">	(Optional) True to display duplicate tool warning. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(Cnc.Tool.TpToolSearchParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a tool assembly matching the provided set of search parameters. </summary>
            <param name="searchParams"> Options for controlling the search. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot"> The slot. </param>
            <param name="tool"> The tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot">	    The slot. </param>
            <param name="assembly"> [out] The assembly. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Update(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Updates an item in the tool manager.  The item must be a TlObject.  The ID of the item is used to
		  determine what item to update. </summary>
            <typeparam name="TYPE"> Type of the type. </typeparam>
            <param name="item"> The item to update.  The updated item is assigned to the old item. </param>
            <param name="add">  (Optional)
					If this parameter is true, then the function will update an existing item if one exists, or
					add if it does not.  If the parameter is false, then this function returns false if the item
					provided already exists in the manager. </param>
            <returns> true if the item is updated, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Update(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Updates an item in the tool manager.  The item must be a TlObject.  The ID of the item is used to
		  determine what item to update. </summary>
            <typeparam name="TYPE"> Type of the type. </typeparam>
            <param name="item"> The item to update.  The updated item is assigned to the old item. </param>
            <param name="add">  (Optional)
					If this parameter is true, then the function will update an existing item if one exists, or
					add if it does not.  If the parameter is false, then this function returns false if the item
					provided already exists in the manager. </param>
            <returns> true if the item is updated, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Add(std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Adds an item to the tool manager.  The item must be a TlObject. This is a templated function which
		  determines its type based on the type of the first parameter.  This function will create a new object
		  copied from the item parameter and store that copy. </summary>
            <typeparam name="TYPE"> Type of the type. </typeparam>
            <param name="item">			  The item to add to the list.  A copy of the item will be created and added to the
							  list, not the parameter itself. </param>
            <param name="updateExisting"> (Optional)
							  If this parameter is true, then the function will update an existing item if one
							  exists, or add if it does not.  If the parameter is false, then this function
							  returns false if the item provided already exists in the manager. </param>
            <returns> true if the item is added, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Add(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Adds an item to the tool manager.  The item must be a TlObject. This is a templated function which
		  determines its type based on the type of the first parameter.  This function will create a new object
		  copied from the item parameter and store that copy. </summary>
            <typeparam name="TYPE"> Type of the type. </typeparam>
            <param name="item">			  The item to add to the list.  A copy of the item will be created and added to the
							  list, not the parameter itself. </param>
            <param name="updateExisting"> (Optional)
							  If this parameter is true, then the function will update an existing item if one
							  exists, or add if it does not.  If the parameter is false, then this function
							  returns false if the item provided already exists in the manager. </param>
            <returns> true if the item is added, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Delete(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Deletes ALL tool records that contain the provided slot. </summary>
            <param name="slot"> The id of the tool to look for. </param>
            <param name="mill"> Flag indicating whether to remove the Mill tool associated at the provided slot, or the Lathe
					tool associated at the provided slot. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Delete(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given ID. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.DoesObjectExist(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determines if the specified item exists in this tool manager. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if the item exists, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Size">
            <summary> Returns the number of items stored in the manager. </summary>
            <returns> The number of items stored in the tool manager. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.op_Equality(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.op_Assign(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.op_Assign(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Dispose">
            <summary>   Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Copy(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Copies the given TlMgr. </summary>
            <param name="other">    The other tlMgr. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.#ctor(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlMgr.#ctor(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy Constructor.  Creates a copy tool manager. </summary>
            <param name="other"> The other tlMgr. </param>
        </member>
        <member name="T:Cnc.Tool.TlMgr.DefaultSlotValidator">
            <summary>	A default slot validator. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLathe.TlToolLatheDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolLathe.m_HolderPoints">
            <summary>	The holder points array. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolLathe.m_InsertPoints">
            <summary>	The insert points array. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.#ctor">
            <summary>Default constructor.  Creates an empty tool.</summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLathe.TlHolderLatheDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlInsert.TlInsertDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoIsCuttingItem">
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsert.GetDefaultCuttingSide">
            <summary>	Gets default cutting side. </summary>
            <returns>	The default cutting side. </returns>
        </member>
        <member name="D:Cnc.Tool.tp_tool_ptr">
            <summary>	Defines an alias representing the TP tool pointer. </summary>
        </member>
        <member name="D:Cnc.Tool.LATHETOOL_PTR">
            <summary>	Defines an alias representing the lathetool pointer. </summary>
        </member>
        <member name="M:ClassEnt.GetEntType">
            <summary> Gets the assoc_id representing the ClassEnt type (i.e. OP_ID). </summary>
            <returns> The assoc_id representing the ClassEnt type. </returns>
        </member>
        <member name="M:ClassEnt.AddDerivedClass(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;*(void)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a derived class. </summary>
            <param name="entID">   Identifier for the ent. </param>
            <param name="assocID"> Identifier for the associated. </param>
            <param name="func">    The function. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.AddDefaultClass(std.function&lt;*(void)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds/Sets the default constructor to the ClassEnt class factory. </summary>
            <remarks> If an unknown ClassEnt type is encountered while deserialization, this constructor will be invoked to contain the unknown typed entity. </remarks>
            <param name="func"> The default constructor function. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.CreateFromFile(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary> Creates the ClassEnt object instance and deserializes it from the file. </summary>
            <param name="file">   The file to read from. </param>
            <param name="entity"> The entity. </param>
            <param name="bytes">  The bytes. </param>
            <returns> null if it fails, else the new from file. </returns>
        </member>
        <member name="M:ClassEnt.GetXMLVersion">
            <summary> Get Version (used in XML serialization). </summary>
            <returns> the version </returns>
        </member>
        <member name="M:ClassEnt.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Writes/Serializes the entity from a given archive. </summary>
            <param name="archive"> The archive to write to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.Deserialize(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Reads/Deserializes entity from the given file. </summary>
            <param name="file">			The file to read from. </param>
            <param name="bytesToRead">	Size of the block in bytes containing the entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.Serialize(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Writes/Serializes entity to the given file. </summary>
            <param name="file"> The file to write to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.GetBufferSize">
            <summary> Gets buffer size. </summary>
            <remarks> the buffer size is the memory footprint that the entity takes in the serialized form. </remarks>
            <returns> The buffer size. </returns>
        </member>
        <member name="M:ClassEnt.GetIDN">
            <summary> Gets the ent_idn of the Mastercam entity that is represented by this instance. </summary>
            <returns> The Mastercam entity ent_idn value. </returns>
        </member>
        <member name="M:ClassEnt.DetachFromDB">
            <summary> Determines if we can detach from database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.DetachFromDB(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Detach from database. </summary>
            <param name="entIDN"> The ent idn. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.DetachFromDB(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Detach from database. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.AttachToDB(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attach to database. </summary>
            <param name="entity"> The entity. </param>
            <returns> A long. </returns>
        </member>
        <member name="M:ClassEnt.AttachToDB">
            <summary> Attach to database. </summary>
            <returns> A long. </returns>
        </member>
        <member name="M:ClassEnt.Dispose">
            <summary> Finalizes an instance of the ClassEnt class. </summary>
        </member>
        <member name="M:ClassEnt.#ctor">
            <summary> Initializes a new instance of the ClassEnt class. </summary>
        </member>
        <member name="T:ClassEnt">
            <summary> Base class providing a more object oriented approach to Mastercam entities. </summary>
        </member>
        <member name="M:Cnc.Tool.HolderCompare(tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two holders, returns two if they are identical,
		  false otherwise.</summary>
            <param name="holderA">A reference to the first holder</param>
            <param name="holderB">A reference to the second holder</param>
        </member>
        <member name="M:Cnc.Tool.HolderUpdateData(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given new data to store in the holder, attaches all the data
	      and setups up the holder correctly </summary>
            <param name="holderIDN"> The IDN of the holder to modify </param>
            <param name="source">    Source for the holder data. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderUpdateData(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given new data to store in the holder, attaches all the data
		 and setups up the holder correctly</summary>
            <param name="holderIDN">The IDN of the holder to modify</param>
            <param name="holderData">Pointer to the segment data for the holder</param>
            <param name="holderDataSize">The total size of holderData.</param>
            <param name="libraryName">Pointer to the library name.</param>
            <param name="libraryNameSize">The number of characters in the library name.</param>
            <param name="holderName">Pointer to the holder name.</param>
            <param name="holderNameSize">The number of characters in the holder name.</param>
        </member>
        <member name="M:Cnc.Tool.HolderUpdateData(tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given new data to store in the holder, attaches all the data
		 and setups up the holder correctly</summary>
            <param name="holder">The holder to modify</param>
            <param name="holderData">Pointer to the segment data for the holder</param>
            <param name="holderDataSize">The total size of holderData.</param>
            <param name="libraryName">Pointer to the library name.</param>
            <param name="libraryNameSize">The number of characters in the library name.</param>
            <param name="holderName">Pointer to the holder name.</param>
            <param name="holderNameSize">The number of characters in the holder name.</param>
        </member>
        <member name="M:Cnc.Tool.HolderExists(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given an ent_idn, returns true if the holder exists, false 
		 otherwise</summary>
            <returns>true is the holder exists, false otherwise</returns>
        </member>
        <member name="M:Cnc.Tool.HolderGetHolder(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given a ent_idn, retrieves the tp_holder for this holder</summary>

For more details on the holder profile (holder data), read information at the top of 
TlHolder_CH.h (in particular about holderEntity.u.holder.holder_ptr_numsegs and 
triplets at holderEntity.u.holder.holder_ptr)
<returns>true if a matching holder entity was found, false otherwise</returns></member>
        <member name="M:Cnc.Tool.HolderGetEnt(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given a ent_idn, retrieves the entity for this holder</summary>

For more details on the holder profile (holder data), read information at the top of 
TlHolder_CH.h (in particular about holderEntity.u.holder.holder_ptr_numsegs and 
triplets at holderEntity.u.holder.holder_ptr)
<returns>true if a matching holder entity was found, false otherwise</returns></member>
        <member name="M:Cnc.Tool.HolderCreateEnt(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new holder entity and stores it in the database. </summary>
            <param name="source"> Source for the holder data. </param>
            <returns> The ent_idn of the newly-created holder. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderCreateEnt">
            <summary>Creates a new holder entity and stores it in the database.</summary>
            <returns>The ent_idn of the newly-created holder.</returns>
        </member>
        <member name="M:Cnc.Tool.HolderCreateEnt(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder entity and stores it in the database.</summary>
            <param name="holder_lib">The library name to initialize this holder with.</param>
            <param name="holder_lib_size">The length of the holder_lib string.</param>
            <param name="holder_name">The name of the holder.</param>
            <param name="holder_name_size">The length of the holder_name string.</param>
            <returns>The ent_idn of the newly-created holder.</returns>
        </member>
        <member name="M:Cnc.Tool.HolderLoadFromFile(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads the holder with the given ent_idn from a file.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to retrieve.</param>
            <param name="filename">The name of the file to get the holder from.</param>
            <param name="updatedIDN">The updated ent_idn of the holder.</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetSegmentCount(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the number of segements for the holder and creates the needed
		 memory to store the segments.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="segmentCount">The number of segments this holder has.</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetHolderName(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the holder name for the holder.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="holderName">The new holder name as a CString.</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetHolderName(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the holder name for the holder.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="libraryName">A pointer to the buffer holding the new holder name</param>
            <param name="holderNameLength">The number of characters in the holder name</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetLibraryName(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the holder name for the holder.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="libraryName">The library name as a CString</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetLibraryName(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the library name for the holder.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="libraryName">A pointer to the buffer holding the new library 
						name</param>
            <param name="libraryNameLength">The number of characters in the library name</param>
        </member>
        <member name="M:Cnc.Tool.HolderCopyHolderTemp(tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder with COPIES of the old holder data.  Does not
		 place holder entity into the part file.</summary>
            <param name="dstHolder">The destination holder.</param>
            <param name="srcIDN">The IDN of the holder to copy.</param>
        </member>
        <member name="M:Cnc.Tool.HolderCopyHolderTemp(tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder with COPIES of the old holder data.  Does not
		place holder entity into the part file.</summary>
            <param name="dstHolder">The destination holder.</param>
            <param name="srcHolder">The source holder.</param>
        </member>
        <member name="M:Cnc.Tool.HolderCopyHolder(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder with COPIES of the old holder data.</summary>
            <param name="holderIDN">The IDN of the holder to copy.</param>
        </member>
        <member name="M:Cnc.Tool.HolderCopyHolder(tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder with COPIES of the old holder data.</summary>
            <param name="holder">The holder to copy.</param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.StepoverFinishZ">
            <summary> Stepover Finish Z </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.StepoverFinishXY">
            <summary> Stepover Finish XY </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.StepoverRoughZ">
            <summary> Stepover Rough Z </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.StepoverRoughXY">
            <summary> Stepover Rough XY </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.IsFinishTool">
            <summary> Finish Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.IsRoughTool">
            <summary> Rough Flag </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.op_Assign(Cnc.Tool.Interop.TlMillingOpParams!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.CopyFrom(Cnc.Tool.Interop.TlMillingOpParams)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.#ctor(Cnc.Tool.Interop.TlMillingOpParams!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.HasCoolant">
            <summary> Tests if Coolant reference property is set. </summary>
            <returns> true if Coolant is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.Coolant">
            <summary> Gets or sets the tool coolant parameters. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.SetPlungeRate(System.Double,System.Boolean)">
            <summary> Sets PlungeRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.GetPlungeRate(System.Boolean)">
            <summary> Gets PlungeRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePlungeRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.PlungeRate">
            <summary> Plunge Rate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.SetRetractRate(System.Double,System.Boolean)">
            <summary> Sets RetractRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.GetRetractRate(System.Boolean)">
            <summary> Gets RetractRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRetractRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.RetractRate">
            <summary> Retract Rate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.SetFeedRate(System.Double,System.Boolean)">
            <summary> Sets FeedRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.GetFeedRate(System.Boolean)">
            <summary> Gets FeedRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFeedRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.FeedRate">
            <summary> Feed Rate </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.IsMetric">
            <summary> Metric Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.SpindleSpeed">
            <summary> Spindle Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.MaterialFPTAdjust">
            <summary> Material FPT Adjust </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.MaterialSFMAdjust">
            <summary> Material SFM Adjust </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.op_Assign(Cnc.Tool.Interop.TlOpParams!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.CopyFrom(Cnc.Tool.Interop.TlOpParams)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.#ctor(Cnc.Tool.Interop.TlOpParams!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.LinearizeArc(a_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Turns an arc into a set of lines </summary>
            <param name="arc"> arc to linearize. </param>
            <returns> a set of lines </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Normalize">
            <summary>	Normalizes the arc to avoid bizarre construction.  Should be called whenever arc is set </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetYValueIntersectionAngles(System.Double)">
            <summary> Get y coordinate value intersection angles. </summary>
            <param name="yValue"> The value. </param>
            <returns> The y coordinate value intersection angles. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetXValueIntersectionAngles(System.Double)">
            <summary> Get x coordinate value intersection angles. </summary>
            <param name="yValue"> The value. </param>
            <returns> The x coordinate value intersection angles. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetPointAtAngle(System.Double)">
            <summary> Gets the point at the specified angle. </summary>
            <param name="theta"> The angle. </param>
            <returns> The point at the specified angle on the arc. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.SweepsTo">
            <summary>	Determines the angle to which the arc sweeps </summary>
            <returns>	Final angle of sweep in radians </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.DoTrimAtXValue(System.Double,System.Boolean)">
            <summary> Executes the trim at x coordinate value operation. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.DoTrimAtYValue(System.Double,System.Boolean)">
            <summary> Executes the trim at y coordinate value operation. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.DoIsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.SetToOldSegment(TlProfileEnt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.SetToOldSegment(prof_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Transforms the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.ValidateQuadrant">
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Reverse">
            <summary> Reverses the segment. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetMaxWidth">
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetTopWidth">
            <summary> Gets top width using just the endpoints of the arc. </summary>
            <returns> The top width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetBottomWidth">
            <summary> Gets bottom width using just the endpoints of the arc. </summary>
            <returns> The bottom width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetHeight">
            <summary>	Height of segment </summary>
            <returns>	said height </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetLength">
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.IsConvex">
            <summary> Query if this object is convex. </summary>
            <returns> true if convex, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.SweepsBetween270to90">
            <summary> Query if arc sweeps completely between 270 degrees to 90 degrees (inclusive). </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.IncludesAngle(System.Double)">
            <summary> Query if the angle 'theta' is included in this arc. </summary>
            <param name="theta"> The angle. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetEndpoint2">
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetEndpoint1">
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.MinY">
            <summary> Lowest point contained in segment </summary>
            <returns> Lowest point contained in segment </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.MinX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.MaxY">
            <summary> Highest point contained in segment </summary>
            <returns> Highest point contained in segment </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.MaxX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Linearize">
            <summary> Conversion function </summary>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized</returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.op_Assign(Cnc.Tool.TlProfileArcSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side of the assignment operation. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Byte)">
            <summary> Constructor. </summary>
            <param name="centerX">    The center x coordinate. </param>
            <param name="centerY">    The center y coordinate. </param>
            <param name="radius">	  The radius. </param>
            <param name="startAngle"> The start angle. </param>
            <param name="sweepAngle"> The sweep angle. </param>
            <param name="color">	  The color. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.#ctor(a_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
            <summary> Constructor. </summary>
            <param name="arc">   The segment. </param>
            <param name="color"> The color. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.#ctor(Cnc.Tool.TlProfileArcSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="other"> The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.DoTrimAtXValue(System.Double,System.Boolean)">
            <summary> Executes the trim at x coordinate value operation. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.DoTrimAtYValue(System.Double,System.Boolean)">
            <summary> Executes the trim at y coordinate value operation. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.DoIsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.SetToOldSegment(TlProfileEnt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.SetToOldSegment(prof_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Transforms the current segment by the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.ValidateQuadrant">
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.Reverse">
            <summary> Reverses the segment. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetMaxWidth">
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetTopWidth">
            <summary> Gets top width. </summary>
            <returns> The top width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetBottomWidth">
            <summary> Gets bottom width. </summary>
            <returns> The bottom width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetHeight">
            <summary>	Height of segment </summary>
            <returns>	said height </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetLength">
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetEndpoint2">
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetEndpoint1">
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.MinY">
            <summary> Lowest point contained in segment </summary>
            <returns> Lowest point contained in segment </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.MinX">
            <summary> Minimum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.MaxY">
            <summary> Highest point contained in segment </summary>
            <returns> Highest point contained in segment </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.MaxX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.Linearize">
            <summary> Conversion function. </summary>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Byte)">
            <summary> Constructor. </summary>
            <param name="endpoint1X"> The endpoint 1 x coordinate. </param>
            <param name="endpoint1Y"> The endpoint 1 y coordinate. </param>
            <param name="endpoint2X"> The endpoint 2 x coordinate. </param>
            <param name="endpoint2Y"> The endpoint 2 y coordinate. </param>
            <param name="color">	  The color. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.#ctor(l_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
            <summary> Constructor. </summary>
            <param name="line">  The segment. </param>
            <param name="color"> The color. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.a_2dMarshal(Cnc.Tool.Interop.TlProfileArcSegment.Arc2D)">
            <summary> Marshals managed TlProfileArcSegment::Arc2D type to native a_2d type. </summary>
            <param name="arc2D"> The arc of type Arc2D. </param>
            <returns> A arc of type a_2d. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.a_2dMarshal(a_2d)">
            <summary> Marshals native a_2d type to managed TlProfileArcSegment::Arc2D type. </summary>
            <param name="arc2D"> The arc of type a_2d. </param>
            <returns> A arc of type Arc2D. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.l_2dMarshal(Cnc.Tool.Interop.TlProfileLineSegment.Line2D)">
            <summary> Marshals managed TlProfileLineSegment::Line2d type to native l_2d type. </summary>
            <param name="line2D"> The line of type Line2D. </param>
            <returns> A line of type l_2d. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.l_2dMarshal(l_2d)">
            <summary> Marshals native l_2d type to managed TlProfileLineSegment::Line2d type. </summary>
            <param name="line2D"> The line of type l_2d. </param>
            <returns> A line of type Line2D. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.p_2dMarshal(Cnc.Tool.Interop.TlProfileSegment.Point2D)">
            <summary> Marshals managed TlProfileSegment::Point2D type to native p_2d type. </summary>
            <param name="pt2D"> The point of type Point2D. </param>
            <returns> A point of type p_2d. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.p_2dMarshal(p_2d)">
            <summary> Marshals native p_2d type to managed TlProfileSegment::Point2D type. </summary>
            <param name="pt2D"> The point of type p_2d. </param>
            <returns> A point of type Point2D. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.IsConvex">
            <summary> Query if this object is convex. </summary>
            <returns> true if convex, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.SweepsBetween270to90">
            <summary> Query if arc sweeps completely between 270 degrees to 90 degrees (inclusive). </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.IncludesAngle(System.Double)">
            <summary> Query if the angle 'theta' is included in this arc. </summary>
            <param name="theta"> The angle. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Byte)">
            <summary> Constructor. </summary>
            <param name="centerX">    The center x coordinate. </param>
            <param name="centerY">    The center y coordinate. </param>
            <param name="radius">	  The radius. </param>
            <param name="startAngle"> The start angle. </param>
            <param name="sweepAngle"> The sweep angle. </param>
            <param name="color">	  The color. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.#ctor(Cnc.Tool.Interop.TlProfileArcSegment.Arc2D,System.Byte)">
            <summary> Constructor. </summary>
            <param name="arc">   The segment. </param>
            <param name="color"> The color. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlProfileArcSegment.Arc">
            <summary> Arc </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.op_Assign(Cnc.Tool.Interop.TlProfileArcSegment!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.CopyFrom(Cnc.Tool.Interop.TlProfileArcSegment)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.#ctor(Cnc.Tool.Interop.TlProfileArcSegment!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileArcSegment.Arc2D">
            <summary> Arc2D. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Byte)">
            <summary> Constructor. </summary>
            <param name="endpoint1X"> The endpoint 1 x coordinate. </param>
            <param name="endpoint1Y"> The endpoint 1 y coordinate. </param>
            <param name="endpoint2X"> The endpoint 2 x coordinate. </param>
            <param name="endpoint2Y"> The endpoint 2 y coordinate. </param>
            <param name="color">	  The color. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlProfileLineSegment.Line">
            <summary> Line </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.op_Assign(Cnc.Tool.Interop.TlProfileLineSegment!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.CopyFrom(Cnc.Tool.Interop.TlProfileLineSegment)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.#ctor(Cnc.Tool.Interop.TlProfileLineSegment!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileLineSegment.Line2D">
            <summary> Line2D. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.SetPrimaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets PrimaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.GetPrimaryCornerRadius(System.Boolean)">
            <summary> Gets PrimaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePrimaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.PrimaryCornerRadius">
            <summary> Gets or sets the primary corner radius. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.ThreadShape">
            <summary> Thread Shape </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.NumThreadStarts">
            <summary> Number Thread Starts </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.RadiusType">
            <summary> Radius Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.TipDiameter">
            <summary> Tip diameter of Threading Tool. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.ThreadAngle">
            <summary> Thread angle of Threading Tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.SetRootDiameter(System.Double,System.Boolean)">
            <summary> Sets RootDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.GetRootDiameter(System.Boolean)">
            <summary> Gets RootDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRootDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.RootDiameter">
            <summary> Root diameter of Threading Tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.SetThreadPitch(System.Double,System.Boolean)">
            <summary> Sets ThreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.GetThreadPitch(System.Boolean)">
            <summary> Gets ThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.ThreadPitch">
            <summary> Thread pitch of Threading Tool. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.TipAngle">
            <summary> Tip angle of the Threading Tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.op_Assign(Cnc.Tool.Interop.TlToolThreading!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.CopyFrom(Cnc.Tool.Interop.TlToolThreading)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.#ctor(Cnc.Tool.Interop.TlToolThreading!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolThreading.TlToolThreadingDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.DifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.SetRadiusType(TlCornerType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the radius type. </summary>
            <param name="radiusType">	Type of the radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.GetCornerType">
            <summary> Gets the corner type. </summary>
            <returns> The corner type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.SetThreadCount(System.Int32)">
            <summary>	Sets a thread count. </summary>
            <param name="threadCount">	Number of threads. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.GetThreadCount">
            <summary>	Gets the thread count. </summary>
            <returns>	The thread count. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.SetCornerRadius(System.Double)">
            <summary>	Sets a corner radius. </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.GetCornerRadius">
            <summary>	Gets the corner radius. </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation tool information. </summary>
            <param name="info">	The information. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.ImportFromStoredProfile(Cnc.Tool.Interop.TlProfile,System.Double)">
            <summary> Import from stored profile. </summary>
            <param name="storedProfile"> The stored profile to validate, sort, and scale. </param>
            <param name="scale">		 The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.BatchImportFromLayer(System.Collections.Generic.List`1{System.Int32},System.Collections.Generic.List`1{System.Double})">
            <summary> Batch import from layer. </summary>
            <param name="levels"> The levels to import from. </param>
            <param name="scales"> The scales to apply to the profiles. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.ImportFromLayer(System.Int32,System.Double)">
            <summary> Import from layer. </summary>
            <param name="level"> The level to import from. </param>
            <param name="scale"> The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.BatchImportFromFile(System.Collections.Generic.List`1{System.String},System.Collections.Generic.List`1{System.Double},System.Collections.Generic.List`1{System.Boolean},System.Collections.Generic.List`1{System.String})">
            <summary> Batch import from file. </summary>
            <param name="filenames">		 The filenames. </param>
            <param name="scales">			 The scales to apply to the profiles. </param>
            <param name="isToolFlags">		 The isTool flags, true if importing for a tool, false for a holder. </param>
            <param name="transmitFilePaths"> Full pathnames of the resulting transmit files, if any are created. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.BatchImportFromFile(System.Collections.Generic.List`1{System.String},System.Collections.Generic.List`1{System.Double},System.Collections.Generic.List`1{System.Boolean})">
            <summary> Batch import from file. </summary>
            <param name="filenames">   The filenames. </param>
            <param name="scales">	   The scales. </param>
            <param name="isToolFlags"> The isTool flags, true if importing for a tool, false for a holder. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.ImportFromFile(System.String,System.Double,System.Boolean,System.String@)">
            <summary> Import profile from file. </summary>
            <param name="filename">		    Filename of the file. </param>
            <param name="scale">		    The scale to apply to the profile. </param>
            <param name="isTool">		    true if importing for a tool, false for a holder. </param>
            <param name="transmitFilePath"> Full pathname of the resulting transmit file, if one is created. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.ImportFromFile(System.String,System.Double,System.Boolean)">
            <summary> Import profile from file. </summary>
            <param name="filename"> Filename of the file. </param>
            <param name="scale">    The scale. </param>
            <param name="isTool">   true if importing for a tool, false for a holder. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolProfileImporter">
            <summary> Implementation of the main Mastercam tool system. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileResult">
            <summary> Encapsulates the result of the construction of a profile. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileResultCode">
            <summary> Values that represent possible profile calculation result states. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.Scale(System.Double)">
            <summary> Scales the current profile. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.TrimOrExtendToYValue(System.Double)">
            <summary> Trim or extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.ExtendToYValue(System.Double)">
            <summary> Extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.TrimToYValue(System.Double,System.Boolean)">
            <summary> Trim to y coordinate value. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.TrimToXValue(System.Double,System.Boolean)">
            <summary> Trim to x coordinate value. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SplitAtYValue(System.Double,Cnc.Tool.Interop.TlProfile@,Cnc.Tool.Interop.TlProfile@)">
            <summary> Splits the current profile at the specified y coordinate value. </summary>
            <param name="yValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SplitAtXValue(System.Double,Cnc.Tool.Interop.TlProfile@,Cnc.Tool.Interop.TlProfile@)">
            <summary> Splits the current profile at the specified x coordinate value. </summary>
            <param name="xValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.AnyLineSegmentsOnYAxis">
            <summary> Determines if we have any line segments on the Y axis. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.IsClosedLoop">
            <summary> Query if this object is a closed loop profile. </summary>
            <remarks> Does not need segments to be in any specific direction or order. </remarks>
            <returns> true if closed loop, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.TranslateToYZero">
            <summary> Translates the entire profile, so that the lowest point of the profile is at Y=0. </summary>
            <remarks> Looks at the endpoints of each segment to determine the amount to translate. </remarks>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.AddHorizontalConnectors">
            <summary> Adds horizontal connectors to the start and endpoint of the profile. </summary>
            <remarks> If the point is already at y=0, then no connector is added/needed. </remarks>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.Linearize">
            <summary> Linearizes this profile into strictly line segments. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SortProfile">
            <summary> Sorts the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.ValidateProfileQuadrant">
            <summary> Validates the profile quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SwapSegments(System.Int32,System.Int32,System.Boolean)">
            <summary> Swap the segments at index1 and index2. </summary>
            <param name="index1">	  The first index. </param>
            <param name="index2">	  The second index. </param>
            <param name="reverseDir"> (Optional, defaults to false) true to reverse direction of the resulting index1 segment. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.AddToTopOfProfile(Cnc.Tool.Interop.TlProfileSegment)">
            <summary> Adds a segment to the top of profile. The rest of the profile remains unchanged. </summary>
            <remarks> The passed in segment should have coordinates relative to the profile we're adding it to. </remarks>
            <param name="segment"> The segment. </param>
            <summary> Adds a segment to the top of profile. The rest of the profile remains unchanged. </summary>
            <remarks> The passed in segment should have coordinates relative to the profile we're adding it to. </remarks>
            <param name="segment"> The segment. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.AddToBottomOfProfile(Cnc.Tool.Interop.TlProfileSegment)">
            <summary>	adds a segment to the bottom of a profile, and pushes everything else up to accomadate it. </summary>
            <param name="segment">	New segment to add - should be constructed from origin.  Will be translated down if profile is below x axis</param>
            <summary>	adds a segment to the bottom of a profile, and pushes everything else up to accomadate it. </summary>
            <param name="segment">	New segment to add - should be constructed from origin.  Will be translated down if profile is below x axis</param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetProfileSegmentsCount(System.Boolean)">
            <summary> Gets the number of profile segments with height. </summary>
            <param name="onlyWithHeight"> (Optional, defaults to false) true to only get the segments with height. </param>
            <returns> The number of profile segments with height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetProfileSegments">
            <summary> Provides const reference to profile segment array. </summary>
            <returns> const reference to profile segments array. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetProfileSegmentsTopDown(System.Boolean)">
            <summary> Gets all the profile segments as a const vector of const TlProfileSegmentPtr objects (does not clone segments!). </summary>
            <remarks> This function returns the profile segments in reverse order to mimick the TlHolderSegments. </remarks>
            <param name="onlyWithHeight"> (Optional, defaults to false) true to only get the segments with height. </param>
            <returns> The profile from the top down. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetSegmentAt(System.Int32)">
            <summary> Gets the segment at the specified index. </summary>
            <param name="index"> Zero-based index of the segments. </param>
            <returns> The segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.ClearProfile">
            <summary> Clears the profile. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetSegmentCount">
            <summary> Gets segment count. </summary>
            <returns> The segment count. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetLength">
            <summary>	True length of profile in Y, including section below X axis </summary>
            <returns>	said length </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetHeight">
            <summary>	Height of profile at top as measured from X axis </summary>
            <returns>	said height </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.IsEmpty">
            <summary>	Checks to see if this profile is empty </summary>
            <returns>	true if empty, else false </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.op_Assign(Cnc.Tool.Interop.TlProfile!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.CopyFrom(Cnc.Tool.Interop.TlProfile)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.#ctor(Cnc.Tool.Interop.TlProfile!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetScaledSegment(System.Double)">
            <summary> Gets scaled segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
            <returns> The scaled segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Scale(System.Double)">
            <summary> Scales this segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetRotatedSegment(System.Double,Cnc.Tool.Interop.TlProfileSegment.Point2D)">
            <summary> Gets rotated segment. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetRotatedSegment(System.Double)">
            <summary> Gets rotated segment. </summary>
            <param name="radians"> The radians. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Rotate(System.Double,Cnc.Tool.Interop.TlProfileSegment.Point2D)">
            <summary> Rotates this object about the passed in point. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Rotate(System.Double)">
            <summary> Rotates this object. </summary>
            <param name="radians"> The radians. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetMirroredSegment(System.Boolean)">
            <summary> Gets mirrored segment. </summary>
            <param name="aboutYAxis"> true to about y coordinate axis. </param>
            <returns> The mirrored segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Mirror(System.Boolean)">
            <summary> Mirrors. </summary>
            <param name="aboutYAxis"> true to mirror about the Y axis, false to mirror about the X axis. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetTranslatedSegment(System.Double,System.Double)">
            <summary> Gets translated segment. </summary>
            <param name="deltaX"> The delta x coordinate. </param>
            <param name="deltaY"> The delta y coordinate. </param>
            <returns> The translated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Translate(System.Double,System.Double)">
            <summary> Translates the segment in 2space. </summary>
            <param name="deltaX"> The change to make in X. </param>
            <param name="deltaY"> The change to make in Y. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetTransformedSegment(System.Windows.Media.Matrix,Cnc.Tool.Interop.TlProfileSegment.TransformationType)">
            <summary> Gets transformed segment. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
            <returns> The transformed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Transform(System.Windows.Media.Matrix,Cnc.Tool.Interop.TlProfileSegment.TransformationType)">
            <summary> Transforms the current segment by the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetReversedSegment">
            <summary> Gets reversed segment. </summary>
            <returns> The reversed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.ValidateQuadrant">
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Reverse">
            <summary> Reverses the segment. </summary>
            <summary> Reverses the segment. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.TrimAtXValue(System.Double,System.Boolean)">
            <summary> Trim at x coordinate value. </summary>
            <param name="x">			    The x coordinate. </param>
            <param name="keepLowerSegment"> (Optional, defaults to true) true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.TrimAtYValue(System.Double,System.Boolean)">
            <summary> Trim at y coordinate value. </summary>
            <param name="y">			    The y value to trim to. </param>
            <param name="keepLowerSegment"> (Optional, defaults to true) true to keep the lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.CrossesXValue(System.Double)">
            <summary> Determines if the current segment x coordinate value. </summary>
            <param name="value"> The value. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.CrossesYValue(System.Double)">
            <summary> Determines whether a given segment would have to be trimmed to stay under Y. </summary>
            <param name="maxY"> Y value to stay under. </param>
            <returns> true if it needs trimming, else false. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.IsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetMaxWidth">
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetTopWidth">
            <summary> Gets top width. </summary>
            <returns> The top width. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetBottomWidth">
            <summary> Gets bottom width. </summary>
            <returns> The bottom width. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetHeight">
            <summary> Height of segment. </summary>
            <returns> said height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetLength">
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetEndpoint2">
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetEndpoint1">
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.MinY">
            <summary> Lowest point contained in segment. </summary>
            <returns> Lowest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.MinX">
            <summary> Minimum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.MaxY">
            <summary> Highest point contained in segment. </summary>
            <returns> Highest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.MaxX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Linearize">
            <summary> Conversion function. </summary>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileSegment.TransformationType">
            <summary> Values that represent the various possible transformations for a segment. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlProfileSegment.Color">
            <summary> Color </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.op_Assign(Cnc.Tool.Interop.TlProfileSegment!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.CopyFrom(Cnc.Tool.Interop.TlProfileSegment)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.#ctor(Cnc.Tool.Interop.TlProfileSegment!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileSegment.Point2D">
            <summary> Point2D. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.SortAndValidateProfileResult(Cnc.Tool.TlProfileResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sort and validate profile result. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.#ctor">
            <summary> Default private constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromStoredProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Import from stored profile. </summary>
            <param name="storedProfile"> The stored profile to validate, sort, and scale. </param>
            <param name="scale">		 The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.BatchImportFromLayer(std.vector&lt;System.Int32,std.allocator&lt;System.Int32&gt;&gt;,std.vector&lt;System.Double,std.allocator&lt;System.Double&gt;&gt;)">
            <summary> Batch import from layer. </summary>
            <param name="levels"> The levels to import from. </param>
            <param name="scales"> The scales to apply to the profiles. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromSketch(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double)">
            <summary> Import from a SW Sketch (only in MCforSW). </summary>
            <param name="sketchname"> Name of the SW sketch. </param>
            <param name="scale"> The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromLayer(System.Int32,System.Double)">
            <summary> Import from layer. </summary>
            <param name="level"> The level to import from. </param>
            <param name="scale"> The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.BatchImportFromFile(std.vector&lt;System.Char!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;System.Char!System.Runtime.CompilerServices.IsConst**&gt;&gt;,std.vector&lt;System.Double,std.allocator&lt;System.Double&gt;&gt;,std.vector&lt;System.Boolean,std.allocator&lt;System.Boolean&gt;&gt;,std.vector&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,std.allocator&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Batch import from file. </summary>
            <param name="filenames">		 The filenames. </param>
            <param name="scales">			 The scales to apply to the profiles. </param>
            <param name="isToolFlags">		 The isTool flags where true means importing a tool and false is importing a holder. </param>
            <param name="transmitFilePaths"> Full pathnames of the resulting transmit files, if any are created. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.BatchImportFromFile(std.vector&lt;System.Char!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;System.Char!System.Runtime.CompilerServices.IsConst**&gt;&gt;,std.vector&lt;System.Double,std.allocator&lt;System.Double&gt;&gt;,std.vector&lt;System.Boolean,std.allocator&lt;System.Boolean&gt;&gt;)">
            <summary> Batch import from file. </summary>
            <param name="filenames">   The filenames. </param>
            <param name="scales">	   The scales. </param>
            <param name="isToolFlags"> The isTool flags where true means importing a tool and false is importing a holder. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double,System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Import profile from file. </summary>
            <param name="filename">		    Filename of the file. </param>
            <param name="scale">		    The scale to apply to the profile. </param>
            <param name="isTool">		    true if importing a tool, false if a holder. </param>
            <param name="transmitFilePath"> Full pathname of the resulting transmit file, if one is created. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double,System.Boolean)">
            <summary> Import profile from file. </summary>
            <param name="filename"> Filename of the file. </param>
            <param name="scale">    The scale. </param>
            <param name="isTool">   true if importing a tool, false if a holder. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="T:Cnc.Tool.ToolProfileImporter">
            <summary> The tool profile importer. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileResult">
            <summary> Encapsulates the result of the construction of a profile. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileResultCode">
            <summary> Values that represent possible profile calculation result states. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.RemoveAssemblyComponents">
            <summary>	Removes the assembly components. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetStationPerConfig">
            <summary>	Sets the station per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetOffsetsPerConfig">
            <summary>	Sets the offsets per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetGaugeLength">
            <summary>	Gets the Assembly Gauge length</summary>
            <returns>	The Gauge Length </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolProjection">
            <summary>	Gets the Tool Projection</summary>
            <returns>	The tool projection </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetTotalHolderLength">
            <summary>	Gets the total length of all holders</summary>
            <returns>	The total length of holders </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetToolNumber(System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets tool number. </summary>
            <param name="toolNum">	    The tool number. </param>
            <param name="machineGroup"> Group the machine belongs to. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetAsDefaultAssembly(System.Boolean)">
            <summary>	Sets as default assembly. </summary>
            <param name="value">	The value. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetMillTool">
            <summary>	Gets the mill tool. </summary>
            <returns>	The mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.IsSimilar(Cnc.Tool.Interop.TlAssembly@,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Determines if the other tool assembly is similar enough to be considered a duplicate. </summary>
            <param name="spOther">		  The other tool assembly. </param>
            <param name="machineGroupId"> (Optional) identifier for the machine group. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.IsDifferentEnoughToDirtyOp(Cnc.Tool.Interop.TlAssembly@,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if different enough to dirty operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.IsDifferentEnoughToAffectOp(Cnc.Tool.Interop.TlAssembly@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.GraphicsFileCollection">
            <summary> Collection of graphics files associated to this item. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.AccessoryCollection">
            <summary> Accessory items for this tool assembly </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.HasMainHolder">
            <summary> Tests if MainHolder reference property is set. </summary>
            <returns> true if MainHolder is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MainHolder">
            <summary> Main holder on this tool assembly. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.HasMainTool">
            <summary> Tests if MainTool reference property is set. </summary>
            <returns> true if MainTool is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MainTool">
            <summary> Main tool on this tool assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MaxRamp">
            <summary> Maximum Ramp Angle. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetComponentCScalar(System.Double,System.Boolean)">
            <summary> Sets ComponentCScalar property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetComponentCScalar(System.Boolean)">
            <summary> Gets ComponentCScalar property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheComponentCScalar property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.ComponentCScalar">
            <summary> Component C Scalar	. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetStickout(System.Double,System.Boolean)">
            <summary> Sets Stickout property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetStickout(System.Boolean)">
            <summary> Gets Stickout property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheStickout property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.Stickout">
            <summary> Stickout. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.IsMetric">
            <summary> Metric Flag. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MainHolderID">
            <summary> Main Holder Identifier. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MainToolID">
            <summary> Main Tool Identifier. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.IsDefaultAssembly">
            <summary> Default Assembly Flag. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.LengthOffsetNum">
            <summary> Length Offset Number. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.DiameterOffsetNum">
            <summary> Diameter Offset Number. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MachineGroup">
            <summary> Machine Group. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.ToolNumber">
            <summary> Tool Number. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.op_Assign(Cnc.Tool.Interop.TlAssembly!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.CopyFrom(Cnc.Tool.Interop.TlAssembly)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.#ctor(Cnc.Tool.Interop.TlAssembly!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ClassFactory.AllocateAppropriateAPIObject(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Allocate appropriate managed object based referencing native object. </summary>
            <param name="spCObj"> The underlying native object. </param>
            <returns> nullptr if it fails, else a managed wrapper object. </returns>
        </member>
        <member name="T:Cnc.Tool.TlAssembly.TlAssemblyDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.OnSetMainHolder">
            <summary>	Executes the set main holder action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.OnSetMainTool">
            <summary>	Executes the set main tool action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.OnSlotChanged">
            <summary> Executes the slot changed action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.CreateNewFromOp(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates new assembly from operation. </summary>
            <param name="op"> The operation. </param>
            <returns> The new new from operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetMachineSideConnectionType">
            <summary>	Gets machine side connection type. </summary>
            <returns>	The machine side connection type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.RemoveAssemblyComponents">
            <summary>	Removes the assembly components. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetStationPerConfig">
            <summary>	Sets the station per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetOffsetsPerConfig">
            <summary>	Sets the offsets per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetAsDefaultAssembly(System.Boolean)">
            <summary>	Sets as default assembly. </summary>
            <param name="val">	The value. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetToolNumber(System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets tool number. </summary>
            <param name="toolNum">	    The tool number. </param>
            <param name="machineGroup"> Group the machine belongs to. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetMillTool">
            <summary>	Gets the mill tool. </summary>
            <returns>	The mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.IsSimilar(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Determines if the other tool assembly is similar enough to be considered a duplicate. </summary>
            <param name="spOther">		  The other tool assembly. </param>
            <param name="machineGroupId"> (Optional) identifier for the machine group. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.IsDifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if different enough to dirty operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.IsDifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="D:Cnc.Tool.TlAssemblyEntry">
            <summary>	Defines an alias representing the tl assembly entry. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolder.TlHolderDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoOnSetStoredProfile">
            <summary> Executes the on set stored profile operation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolder.MakeSegment(Cnc.Tool.TlHolderSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Byte)">
            <summary> Makes a segment. </summary>
            <param name="segment">	    The segment. </param>
            <param name="bottomHeight"> (Optional) height of the bottom. </param>
            <param name="color">	    (Optional) the color. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.ConvertProfileSegmentToHolderSegment(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert profile segment to holder segment. </summary>
            <param name="segment"> The profile segment. </param>
            <returns> The holder segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.MakeHolderSegmentsFromProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary> Makes holder segments from profile. </summary>
            <param name="profile"> The profile. </param>
            <returns> A vector of TlHolderSegment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.MakeProfileFromHolderSegments(std.vector&lt;Cnc.Tool.TlHolderSegment,std.allocator&lt;Cnc.Tool.TlHolderSegment&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes profile from holder segments. </summary>
            <param name="holderSegments"> The holder segments. </param>
            <returns> A TlProfilePtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.IsDifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other holder is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other holder. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if different enough to dirty operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.IsDifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other holder is different enough to affect an operation. </summary>
            <param name="other">			    The other holder. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.GetLength">
            <summary> Gets the length of the holder (max y value - min y value). </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.GetHeight">
            <summary>	Gets the total Height of the Holder (from y=0 to the holder's max y value). </summary>
            <returns>	The Height of the Holder. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.IsDefaultHolder">
            <summary>	Query if this object is default holder. </summary>
            <returns>	true if default holder, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.SetSegments(std.vector&lt;Cnc.Tool.TlHolderSegment,std.allocator&lt;Cnc.Tool.TlHolderSegment&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets the segments </summary>
            <param name="segments">	segments to define the holder </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.GetSegments">
            <summary> Gets the segments. </summary>
            <returns> The segments. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.AddSegment(System.Double,System.Double,System.Double)">
            <summary> Adds a segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DeleteAllSegments">
            <summary> Deletes all segments. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.op_Assign(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.#ctor(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="x"> A deep copy of this object </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.#ctor(System.Boolean)">
            <summary>	Parameterized constructor. </summary>
            <param name="IsMetric">	true if this object is metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderSegment.op_Equality(Cnc.Tool.TlHolderSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	comparison operator. </summary>
            <param name="rhs">	The other. </param>
            <returns>	true if objects are the same </returns>
        </member>
        <member name="T:Cnc.Tool.TlHolderSegment">
            <summary> Class representing an old-style holder segment in the form of a top width, a bottom width, and a height. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolMill.TlToolMillDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.CleanUpPoorlyDefinedTools(System.Boolean,System.Boolean)">
            <summary> Clean up tools that were created badly in older versions. </summary>
            <param name="preX8"> True if called from a pre-X8 serialization version </param>
            <param name="preX9"> True if called from a pre-X9 serialization version </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.HasDifferentPeckStepCoolantValues(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'otherTool' has different peck step coolant values. </summary>
            <param name="otherTool"> The other tool. </param>
            <returns> true if different peck step coolant values, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.HasDifferentFeedSpeedValues(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'otherTool' has different feed speed values. </summary>
            <param name="otherTool"> The other tool. </param>
            <returns> true if different feed speed values, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolMill.m_MCToolType">
Old Holder Attributes
</member>
        <member name="M:Cnc.Tool.TlToolMill.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetDataFromLegacy">
            <summary>	Gets the data from legacy tool. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetCornerRadius(System.Double)">
            <summary>	Convenience only - No backing field on TlToolMill </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetCornerRadius">
            <summary>	Convenience only - No backing field </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetFBMWasMetric(System.Boolean)">
            <summary> Sets fbm was metric. </summary>
            <param name="value"> true to value. </param>
            <remarks> This is here to support a hack in FBM. </remarks>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.AdjustLengthForStickout(System.Double)">
            <summary>	Adjust length for stickout. </summary>
            <param name="stickout">	The stickout. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.ResetProjectionValues">
            <summary>	Resets the projection values. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetToolMaterialCode(System.Int16,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>	Sets a tool material code. </summary>
            <param name="code">	   	The code. </param>
            <param name="matlName">	Name of the matl. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetToolMaterialCode">
            <summary>	Gets the tool material code. </summary>
            <returns>	The tool material code. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetCannedTxtCoolant(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets a canned text coolant. </summary>
            <param name="cool">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetPreXCoolant(System.Int16)">
            <summary>	Sets a pre x coordinate coolant. </summary>
            <param name="cool">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetLegacyHolderData(System.Double,System.Double)">
            <summary> Sets the legacy holder data. </summary>
            <param name="top">    The top. </param>
            <param name="height"> The height. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetMCToolType(MCToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the mastercam type of this tool.</summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetMCToolType(System.Int32)">
            <summary> Sets mc tool type. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetMCToolType">
            <summary>Returns the mastercam type of this tool.</summary>
            <returns>The Mastercam type of this tool.</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetOpTypeIDs">
            <summary>Returns a list of the IDs of the op type this tool
		 supports</summary>
            <returns>The list of op type IDs support by this tool</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the TlToolMill properties located within op_tool_info</summary>
            <returns>true of the setting was successful</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.#ctor">
            <summary>Default constructor.  Creates an empty tool.</summary>
        </member>
        <member name="M:Cnc.Tool.TlToolGrade.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGrade.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlMillingOpParams.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMillingOpParams.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlOpParams.TlOpParamsDeserializationImpl">
            <summary>	A TlOpParams deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.SetCannedTxtCoolant(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets canned text coolant. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.SetPreXCoolant(System.Int16)">
            <summary> Sets pre x coordinate coolant. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.DecrunchValues(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Decrunches the values from the inputed coolant vector </summary>
            <param name="coolant"> [in] The initial coolant vector to decrunch. </param>
            <returns>	Decrunched coolant vector. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.ConvertToTime(System.Int16)">
            <summary>	Converts the inputted coolant value to a Time index (0, 1, 2). </summary>
            <param name="value"> The value to convert from. </param>
            <returns>	Coolant Timing state (BEFORE, WITH, AFTER). </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.ConvertToState(System.Int16)">
            <summary>	Converts the inputted coolant value to a State index (0, 1, 2). </summary>
            <param name="value"> The value to convert from. </param>
            <returns>	Coolant State (ON, OFF, IGNORE). </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.UpdateFrom(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates from canned txt coolant escribed by coolant. </summary>
            <param name="coolant">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.op_Implicit~std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;">
            <summary> 
Converts this coolant object into the cannedtxtcoolant shorts
that Mastercam uses in machine definitions and posts.
</summary>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.#ctor(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Paramaterized Constructor. </summary>
            <param name="other"> The old style coolant flag to update from. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.#ctor(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Paramaterized Constructor. </summary>
            <param name="other"> The coolant vector to update from. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetCodeFromID">
            <summary> Sets code from identifier. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetIDFromCode">
            <summary> Sets identifier from code. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_User2_Bad">
            <summary>	The old user 2 id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_User2">
            <summary>	The old user 2 id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_User1">
            <summary>	The old user 1 id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_Ceramic">
            <summary>	The ceramic id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_TinCoated">
            <summary>	The tin coated id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_Carbide">
            <summary>	The carbide id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_HSS">
            <summary>	The high speed steel id. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsIDValidMaterialID(Cnc.Tool.TlID)">
            <summary> Query if 'testID' is a valid material identifier. </summary>
            <param name="testID"> Identifier for the test. </param>
            <returns> true if identifier a valid material identifier, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsUser2">
            <summary> Query if this object is user 2. </summary>
            <returns> true if user 2, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsUser1">
            <summary> Query if this object is user 1. </summary>
            <returns> true if user 1, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsCeramic">
            <summary> Query if this object is ceramic. </summary>
            <returns> true if ceramic, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsTinCoated">
            <summary> Query if this object is tin coated. </summary>
            <returns> true if tin coated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsCarbide">
            <summary> Query if this object is carbide. </summary>
            <returns> true if carbide, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsHighSpeedSteel">
            <summary> Query if this object is high speed steel. </summary>
            <returns> true if high speed steel, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsDefinedMaterial">
            <summary> Query if this object is defined material. </summary>
            <returns> true if defined material, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsKnownMaterial">
            <summary> Query if this object is known material. </summary>
            <returns> true if known material, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetID(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.#ctor(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst)">
            <summary>	Paramiterized constructor. </summary>
            <param name="knownID"> Material ID to set the code based off of.Will only work for Mastercam known ids </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.#ctor(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Paramiterized constructor. </summary>
            <param name="code"> Material code to set the ID based off of </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMaterial.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlMaterial.SetCommercialName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a commercial name. </summary>
            <param name="name"> The name. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMaterial.GetCommercialName">
            <summary>   Gets the commercial name. </summary>
            <returns>   The commercial name. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoIsCuttingItem">
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.IsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Determines if the other tool is similar enough to be considered a duplciate. </summary>
            <param name="other">		  The other. </param>
            <param name="machineGroupId"> (Optional) identifier for the machine group to aid in the comparison. </param>
            <param name="compareMode">    (Optional) the compare mode. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.IsDifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.IsDifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.GetIsLegacyToolValid">
            <summary>	Gets is legacy tool valid. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.legacy_tool">
            <summary> Gets the legacy tool data. This is only used outside the class in TlToolMill 
		  during legacy deserialization and conversion into legacy tools. </summary>
            <returns> The legacy tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.GetLegacyIsAggregate">
            <summary>	Gets legacy is aggregate. </summary>
            <returns>	true if is aggregate, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.GetOpToolInfo">
            <summary> Gets the operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.op_Assign(Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.#ctor(Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="x"> A deep copy of this object </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.#ctor">
            <summary> Default constructor.  Creates an empty tool. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAccessory.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAccessory.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyItem.TlAssemblyItemDeserializationImpl">
            <summary>	A tool assembly item deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoIsCuttingItem">
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoOnSetStoredProfile">
            <summary> Executes the set stored profile action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.IsCuttingItem">
            <summary>	Query if this tool assembly item is a cutting item. </summary>
            <returns>	True if this assembly item is a cutting item, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetProfile">
            <summary> Generates the profile of this item. If the item is a parametric item, a parametric profile will be
		  generated.  Otherwise, the item's stored custom profile will be retrieved in the form of a
		  TlProfileResult instance. </summary>
            <returns> The profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.RemoveOpGroup(Cnc.Tool.TlOpGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Removes the operation group described by opGroup. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.AddOpGroup(Cnc.Tool.TlOpGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Adds an operation group. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.SetStoredProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the stored profile of the item using the given profile.  The passed in profile is assumed to be in the
specified units, as it will be scaled as necessary before being set as the stored profile.
</summary>
            <param name="spProfile">	  		The profile in system units to be set as the stored profile of this item. </param>
            <param name="profileIsInMetric">	True if the profile passed in is in Metric units. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.SetStoredProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the stored profile of the item using the given profile.  The passed in profile is assumed to be in the
specified units, as it will be scaled as necessary before being set as the stored profile.
</summary>
            <param name="spProfile">	  		The profile in system units to be set as the stored profile of this item. </param>
            <param name="profileIsInMetric">	True if the profile passed in is in Metric units. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetStoredProfileCPtr(System.Boolean)">
            <summary>	Gets a scaled version of the stored internal profile in the desired units. </summary>
            <param name="getProfileInMetric">	true to get profile in metric. </param>
            <returns>	The stored profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetStoredProfile(System.Boolean)">
            <summary>	Gets a scaled version of the stored internal profile in the desired units. </summary>
            <param name="getProfileInMetric">	true to get profile in metric. </param>
            <returns>	The stored profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetOpGroups">
            <summary>   Gets the operation groups. </summary>
            <returns>   The operation groups. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.op_Assign(Cnc.Tool.TlAssemblyItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A reference to this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.op_Assign(Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A reference to this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.#ctor(Cnc.Tool.TlAssemblyItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.#ctor(Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Copy constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFileCollection.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old identifiers to new identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFileCollection.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFileCollection.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.GetFileDataSize">
            <summary>   Gets the file data binary size. </summary>
            <returns>   The file data binary size. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.SetFileData(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the file data using the path to the Parasolid transmit (.x_b) file. </summary>
            <param name="filePath"> Full pathname of the file. Must be a Parasolid transmit (.x_b) file. </param>
        </member>
        <member name="T:Cnc.Tool.TlConnection.TlConnectionDeserializationImpl">
            <summary>	A connection deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlConnection.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset IDs operation. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the is equal operation. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnection.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Serialize this object to the given stream. </summary>
            <param name="ar">	The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.SetItemPtr(Cnc.Tool.TlAssemblyItem*)">
            <summary>	Sets the item pointer. </summary>
            <param name="pItem">	The item . </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.GetItemPtr">
            <summary>	Gets the item pointer. </summary>
            <returns>	The item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnection.GetIsMetric">
            <summary>	Gets a value indicating whether the scalar values in this connection are metric. </summary>
            <returns>	True if metric, false if inch. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.SetTranslation(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Sets the translation portion of the locator, scaling the input value if necessary. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	True if the value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlLocator.SetTranslation(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the translation portion of the locator assuming that the value is in system units. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlLocator.GetTranslation(System.Boolean)">
            <summary>	Gets the translation portion of the locator in the specified units. </summary>
            <param name="inMetric">	True to get the translation portion in metric. </param>
            <returns>	The translation portion of the locator. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.GetTranslation">
            <summary>	Gets the translation portion of the locator in system units. </summary>
            <returns>	The translation portion of the locator. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_PrimeTurn">
            <summary>   The prime turn tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_US_Union_Tool">
            <summary>   The us union tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_HPI">
            <summary>   The hpi id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_MariTool">
            <summary>   The mari tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Lyndex_Nikken">
            <summary>   The lyndex nikken id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_YG_1">
            <summary>   The yg id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Fraisa">
            <summary>   The fraisa id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Redline">
            <summary>   The redline id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Micro100">
            <summary>   The micro 100 id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Harvey_Tool">
            <summary>   The harvey tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Garr">
            <summary>   The garr id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Everede">
            <summary>   The everede id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_MA_Ford">
            <summary>   The ma ford id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Emuge">
            <summary>   The emuge id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_OSG">
            <summary>   The osg id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Mitsubishi">
            <summary>   The mitsubishi id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Helical_Solutions">
            <summary>   The Helical ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Holex_Hoffman_Group">
            <summary>   The Holex - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Garant_Hoffman_Group">
            <summary>   The Garant - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Sumitomo">
            <summary>   The Sumitomo ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Onsrud">
            <summary>   The Onsrud ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Harvey">
            <summary>   The Harvey ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Greenleaf">
            <summary>   The Greenleaf ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Vortex">
            <summary>   The Vortex ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Widia_Valenite">
            <summary>   The Widia - Valenite ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Widia_Hanita">
            <summary>   The Widia-Hanita ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Seco">
            <summary>   The Seco ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Dapra">
            <summary>   The Dapra ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Duramill">
            <summary>   The Duramill ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Niagara">
            <summary>   The Niagara ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Dataflute">
            <summary>   The Dataflute ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_MillStar">
            <summary>   The Millstar ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Intersoll">
            <summary>   The Intersoll ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Robbjack">
            <summary>   The Robbjack ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Sandvik">
            <summary> The Sandvik ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Kennametal">
            <summary>   The Kennemetal ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Command_Tool">
            <summary>   The Command Tool ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Mastercam">
            <summary>   The mastercam id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Iscar">
            <summary>   The iscar id. </summary>
        </member>
        <member name="M:Cnc.Tool.TlManufacturer.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="F:Cnc.Tool.TlProfile.linearizationConstant">
            <summary> The linearization constant. </summary>
        </member>
        <member name="F:Cnc.Tool.TlProfile.m_Profile">
            <summary> The profile segments in order from bottom up. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfile.TlProfileDeserializationImpl">
            <summary>	A TlProfile deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the operation to reset identifiers. </summary>
            <param name="changedIDs">	The changed identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitSegmentAtYValueIntoProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Splits segment into profiles. </summary>
            <param name="spCurrentSegment">   The sp segment. </param>
            <param name="spLowerProfile">	  The sp lower profile. </param>
            <param name="spLowerLastSegment"> The sp lower last segment. </param>
            <param name="spUpperProfile">	  The sp upper profile. </param>
            <param name="spUpperLastSegment"> The sp upper last segment. </param>
            <param name="yValue">			  The value. </param>
            <param name="tol">				  The tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitSegmentAtXValueIntoProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Splits segment into profiles. </summary>
            <param name="spCurrentSegment">   The sp segment. </param>
            <param name="spLowerProfile">	  The sp lower profile. </param>
            <param name="spLowerLastSegment"> The sp lower last segment. </param>
            <param name="spUpperProfile">	  The sp upper profile. </param>
            <param name="spUpperLastSegment"> The sp upper last segment. </param>
            <param name="xValue">			  The value. </param>
            <param name="tol">				  The tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddSegmentToProfile(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Adds a segment to profile. </summary>
            <param name="spSegment">	 The sp segment. </param>
            <param name="spProfile">	 The sp profile. </param>
            <param name="spLastSegment"> The sp last segment. </param>
            <param name="tol">			 The tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing360(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing 360. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing 270, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing270(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing 270. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing 270, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing180(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing a specified angle. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing angle, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing90(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing a specified angle. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing angle, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentCompletelyBelowXValue(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Segment completely below x coordinate value. </summary>
            <param name="spSegment"> The sp segment. </param>
            <param name="xValue">    The value. </param>
            <param name="tol">		 The tolerance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentCompletelyBelowYValue(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Segment completely below y coordinate value. </summary>
            <param name="spSegment"> The sp segment. </param>
            <param name="yValue">    The value. </param>
            <param name="tol">		 The tolerance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitArcAtAngle(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Splits arc at angle. </summary>
            <param name="segment"> The segment. </param>
            <param name="angle">   The angle. </param>
            <returns> Results of the arc split. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.PointsEqualTol(std.array&lt;System.Double,0x02&gt;,std.array&lt;System.Double,0x02&gt;,System.Double)">
            <summary> Comparison tool for points. </summary>
            <param name="value1"> The first value. </param>
            <param name="value2"> The second value. </param>
            <param name="tol">    The tolerance. </param>
            <returns> true if the two points are equal within system tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transforms the current profile by the given transformation. </summary>
            <param name="transformation">	  The transformation. </param>
            <param name="transformationType"> Type of the transformation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Scale(System.Double)">
            <summary> Scales the current profile. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimOrExtendToYValue(System.Double)">
            <summary> Trim or extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ExtendToYValue(System.Double)">
            <summary> Extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimToYValue(System.Double,System.Boolean)">
            <summary> Trim to y coordinate value. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimToXValue(System.Double,System.Boolean)">
            <summary> Trim to x coordinate value. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitAtYValue(System.Double,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Splits the current profile at the specified y coordinate value. </summary>
            <param name="yValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitAtXValue(System.Double,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Splits the current profile at the specified x coordinate value. </summary>
            <param name="xValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TranslateToYZero">
            <summary> Translates the entire profile, so that the lowest point of the profile is at Y=0. </summary>
            <remarks> Looks at the endpoints of each segment to determine the amount to translate. </remarks>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddHorizontalConnectors">
            <summary> Adds horizontal connectors to the start and endpoint of the profile. </summary>
            <remarks> If the point is already at y=0, then no connector is added/needed. </remarks>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Linearize">
            <summary> Linearizes this profile into strictly line segments. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SortProfile">
            <summary> Sorts the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.CleanupZeroLengthSegments">
            <summary>	Cleanup zero length segments. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AnyLineSegmentsOnYAxis">
            <summary> Determines if we have any line segments on the Y axis. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ValidateProfileQuadrant">
            <summary> Validates the profile quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SwapSegments(System.Int32,System.Int32,System.Boolean)">
            <summary> Swap the segments at index1 and index2. </summary>
            <param name="index1">	  The first index. </param>
            <param name="index2">	  The second index. </param>
            <param name="reverseDir"> (Optional) true to reverse direction of the resulting index1 segment. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddToTopOfProfile(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a segment to the top of profile. The rest of the profile remains unchanged. </summary>
            <remarks> The passed in segment should have coordinates relative to the profile we're adding it to. </remarks>
            <param name="segment"> The segment. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddToBottomOfProfile(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	adds a segment to the bottom of a profile, and pushes everything else up to accomadate it. </summary>
            <param name="segment">	New segment to add - should be constructed from origin.  Will be translated down if profile is below x axis</param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetProfileSegmentsCount(System.Boolean)">
            <summary> Gets the number of profile segments with height. </summary>
            <param name="onlyWithHeight"> (Optional) true to only get the segments with height. </param>
            <returns> The number of profile segments with height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetProfileSegments">
            <summary> Provides const reference to profile segment array. </summary>
            <returns> const reference to profile segments array. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetProfileSegmentsTopDown(System.Boolean)">
            <summary> Gets all the profile segments as a const vector of const TlProfileSegmentPtr objects (does not clone segments!). </summary>
            <remarks> This function returns the profile segments in reverse order to mimick the TlHolderSegments. </remarks>
            <param name="onlyWithHeight"> (Optional) true to only get the segments with height. </param>
            <returns> The profile from the top down. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetSegmentAt(System.Int32)">
            <summary> Gets the segment at the specified index. </summary>
            <param name="index"> Zero-based index of the segments. </param>
            <returns> The segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ClearProfile">
            <summary> Clears the profile. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetSegmentCount">
            <summary> Gets segment count. </summary>
            <returns> The segment count. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MaxY">
            <summary>	Maximum y coordinate of this profile. </summary>
            <returns>	The maximum y coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MinY">
            <summary>	Minimum y coordinate of this profile. </summary>
            <returns>	the minimum y coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MaxX">
            <summary>	Maximum x coordinate of this profile. </summary>
            <returns>	The maximum X coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MinX">
            <summary>	Minimum x coordinate of this profile. </summary>
            <returns>	the minimum X coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetLength">
            <summary>	True length of profile in Y, including section below X axis </summary>
            <returns>	said length </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetHeight">
            <summary>	Height of profile at top as measured from X axis </summary>
            <returns>	said height </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsEmpty">
            <summary>	Checks to see if this profile is empty </summary>
            <returns>	true if empty, else false </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsClosedLoop">
            <summary> Query if this object is a closed loop profile. </summary>
            <remarks> Does not need segments to be in any specific direction or order. </remarks>
            <returns> true if closed loop, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.op_Implicit~std.vector&lt;prof_ent,std.allocator&lt;prof_ent&gt;&gt;">
            <summary> Cast that converts the given  to a vector. </summary>
            <typeparam name="prof_ent"> Type of the prof ent. </typeparam>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.op_Implicit~std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;">
            <summary> Cast that converts the given  to a vector. </summary>
            <typeparam name="TlProfileEnt"> Type of the tl profile ent. </typeparam>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.op_Assign(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side of the assignment operation. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy Constructor. </summary>
            <param name="profile"> The profile. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor to create a TlProfile from a vector of profile segments. </summary>
            <param name="profile"> The profile. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor to create a TlProfile from a vector of profile segments. </summary>
            <param name="profile"> The profile. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor">
            <summary> Default constructor.  Creates an empty profile. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoTrimAtXValue(System.Double,System.Boolean)">
            <summary> Executes the trim at x coordinate value operation. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoTrimAtYValue(System.Double,System.Boolean)">
            <summary> Executes the trim at y coordinate value operation. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoIsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.SetToOldSegment(TlProfileEnt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.SetToOldSegment(prof_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetScaledSegment(System.Double)">
            <summary> Gets scaled segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
            <returns> The scaled segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Scale(System.Double)">
            <summary> Scales this segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetRotatedSegment(System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets rotated segment. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetRotatedSegment(System.Double)">
            <summary> Gets rotated segment. </summary>
            <param name="radians"> The radians. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Rotate(System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Rotates this object about the passed in point. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Rotate(System.Double)">
            <summary> Rotates this object. </summary>
            <param name="radians"> The radians. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetMirroredSegment(System.Boolean)">
            <summary> Gets mirrored segment. </summary>
            <param name="aboutYAxis"> true to about y coordinate axis. </param>
            <returns> The mirrored segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Mirror(System.Boolean)">
            <summary> Mirrors. </summary>
            <param name="aboutYAxis"> true to mirror about the Y axis, false to mirror about the X axis. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetTranslatedSegment(System.Double,System.Double)">
            <summary> Gets translated segment. </summary>
            <param name="deltaX"> The delta x coordinate. </param>
            <param name="deltaY"> The delta y coordinate. </param>
            <returns> The translated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Translate(System.Double,System.Double)">
            <summary> Translates the segment in 2space. </summary>
            <param name="deltaX"> The change to make in X. </param>
            <param name="deltaY"> The change to make in Y. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetTransformedSegment(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Gets transformed segment. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
            <returns> The transformed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Transforms the current segment by the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetReversedSegment">
            <summary> Gets reversed segment. </summary>
            <returns> The reversed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.ValidateQuadrant">
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Reverse">
            <summary> Reverses the segment. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.TrimAtXValue(System.Double,System.Boolean)">
            <summary> Trim at x coordinate value. </summary>
            <param name="x">			    The x coordinate. </param>
            <param name="keepLowerSegment"> (Optional) true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.TrimAtYValue(System.Double,System.Boolean)">
            <summary> Trim at y coordinate value. </summary>
            <param name="y">			    The y value to trim to. </param>
            <param name="keepLowerSegment"> (Optional) true to keep the lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.CrossesXValue(System.Double)">
            <summary> Determines if the current segment x coordinate value. </summary>
            <param name="value"> The value. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.CrossesYValue(System.Double)">
            <summary> Determines whether a given segment would have to be trimmed to stay under Y. </summary>
            <param name="maxY"> Y value to stay under. </param>
            <returns> true if it needs trimming, else false. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.IsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetMaxWidth">
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetTopWidth">
            <summary> Gets top width. </summary>
            <returns> The top width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetBottomWidth">
            <summary> Gets bottom width. </summary>
            <returns> The bottom width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetHeight">
            <summary> Height of segment. </summary>
            <returns> said height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetLength">
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetEndpoint2">
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetEndpoint1">
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MinY">
            <summary> Lowest point contained in segment. </summary>
            <returns> Lowest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MinX">
            <summary> Minimum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MaxY">
            <summary> Highest point contained in segment. </summary>
            <returns> Highest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MaxX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Linearize">
            <summary> Conversion function. </summary>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.op_Implicit~TlProfileEnt">
            <summary> Cast that converts the given profile segment to a TlProfileEnt. </summary>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.op_Implicit~prof_ent">
            <summary> Conversion operator. </summary>
            <returns> prof_ent representing this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="color"> The segment. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileSegment.TransformationType">
            <summary> Values that represent the various possible transformations for a segment. </summary>
        </member>
        <member name="T:Cnc.Tool.TlObject.TlObjectDeserializationImpl">
            <summary>	A TlObject deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoAccept(Cnc.Tool.IConstTlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoAccept(Cnc.Tool.ITlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoClone">
            <summary>	Executes the clone operation. </summary>
            <returns>	A TlObjectPtr. </returns>
        </member>
        <member name="F:Cnc.Tool.TlObject.m_ID">
            <summary>	The identifier. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.OnSlotChanged">
            <summary> Executes the slot changed action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.ResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.ResetIDs">
            <summary>	Resets all identifiers associated to this object. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.Accept(Cnc.Tool.IConstTlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Method to accept an instance of the IConstTlClassVisitor interface in an implementation of the Visitor 
		  design pattern. The IConstTlClassVisitor interface allows read only access to the Tl class instance 
		  based off of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.Accept(Cnc.Tool.ITlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Method to accept an instance of the ITlClassVisitor interface in an implementation of the Visitor design
		  pattern. The ITlClassVisitor interface allows for changes to be made to the Tl class instance based off 
		  of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.SetID(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.SetID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.SetSlotDirect(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets slot directly with no side affects. </summary>
            <remarks> This special accessor is needed because m_Slot is actually serialized out in the TlToolAssembly class.
		  This will be resolved eventually. </remarks>
            <param name="slot"> The new slot number. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.GetID">
            <summary>	Gets the identifier. </summary>
            <returns>	The identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_LessThan(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Less-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Inequality(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Equality(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	comparison operator. </summary>
            <param name="rhs">	The other. </param>
            <returns>	true if objects are the same </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.Clone">
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	null if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Assign(Cnc.Tool.TlObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assigment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Assign(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.#ctor(Cnc.Tool.TlObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.#ctor(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Copy constructor. </summary>
            <param name="other">	The other tl object. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:RotatePoint(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
 @par Purpose:
			Find the point rotated about a point and a unit directional vector

 @param[in]		pt		3d point
 @param[in]		pt0		fixed point
 @param[in]		axis	unit axial vector
 @param[in]		angle	angle of rotation in radians
 @return			rotated 3d point

</member>
        <member name="M:RotateVector(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
 @par Purpose:
			Find the components of one vector rotated about a unit directional vector

 @param[in]		v		3d vector
 @param[in]		axis	unit axial vector
 @param[in]		angle	angle of rotation in radians
 @return			rotated 3d vector

</member>
        <member name="M:Parallel(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Determine if two 3d vectors are parallel
 @param[in]		v1		First vector
 @param[in]		v2		Second vector
 @return			true = parallel, false = non-parallel

</member>
        <member name="M:Components(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the components of one vector w.r.t. a unit vector

 @param[in]		v			first 3d vector
 @param[in]		u			unit 3d vector
 @param[out]		perpUVec	component of V perpendicular to U
 @param[out]		dirUVec		component of V in direction of U

</member>
        <member name="M:vec_3dx(System.Double,System.Double,System.Double,System.Double*)">
 @par Purpose:
			Form a 3d vectors from its x, y, z components
 @param[in]		x		x component
 @param[in]		y		y component
 @param[in]		z		z component
 @param[out]		pt		components set to x, y, and z

</member>
        <member name="M:vecx(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*)">
 @par Purpose:
			Form a 2d vector from its x, y components
 @param[out]		vector		components set to x and y
 @param[in]		x			x component
 @param[in]		y			y component

</member>
        <member name="M:AngleBetween(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the angle formed by two 3d vectors

 @param[in]		vec1	first 3d vector
 @param[in]		vec2	second 3d vector
 @return			Angle formed by the vectors (radians);

</member>
        <member name="M:SweepAngle(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the angle formed by a 2d vector
 @param[in]		vec		a 2d vector
 @return			Angle, in radians, formed by vec (equivalent to [0,360] degrees)

</member>
        <member name="M:copy_ptx(System.Double*,System.Double!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Copy a 2d point
 @param[out]		pt_out		The array to copy to
 @param[in]		pt_in		The array to copy from

</member>
        <member name="M:copy_ptx(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Copy a 2d point
 @param[out]		pt_out		The array to copy to
 @param[in]		pt_in		The point to copy from

</member>
        <member name="M:proj_pt_ln(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Boolean*)">
 @par Purpose:
			Project a 2d point onto a line
 @param[in]		pt		The point to project
 @param[in]		line	The line to project onto
 @param[out]		pr_pt	The projected point
 @param[out]		t		The parameter (0 to 1);
 @param[out]		succf	true if line has non-zero length

</member>
        <member name="M:pt_on_line_tol(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
 @par Purpose:
			Determines whether a point lies on a line

 @return true = pt lies between line's endpoints
 @param[in]		pt			the 2d point in question
 @param[in]		line		the 2d line in question

</member>
        <member name="M:aa_ints_new(a_2d!System.Runtime.CompilerServices.IsConst*,a_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Find the intersection points of two circles whose center and
			radius are specified by arc1 and arc2.	Return the intersection
			points in p1 and p2.  Set succf to false if the circles are
			concentric or do not intersect.  Allow for tangent circles (to
			within a distance of tol);

 @param[in]		arc1		first 2d arc to intersect
 @param[in]		arc2		second 2d arc to intersect
 @param[in]		loc_tol		maximum allowable distance between arc1 and arc2
 @param[out]		p1			first intersection
 @param[out]		p2			second intersection
 @param[out]		succf		true = p1 and p2 are valid

</member>
        <member name="M:l_offset_tol(l_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,l_2d*,System.Boolean*)">
 @par Purpose:
			Offset a 2d line
 @param[in]		line	The line to offset
 @param[in]		dist	The distance to offset line
 @param[in]		bias	A point to offset line towards
 @param[out]		line1	line offset by dist
 @param[out]		succf	true if bias does not lie on line

</member>
        <member name="M:ints_gt(gt!System.Runtime.CompilerServices.IsConst*,gt!System.Runtime.CompilerServices.IsConst*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			New version of gp_ints with the input loc_tol
			  Find the intersection of a line or arc with a line or arc.

 @param[in]		object1		2d line or arc
 @param[in]		object2		2d line or arc
 @param[in]		bias_pt		bias point
 @param[in]		loc_tol		max distance between object1 and object2
 @param[out]		near_inters intersection closest to bias_pt
 @param[out]		far_inters	intersection furthest from bias_pt
 @param[out]		succf		true = object1 and object2 intersect

</member>
        <member name="M:pt_on_arc(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d!System.Runtime.CompilerServices.IsConst*,System.Double)">
 @par Purpose:
			Determine whether a point is within loc_tol of a finite arc,
			based on a distance and angle test.

 @return pt lies on arc
 @param[in]		pt			a 2d point
 @param[out]		arc			a 2d arc
 @param[in]		loc_tol		local tolerance for closeness

</member>
        <member name="M:pt_on_gt_tol(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,gt!System.Runtime.CompilerServices.IsConst*,System.Double)">
 @par Purpose:
			Determine whether a point actually lies on an entity.

 @return true = pt lies on ent
 @param[in]		pt		 a 2d point
 @param[in]		entity	 a 2d entity

</member>
        <member name="M:arc_ep_3d(a_3d!System.Runtime.CompilerServices.IsConst*,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method computes the endpoints of a 3d arc

 @param[in]		arc			the arc to analyze
 @param[in]		mat			An nxm matrix
 @param[out]		ep1			the endpoint corresponding to sa (first endpoint)
 @param[out]		ep2			the endpoint corresponding to sa_sw (second endpoint)


</member>
        <member name="M:arc_endpoints(a_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the endpoints of a 2d arc
 @param[in]		arc			a 2d arc
 @param[out]		p1			the endpoint corresponding to sa
 @param[out]		p2			the endpoint corresponding to sa + sw

</member>
        <member name="M:t_on_line_tol(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*,System.Double)">
 @par Purpose:
			Find the t parameter on a 2d line given a point
 @param[out]		t		The parameter corresponding to the projected point
 @param[in]		pt		The point to "project"
 @param[in]		line	The line to "project" onto

</member>
        <member name="M:la_ints_new(l_2d!System.Runtime.CompilerServices.IsConst*,a_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			New version of la_ints.
			Finds the intersections of a line and an arc

 @param[in]		line		a 2d line to intersect
 @param[in]		arc			a 2d arc to intersect
 @param[in]		loc_tol		maximum allowable distance between line and arc
 @param[out]		p1			first intersection
 @param[out]		p2			second intersection
 @param[out]		succf		true = p1 and p2 are valid

</member>
        <member name="M:l_ints_tol(l_2d!System.Runtime.CompilerServices.IsConst*,l_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Double*,System.Boolean*)">
 @par Purpose:
			Intersect two 2d lines
 @param[in]		l1		The first line
 @param[in]		l2		The second line
 @param[out]		inters	The intersection point
 @param[out]		t1		parameter value
 @param[out]		t2		parameter value
 @param[out]		succf	Success/Fail

</member>
        <member name="M:InchToMm(System.Double)">
            <summary> Convert value from Inch to Millimeters. </summary>
            <param name="inch"> The value in inches. </param>
            <returns> The value in millimeters. </returns>
        </member>
        <member name="M:MmToInch(System.Double)">
            <summary> Convert value from Millimeters to Inch. </summary>
            <param name="mm"> The value in millimeters. </param>
            <returns> The value in inches. </returns>
        </member>
        <member name="M:IsMetric">
            <summary> Checks if the working measurement system is metric. </summary>
            <returns> True if the system is metric; false if it is not. </returns>
        </member>
        <member name="M:IsNotMetric">
            <summary> Checks if the working measurement system is NOT metric. </summary>
            <returns> True if the system is not metric; false if it is. </returns>
        </member>
        <member name="M:IsEnglish">
            <summary> Checks if the working measurement system is english. </summary>
            <returns> True if the system is english; false if it is not. </returns>
        </member>
        <member name="M:IsNotEnglish">
            <summary> Checks if the working measurement system is NOT english. </summary>
            <returns> True if the system is not english; false if it is. </returns>
            <summary> Macro for allocating an ent structure instead of having it on the stack. </summary>
            <summary> Checks if the working measurement system is NOT english. </summary>
            <returns> True if the system is not english; false if it is. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetCornerRadius(System.Double)">
            <summary>	Convenience only - No backing field on TlToolMill </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetCornerRadius">
            <summary>	Convenience only - No backing field </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.AdjustLengthForStickout(System.Double)">
            <summary>	Adjust length for stickout. </summary>
            <param name="stickout">	The stickout. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetCannedTxtCoolant(System.Int16[])">
            <summary>	Sets a canned text coolant. </summary>
            <param name="cannedText">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetCannedTxtCoolant">
            <summary>Gets the canned text coolant data</summary>
            <returns>The canned text coolant data</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetMCToolType(Cnc.Tool.Interop.MCToolType)">
            <summary>Sets the mastercam type of this tool.</summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetMCToolType">
            <summary>Returns the mastercam type of this tool.</summary>
            <returns>The Mastercam type of this tool.</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetOpTypeIDs">
            <summary>Returns a list of the IDs of the op type this tool
		 supports</summary>
            <returns>The list of op type IDs support by this tool</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.AddToolTypeID(System.Guid)">
            <summary>Adds a supported tool type ID for this tool.</summary>
            <returns> true if the ID was successfully set, false otherwise</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.AddOpTypeID(System.Guid)">
            <summary>Adds a supported op type ID for this tool.</summary>
            <returns> true if the ID was successfully set, false otherwise</returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsAcceleratedFinishing">
            <summary> Gets or sets whether the tool is an accelerated finishing tool. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.OldAggregateData">
            <summary> Gets or sets the legacy aggregate head data used with aggregates and block drills. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.HasToolGrade">
            <summary> Tests if ToolGrade reference property is set. </summary>
            <returns> true if ToolGrade is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ToolGrade">
            <summary> Gets or sets the grade of this tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.HasToolMaterial">
            <summary> Tests if ToolMaterial reference property is set. </summary>
            <returns> true if ToolMaterial is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ToolMaterial">
            <summary> Gets or sets the material of this tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.HasOpParams">
            <summary> Tests if OpParams reference property is set. </summary>
            <returns> true if OpParams is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.OpParams">
            <summary> Gets or sets the operation parameters stored with this tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetLegacyHolderDiameter(System.Double,System.Boolean)">
            <summary> Sets LegacyHolderDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetLegacyHolderDiameter(System.Boolean)">
            <summary> Gets LegacyHolderDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLegacyHolderDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.LegacyHolderDiameter">
            <summary> Legacy Holder Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetLegacyHolderLength(System.Double,System.Boolean)">
            <summary> Sets LegacyHolderLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetLegacyHolderLength(System.Boolean)">
            <summary> Gets LegacyHolderLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLegacyHolderLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.LegacyHolderLength">
            <summary> Legacy Holder Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetTruePhysicalLength(System.Double,System.Boolean)">
            <summary> Sets TruePhysicalLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetTruePhysicalLength(System.Boolean)">
            <summary> Gets TruePhysicalLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTruePhysicalLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.TruePhysicalLength">
            <summary> True Physical Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsAdjustedForStickout">
            <summary> Adjusted for Stickout Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsScalable">
            <summary> Scalable Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsVariablePitch">
            <summary> Variable Pitch Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsAggregate">
            <summary> Aggregate Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsFBMTool">
            <summary> FBM Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.HelixAngle">
            <summary> Helix Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.HelixType">
            <summary> Helix Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.FluteCount">
            <summary> Flute Count </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.LengthOffsetNum">
            <summary> Length Offset Number </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.DiameterOffsetNum">
            <summary> Diameter Offset Number </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.Chuck">
            <summary> Chuck </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.SpindleDir">
            <summary> Spindle Direction </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetRequiredPilotDiameter(System.Double,System.Boolean)">
            <summary> Sets RequiredPilotDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetRequiredPilotDiameter(System.Boolean)">
            <summary> Gets RequiredPilotDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRequiredPilotDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.RequiredPilotDiameter">
            <summary> Required Pilot Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetNeckDiameter(System.Double,System.Boolean)">
            <summary> Sets NeckDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetNeckDiameter(System.Boolean)">
            <summary> Gets NeckDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheNeckDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.NeckDiameter">
            <summary> Neck Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetTaperLength(System.Double,System.Boolean)">
            <summary> Sets TaperLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetTaperLength(System.Boolean)">
            <summary> Gets TaperLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTaperLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.TaperLength">
            <summary> Taper Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ShankType">
            <summary> Shank Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetShoulderDiameter(System.Double,System.Boolean)">
            <summary> Sets ShoulderDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetShoulderDiameter(System.Boolean)">
            <summary> Gets ShoulderDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShoulderDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ShoulderDiameter">
            <summary> Shoulder Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetArborDiameter(System.Double,System.Boolean)">
            <summary> Sets ArborDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetArborDiameter(System.Boolean)">
            <summary> Gets ArborDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheArborDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ArborDiameter">
            <summary> Arbor Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetOverallDiameter(System.Double,System.Boolean)">
            <summary> Sets OverallDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetOverallDiameter(System.Boolean)">
            <summary> Gets OverallDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheOverallDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.OverallDiameter">
            <summary> Overall Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetCuttingDepth(System.Double,System.Boolean)">
            <summary> Sets CuttingDepth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetCuttingDepth(System.Boolean)">
            <summary> Gets CuttingDepth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCuttingDepth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.CuttingDepth">
            <summary> Cutting Depth </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetShoulderLength(System.Double,System.Boolean)">
            <summary> Sets ShoulderLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetShoulderLength(System.Boolean)">
            <summary> Gets ShoulderLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShoulderLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ShoulderLength">
            <summary> Shoulder Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetOverallLength(System.Double,System.Boolean)">
            <summary> Sets OverallLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetOverallLength(System.Boolean)">
            <summary> Gets OverallLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheOverallLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.OverallLength">
            <summary> Overall Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.op_Assign(Cnc.Tool.Interop.TlToolMill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.CopyFrom(Cnc.Tool.Interop.TlToolMill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.#ctor(Cnc.Tool.Interop.TlToolMill!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolMill.tool_attr_head">
            <summary> tool_attr_head. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.IsSimilar(Cnc.Tool.Interop.TlTool,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Determines if the other tool is similar enough to be considered a duplciate. </summary>
            <param name="other">		  The other. </param>
            <param name="machineGroupId"> (Optional, defaults to NULL_ID) identifier for the machine group to aid in the comparison. </param>
            <param name="compareMode">    (Optional, defaults to 0) the compare mode. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.IsDifferentEnoughToDirtyOp(Cnc.Tool.Interop.TlTool,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.IsDifferentEnoughToAffectOp(Cnc.Tool.Interop.TlTool,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.GetDisplayType">
            <summary>Gets the tool Display Type. </summary>
            <returns>The tool Display type</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.SetDisplayType(Cnc.Tool.Interop.TlDisplayType)">
            <summary>	Sets a display type. </summary>
            <param name="type">	The type. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.AccessoryCollection">
            <summary> Accessory Collection </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.GeometryLevel">
            <summary> Geometry Level </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.DisplayType">
            <summary> Display Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.IsCustom">
            <summary> Is Custom  </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.MfgToolCode">
            <summary> Manufacturer's Tool Code </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.MachineGroup">
            <summary> Machine Group </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.ToolStation">
            <summary> Tool Station </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.ToolNumber">
            <summary> Tool Number </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.op_Assign(Cnc.Tool.Interop.TlTool!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.CopyFrom(Cnc.Tool.Interop.TlTool)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.#ctor(Cnc.Tool.Interop.TlTool!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAccessoryCollection.AccessoryItems">
            <summary> Gets or sets the vector of accessory items associated to this item. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.op_Assign(Cnc.Tool.Interop.TlAccessoryCollection!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.CopyFrom(Cnc.Tool.Interop.TlAccessoryCollection)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.#ctor(Cnc.Tool.Interop.TlAccessoryCollection!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.op_Assign(Cnc.Tool.Interop.TlAccessory!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.CopyFrom(Cnc.Tool.Interop.TlAccessory)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.#ctor(Cnc.Tool.Interop.TlAccessory!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.GetProfile">
            <summary> Generates the profile of this item. If the item is a parametric item, a parametric profile will be
		  generated.  Otherwise, the item's stored custom profile will be retrieved in the form of a
		  TlProfileResult instance. </summary>
            <returns> The profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.RemoveOpGroup(Cnc.Tool.Interop.TlOpGroup)">
            <summary>   Removes the operation group described by opGroup. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.AddOpGroup(Cnc.Tool.Interop.TlOpGroup)">
            <summary>   Adds an operation group. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.GetOpGroups">
            <summary>   Gets the operation groups. </summary>
            <returns>   The operation groups. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.GraphicsFileCollection">
            <summary> Gets or sets the collection of graphics files associated to this item. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.HasWorkpieceSideConnection">
            <summary> Tests if WorkpieceSideConnection reference property is set. </summary>
            <returns> true if WorkpieceSideConnection is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.WorkpieceSideConnection">
            <summary> Gets or sets the workpiece side connection on this tool assembly component. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.MachineSideConnection">
            <summary> Gets or sets the machine side connection of this tool assembly component. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.HasManufacturer">
            <summary> Tests if Manufacturer reference property is set. </summary>
            <returns> true if Manufacturer is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.Manufacturer">
            <summary> Gets or sets the manufacturer of this tool assembly component. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.HasStoredProfile">
            <summary> Tests if StoredProfile reference property is set. </summary>
            <returns> true if StoredProfile is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.StoredProfile">
            <summary> Gets or sets the stored profile of this tool assembly component. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.SetGaugeLength(System.Double,System.Boolean)">
            <summary> Sets GaugeLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.GetGaugeLength(System.Boolean)">
            <summary> Gets GaugeLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheGaugeLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.GaugeLength">
            <summary> Gauge Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.SetGaugeDiameter(System.Double,System.Boolean)">
            <summary> Sets GaugeDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.GetGaugeDiameter(System.Boolean)">
            <summary> Gets GaugeDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheGaugeDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.GaugeDiameter">
            <summary> Gauge Diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.ToolTypeID">
            <summary> Tool type Identifier </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.MaterialID">
            <summary> Material Identifier </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.IsCatalogItem">
            <summary> Catalog item flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.ThruCoolant">
            <summary> Thru Coolant </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.IsMetric">
            <summary> Metric Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.QuantityOnHand">
            <summary> Quantity On Hand </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.HasModelFile">
            <summary> Tests if ModelFile reference property is set. </summary>
            <returns> true if ModelFile is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.ModelFile">
            <summary> Main Model File </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.GeometryFile">
            <summary> Geometry File </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.Location">
            <summary> Location </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.CatalogID">
            <summary> Catalog Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.op_Assign(Cnc.Tool.Interop.TlAssemblyItem!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.CopyFrom(Cnc.Tool.Interop.TlAssemblyItem)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.#ctor(Cnc.Tool.Interop.TlAssemblyItem!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlGraphicsFileCollection.GraphicsFiles">
            <summary> Gets or sets the vector of graphics files associated to this item. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.op_Assign(Cnc.Tool.Interop.TlGraphicsFileCollection!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.CopyFrom(Cnc.Tool.Interop.TlGraphicsFileCollection)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.#ctor(Cnc.Tool.Interop.TlGraphicsFileCollection!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.GetFileDataSize">
            <summary>   Gets the file data binary size. </summary>
            <returns>   The file data binary size. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.SetFileData(System.String)">
            <summary> Sets the file data using the path to the Parasolid transmit (.x_b) file. </summary>
            <param name="filePath"> Full pathname of the file. Must be a Parasolid transmit (.x_b) file. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlGraphicsFile.FileFormat">
            <summary> Gets or sets the graphics file format. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlGraphicsFile.FileData">
            <summary> Gets or sets graphics file data in byte form. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.op_Assign(Cnc.Tool.Interop.TlGraphicsFile!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.CopyFrom(Cnc.Tool.Interop.TlGraphicsFile)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.#ctor(Cnc.Tool.Interop.TlGraphicsFile!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.SetTranslation(System.Windows.Media.Media3D.Point3D,System.Boolean)">
            <summary>	Sets the translation portion of the locator, scaling the input value if necessary. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	True if the value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.GetTranslation(System.Boolean)">
            <summary>	Gets the translation portion of the locator in the specified units. </summary>
            <param name="getValueInMetric">	True to get the translation portion in metric. </param>
            <returns>	The translation portion of the locator. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLocator.Translation">
            <summary>	Gets or sets the translation portion of the locator. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLocator.IsMetric">
            <summary> Gets or sets a value indicating whether this locator is in Metric units or not. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLocator.Rotation">
            <summary> Gets or sets the rotation portion of the locator. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.op_Assign(Cnc.Tool.Interop.TlLocator!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.CopyFrom(Cnc.Tool.Interop.TlLocator)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.#ctor(Cnc.Tool.Interop.TlLocator!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.AddOpTypeID(System.Guid)">
            <summary>	Adds an operation type identifier. </summary>
            <param name="opTypeID">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.AddOpTypeID(Cnc.Tool.Interop.TlOpType)">
            <summary>	Adds an operation type identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.GetOpTypeIDs">
            <summary>	Gets the operation type ids. </summary>
            <returns>	The operation type ids. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.op_Assign(Cnc.Tool.Interop.TlOpGroup!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.CopyFrom(Cnc.Tool.Interop.TlOpGroup)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.#ctor(Cnc.Tool.Interop.TlOpGroup!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.GetNativeTlObjectPointer">
            <summary> Gets smart pointer to native TlObject. </summary>
            <returns> The smart pointer to native TlObject (always non-null). </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.ResetIDs">
            <summary> Resets all identifiers associated to this object. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.SetID(System.Guid)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.GetID">
            <summary>	Gets the identifier. </summary>
            <returns>	The identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.op_Inequality(Cnc.Tool.Interop.TlObject,Cnc.Tool.Interop.TlObject)">
            <summary> Inequality operator. </summary>
            <param name="a"> The first instance to compare. </param>
            <param name="b"> The second instance to compare. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.op_Equality(Cnc.Tool.Interop.TlObject,Cnc.Tool.Interop.TlObject)">
            <summary> Equality operator. </summary>
            <param name="a"> The first instance to compare. </param>
            <param name="b"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.Finalize">
            <summary> Finaliser. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlObject.Slot">
            <summary> Gets or sets the slot index of this object. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlObject.Description">
            <summary> Gets or sets the description of this object. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlObject.Name">
            <summary> Gets or sets the name of this object. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.op_Assign(Cnc.Tool.Interop.TlObject!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> [in,out] The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.CopyFrom(Cnc.Tool.Interop.TlObject)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.#ctor(Cnc.Tool.Interop.TlObject!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to managed object to reference. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.#ctor(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Default Constructor. </summary>
            <summary> Constructor. </summary>
            <param name="spNativeObject"> Pointer to underlying native object to wrap. </param>
        </member>
        <member name="T:ent_tp">
            <summary> Create struct that matches the legacy ent_tp structure.  We use a struct instead of using or
		  typedef in order to preserve the existing use of forward declarations. </summary>
        </member>
        <member name="T:ent">
            <summary> Create struct that matches the legacy ent structure.  We use a struct instead of using or
		  typedef in order to preserve the existing use of forward declarations. </summary>
        </member>
        <member name="T:EntTpUnion">
            <summary>A streamlined entity union used to store toolpath entity information only.</summary>
        </member>
        <member name="T:EntUnion">
@note If a ent member is added between pad and u and the new member
*		  is not supposed to be part of the ent header, the define below
*		  must be changed to use the new member in place of u. 
<summary>The union portion of the Entity.  Contains the data for the specific type actually stored
		 in the entity, as indicated by the entity's id and assoc_id.</summary></member>
        <member name="T:EntHeader">
            <summary>A type that is used to just contain the "header" portion of the ent structure.</summary>
        </member>
        <member name="T:EntUnionEmpty">
            <summary>An empty struct that allows us to construct an "ent header".</summary>
        </member>
        <member name="T:assoc_setup">
setup and stock definition 
</member>
        <member name="T:assoc_hdr">
mc7 associative file header definition 
</member>
        <member name="T:nci_bin_5ax">
5ax abbreviated nci entity - definition
</member>
        <member name="T:nci_bin">
@} 
nci entity - definition
</member>
        <member name="T:nci_disp_marker">
mill nci - mark start/end of NCI display section
</member>
        <member name="T:nci_ctour_sect">
mill nci - contour start section marker (used in contour temp file)
</member>
        <member name="T:nci_pock_ktd_move">
mill nci - pocket start/end keep tool down move marker (used in pocket temp file)
</member>
        <member name="T:nci_pock_sect">
mill nci - pocket start section marker (used in pocket temp file)
</member>
        <member name="T:nci_nocore_sect">
wire nci - nocore start section marker (used in pocket temp file)
</member>
        <member name="T:nci_marker">
mill nci - mark start/end of cut/pass
</member>
        <member name="T:nci_nest_prt">
nci - part info
</member>
        <member name="T:nci_nest_sht">
nci - sheet change marker
</member>
        <member name="T:nci_sop">
start of operation output for the post
Note: The start of transform op is not marked but the
start of transformed ops within the transform op are marked.
</member>
        <member name="T:nci_eos">
mill nci - end of operation's nci section
</member>
        <member name="T:nci_sos">
@} 
@defgroup nci_start nci - start of operation's nci section 
@{ 
</member>
        <member name="T:nci_event_2919">
event bnci - unused
</member>
        <member name="T:nci_event_2918">
event bnci - unused
</member>
        <member name="T:nci_event_2917">
event bnci - unused
</member>
        <member name="T:nci_event_2916">
event bnci - unused
</member>
        <member name="T:nci_event_2915">
event bnci - unused
</member>
        <member name="T:nci_event_2914">
event bnci - unused
</member>
        <member name="T:nci_event_2913">
event bnci - unused
</member>
        <member name="T:nci_event_2912">
event bnci - unused
</member>
        <member name="T:nci_event_2911">
event bnci - unused
</member>
        <member name="T:nci_event_2910">
event bnci - unused
</member>
        <member name="T:nci_event_2909">
event bnci - unused
</member>
        <member name="T:nci_event_2908">
event bnci - unused
</member>
        <member name="T:nci_event_2907">
event bnci - unused
</member>
        <member name="T:nci_event_2906">
event bnci - unused
</member>
        <member name="T:nci_event_2905">
event bnci - unused
</member>
        <member name="T:nci_event_2904">
event bnci - unused
</member>
        <member name="T:nci_event_2903">
event bnci - feed type
</member>
        <member name="T:nci_event_2902">
event bnci - feed rate
</member>
        <member name="T:nci_event_2901">
event bnci - tool spindle rpm/css
</member>
        <member name="T:nci_event_2900">
event bnci - part spindle rpm/css
</member>
        <member name="T:nci_event_2881">
event bnci - work shift select
</member>
        <member name="T:nci_event_2880">
event bnci - work offset select
</member>
        <member name="T:nci_event_2852">
event bnci - drill cancel
</member>
        <member name="T:nci_event_2851">
event bnci - drill reference
</member>
        <member name="T:nci_event_2848">
event bnci - axis clamp select
</member>
        <member name="T:nci_event_2847">
event bnci - rtcp select
</member>
        <member name="T:nci_event_2846">
event bnci - reference return select
</member>
        <member name="T:nci_event_2845">
event bnci - polar cylinder select
</member>
        <member name="T:nci_event_2844">
event bnci - cutter comp select
</member>
        <member name="T:nci_event_2843">
event bnci - plane select
</member>
        <member name="T:nci_event_2842">
event bnci - abs/inc select
</member>
        <member name="T:nci_event_2841">
event bnci - unit select
</member>
        <member name="T:nci_event_2840">
event bnci - motion select
</member>
        <member name="T:nci_event_2832">
event bnci - comment output
</member>
        <member name="T:nci_event_2830">
event bnci - tool table
</member>
        <member name="T:nci_event_2812">
event bnci - tool stage
</member>
        <member name="T:nci_event_2811">
event bnci - tool call
</member>
        <member name="T:nci_event_2810">
event bnci - tool offset
</member>
        <member name="T:nci_event_2808">
event bnci - a axis motion place holder
</member>
        <member name="T:nci_event_2807">
event bnci - tool change approach place holder
</member>
        <member name="T:nci_event_2806">
event bnci - b axis motion place holder
</member>
        <member name="T:nci_event_2805">
event bnci - axis motion place holder
</member>
        <member name="T:nci_event_2801">
event bnci - tool change event list end
</member>
        <member name="T:nci_event_2800">
event bnci - tool change event list start
</member>
        <member name="T:nci_event_2705">
event bnci - stock transfer
</member>
        <member name="T:nci_event_2704">
event bnci - custom (canned text)
</member>
        <member name="T:nci_event_2703">
event bnci - manual entry
</member>
        <member name="T:nci_event_2702">
event bnci - join token
This is only used in the toolpath simulation, it is not passed to the post
</member>
        <member name="T:nci_event_2701">
event bnci - macro end
</member>
        <member name="T:nci_event_2700">
event bnci - macro start
</member>
        <member name="T:nci_event_2699">
event bnci - macro else
</member>
        <member name="T:nci_event_2620">
event bnci - transform subprogram marker
</member>
        <member name="T:nci_event_2612">
event bnci - join
</member>
        <member name="T:nci_event_2606">
event bnci - hidden part rotary axis master event
</member>
        <member name="T:nci_event_2605">
event bnci - part rotary axis master event
</member>
        <member name="T:nci_event_2604">
event bnci - hidden part spindle speed master event
</member>
        <member name="T:nci_event_2603">
event bnci - part spindle speed master event
</member>
        <member name="T:nci_event_2602">
event bnci - hidden tool change marker event
</member>
        <member name="T:nci_event_2600">
event bnci - sync event
</member>
        <member name="T:nci_event_2586">
event bnci - part spindle stock grip length move
</member>
        <member name="T:nci_event_2585">
event bnci - part spindle stock clearance move 
</member>
        <member name="T:nci_event_2580">
event bnci - part spindle advance/retract 
</member>
        <member name="T:nci_event_2571">
event bnci - bar puller stock grip length move
</member>
        <member name="T:nci_event_2570">
event bnci - bar puller stock clearance move
</member>
        <member name="T:nci_event_2566">
event bnci - tool linear 3d (mill)
</member>
        <member name="T:nci_event_2563">
event bnci - tool stock clearance move 2d (lathe)
</member>
        <member name="T:nci_event_2561">
event bnci - tool linear 2d
</member>
        <member name="T:nci_event_2543">
event bnci - bar feed
</member>
        <member name="T:nci_event_2540">
event bnci - bar feed lock/unlock
</member>
        <member name="T:nci_event_2533">
event bnci - steady rest advance/retract
</member>
        <member name="T:nci_event_2532">
event bnci - steady rest roller lock/unlock
</member>
        <member name="T:nci_event_2531">
event bnci - steady rest pin advance/retract
</member>
        <member name="T:nci_event_2530">
event bnci - steady rest open/close
</member>
        <member name="T:nci_event_2529">
event bnci - tailstock quill retract
</member>
        <member name="T:nci_event_2528">
event bnci - tailstock quill advance
</member>
        <member name="T:nci_event_2525">
event bnci - tailstock quill lock/unlock
</member>
        <member name="T:nci_event_2514">
event bnci - tailstock retract
</member>
        <member name="T:nci_event_2513">
event bnci - tailstock advance
</member>
        <member name="T:nci_event_2511">
event bnci - tailstock pin advance/retract
</member>
        <member name="T:nci_event_2510">
event bnci - tailstock lock/unlock
</member>
        <member name="T:nci_event_2500">
event bnci - axis motion
</member>
        <member name="T:nci_event_2240">
event bnci - dwell
</member>
        <member name="T:nci_event_2227">
event bnci - tool spindle air blast on/off
</member>
        <member name="T:nci_event_2226">
event bnci - tool spindle orient 
</member>
        <member name="T:nci_event_2224">
event bnci - tool spindle speed clamp 
</member>
        <member name="T:nci_event_2223">
event bnci - tool spindle live spindle enable/disable
</member>
        <member name="T:nci_event_2222">
event bnci - tool spindle direction with coolant
</member>
        <member name="T:nci_event_2221">
event bnci - tool spindle direction
</member>
        <member name="T:nci_event_2220">
event bnci - tool spindle speed
</member>
        <member name="T:nci_event_2208">
event bnci - part spindle rpm from css
</member>
        <member name="T:nci_event_2207">
event bnci - part spindle air blast on/off
</member>
        <member name="T:nci_event_2206">
event bnci - part orient 
</member>
        <member name="T:nci_event_2205">
event bnci - part spindle sync on/off
</member>
        <member name="T:nci_event_2204">
event bnci - part spindle speed clamp 
</member>
        <member name="T:nci_event_2203">
event bnci - part spindle mill axis enable/disable
</member>
        <member name="T:nci_event_2202">
event bnci - part spindle direction with coolant
</member>
        <member name="T:nci_event_2201">
event bnci - part spindle direction
</member>
        <member name="T:nci_event_2200">
event bnci - part spindle speed
</member>
        <member name="T:nci_event_2180">
event bnci - part catcher advance/retract
</member>
        <member name="T:nci_event_2170">
event bnci - eject pin advance/retract
</member>
        <member name="T:nci_event_2140">
event bnci - bar puller open/close
</member>
        <member name="T:nci_event_2110">
event bnci - chuck open/close
</member>
        <member name="T:nci_event_2104">
event bnci - retract coolant place holder
</member>
        <member name="T:nci_event_2103">
event bnci - approach coolant place holder
</member>
        <member name="T:nci_event_2102">
event bnci - coolant
</member>
        <member name="T:nci_event_2100">
event bnci - program stop
</member>
        <member name="T:nci_event_2099">
event bnci - event list header event
</member>
        <member name="T:nci_event_2002">
event bnci - tool change retract event list
</member>
        <member name="T:nci_event_2001">
event bnci - tool change approach event list
</member>
        <member name="T:nci_event_2000">
@defgroup custom ops event bnci lines 
@{ 
event bnci - custom op event list
</member>
        <member name="T:nci_nest_prm2">
nesting nci - miscellaneous parameters #2
</member>
        <member name="T:nci_nest_prm1">
nesting nci - miscellaneous parameters #1
</member>
        <member name="T:nci_wire_22001">
wire nci - Agie data
</member>
        <member name="T:nci_wire_20200">
wire nci - stock to leave
</member>
        <member name="T:nci_lathe_20112">
lathe nci - tool definition - custom tool geometry file name
</member>
        <member name="T:nci_lathe_20111">
lathe nci - tool definition - tool holder parameters
</member>
        <member name="T:nci_lathe_20110">
lathe nci - tool definition - tool holder name
</member>
        <member name="T:nci_lathe_20109">
lathe nci - tool definition - drilling tool parameters (cutting)
</member>
        <member name="T:nci_lathe_20108">
lathe nci - tool definition - drilling tool parameters (geometry)
</member>
        <member name="T:nci_lathe_20107">
lathe nci - tool definition - grooving/parting insert parameters
</member>
        <member name="T:nci_lathe_20106">
lathe nci - tool definition - threading insert parameters
</member>
        <member name="T:nci_lathe_20105">
lathe nci - tool definition - general turning/boring insert parameters
</member>
        <member name="T:nci_lathe_20104">
lathe nci - tool definition - tool insert general parameters
</member>
        <member name="T:nci_lathe_20103">
lathe nci - tool definition - tool insert name
</member>
        <member name="T:nci_lathe_20102">
lathe nci - tool definition - tool geometric parameters
</member>
        <member name="T:nci_lathe_20101">
lathe nci - tool definition - tool general cutting parameters
</member>
        <member name="T:nci_lathe_20100">
lathe nci - tool definition - tool programming parameters
</member>
        <member name="T:nci_mill_20800">
multiaxis comp in control value
</member>
        <member name="T:nci_mill_20017">
mill nci - matl comment
</member>
        <member name="T:nci_mill_20016">
mill nci - matl name
</member>
        <member name="T:nci_mill_20015">
mill nci - wcs comment
</member>
        <member name="T:nci_mill_20014">
mill nci - wcs name
</member>
        <member name="T:nci_mill_20013">
mill nci - tpln comment
</member>
        <member name="T:nci_mill_20012">
mill nci - tpln name
</member>
        <member name="T:nci_mill_20011">
mill nci - cpln comment
</member>
        <member name="T:nci_mill_20010">
mill nci - cpln name
</member>
        <member name="T:nci_mill_20009">
mill nci - tool definition - custom parameters
</member>
        <member name="T:nci_mill_20008">
mill nci - tool definition - head parameters
</member>
        <member name="T:nci_mill_20007">
mill nci - tool definition - holder parameters
</member>
        <member name="T:nci_mill_20006a">
mill nci - tool definition - mill type tool specific parameters
</member>
        <member name="T:nci_mill_20005">
mill nci - tool definition - drill type tool specific parameters
</member>
        <member name="T:nci_mill_20004">
mill nci - tool definition - tool parameters
</member>
        <member name="T:nci_mill_20003">
mill nci - tool definition - chuck name
</member>
        <member name="T:nci_lathe_20002">
lathe nci - tool definition - manufacturer
</member>
        <member name="T:nci_mill_20002a">
mill nci - tool definition - manufacturer
</member>
        <member name="T:nci_lathe_20001">
lathe nci - tool definition - tool comment (name)
</member>
        <member name="T:nci_mill_20001">
mill nci - tool definition - tool comment
</member>
        <member name="T:nci_lathe_20000">
lathe nci - tool definition - mc7 path for custom tool geometry
</member>
        <member name="T:nci_mill_20000">
mill nci - tool definition - mc7 path for tool reference
</member>
        <member name="T:nci_prm">
mill nci - operation parameters
</member>
        <member name="T:nci_mill_1055">
tool inspection comment
</member>
        <member name="T:nci_mill_1053">
machine group name
</member>
        <member name="T:nci_mill_1052">
machine group comment
</member>
        <member name="T:nci_mill_1051">
machine name
</member>
        <member name="T:nci_lathe_1050">
lathe nci - version, date and geometry file name
</member>
        <member name="T:nci_mill_1050">
mill nci - version, date and geometry file name
</member>
        <member name="T:nci_mill_1032">
mill nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1031">
mill nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1017">
lathe nci - construction plane 3x3 matrix
</member>
        <member name="T:nci_lathe_1020">
lathe nci - stock description
</member>
        <member name="T:nci_mill_1029">
Mill/Router nci - Multi head, block, station info part 2 
</member>
        <member name="T:nci_mill_1028">
Mill/Router nci - Multi head, block, station info part 1 -block tools/drills/aggregates 
</member>
        <member name="T:nci_wire_1025">
wire - canned text
</member>
        <member name="T:nci_lathe_1025">
lathe - canned text
</member>
        <member name="T:nci_lathe_1027">
lathe nci - working coordinate system
</member>
        <member name="T:nci_mill_1027">
mill nci - working coordinate system
</member>
        <member name="T:nci_mill_1025">
mill - canned text
</member>
        <member name="T:nci_wire_1020">
mill nci - stock description
</member>
        <member name="T:nci_mill_1020">
mill nci - stock description
</member>
        <member name="T:nci_mill_1019">
mill nci - end of sub program section
</member>
        <member name="T:nci_mill_1018">
mill nci - start of sub program section
</member>
        <member name="T:nci_mill_1017">
mill nci - construction plane 3x3 matrix
</member>
        <member name="T:nci_wire_1016">
wire nci - associative params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1016">
lathe nci - associative params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1016">
mill nci - associative params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1015">
wire nci - subroutine parameters
</member>
        <member name="T:nci_lathe_1014">
lathe nci - tool plane 3x3 matrix
</member>
        <member name="T:nci_mill_1014">
mill nci - tool plane 3x3 matrix
</member>
        <member name="T:nci_wire_1013">
wire nci - miscellaneous params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1013">
lathe nci - miscellaneous params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1013">
mill nci - miscellaneous params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1012">
wire nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1012">
lathe nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1012">
mill nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1011">
wire nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1011">
lathe nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1011">
mill nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1010">
wire nci - control settings change
</member>
        <member name="T:nci_wire_1009">
wire nci - wirepath length
</member>
        <member name="T:nci_wire_1008">
wire nci - operation comment
</member>
        <member name="T:nci_lathe_1008">
lathe nci - operation comment
</member>
        <member name="T:nci_mill_1008">
mill nci - operation comment
</member>
        <member name="T:nci_wire_1005">
wire nci - comment (manual entry)
</member>
        <member name="T:nci_lathe_1005">
lathe nci - comment (manual entry)
</member>
        <member name="T:nci_mill_1005">
mill nci - comment (manual entry)
</member>
        <member name="T:nci_wire_1004">
wire nci - cancel cutter comp in control
</member>
        <member name="T:nci_lathe_1004">
lathe nci - cancel cutter comp in control
</member>
        <member name="T:nci_mill_1004">
mill nci - cancel cutter comp in control
</member>
        <member name="T:nci_wire_1003">
wire nci - end of file
</member>
        <member name="T:nci_lathe_1003">
lathe nci - end of file
</member>
        <member name="T:nci_mill_1003">
mill nci - end of file
</member>
        <member name="T:nci_wire_1002">
wire nci - start of nci file and/or tool change
</member>
        <member name="T:nci_lathe_1002">
lathe nci - start of nci file and/or tool change
</member>
        <member name="T:nci_mill_1002">
mill nci - start of nci file and/or tool change
</member>
        <member name="F:nci_20701.pad">
for rent
</member>
        <member name="F:nci_20701.useAltTurretIndexPosn">
alternate turret position flag (turret lathe)
</member>
        <member name="F:nci_20701.toolNumber">
tool number
</member>
        <member name="F:nci_20701.toolStation">
tool station number
</member>
        <member name="F:nci_20701.mdSequentialIndex">
ATC tool pocket, turret index position, gang tool = station
</member>
        <member name="F:nci_20701.changerId">
ent_idn of tool changer component
</member>
        <member name="F:nci_20701.changerType">
tool changer type: 
ATC_COMPONENT, TURRET_COMPONENT, MT_TURRET_COMPONENT, GANG_TOOL_COMPONENT
</member>
        <member name="T:nci_20701">
nci enhanced tool change information
</member>
        <member name="T:nci_lathe_950">
lathe nci - axis combination
</member>
        <member name="T:nci_mt_turret">
turret operation
</member>
        <member name="T:nci_mt_tailstock">
tailstock operation
</member>
        <member name="T:nci_mt_spindle_sync">
spindle sync operation
</member>
        <member name="T:nci_mt_spindle_move">
spindle advance/retract operation
</member>
        <member name="T:nci_mt_spindle_grip">
chuck clamp/unclamp operation
</member>
        <member name="T:nci_mt_bar_feed">
bar feed operation
</member>
        <member name="T:nci_mt_bar_feeder">
bar feeder on/off
</member>
        <member name="T:nci_mt_bar_puller">
bar puller open/close
</member>
        <member name="T:nci_lathe_912">
lathe nci - miscops custom integer parameters
</member>
        <member name="T:nci_lathe_911">
lathe nci - miscops custom real parameters
</member>
        <member name="T:nci_lathe_906">
lathe nci - turret park operation - obsolete
</member>
        <member name="T:nci_lathe_905">
lathe nci - steady rest position operation
</member>
        <member name="T:nci_lathe_904">
lathe nci - tailstock position operation
</member>
        <member name="T:nci_lathe_903">
lathe nci - chuck clamp/un-clamp, reposition operation
</member>
        <member name="T:nci_lathe_902">
lathe nci - stock bar feed operation
</member>
        <member name="T:nci_lathe_901">
lathe nci - stock flip operation
</member>
        <member name="T:nci_lathe_900">
lathe nci - stock transfer operation
</member>
        <member name="T:nci_lathe_201">
lathe nci - start of threading cycle
</member>
        <member name="T:nci_lathe_200">
lathe nci - threading cycle
</member>
        <member name="T:nci_wire_100">
wire nci - canned cycle point position
</member>
        <member name="T:nci_mill_100">
mill nci - canned cycle point position
</member>
        <member name="T:nci_mill_83">
nci - drill block parameters
</member>
        <member name="T:nci_wire_81">
wire nci - start canned cycle
</member>
        <member name="T:nci_lathe_81">
lathe nci - start canned cycle
</member>
        <member name="T:nci_lathe_82">
lathe nci - custom drill parameters
</member>
        <member name="T:nci_mill_82">
mill nci - custom drill parameters
</member>
        <member name="T:nci_mill_81">
mill nci - start canned cycle
</member>
        <member name="T:nci_wire_80">
wire nci - cancel canned cycle
</member>
        <member name="T:nci_lathe_80">
lathe nci - cancel canned cycle
</member>
        <member name="T:nci_mill_80">
mill nci - cancel canned cycle
</member>
        <member name="T:nci_wire_22">
wire nci - 4axis direct arc XY or UV move (gcodes 22, 23, 32, 33)
</member>
        <member name="T:nci_wire_20">
wire nci - 4axis direct linear XY or UV move (gcodes 20, 21, 30, 31)
</member>
        <member name="T:nci_wire_11">
wire nci - 4axis longhand
</member>
        <member name="T:nci_mill_11">
mill nci - 5 axis move
</member>
        <member name="T:nci_wire_4">
wire nci - dwell
</member>
        <member name="T:nci_lathe_4">
mill nci - dwell
</member>
        <member name="T:nci_mill_4">
mill nci - dwell
</member>
        <member name="T:nci_wire_2">
wire nci - arc feed move
</member>
        <member name="T:nci_lathe_2">
lathe nci - arc feed move
</member>
        <member name="T:nci_mill_2">
mill nci - arc feed move
</member>
        <member name="T:nci_lathe_1">
lathe nci - linear feed move
</member>
        <member name="T:nci_mill_1">
mill nci - linear feed move
</member>
        <member name="T:nci_wire_0">
wire nci - rapid or feed move (depends on gcode 0 or 1)
</member>
        <member name="T:nci_mill_0">
mill nci - rapid move
</member>
        <member name="T:op_list">
for linked lists of operation entities 
</member>
        <member name="T:operation">
operation parameter definition
* @note If a operation member is added between version and u and the new
*		 member is not supposed to be part of the operation header, the define
*		 below must be changed to use the new member in place of u.

</member>
        <member name="T:op_smoothing_5d">
operation parameters - multiaxes smoothing parameters 
</member>
        <member name="T:arcFeedOverride">
            <summary> For Override Arc Feedrate on Arc Filter / Tolerance page. </summary>
        </member>
        <member name="T:op_feedrate_optimization">
operation parameters - Feedrate optimization 
</member>
        <member name="T:op_rotary">
operation parameters - common rotary parameters 
c-axis = polar conversion (3 axis)
y-axis = toolplane positioning (rotary positioning)
</member>
        <member name="T:op_tool_display">
operation parameters - common toolpath display parameters 
</member>
        <member name="T:op_lead_io">
operation parameters - contour lead in-out parameters 
</member>
        <member name="T:op_entry_exit">
operation parameters - contour entry-exit parameters 
</member>
        <member name="T:op_home_pos">
operation parameters - home position 
</member>
        <member name="T:op_multi_cuts">
operation parameters - pocket and contour multi cuts 
</member>
        <member name="T:op_depth_cuts">
operation parameters - pocket and contour depth cuts 
</member>
        <member name="T:op_depth_cuts_v7">
operation parameters - pocket and contour depth cuts 
</member>
        <member name="T:op_view">
operation parameters - tool and construction planes 
</member>
        <member name="T:op_cc">
operation parameters - cutter comp 
</member>
        <member name="T:op_cc_control">
operation parameters - cutter comp in control 
</member>
        <member name="T:op_cc_computer">
operation parameters - cutter comp in computer 
</member>
        <member name="T:op_filter">
operation parameters - toolpath filter settings 
</member>
        <member name="T:op_v8">
operation parameters - more room
</member>
        <member name="T:op_events">
operation events
</member>
        <member name="T:op_canned_text">
operation parameters - canned text 
</member>
        <member name="T:op_aux_file">
auxiliary file name - mill:msurf recut file, wire:material library
</member>
        <member name="T:op_common">
operation parameters - common parameters for all mill operation types 
</member>
        <member name="T:op_db">
operation parameters - database info 
</member>
        <member name="D:PlanePtr">
            <summary> Defines an alias representing the plane pointer. </summary>
        </member>
        <member name="M:Plane.DebugPlaneNameStr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calls DebugPlaneStr() with this plane's name. </summary>
            <param name="msg"> The message. </param>
        </member>
        <member name="M:Plane.SubtractMatrix33AndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between given matrix and origin and TOP and transform this plane by that amount. </summary>
            <param name="m33">	    3x3 matrix to subtract from this. </param>
            <param name="originPt"> Point in world coordinates to subtract from this. </param>
        </member>
        <member name="M:Plane.SubtractPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between given plane and TOP and transform this plane by that amount. </summary>
            <param name="thePlane"> Plane to subtract from this. </param>
        </member>
        <member name="M:Plane.AddMatrix33AndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between TOP and given matrix and origin and transform this plane by that amount. </summary>
            <param name="m33">	    3x3 matrix to add to this. </param>
            <param name="originPt"> Point in world coordinates to add to add to this. </param>
        </member>
        <member name="M:Plane.AddPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between TOP and given plane and transform this plane by that amount. </summary>
            <param name="thePlane"> Plane to add to this. </param>
        </member>
        <member name="M:Plane.AddOrSubtractMatrix33AndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Calculate the transformation matrix between TOP and given matrix and origin and transform this plane by
		  that amount. </summary>
            <param name="m33">	    3x3 matrix to add to this. </param>
            <param name="originPt"> Point in world coordinates to add to add to this. </param>
            <param name="add">	    True to add, false to subtract. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.InverseTransformMatrixAndOrigin(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inverse transform matrix and origin. </summary>
            <param name="xfm">			 The transform. </param>
            <param name="m33">			 The 3x3 matrix. </param>
            <param name="worldOriginPt"> The world origin point. </param>
        </member>
        <member name="M:Plane.UndoXformApplyNext(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between to views and origins. </summary>
            <param name="from33"> Source view. </param>
            <param name="fromPt"> Source origin in world coordinates. </param>
            <param name="to33">   Destination view. </param>
            <param name="toPt">   Destination origin in world coordinates. </param>
            <returns> transformation matrix. </returns>
        </member>
        <member name="M:Plane.CreationMethodRequiresValidSelectionIndex">
            <summary> See if m_CreationMethod requires a valid matrix option selection index. </summary>
            <returns> true if it it does, false if it doesn't. </returns>
        </member>
        <member name="M:Plane.InitOperationView(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Initialize an op_view to the contents of this plane. </summary>
            <param name="opView">	    op_view to initialize. </param>
            <param name="refPlanes">    A reference to a MastercamPlanes objcet to get the view # from. </param>
            <param name="doWorkOffset"> true = set op_view.woff_n, false = maintain current op_view.woff_n value. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Plane.Regenerate(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> / &lt;summary&gt;Create a geometry id/eptr map and regenerate the plane to its associated geometry.  This
		  should only be called if in the current db. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="regenMode"> The regen mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Regenerate(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> / &lt;summary&gt;Regenerate the plane to its associated geometry.  This should only
		  			 be called if in the current db. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="geomMap">   The geometry map. </param>
            <param name="regenMode"> The regen mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.ConstructorCheck">
            <summary> set m_RegenErrors from constructor values. </summary>
            <returns> returns true if okay. </returns>
        </member>
        <member name="M:Plane.EraseGnomon">
            <summary> create and draw the Plane's icon in the screen background color. </summary>
        </member>
        <member name="M:Plane.DrawGnomon(System.Boolean,System.Boolean,System.Boolean)">
            <summary> Create and draw the Plane's gnomon in its native color. </summary>
            <param name="includeName"> true to include the plane name. </param>
            <param name="selected">    (Optional) true if plane planel active and plane selected (default = false). </param>
            <param name="enable">      (Optional) true to draw as enabled; false to draw as disabled (default = true). </param>
        </member>
        <member name="M:Plane.CreateGnomon(System.Boolean)">
            <summary> Create a PlaneGnomon for this plane in m_spGnomon. </summary>
            <param name="singleInstance"> true to single instance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.GetGnomonPtr">
            <summary> Return const pointer to m_spGnomon. </summary>
            <returns> The gnomon pointer. </returns>
        </member>
        <member name="M:Plane.MakePlanePtr(PlaneClass,Plane!System.Runtime.CompilerServices.IsConst*)">
            <summary> Allocates for a plane based on type. </summary>
            <param name="planeClass"> The plane class (SystemMatrix, NamedPlane, etc). </param>
            <param name="pPlane">	  (Optional) ptr to plane to copy. </param>
            <returns> Base class ptr to newly allocated plane. </returns>
        </member>
        <member name="M:Plane.PlaneToWorld(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in plane coordinates to world coordinates (map from plane's view, add the plane origin). </summary>
            <param name="planePt"> The point in plane coordinates. </param>
            <returns> P3D of world point relative to the plane's view and origin. </returns>
        </member>
        <member name="M:Plane.WorldToPlane(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in world coordinates to plane coordinates (map to plane's view, subtract the plane origin). </summary>
            <param name="worldPt"> The point in world coordinates. </param>
            <returns> P3D of world point relative to the plane's view and origin. </returns>
        </member>
        <member name="M:Plane.GetTemporary">
            <summary> Return value of m_Temporary. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.SetTemporary(System.Boolean)">
            <summary> Set m_Temporary. </summary>
            <param name="temporary"> if true, temporary plane will not be listed in Planes Manager and will be deleted on file/save. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:Plane.GetLparam">
            <summary> Gets the lparam. </summary>
            <returns> Return value of m_Lparam. </returns>
        </member>
        <member name="M:Plane.SetLparam(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Set optional user value. </summary>
            <param name="lParam"> value to set. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:Plane.SetEntityRefs(System.Boolean)">
            <summary> Increment or decrement ent.vw_refs in associated entities.  Should only be called if in the current db. </summary>
            <param name="increment"> true = increment, false = decrement. </param>
            <returns> return # of entities updated. </returns>
        </member>
        <member name="M:Plane.SetEntityRefs(System.Boolean,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Increment or decrement ent.vw_refs in associated entities.  Should only be called if in the current db. </summary>
            <param name="increment"> true = increment, false = decrement. </param>
            <param name="geomMap">   reference to geometry entities eptr/ID map, NULL will create one if regenerate is set to true. </param>
            <returns> return # of entities updated. </returns>
        </member>
        <member name="M:Plane.GetConstructorMethod">
            <summary> Gets constructor method. </summary>
            <returns> The constructor method. </returns>
        </member>
        <member name="M:Plane.GetRegenErrorString">
            <summary> return CString of m_RegenErrors. </summary>
            <returns> The regen error string. </returns>
        </member>
        <member name="M:Plane.GetRegenErrors">
            <summary> return value of m_RegenErrors. </summary>
            <returns> The regen errors. </returns>
        </member>
        <member name="M:Plane.SetRegenErrors(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set regeneration errors. </summary>
            <param name="regenErrors"> error mask to add. </param>
            <returns> return previous error values. </returns>
        </member>
        <member name="M:Plane.SelectOriginPoint(System.Boolean,CWnd*)">
            <summary> Call up dialog to define new origin point for this plane. </summary>
            <param name="do_draw"> Erase plane icon on dialog startup, draw icon on dialog exit. </param>
            <param name="pWindow"> (Optional) CWnd to parent window of dialog. </param>
            <returns> return true if origin point has been redefined. </returns>
        </member>
        <member name="M:Plane.SwapEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> swap old entity ID for new ID. </summary>
            <param name="oldID">	 the old entity ID. </param>
            <param name="newID">	 the new entity ID. </param>
            <param name="markDirty"> true = mark plane dirty if any ID's were swapped. </param>
            <returns> returns # of ID's swapped. </returns>
        </member>
        <member name="M:Plane.Erase">
            <summary> Erase the Plane's from the graphics window. </summary>
        </member>
        <member name="M:Plane.Draw(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Create and draw the Plane's wireframe icon in its native color. </summary>
            <param name="forceDraw">   (Optional) true to force drawing (ignore m_DisplayMode). </param>
            <param name="includeName"> (Optional) true to include the plane name (default = true). </param>
            <param name="selected">    (Optional) true if plane planel active and plane selected (default = false). </param>
            <param name="enable">      (Optional) true to draw as enabled; false to draw as disabled (default = true). </param>
        </member>
        <member name="M:Plane.ClearSelectedEntities">
            <summary> clear the Plane's points and selected entity info used in it's creation. </summary>
        </member>
        <member name="M:Plane.ConvertNoWorkOffset(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 op_view structure without overriding the op_view's work offset value. </summary>
            <param name="opView"> reference to X6 op_view structure to fill in. </param>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view # from. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Convert(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 op_view structure. </summary>
            <param name="opView">    reference to X6 op_view structure to fill in. </param>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view # from. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Convert(group_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 group_view structure. </summary>
            <param name="groupView">	  reference to X6 group_view structure to fill in. </param>
        </member>
        <member name="M:Plane.Convert(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 view_ent structure. </summary>
            <param name="viewEnt">   reference to X6 view_ent structure to fill in. </param>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view # from. </param>
        </member>
        <member name="M:Plane.Convert(prm_xform_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 view_ent structure. </summary>
            <param name="xformView"> reference to prm_xform_view structure to fill in. </param>
        </member>
        <member name="M:Plane.RemoveAssoc(Plane.AssocMask)">
            <summary> Removes the associated described by mask. </summary>
            <param name="mask"> Remove geometry association for the origin, matrix or both. </param>
        </member>
        <member name="M:Plane.ValidRelativeType(Plane.RelativeType)">
            <summary> validate relative plane type. </summary>
            <param name="relType"> relative plane  (RelativeType::Front, etc) </param>
            <returns> return true if relative type is valid. </returns>
        </member>
        <member name="M:Plane.ValidCoordinateDisplayMask(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Validate coordinate display mask (lathe or mill). </summary>
            <param name="coordinateDisplayMask"> coordinate display mask type. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Plane.ValidCoordinateDisplayType(CoordinateDisplayType)">
            <summary> Validate coordinate display type. </summary>
            <param name="coordinateDisplay"> coordinate display type. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Plane.CompareForEditing(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> return true if the plane can be edited (not reserved, etc) </summary>
            <param name="obj">		 the Plane to check. </param>
            <param name="checkLock"> true = check if lock is on. </param>
            <returns> true if the plane can be edited. </returns>
        </member>
        <member name="M:Plane.CompareForNciChanges(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare oldPlane against newPlane to determine if the change can affect a toolpath operation. </summary>
            <param name="newPlane"> New plane values. </param>
            <returns> true if a member variable's change will affect a toolpath operation, false if it won't. </returns>
        </member>
        <member name="M:Plane.CompareForPlaneRegen(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare given plane to this, return true if differences are great enough to require a 
		  regeneration of this plane (i.e. matrix or origin changed, but not name, etc). </summary>
            <param name="obj"> The plane to compare. </param>
            <returns> Returns mask (COMPARISON_MATRIX, etc). </returns>
        </member>
        <member name="M:Plane.IsParallel(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Check if this plane is parallel to given view #. </summary>
            <param name="m33">		 SystemMatrix to compare with this. </param>
            <param name="oppZ">		 [in,out] reference to bool will be set to true if Z component is in the opposite direction. </param>
            <param name="allowOppZ"> (Optional) true = allow opposite Z component check, false = all opposite Z component views are ignored. </param>
            <returns> Return true if parallel. </returns>
        </member>
        <member name="M:Plane.UsesEntityIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check if entity ID is used in this plane. </summary>
            <param name="entIDs"> Entity IDs to check for. </param>
            <returns> return true if any entity ID in the given set is associated with this plane. </returns>
        </member>
        <member name="M:Plane.ValidPlaneType(PlaneType,System.Boolean)">
            <summary> Check validity of plane type. </summary>
            <param name="whichPlane"> PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE. </param>
            <param name="warn">		  (Optional) debug only warning. </param>
            <returns> Return false if any other value was given in whichPlane. </returns>
        </member>
        <member name="M:Plane.Validate(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,EntityEptrMap!System.Runtime.CompilerServices.IsConst*)">
            <summary> check the Plane's data. </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="checkID">   check the assigned ID. </param>
            <param name="regenMode"> regeneration mode (REGEN_NATURAL, etc) </param>
            <param name="pGeomMap">  (Optional) pointer to geometry entities eptr/ID map, NULL will create one if regenerate is set to true. </param>
            <returns> returns true if all data is valid. </returns>
        </member>
        <member name="M:Plane.IsAssoc">
            <summary> return true if Plane is asscoiated to geometry. </summary>
            <returns> true if associated, false if not. </returns>
        </member>
        <member name="M:Plane.IsAssocCheck">
            <summary> Check to see if Plane can be associated to geometry and if it actually is, set m_IsAssoc to true. </summary>
            <returns> true if (m_IsAssoc == true), false if not. </returns>
        </member>
        <member name="M:Plane.CanBeAssoc">
            <summary> check to see if Plane is referencing any geometry by it's ID. </summary>
            <returns> returns who's assocaited to geometry, the origin and/or matrix </returns>
        </member>
        <member name="M:Plane.IsLatheCoordinateDisplay">
            <summary> Query if this object contains lathe coordinate display. </summary>
            <returns> true if lathe coordinate display, false if not. </returns>
        </member>
        <member name="M:Plane.IsReserved(System.Boolean)">
            <summary> return true if this plane is a reserved plane, false if it is not. </summary>
            <param name="warn"> (Optional) true to display warning. </param>
            <returns> return true if this plane is a reserved plane, false if it is not. </returns>
        </member>
        <member name="M:Plane.ValidCreationMethod(Plane.CreationMethod)">
            <summary> validate Plane creation method. </summary>
            <param name="creationMethod"> int representing creation method (CreationMethod::ThreePoints, etc) </param>
            <returns> returns true if valid. </returns>
        </member>
        <member name="M:Plane.IsTopAtZero">
            <summary> Return true if this plane is TOP at an origin of X0 Y0 Z0. </summary>
            <returns> true if top at zero, false if not. </returns>
        </member>
        <member name="M:Plane.MatrixAndOriginAreEqual(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Return true if this plane's matrix and origin match given plane's matrix and origin. </summary>
            <param name="thePlane"> a plane to compare this to. </param>
            <param name="warn">	    (Optional) true = debug only warning if not equal. </param>
            <returns> return true if equal within plane tolerance. </returns>
        </member>
        <member name="M:Plane.MatrixAndOriginAreEqual(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Return true if this plane's matrix and origin match given matrix and origin. </summary>
            <param name="m33">		 3x3 matrix to compare. </param>
            <param name="wOriginPt"> origin point in world coordinates to compare. </param>
            <param name="warn">		 (Optional) true = debug only warning if not equal. </param>
            <returns> return true if equal within plane tolerance. </returns>
        </member>
        <member name="M:Plane.GetIntersectionInView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate 3D intersection point within the given view for 2 entities. </summary>
            <param name="m33">		    view to calculate intersection in. </param>
            <param name="ent1">		    entity 1 of 2. </param>
            <param name="ent2">		    entity 2 of 2. </param>
            <param name="selPt1">	    2D selection point near entity 1. </param>
            <param name="selPt2">	    2D selection point near entity 2. </param>
            <param name="tVal">		    2D t value point for entity 1. </param>
            <param name="wIntersectPt"> calculated intersection point. </param>
            <returns> returns true if parallel. </returns>
        </member>
        <member name="M:Plane.LinesAreParallel(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> determine if the 2 given lines are parallel. </summary>
            <param name="line0"> line 1 of 2. </param>
            <param name="line1"> line 2 of 2. </param>
            <returns> returns true if parallel. </returns>
        </member>
        <member name="M:Plane.CheckFlat2lines(System.Boolean,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D)">
            <summary> determine the normal of the plane for two 3d lines. </summary>
            <param name="rejectIfSkew"> reject these lines (return false) if they do not lie in the same plane. </param>
            <param name="line0">	    line 1 of 2. </param>
            <param name="line1">	    line 2 of 2. </param>
            <param name="normXprd">	    normal of the plane that line0 and line1 lie in. </param>
            <returns> returns true if flat. </returns>
        </member>
        <member name="M:Plane.GetMatrixFrom2lines(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate a 3x3 matrixm view # and intersection point from 2 lines. </summary>
            <param name="line0">	    line 1 of 2. </param>
            <param name="line1">	    line 2 of 2. </param>
            <param name="m33">		    calculated 3x3 matrix. </param>
            <param name="wIntersectPt"> calculated intersection point. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.GetMatrixFrom2lines(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate a 3x3 matrix from 2 lines. </summary>
            <param name="line0"> line 1 of 2. </param>
            <param name="line1"> line 2 of 2. </param>
            <param name="m33">   calculated 3x3 matrix. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.GetMatrixFrom3points(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert 3 points into 2 lines and calculate a 3x3 matrix and an intersection point. </summary>
            <param name="pt1">		    point 1 of 3. </param>
            <param name="pt2">		    point 2 of 3. </param>
            <param name="pt3">		    point 3 of 3. </param>
            <param name="m33">		    calculated 3x3 matrix. </param>
            <param name="wIntersectPt"> calculated intersection point. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.RotateMatrix33(System.Double,System.Int32,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> rotate a Matrix33 about an axis by degrees. </summary>
            <param name="rotAngleDeg"> rotation amount in degrees. </param>
            <param name="rotAxis">	   the X, Y or Z axis to rotate about. </param>
            <param name="m33">		   the Matrix33 to rotate. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.RotateMatrix33Relative(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane.RelativeType)">
            <summary> rotate a Matrix33 by relative type. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="m33">		 [in,out] the Matrix33 to rotate. </param>
            <param name="relType">   the relative type (RelativeType::Front, etc) </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.MultiplyMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply this plane's matrix by the given matrix. </summary>
            <param name="m33"> a Matrix33 object to multiple this by. </param>
        </member>
        <member name="M:Plane.MultiplyMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply two 3x3 matrices. </summary>
            <param name="m1">	   a Matrix33 object. </param>
            <param name="m2">	   a Matrix33 object. </param>
            <param name="mResult"> the destination Matrix33 object ( m1 * m2) </param>
        </member>
        <member name="M:Plane.Transform(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Transform this plane by the given transformation matrix. </summary>
            <param name="xm">	    valid transformation matrix. </param>
            <param name="doOrigin"> transform plane origin too. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Rotate(System.Int32,System.Double)">
            <summary> Rotates an existing non-reserved, non-locked plane. </summary>
            <param name="axis">		   The axis to rotate about (X=0, Y=1, Z=2). </param>
            <param name="rotAngleDeg"> The rotation angle in degrees. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.RotateRelative(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane.RelativeType)">
            <summary> Transform this plane by a relative plane. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="relType">   RelativeType::Front, RelativeType::Back, etc. </param>
        </member>
        <member name="M:Plane.BnciCalcXmatrix(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XfmMatrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between to views and origins for bnci purposes. </summary>
            <param name="from33"> Source view. </param>
            <param name="fromPt"> Source origin in world coordinates. </param>
            <param name="to33">   Destination view. </param>
            <param name="toPt">   Destination origin in world coordinates. </param>
            <param name="xm">	  [in,out] Reference to transformation matrix to fill in. </param>
            <returns> Return true if calculation successful and contents of xm is valid. </returns>
        </member>
        <member name="M:Plane.BnciTransform(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Transform this for bnci purposes. </summary>
            <param name="xm">	    The transformation. </param>
            <param name="doOrigin"> True to do origin. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.CalcXmatrix(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between to views and origins. </summary>
            <param name="from33"> Source view. </param>
            <param name="fromPt"> Source origin in world coordinates. </param>
            <param name="to33">   Destination view. </param>
            <param name="toPt">   Destination origin in world coordinates. </param>
            <returns> Return transformation matrix. </returns>
        </member>
        <member name="M:Plane.TransformMatrixAndOrigin(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform a matrix and origin. </summary>
            <param name="xfm">			 The transform. </param>
            <param name="m33">			 [in,out] The matrix to transform. </param>
            <param name="worldOriginPt"> [in,out] The world origin point to transform. </param>
        </member>
        <member name="M:Plane.SetDependent(Plane.Dependent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the values in m_Dependent. </summary>
            <param name="depInfo"> Information describing the dependency. </param>
            <returns> Previous value of m_Dependent. </returns>
        </member>
        <member name="M:Plane.RemoveTransform">
            <summary> Inverse transform by m_Transform. </summary>
            <returns> Previous value of m_Transform. </returns>
        </member>
        <member name="M:Plane.SetTransform(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets our transform in m_Transform. </summary>
            <param name="xfm"> The transformation matrix. </param>
            <returns> Previous value of m_Transform. </returns>
        </member>
        <member name="M:Plane.InitTransform">
            <summary> Initializes the m_Transform. </summary>
            <returns> Previous value of m_Transform. </returns>
        </member>
        <member name="M:Plane.CopyNonReservedData(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy data that can be changed in a reserved Plane. </summary>
            <param name="thePlane"> The plane to copy from. </param>
        </member>
        <member name="M:Plane.SetDirty(System.Boolean)">
            <summary> Set plane's dirty flag. </summary>
            <param name="dirty"> true = dirty (requires regneration), false = clean. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:Plane.SetConstructorCoordinateDisplay(CoordinateDisplayType)">
            <summary> Sets coordinate display for all constructors.
		  This will be the default coordinate display value assigned to the Plane's upon instantiation. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.SetCoordinateDisplay(CoordinateDisplayType)">
            <summary> Set the plane's coordinate display mode. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> return previous value, -1 if invalid coordinateDisplay. </returns>
        </member>
        <member name="M:Plane.SetOutputCommentToNci(System.Boolean)">
            <summary> set the Plane's ouput comment to NCI mode. </summary>
            <param name="outputCommentToNci"> true = ouput Plane's comment to NCI. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetComment(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's comment string. </summary>
            <param name="comment"> a comment. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetDisplayMode(System.Int32)">
            <summary> set display (whether it will be drawn) to on or off. </summary>
            <param name="displayMode"> 1 = on, 0 = off. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetOriginPoint(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> set the Plane's origin. </summary>
            <param name="srcPt">	   the Plane's new origin in world coordinates. </param>
            <param name="removeAssoc"> true = remove info to associated geometry. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetOriginPoint(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's origin. </summary>
            <param name="srcPt"> the Plane's new origin in world coordinates. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetDestinationMatrixAndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets new matrix, origin and transform after removing old transform. </summary>
            <param name="m33">	    The Plane's new 3x3 matrix. </param>
            <param name="originPt"> The Plane's new origin point in world coordinates. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's 3x3 matrix (m_33) </summary>
            <param name="m33"> the Plane's new 3x3 matrix. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetType(PlaneType)">
            <summary> Set the plane type. </summary>
            <param name="whichPlane"> PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE. </param>
            <returns> Return previous value. </returns>
        </member>
        <member name="M:Plane.SetRelativeWcsID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set Plane relative to a WCS. </summary>
            <param name="relativeWcsID"> a Plane ID (whatever the active WCS was at the time of setting) </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetColor(System.Int32)">
            <summary> set the Plane's color. </summary>
            <param name="newColor"> the Plane's color. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetWorkOffset(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set the Plane's work offset value. </summary>
            <param name="work_offset"> the Plane's work offset value. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetName(System.UInt32)">
            <summary> set the Plane's name. </summary>
            <param name="resourceID"> resource string table ID. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's name. </summary>
            <param name="name"> the Plane's name. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetSelectedEntities(PlanePoint!System.Runtime.CompilerServices.IsConst*)">
            <summary> set the Plane's points and selected entity info used in it's definition. </summary>
            <param name="planePoints"> array of point info. </param>
            <returns> returns size of array. </returns>
        </member>
        <member name="M:Plane.SetID(System.Int32!System.Runtime.CompilerServices.IsLong,Plane.Dependent!System.Runtime.CompilerServices.IsConst*)">
            <summary> set the unique ID of the plane. </summary>
            <param name="newID">	  the new ID. </param>
            <param name="pDependent"> The dependent parent plane. </param>
            <returns> return the previous value of the ID. </returns>
        </member>
        <member name="M:Plane.SetVersion(System.Int32)">
            <summary> set the version. </summary>
            <param name="version"> The version. </param>
            <returns> return the previous version value. </returns>
        </member>
        <member name="M:Plane.SetSelected(System.Boolean)">
            <summary> set selected flag. </summary>
            <param name="selected"> true = selected. </param>
            <returns> return previous value of selected flag. </returns>
        </member>
        <member name="M:Plane.SetCreationMethod(Plane.CreationMethod)">
            <summary> set the creation method. </summary>
            <param name="creationMethod"> int representing creation method (CreationMethod::ThreePoints, etc) </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetSectionView(System.Boolean)">
            <summary> Sets the value of m_SectionView. </summary>
            <param name="on"> true = used as a section view. </param>
            <returns> The previous value of m_SectionView. </returns>
        </member>
        <member name="M:Plane.CastNamedPlanePtr(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Casts the Plane pointer from a PlaneBasePtr to a Plane * if the class is PlaneClass::NamedPlane. </summary>
            <param name="pBase"> The base. </param>
            <returns> nullptr if it fails, else a valid Plane *. </returns>
        </member>
        <member name="M:Plane.CastNamedPlanePtr(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Casts the Plane pointer from a PlaneBasePtr to a Plane * if the class is PlaneClass::NamedPlane. </summary>
            <param name="pBase"> The base. </param>
            <returns> nullptr if it fails, else a valid Plane *. </returns>
        </member>
        <member name="M:Plane.GetDirty">
            <summary> return the value of the 'dirty-needs regeneration' flag. </summary>
            <returns> return the value of the 'dirty-needs regeneration' flag. </returns>
        </member>
        <member name="M:Plane.GetDependent">
            <summary> get the Plane's dependency info (RelativeType::Front, etc), transform data </summary>
            <returns> The relative type. </returns>
        </member>
        <member name="M:Plane.CoordinateDisplayMatch(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return true if coordinate display and mask match value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <param name="coordDisplayMask"> plane coordinate display filter (COORD_MASK_MILL, COORD_MASK_LATHE_X, COORD_MASK_LATHE_D or COORD_MASK_ALL) </param>
            <returns> return true if coordinate display and mask match value. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplayDescription(CoordinateDisplayType)">
            <summary> get the active coordinate display description. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> return description. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplayMask">
            <summary> Gets coordinate display mask from the coordinate display value of this. </summary>
            <returns> The coordinate display mask. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplayMask(CoordinateDisplayType)">
            <summary> return correct mask value for coordinate display value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <param name="coordinateDisplay"> The coordinate display. </param>
            <returns> The coordinate display mask. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplay">
            <summary> return coordinate display value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <returns> The coordinate display. </returns>
        </member>
        <member name="M:Plane.GetDisplayMode">
            <summary> return icon display mode (0=off, 1=on) </summary>
            <returns> The display mode. </returns>
        </member>
        <member name="M:Plane.GetOutputCommentToNci">
            <summary> return comment output to NCI value. </summary>
            <returns> return comment output to NCI value. </returns>
        </member>
        <member name="M:Plane.GetComment">
            <summary> get the Plane's comment string. </summary>
            <returns> returns the Plane's comment string. </returns>
        </member>
        <member name="M:Plane.GetEntityIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> collect all the entity ID's used to make the Plane. </summary>
            <param name="entIDs"> set of entity ID's. </param>
            <returns> returns # of ID's collected in set. </returns>
        </member>
        <member name="M:Plane.GetColor">
            <summary> get the Plane's color. </summary>
            <returns> returns the Plane's color. </returns>
        </member>
        <member name="M:Plane.GetWorkOffset">
            <summary> get the Plane's work offset value. </summary>
            <returns> returns the Plane's work offset value. </returns>
        </member>
        <member name="M:Plane.GetDescription(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get a description of the Plane into a CStringArray. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="accuracy">  # of places behind the decimal point. </param>
            <param name="strArray">  CStringArray to stuff description into. </param>
            <returns> return size of strArray. </returns>
        </member>
        <member name="M:Plane.GetViewNo(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns the view # of the plane's matrix. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <returns> The view number. </returns>
        </member>
        <member name="M:Plane.GetDescription(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get a description of the Plane. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <returns> return Plane description. </returns>
        </member>
        <member name="M:Plane.GetDescription(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,PlaneType,System.Int32)">
            <summary> get a description of the Plane. </summary>
            <param name="refPlanes">	 A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="machineType">   machine type (MILL_MACHINE, LATHE_MACHINE, etc) </param>
            <param name="whichPlane">    plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or
							 PlaneType::WCSPLANE) </param>
            <param name="includeOrigin"> (Optional) type of origin description (-1=origin in view coords, 0=no origin,
							 1=origin in world coords) </param>
            <returns> return Plane description. </returns>
        </member>
        <member name="M:Plane.GetTypeDescription(PlaneType)">
            <summary> get a description of the given Plane type. </summary>
            <param name="whichPlane"> the plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE, PlaneType::WCSPLANE) </param>
            <returns> return Plane type description. </returns>
        </member>
        <member name="M:Plane.GetTypeDescription">
            <summary> get a description of the Plane type. </summary>
            <returns> return Plane type description. </returns>
        </member>
        <member name="M:Plane.IntToType(System.Int32)">
            <summary> Convert an int to a PlaneType. </summary>
            <param name="planeType"> int type of the plane. </param>
            <returns> PlaneType. </returns>
        </member>
        <member name="M:Plane.TypeToInt(PlaneType)">
            <summary> Convert PlaneType to an int for use as an array index. </summary>
            <param name="planeType"> Type of the plane. </param>
            <returns> int. </returns>
        </member>
        <member name="M:Plane.GetTypes">
            <summary> collect the 4 Plane types. </summary>
            <returns> The 4 types in CPLANE, TPLANE, GPLANE and WCS order. </returns>
        </member>
        <member name="M:Plane.GetSelected">
            <summary> return selected flag. </summary>
            <returns> return selected flag. </returns>
        </member>
        <member name="M:Plane.GetGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get both the origin geometry and the geometry entities used to create the Plane. </summary>
            <param name="originGeometry">   array to copy the origin geometry into. </param>
            <param name="selectedGeometry"> array to copy the geometry into. </param>
            <param name="geomMap">		    entity ID-eptr map to look thru and find and extract entity from db with. </param>
            <param name="entsNotFound">	    ID's entities that could not be found in geomMap. </param>
            <returns> returns true if any geometry was collected. </returns>
        </member>
        <member name="M:Plane.GetSelectedGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the geometry entities used to create the Plane. </summary>
            <param name="selectedGeometry"> array to copy the geometry into. </param>
            <param name="geomMap">		    entity ID-eptr map to look thru and find and extract entity from db with. </param>
            <param name="entsNotFound">	    ID's entities that could not be found in geomMap. </param>
            <returns> returns # of entities copied into the array. </returns>
        </member>
        <member name="M:Plane.GetOriginGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the Plane's point' origin geometry entity. </summary>
            <param name="originGeometry"> array to copy the geometry into. </param>
            <param name="geomMap">		  entity ID-eptr map to look thru and find and extract entity from db with. </param>
            <param name="entsNotFound">   ID's entities that could not be found in geomMap. </param>
            <returns> returns true if entity successfully retrieved form db. </returns>
        </member>
        <member name="M:Plane.GetSelectedEntities(PlanePoint*)">
            <summary> get the Plane's points and selected entity info used in it's definition. </summary>
            <param name="planePoints"> array to stuff the Plane's points info into. </param>
            <returns> returns size of array. </returns>
        </member>
        <member name="M:Plane.GetMatchingPointFromDb(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> read thru the current db and return a P_ID entity that matches the given origin. </summary>
            <param name="wOriginPt"> origin in world coordinates. </param>
            <param name="ptEnt">	 The point ent. </param>
            <returns> return geometry entity ID if successful. </returns>
        </member>
        <member name="M:Plane.GetOriginInViewCoordinates(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the Plane's origin in the Plane's view coordinates. </summary>
            <param name="p3d"> p_3d type to copy origin into. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Plane.GetOriginInViewCoordinates">
            <summary> return the Plane's origin in the Plane's view coordinates. </summary>
            <returns> The origin view coordinates. </returns>
        </member>
        <member name="M:Plane.GetOriginInWorldCoordinates(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the Plane's origin in world coordinates. </summary>
            <param name="p3d"> p_3d type to copy origin into. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Plane.GetOriginInWorldCoordinates">
            <summary> return the Plane's origin in world coordinates. </summary>
            <returns> The origin world coordinates. </returns>
        </member>
        <member name="M:Plane.GetTransform">
            <summary> Gets the value in m_Transform. </summary>
            <returns> the value in m_Transform. </returns>
        </member>
        <member name="M:Plane.GetOriginPoint">
            <summary> get the Plane's origin. </summary>
            <returns> returns the Plane's origin. </returns>
        </member>
        <member name="M:Plane.GetType">
            <summary> return Plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </summary>
            <returns> return Plane type. </returns>
        </member>
        <member name="M:Plane.GetRelativeWcsID">
            <summary> return the Plane's relative-to-a-WCS-Plane-ID. </summary>
            <returns> return the Plane's relative-to-a-WCS-Plane-ID. </returns>
        </member>
        <member name="M:Plane.GetParentID">
            <summary> get the unique ID of the plane's parent plane. </summary>
            <returns> returns the plane's parent plane's ID. </returns>
        </member>
        <member name="M:Plane.GetCreationMethod">
            <summary> return the creation method. </summary>
            <returns> returns the creation method. </returns>
        </member>
        <member name="M:Plane.GetSectionView">
            <summary> Gets the value of m_SectionView. </summary>
            <returns> The value of m_SectionView. </returns>
        </member>
        <member name="M:Plane.IsEqual(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'thePlane' is equal. </summary>
            <param name="obj">	    the plane to compare to this. </param>
            <param name="errorStr"> The string to fill in with the name of the non-matching member variable. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Plane.op_LessThan(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to another plane. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Plane.op_Inequality(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an group_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Inequality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to a Matrix33 object. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an group_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Inequality(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_SubtractionAssignment(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtraction-assignment operator. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_SubtractionAssignment(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtraction-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_AdditionAssignment(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> addition-assignment operator. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_AdditionAssignment(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> addition-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_Assign(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Assignment operator. </summary>
            <param name="pPlane"> The plane base raw pointer. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Assignment operator. </summary>
            <param name="pPlane"> The plane base shared pointer. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.#ctor(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:Plane.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:Plane.InitReserved">
            <summary> zero out all member variables that determine if a Plane is 'reserved'. </summary>
        </member>
        <member name="M:Plane.Init">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:Plane.#ctor(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="pPlane"> The plane. </param>
        </member>
        <member name="M:Plane.#ctor(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Constructor. </summary>
            <param name="pPlane"> The plane. </param>
        </member>
        <member name="M:Plane.#ctor(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for a normal. </summary>
            <param name="vNormLine">  the normal. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for a normal. </summary>
            <param name="vNorm">	  the normal. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
parameteritized constructor for an entity array.  It figures out the appropriate constructor to
call based on the number of entities it contains.
</summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="entArray">   array of entities. </param>
            <param name="selPt">	  location from original selection. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for a single entity types that contain their own matrix or normal info (like arcs) </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="theEnt">	  single entity (arc, spine, nurb, surface, cross-hatch, etc. </param>
            <param name="selPt">	  location from original selection. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for 3 point entities. </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="ptX">		  point entity lying on the X axis. </param>
            <param name="ptY">		  point entity lying on the Y axis. </param>
            <param name="ptZ">		  point entity defining Z axis and origin. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or
						  PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to 1 for successful intersection, 2 for successful endpoint, or 0 for
						  failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for 2 line entities. </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="ent1">		  line entity defining X axis. </param>
            <param name="ent2">		  line entity defining Y axis. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or
						  PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="opView">	  Mastercam op_view type. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="groupView">  Mastercam group_view type. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewEnt"> Mastercam view entity. </param>
        </member>
        <member name="M:Plane.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="m33">		  3x3 matrix. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="m33">		  3x3 matrix. </param>
            <param name="origin">	  Plane origin in world coordinates. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Plane.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:Plane.Dependent.Validate">
            <summary> Validates this object, zero-out if not. </summary>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Dependent.IsValid">
            <summary> Query if this object is valid. </summary>
            <returns> True if valid, false if not. </returns>
        </member>
        <member name="M:Plane.Dependent.op_Inequality(Plane.Dependent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.Dependent.op_Equality(Plane.Dependent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.Dependent.#ctor(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane.RelativeType)">
            <summary> Constructor. </summary>
            <param name="parentID"> Identifier for the parent plane. </param>
            <param name="relType">  Type of the relative (RelativeType::Off, RelativeType::Front, etc.) </param>
        </member>
        <member name="M:Plane.Dependent.#ctor(Plane.RelativeType)">
            <summary> Constructor. </summary>
            <param name="relType"> Type of the relative. </param>
        </member>
        <member name="T:Plane.Dependent">
            <summary> Class containing plane dependency to another plane info. </summary>
        </member>
        <member name="T:Plane.ConstructorMethod">
            <summary> Constructor method (saved in m_ConstructorMethod). </summary>
        </member>
        <member name="T:Plane.COORD_DISP_MASK">
            <summary> used when searching for matching planes. </summary>
        </member>
        <member name="T:Plane.COMPARISON_REGEN_MASK">
            <summary> comparison values to determine whether a regeneration of the plane is required. </summary>
        </member>
        <member name="T:Plane.PLANE_VALIDATION_MODE">
            <summary> validation and regeneration modes. </summary>
        </member>
        <member name="T:Plane.AssocMask">
            <summary> Values that represent whether the origin and/or matrix is associated to geometry. </summary>
        </member>
        <member name="T:Plane.IconDrawMode">
            <summary> Plane icon drawing modes. </summary>
        </member>
        <member name="T:Plane.RelativeType">
            <summary> relative plane types. </summary>
        </member>
        <member name="T:Plane.CreationMethod">
            <summary> Plane creation methods. </summary>
        </member>
        <member name="M:SystemPlanes.SetQuickCplaneID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the value of m_QuickCplaneID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> Previous value of m_QuickCplaneID. </returns>
        </member>
        <member name="M:SystemPlanes.GetQuickCplaneID">
            <summary> Gets the value of m_QuickCplaneID. </summary>
            <returns> the value of m_QuickCplaneID. </returns>
        </member>
        <member name="M:SystemPlanes.GetStatusBarPlaneLabel(System.Int32)">
            <summary> Gets status bar plane label from m_StatusBarPlaneLabels using an int. </summary>
            <param name="planeType"> Type of plane in int form. </param>
            <returns> The status bar plane label. </returns>
        </member>
        <member name="M:SystemPlanes.GetStatusBarPlaneLabel(PlaneType)">
            <summary> Gets status bar plane label from m_StatusBarPlaneLabels. </summary>
            <param name="planeType"> Type of plane. </param>
            <returns> The status bar plane label. </returns>
        </member>
        <member name="M:SystemPlanes.IsLatheCoordinateDisplay(CoordinateDisplayType)">
            <summary> Query if 'coordinateDisplay' is lathe coordinate display. </summary>
            <param name="coordinateDisplay"> The coordinate display. </param>
            <returns> true if lathe coordinate display, false if not. </returns>
        </member>
        <member name="M:SystemPlanes.GetViewportInfo">
            <summary> Gets viewport information. </summary>
            <returns> The viewport information. </returns>
        </member>
        <member name="M:SystemPlanes.SetViewportInfo(ViewportInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets viewport information. </summary>
            <param name="vpInfo"> Information describing the vp. </param>
            <returns> Returns previous value </returns>
        </member>
        <member name="M:SystemPlanes.GetLock(PlaneType)">
            <summary> Gets the lock status for the given plane </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <returns> The lock. </returns>
        </member>
        <member name="M:SystemPlanes.SetLock(PlaneType,SystemPlanes.PLANE_LOCK!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a lock on the given plane </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="lock">		  LOCK_ALL_OFF, LOCK_ORIGIN	or LOCK_MATRIX. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetPrevious(PlaneType)">
            <summary> Gets the previous matrix/origin pair. </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <returns> The previous matrix/origin pair. </returns>
        </member>
        <member name="M:SystemPlanes.SetPrevious(PlaneType,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set m_Previous[] matrix/origin pairs. </summary>
            <param name="whichPlane">  CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="m33">		   The matrix to set. </param>
            <param name="worldOrigin"> The origin in world coordinates. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetPlaneID(PlaneType)">
            <summary> Gets plane identifier. </summary>
            <param name="whichPlane"> CPLANE, TPLANE, GPLANE or WCSPLANE </param>
            <returns> The plane ID for the requested active plane. </returns>
        </member>
        <member name="M:SystemPlanes.SetPlaneID(PlaneType,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Set m_PlaneIDs[]. </summary>
            <param name="whichPlane"> The which plane. </param>
            <param name="planeID">    plane ID to set. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetUnnamedOrigin">
            <summary> return m_UnnamedOrigin. </summary>
            <returns> const reference to m_UnnamedOrigin. </returns>
        </member>
        <member name="M:SystemPlanes.SetUnnamedOrigin(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set m_UnnamedOrigin. </summary>
            <param name="origin"> origin to set. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetUnnamedM33">
            <summary> return a Matrix33. </summary>
            <returns> Copy of m_UnnamedM33. </returns>
        </member>
        <member name="M:SystemPlanes.SetUnnamedM33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set m_UnnamedM33. </summary>
            <param name="m33"> matrix to set. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="T:SystemPlanes.PLANE_LOCK">
            <summary> Values that represent PLANE_LOCK. </summary>
        </member>
        <member name="M:SystemPlanes.InitStatusBarPlaneLabels">
            <summary> Initialises the status bar plane labels in m_StatusBarPlaneLabels. </summary>
            <returns> size of m_StatusBarPlaneLabels. </returns>
        </member>
        <member name="M:SystemPlanes.Init(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Zero out member variables. </summary>
            <param name="defaultPlaneID"> (Optional) Initialize 4 system planes to this valid ID, or -1 to preserve the follow-rules. </param>
        </member>
        <member name="M:SystemPlanes.op_Assign(SystemPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:SystemPlanes.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:SystemPlanes.#ctor(SystemPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:SystemPlanes.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:SystemPlanes.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:SystemPlanes">
            <summary> SystemPlanes class contains current system construction, tool, WCS and graphics planes</summary>
        </member>
        <member name="M:ViewportInfo.SetCurrentGraphicsViewInfo">
            <summary> Sets current graphics view information. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ViewportInfo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ViewportInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ViewportInfo">
            <summary> Information about the active viewport. </summary>
        </member>
        <member name="D:PlaneBasePtr">
            <summary> Defines an alias representing the plane base class pointer. </summary>
        </member>
        <member name="M:PlaneBase.DeserializeStringToWide(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert an MBCS string to a wide string. </summary>
            <param name="archive"> The archive. </param>
            <param name="target">  If non-null, the wide character buffer. </param>
            <returns> The number of characters converted. </returns>
        </member>
        <member name="M:PlaneBase.SetMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's 3x3 matrix (m_33) </summary>
            <param name="m33"> the Plane's new 3x3 matrix. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:PlaneBase.ValidPlaneClass(PlaneClass,System.Boolean)">
            <summary> Validate plane class. </summary>
            <param name="planeClass"> The plane class. </param>
            <param name="warn">		  true for warning. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:PlaneBase.GetTemporary">
            <summary> Return value of m_Temporary. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlaneBase.SetTemporary(System.Boolean)">
            <summary> Set m_Temporary. </summary>
            <param name="temporary"> if true, temporary plane will not be listed in Planes Manager and will be deleted on file/save. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetSystemMatrixName(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Builds and returns system matrix name. </summary>
            <param name="m_ID"> The identifier. </param>
            <returns> The system matrix name. </returns>
        </member>
        <member name="M:PlaneBase.CorrectName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Enforce naming rules for this Plane's name. </summary>
            <param name="theName"> The name to check and alter. </param>
            <returns> return true if name has been altered. </returns>
        </member>
        <member name="M:PlaneBase.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's name. </summary>
            <param name="name"> the Plane's name. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:PlaneBase.SetLock(System.Boolean)">
            <summary> set Plane lock's state. </summary>
            <param name="lock"> true to lock, false to unlock. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneBase.SetReserved(System.Boolean)">
            <summary> set Plane as reserved (uneditable and unmovable) </summary>
            <param name="reserved"> true = reserved. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetLock">
            <summary> return Plane lock's state. </summary>
            <returns> return Plane lock's state. </returns>
        </member>
        <member name="M:PlaneBase.GetTol">
            <summary> return Plane tolerance value. </summary>
            <returns> The tolerance. </returns>
        </member>
        <member name="M:PlaneBase.GetName">
            <summary> get the Plane's name. </summary>
            <returns> returns the Plane's name. </returns>
        </member>
        <member name="M:PlaneBase.GetReserved">
            <summary> return true if the the Plane is a reserved Plane. </summary>
            <returns> return true if the the Plane is a reserved Plane. </returns>
        </member>
        <member name="M:PlaneBase.GetMatrix33(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the Plane's 3x3 matrix (m_33) </summary>
            <param name="m33"> 3x3 matrix to fill in. </param>
        </member>
        <member name="M:PlaneBase.GetMatrix33">
            <summary> get the Plane's 3x3 matrix (m_33) </summary>
            <returns> returns the Plane's 3x3 matrix. </returns>
        </member>
        <member name="M:PlaneBase.SetID(PlaneID)">
            <summary> set the unique ID of the plane. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> returns the previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetLongID">
            <summary> get the value of m_ID's m_ID. </summary>
            <returns> returns the value of m_ID's m_ID. </returns>
        </member>
        <member name="M:PlaneBase.GetShortID">
            <summary> get the value of m_ID's m_ID. </summary>
            <returns> returns the value of m_ID's m_ID. </returns>
        </member>
        <member name="M:PlaneBase.GetID">
            <summary> get the unique ID of the plane. </summary>
            <returns> returns the plane ID. </returns>
        </member>
        <member name="M:PlaneBase.SetGUID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets value of m_GUID. </summary>
            <param name="theGUID"> New value. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetGUID">
            <summary> Return value of m_GUID. </summary>
            <returns> Return value of m_GUID. </returns>
        </member>
        <member name="M:PlaneBase.SetVersion(System.Int32)">
            <summary> set the version. </summary>
            <param name="version"> The version. </param>
            <returns> return the previous version value. </returns>
        </member>
        <member name="M:PlaneBase.GetVersion">
            <summary> return the version. </summary>
            <returns> return the version. </returns>
        </member>
        <member name="M:PlaneBase.IsEqual(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj">	    The object. </param>
            <param name="errorStr"> The string to fill in with the name of the non-matching member variable. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:PlaneBase.op_Subscript(System.Int32)">
            <summary> Return reference to X, Y or Z component of m_33. </summary>
            <param name="XYorZ"> The X, Y or Z axis (0, 1 or 2). </param>
            <returns> const reference to X, Y or Z axis. </returns>
        </member>
        <member name="M:PlaneBase.op_LessThan(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to another plane. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlaneBase.op_Equality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to a Matrix33 object. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Equality(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Inequality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Equality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Inequality(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Assign(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneBase.op_Assign(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneBase.op_Assign(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneBase.SetClass(PlaneClass)">
            <summary> Sets the class. </summary>
            <param name="planeClass"> The plane class. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetClass">
            <summary> Gets the class. </summary>
            <returns> The class. </returns>
        </member>
        <member name="M:PlaneBase.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:PlaneBase.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:PlaneBase.#ctor(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:PlaneBase.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="m33">	   3x3 matrix. </param>
            <param name="planeID"> Identifier for the plane. </param>
            <param name="name">    The name. </param>
        </member>
        <member name="M:PlaneBase.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="m33"> 3x3 matrix. </param>
        </member>
        <member name="M:PlaneBase.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:PlaneBase">
            <summary> A macro that defines plane base version. </summary>
            <summary> Mastercam PlaneBase definition</summary>
        </member>
        <member name="M:PlaneID.GetDescription">
            <summary> Gets the description. </summary>
            <returns> The description. </returns>
        </member>
        <member name="M:PlaneID.IsValid(System.Boolean)">
            <summary> Query if this object is valid. </summary>
            <param name="warn"> true to warn. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:PlaneID.SetID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets an identifier. </summary>
            <param name="theID"> Identifier for the. </param>
            <returns> . </returns>
        </member>
        <member name="M:PlaneID.GetShortID">
            <summary> Gets the identifier. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneID.GetLongID">
            <summary> Gets the identifier. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneID.SetClass(PlaneClass)">
            <summary> Sets the class type. </summary>
            <param name="planeClass"> the class. </param>
            <returns> previous value. </returns>
        </member>
        <member name="M:PlaneID.GetClass">
            <summary> Gets the class type. </summary>
            <returns> The class type. </returns>
        </member>
        <member name="M:PlaneID.SetGUID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the GUID identifier. </summary>
            <param name="theGUID"> Unique identifier. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneID.GetGUID">
            <summary> Gets the GUID identifier. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneID.GetVersion">
            <summary> Gets the version. </summary>
            <returns> The version. </returns>
        </member>
        <member name="M:PlaneID.op_Inequality(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlaneID.op_Equality(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneID.op_GreaterThan(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlaneID.op_LessThan(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlaneID.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Assignment operator for a long.  Will create a NamedPlane type ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneID.op_Assign(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneID.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:PlaneID.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:PlaneID.#ctor(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewEnt"> A view entity. </param>
        </member>
        <member name="M:PlaneID.#ctor(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="grpView"> A group view. </param>
        </member>
        <member name="M:PlaneID.#ctor(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="opView"> An operation view. </param>
        </member>
        <member name="M:PlaneID.#ctor(ReservedPlanes.TypeID,PlaneClass)">
            <param name="typeID">	  Identifier for the plane. </param>
            <param name="planeClass"> (Optional) The plane class. </param>
        </member>
        <member name="M:PlaneID.#ctor(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:PlaneID.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,PlaneClass)">
            <summary> Constructor. </summary>
            <param name="planeID">    Identifier for the plane. </param>
            <param name="planeClass"> the plane class type. </param>
        </member>
        <member name="M:PlaneID.#ctor(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:PlaneID.#ctor(PlaneClass)">
            <summary> Default constructor. </summary>
            <param name="planeClass"> (Optional) the plane class. </param>
        </member>
        <member name="T:PlaneID">
            <summary> A macro that defines a null plane ID. </summary>
            <param name="PlaneID (PlaneClass::Undefined)"> The plane identifier ( plane class undefined) </param>
            <summary> Plane ID map key. </summary>
        </member>
        <member name="M:ScratchViewNo.op_Assign(ScratchViewType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ScratchViewNo.op_GreaterThanOrEqual(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_GreaterThan(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_LessThanOrEqual(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_LessThan(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_Inequality(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ScratchViewNo.op_Equality(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The view no. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ScratchViewNo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ScratchViewNo.#ctor(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:ScratchViewNo.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ScratchViewNo.#ctor(ScratchViewType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ScratchViewNo.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="M:ViewNo.IsValid">
            <summary> Query if this object is valid. </summary>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:ViewNo.IsViewportView">
            <summary> Query if this object is viewport view. </summary>
            <returns> true if scratch view, false if not. </returns>
        </member>
        <member name="M:ViewNo.IsScratchView">
            <summary> Query if this object is scratch view. </summary>
            <returns> true if scratch view, false if not. </returns>
        </member>
        <member name="M:ViewNo.GetShortViewNo">
            <summary> Gets short view no. </summary>
            <returns> The short view no. </returns>
        </member>
        <member name="M:ViewNo.GetViewNo">
            <summary> Gets view no. </summary>
            <returns> The view no. </returns>
        </member>
        <member name="M:ViewNo.op_GreaterThanOrEqual(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ViewNo.op_GreaterThan(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:ViewNo.op_LessThanOrEqual(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ViewNo.op_LessThan(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:ViewNo.op_Inequality(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Inequality(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Inequality operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Equality(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The view no. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Equality(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Equality operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Assignment operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ViewNo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ViewNo.#ctor(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:ViewNo.#ctor(ScratchViewType)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor(System.Int16)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor(System.Int32)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:ViewNo">
            <summary> Class to be used as view number parameter instead of a short. </summary>
        </member>
        <member name="T:ScratchViewType">
            <summary> Values that represent the 'scratch view' types. </summary>
        </member>
        <member name="M:CompareNci.TokenizeStrings(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tokenize the NCI strings. </summary>
            <param name="delimiter"> The delimiter. </param>
            <param name="str1">		 The first string. </param>
            <param name="str2">		 The second string. </param>
            <param name="array1">    The first array. </param>
            <param name="array2">    The second array. </param>
            <returns> An INT_PTR. </returns>
        </member>
        <member name="M:CompareNci.MakeSameLength(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes both NCI strings the same length. </summary>
            <param name="str1"> The first NCI string. </param>
            <param name="str2"> The second NCI string. </param>
        </member>
        <member name="M:CompareNci.MarkStart(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Mark start of the NCI lines. </summary>
            <param name="str1">  The first NCI string. </param>
            <param name="indx1"> The first indx. </param>
            <param name="str2">  The second NCI string. </param>
            <param name="indx2"> The second indx. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CompareNci.MarkDifferences(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Mark the differences in the NCI lines as compared to one another. </summary>
            <param name="str1"> The first NCI string. </param>
            <param name="str2"> The second NCI string. </param>
            <returns> An number of differences marked. </returns>
        </member>
        <member name="M:CompareNci.FormatLine(nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Format the NCI line. </summary>
            <param name="nciLine"> The binary NCI line. </param>
            <param name="nciStr">  The string to format. </param>
        </member>
        <member name="M:CompareNci.Run(CompareNci.RunPrm*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compares NCI of the 3 states to the given nci accuracy. </summary>
            <param name="prm"> The comparison parameters. </param>
        </member>
        <member name="M:CompareNci.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CompareNci.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:CompareNci.RunPrm.#ctor(System.Int16,CStringArray*,System.Boolean,CInterrogateMastercamFile*,CInterrogateMastercamFile*)">
            <summary> Constructor. </summary>
            <param name="nciAccuracy"> (Optional) the nci accuracy. </param>
            <param name="pTrailer">    (Optional) If non-null, list of strings for the report trailer. </param>
            <param name="modeComp2">   (Optional) comparison mode, false = select files, true = compare NCI in pComp1 to pComp2. </param>
            <param name="pComp1">	   (Optional) If non-null, the NCI to compare with pComp2. </param>
            <param name="pComp2">	   (Optional) If non-null, the NCI to compare with pComp1. </param>
        </member>
        <member name="T:CompareNci.RunPrm">
            <summary> Comparison parameters. </summary>
        </member>
        <member name="T:CompareNci">
            <summary> Utility class to compare NCI of previous version files in 3 states:
		  1 - from disk before file is read in  
		  2 - from disk immediately after file is read in  
		  3 - after regeneration </summary>
        </member>
        <member name="M:CStringArrayToFile(CStringArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Dump the contents of a CStringArray to a file and display in the default editor. </summary>
            <param name="strArray">	    The array to dump. </param>
            <param name="addTimeOfDay"> True to add time of day string on first line. </param>
            <param name="fname">	    [in,out] Filename of the file. </param>
            <param name="editFile">	    true to edit file. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetEptrsEmbeddedInAssocEnt(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collects pointers to DB_LIST_ENT_PTR types embedded in an operation or toolpath entity. </summary>
            <param name="theEnt">   the entity to look in. </param>
            <returns> Size of vecEptrs. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetEptrs">
            <summary> Builds a vector of all the eptrs in this. </summary>
            <returns> A shared ptr to a vector of eptrs in this. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetBnciCenterPoint(p_3d)">
            <summary> Setter for rectangle center </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBnciCenterPoint">
            <summary> Getter for rectangle center </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetBnciUpperRight(p_3d)">
            <summary> Setter for rectangle's upper right corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBnciUpperRight">
            <summary> Getter for rectangle's upper right corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetBnciLowerLeft(p_3d)">
            <summary> Setter for rectangle's lower left corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBnciLowerLeft">
            <summary> Getter for rectangle's lower left corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskNciGcodes(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for NCI gcodes (NCI_RAPID, NCI_CCW, etc) mask to collect from the source file  </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskNciGcodes">
            <summary> Getter for NCI gcodes (NCI_RAPID, NCI_CCW, etc) mask to collect from the source file  </summary>
            <returns> Returns IDArray </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskExcludeOpIDs(IDArray)">
            <summary> Setter for toolpath operation ID mask to exclude from the source file </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskExcludeOpIDs">
            <summary> Getter for toolpath operation ID mask to exclude from the source file </summary>
            <returns> Returns IDarray </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskIncludeOpIDs(IDArray)">
            <summary> Setter for toolpath operation ID mask to collect from the source file </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskIncludeOpIDs">
            <summary> Getter for toolpath operation ID mask to collect from the source file </summary>
            <returns> Returns IDArray </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskTpIDs(VArray&lt;TP_ENT_TYPE&gt;)">
            <summary> Setter for toolpath entity type (TP_CHN, TP_OPID, etc) mask to collect from the source file </summary>
            <param name="entitytypes"> VArray of TP_ENT_TYPEs </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskTpIDs">
            <summary> Getter for toolpath entity type (TP_CHN, TP_OPID, etc) mask to collect from the source file </summary>
            <returns> Returns VArray of TP_ENT_TYPEs </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskNci(System.Boolean)">
            <summary> Setter for toolpath operation's NCI mask. True to collect toolpath operation's NCI from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskNci">
            <summary> Getter for toolpath operation's NCI mask. True to collect toolpath operation's NCI from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskTpEnts(System.Boolean)">
            <summary> Setter for toolpath entities. True to collect toolpath entities from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskTpEnts">
            <summary> Getter for toolpath entities. True to collect toolpath entities from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskOperations(System.Boolean)">
            <summary> Setter for operations mask. True to collect toolpath operations from the source file  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskOperations">
            <summary> Getter for operations mask. True to collect toolpath operations from the source file  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskGroups(System.Boolean)">
            <summary> Setter for groups mask. True to collect machine and toolpath groups from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskGroups">
            <summary> Getter for groups mask. True to collect machine and toolpath groups from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskTools(System.Boolean)">
            <summary> Setter for tools mask. True to collect tools from the source file.  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskTools">
            <summary> Getter for tools mask. True to collect tools from the source file.  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskPlanes(System.Boolean)">
            <summary> Setter for planes mask. True to collect planes from the source file  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskPlanes">
            <summary> Getter for planes mask. True to collect planes from the source file  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskGeometry(System.Boolean)">
            <summary> Setter for true to collect geometry referenced by toolpath operations from source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskGeometry">
            <summary> Getter for true to collect geometry referenced by toolpath operations from source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetpToolMgr(std.shared_ptr&lt;Cnc.Tool.TlMgr&gt;)">
            <summary> Setter for Tool Manager </summary>
            <param name="toolmgr"> Pointer to the tool manager. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetpToolMgr">
            <summary> Getter for Tool Manager </summary>
            <returns> Returns ptr to Tool Manager. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetNciFpos(System.Int64)">
            <summary> Setter for the start of bnci fpos of the source file </summary>
            <param name="fpos"> The bnci fpos for the source file </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetNciFpos">
            <summary> Getter for the start of bnci fpos of the source file </summary>
            <returns> Returns long. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMinorVersion(System.Int32)">
            <summary> Sets minor file version of the source file </summary>
            <param name="version"> The major version as an int </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMinorVersion">
            <summary> Gets minor file version of the source file </summary>
            <returns> Returns int. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMajorVersion(System.Int32)">
            <summary> Sets major file version of the source file </summary>
            <param name="version"> The major version as an int </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMajorVersion">
            <summary> Gets major file version of the source file </summary>
            <returns> Returns int. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetpPlanes(System.Void*)">
            <summary> Setter for pointer to copy of MastercamPlanes from the source file </summary>
            <param name="planes"> void*, planes construct </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetpPlanes">
            <summary> Getter for pointer to copy of MastercamPlanes from the source file </summary>
            <returns> Returns void*</returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetOrphanedTpEnts(CFposEntArray)">
            <summary> Setter for array of toolpath entities that have no parent operation </summary>
            <param name="orphanedents"> The referenced array of toolpath entities with no parent operation </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOrphanedTpEnts">
            <summary> Getter for array of toolpath entities that have no parent operation </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetTools(CFposEntArray)">
            <summary>  Setter for array of tool copies from the source file </summary>
            <param name="tools"> The referenced array of tool copies </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetTools">
            <summary>  Getter for array of tool copies from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetGeometry(CFposEntArray)">
            <summary> Setter for array of geometry entity copies referenced by operations from the source file </summary>
            <param name="geometry"> The referenced array of geometry entities </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetGeometry">
            <summary> Getter for array of geometry entity copies referenced by operations from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetOperations(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;CLibraryOperation&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;&gt;)">
            <summary> Setter for Map of operation copies from the source file </summary>
            <param name="operations"> The reference to the OpMap </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOperations">
            <summary> Getter for Map of operation copies from the source file </summary>
            <returns> Returns OpMap </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetGroups(VArray&lt;std.shared_ptr&lt;op_group&gt;&gt;)">
            <summary> Setter for (Groups) vector of machine and toolpath group copies from the source file </summary>
            <param name="groupvector"> The reference to VArray of groups </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetGroups">
            <summary> Getter for (Groups) vector of machine and toolpath group copies from the source file </summary>
            <returns> Returns VArray of op_group pointers </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestNciOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading NCI into an operation. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading into m_Operations. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestTpEnt(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tp_net against masks before loading into m_Operations.m_TpEnts. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestOperation(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation against masks before loading into m_Operations. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestTool(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tool against masks before loading into m_Tools. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestViewEnt(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests view_ent against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestPlanes(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests planes against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestGeometry(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests geometry against masks before loading into m_Geometry. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.ValidOperationIterator(std._Tree_const_iterator&lt;std._Tree_val&lt;std._Tree_simple_types&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validate operation iterator from m_Operations (since m_Operations is public). </summary>
            <param name="iter"> The iterator. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.InitBnciExtents">
            <summary> Initializes the bnci extents. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.DependentOperationsExist">
            <summary> Return true if dependent operation types exist in m_Operaitons. </summary>
            <returns> Return true if dependent operation types exist in m_Operaitons. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetLoadCode">
            <summary> Gets const reference to m_LoadCode. </summary>
            <returns> const reference to m_LoadCode. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SwapEptrs(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Swap the entity ptrs. </summary>
            <param name="mapGeom">	    The map geometry entity ID, pair of old eptr and new eptr. </param>
            <param name="updateDB">	    true to rewrite the entities to the current database. </param>
            <param name="markOpsDirty"> true to mark affected toolpath operations dirty. </param>
            <returns> Number of substitutions that occurred. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.RemoveOperation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes the operation described by opID from the map m_Operations. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.ReplaceOrAddOperation(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds (and replaces if needed) an operation to the map m_Operations. </summary>
            <param name="filePos"> The file position in a external file, -1 for the current db. </param>
            <param name="opEnt">   The operation entity. </param>
            <returns> An OpMap::iterator where the operation was added. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOpIDsInOpMgrOrder">
            <summary> Returns a vector of all the operations' IDs in order of the global Operation Manager.</summary>
            <returns> A vector of all the dependent operations' IDs.</returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOperationPtrsByOpMgrOrder(std.vector&lt;std.shared_ptr&lt;CLibraryOperation&gt;,std.allocator&lt;std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets operation ptrs by operation manager order. </summary>
            <param name="opArray"> Array of operation map ptrs. </param>
            <returns> size of opArray. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetRootGroup(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the root group of a subgroup.ge </summary>
            <param name="groupID"> Identifier for the group. </param>
            <returns> Iterator to the root group in m_Groups. </returns>
        </member>
        <member name="D:CInterrogateMastercamFile.OpMap">
            <summary> Defines an alias representing the operation map (operation ID, copy of operation). </summary>
        </member>
        <member name="D:CInterrogateMastercamFile.OpMapPtr">
            <summary> Defines an alias representing the operation map pointer. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.GetFileName">
            <summary> Gets the file name of what's loaded. </summary>
            <returns> The file name. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskNciOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskNciOpcodes to filter which operation's NCI is loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskNciOpcodes array after setting. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskOpcodes to filter which operations are loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskOpcodes array after setting. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetDirtyOperationIDs(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets the dirty operation IDs. </summary>
            <param name="opIDs"> The dirty operation IDs. </param>
            <param name="dirty"> (Optional) the dirty flag to match. </param>
            <returns> The size of opIDs. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SortOperationIDsByOpMgrOrder(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sort operation IDs in opIDS by operation manager order. </summary>
            <param name="opIDs"> The operation IDs to sort. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetSelectedOperationIDs(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets selected operation IDs. </summary>
            <param name="opIDs">    The selected operation IDs. </param>
            <param name="selectON"> (Optional) the select flag to match. </param>
            <returns> The size of opIDs. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetGeometryEntityPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets geometry entity pointer. </summary>
            <param name="entID"> Identifier for the ent. </param>
            <returns> The geometry entity pointer. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the operation pointer by identifier. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetLibraryOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets library operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the library operation pointer by identifier. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.IsExternalFile">
            <summary> Query if this object was loaded from an external file. </summary>
            <returns> true if external file, false if not. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.IsLoaded">
            <summary> Query if this object is loaded (returns value of m_Loaded). </summary>
            <returns> true if loaded, false if not. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.CalcBnciExtents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Calculates the extents of the bnci in this object. </summary>
            <param name="relWcs"> (Optional) true to relative wcs. </param>
            <param name="adjTOS"> (Optional) true to adjust to TOS. </param>
            <param name="deleteToolRadius"> (Optional) true to delete the tool radius from "Z". </param>
            <param name="includeEndOfRapids"> (Optional) true to include the end of rapids in extents calc. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForPlanes(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with plane info from an external Mastercam file. </summary>
            <param name="mcxFileName"> Mastercam file name. </param>
            <returns> for planes. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForPlanes">
            <summary> Preset masks and loads this object with plane info from the current db. </summary>
            <returns> Number of planes loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with operations and their NCI from and external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the external Mastercam file. </param>
            <param name="gcodeMask">   List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci(System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*,IDArray!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object with operations and their NCI from the current db from just the
		  operations whose IDs match ones in the given pIncludeOpIDs parameter and not ones whose ID's match
		  ones in the given pExcludeOpIDs parameter. </summary>
            <param name="useCache">		 true = attempt to use NCI cache in global Planes. </param>
            <param name="gcodeMask">	 List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <param name="pIncludeOpIDs"> (Optional) the include operation ids. </param>
            <param name="pExcludeOpIDs"> (Optional) the exclude operation ids. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with operations and their NCI from an external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci">
            <summary> Preset masks and loads this object with operations and their NCI from the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForWorkOffsetInfo(System.Boolean,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with work offset information from just the operations whose IDs match
		  ones in the given includeOpIDs parameter and not ones whose ID's match ones in the given excludeOpIDs
		  parameter. </summary>
            <param name="useCache">	    true = use NCI cache, false = read from disk. </param>
            <param name="includeOpIDs"> The operations to include. </param>
            <param name="excludeOpIDs"> The operations to exclude. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForSingleOperation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object for just the 1 operation from the current db. </summary>
            <param name="opID">		  Identifier for the operation. </param>
            <param name="includeNci"> true to include NCI, false to exclude NCI. </param>
            <param name="pGcodeMask"> (Optional) if (includeNci == true), ptr to NCI gcode mask, nullptr to read in all. </param>
            <returns> pointer to operation, null if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities from an external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <param name="opIDs">	   The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntityCount(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities (no associated geometry or planes) from the current db. </summary>
            <param name="opIDs"> The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose opcodes match ones 
		  in the given opCodeMask parameter and their toolpath entities from the current db. </summary>
            <param name="opCodeMask"> Only collect operations with these opcodes. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities and associated geometry from the current db. </summary>
            <param name="opIDs"> The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just operations and toolpath entities from an external Mastercam
		  file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities">
            <summary> Preset masks and loads this object with just operations and toolpath entities 
		  from the current db.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForDependencies(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities from an
		  external Mastercam file. TP_OPID type toolpath entities are typically used in transform and nesting
		  operations. </summary>
            <param name="mcxFileName"> Mastercam file name. </param>
            <returns> for dependencies. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForDependencies">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities 
		  from the current db. TP_OPID type toolpath entities are typically used in transform
		  and nesting operations.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadJustOperations(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadJustOperations">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.Load">
            <summary> Loads this object using the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.Load(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads this object using the given mcx file name. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.InitMasks">
            <summary> Initializes the masks. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.EmptyPlanes">
            <summary> Empty the m_pPlanes object. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CInterrogateMastercamFile">
            <summary> Utility class to collect entities and info of the current db or an external Mastercam file. </summary>
        </member>
        <member name="M:InterrogateMCFileFactory.GetInterrogateMCFile">
            <summary> Creates pointer to initialized InterrogateMCFile object. </summary>
            <returns> Returns pointer to IInterrogateMastercamFile. </returns>
        </member>
        <member name="M:InterrogateMCFileFactory.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:InterrogateMCFileFactory.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:InterrogateMCFileFactory">
            <summary> Creates collection of entities and info of current db or external Mastercam files. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.GetEptrs">
            <summary> Builds a vector of all the eptrs in this. </summary>
            <returns> A shared ptr to a map of eptrs and all their matching locations and entity ID #'s in this. </returns>
        </member>
        <member name="D:IInterrogateMastercamFile.MapEptrInfo">
            <summary> Defines an alias representing the map eptrs.
eptr, spVector-&gt;{ ptr to matching eptr, entity ID }	</summary>
        </member>
        <member name="M:IInterrogateMastercamFile.MapInfo.#ctor(DB_LIST_ENT**,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="pEptr">		    pointer to an eptr in the entity. </param>
            <param name="ownerEntityID">    ent.ent_idn of entity that eptr resides in. </param>
            <param name="selectedEntityID"> ent.ent_idn of entity that m_pEptr points to. </param>
        </member>
        <member name="T:IInterrogateMastercamFile.MapInfo">
            <summary> Entity information for MapEptrs </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.SetBnciCenterPoint(p_3d)">
            <summary> Setter for rectangle center </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBnciCenterPoint">
            <summary> Getter for rectangle center </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetBnciUpperRight(p_3d)">
            <summary> Setter for rectangle's upper right corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBnciUpperRight">
            <summary> Getter for rectangle's upper right corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetBnciLowerLeft(p_3d)">
            <summary> Setter for rectangle's lower left corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBnciLowerLeft">
            <summary> Getter for rectangle's lower left corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskNciGcodes(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for NCI gcodes (NCI_RAPID, NCI_CCW, etc) mask to collect from the source file  </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskNciGcodes">
            <summary> Getter for NCI gcodes (NCI_RAPID, NCI_CCW, etc) mask to collect from the source file  </summary>
            <returns> Returns IDArray </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskExcludeOpIDs(IDArray)">
            <summary> Setter for toolpath operation ID mask to exclude from the source file </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskExcludeOpIDs">
            <summary> Getter for toolpath operation ID mask to exclude from the source file </summary>
            <returns> Returns IDarray </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskIncludeOpIDs(IDArray)">
            <summary> Setter for toolpath operation ID mask to collect from the source file </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskIncludeOpIDs">
            <summary> Getter for toolpath operation ID mask to collect from the source file </summary>
            <returns> Returns IDArray </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskTpIDs(VArray&lt;TP_ENT_TYPE&gt;)">
            <summary> Setter for toolpath entity type (TP_CHN, TP_OPID, etc) mask to collect from the source file </summary>
            <param name="entitytypes"> VArray of TP_ENT_TYPEs </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskTpIDs">
            <summary> Getter for toolpath entity type (TP_CHN, TP_OPID, etc) mask to collect from the source file </summary>
            <returns> Returns VArray of TP_ENT_TYPEs </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskNci(System.Boolean)">
            <summary> Setter for toolpath operation's NCI mask. True to collect toolpath operation's NCI from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskNci">
            <summary> Getter for toolpath operation's NCI mask. True to collect toolpath operation's NCI from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskTpEnts(System.Boolean)">
            <summary> Setter for toolpath entities. True to collect toolpath entities from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskTpEnts">
            <summary> Getter for toolpath entities. True to collect toolpath entities from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskOperations(System.Boolean)">
            <summary> Setter for operations mask. True to collect toolpath operations from the source file  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskOperations">
            <summary> Getter for operations mask. True to collect toolpath operations from the source file  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskGroups(System.Boolean)">
            <summary> Setter for groups mask. True to collect machine and toolpath groups from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskGroups">
            <summary> Getter for groups mask. True to collect machine and toolpath groups from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskTools(System.Boolean)">
            <summary> Setter for tools mask. True to collect tools from the source file.  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskTools">
            <summary> Getter for tools mask. True to collect tools from the source file.  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskPlanes(System.Boolean)">
            <summary> Setter for planes mask. True to collect planes from the source file  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskPlanes">
            <summary> Getter for planes mask. True to collect planes from the source file  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskGeometry(System.Boolean)">
            <summary> Setter for true to collect geometry referenced by toolpath operations from source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskGeometry">
            <summary> Getter for true to collect geometry referenced by toolpath operations from source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetpToolMgr(std.shared_ptr&lt;Cnc.Tool.TlMgr&gt;)">
            <summary> Setter for Tool Manager </summary>
            <param name="toolmgr"> Pointer to the tool manager. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetpToolMgr">
            <summary> Getter for Tool Manager </summary>
            <returns> Returns ptr to Tool Manager. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetNciFpos(System.Int64)">
            <summary> Setter for the start of bnci fpos of the source file </summary>
            <param name="fpos"> The bnci fpos for the source file </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetNciFpos">
            <summary> Getter for the start of bnci fpos of the source file </summary>
            <returns> Returns long. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMinorVersion(System.Int32)">
            <summary> Sets minor file version of the source file </summary>
            <param name="version"> The major version as an int </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMinorVersion">
            <summary> Gets minor file version of the source file </summary>
            <returns> Returns int. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMajorVersion(System.Int32)">
            <summary> Sets major file version of the source file </summary>
            <param name="version"> The major version as an int </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMajorVersion">
            <summary> Gets major file version of the source file </summary>
            <returns> Returns int. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetpPlanes(System.Void*)">
            <summary> Setter for pointer to copy of MastercamPlanes from the source file </summary>
            <param name="planes"> void*, planes construct </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetpPlanes">
            <summary> Getter for pointer to copy of MastercamPlanes from the source file </summary>
            <returns> Returns void*</returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetOrphanedTpEnts(CFposEntArray)">
            <summary> Setter for array of toolpath entities that have no parent operation </summary>
            <param name="orphanedents"> The referenced array of toolpath entities with no parent operation </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOrphanedTpEnts">
            <summary>  Getter for array of entities without references from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetTools(CFposEntArray)">
            <summary>  Setter for array of tool copies from the source file </summary>
            <param name="tools"> The referenced array of tool copies </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetTools">
            <summary>  Getter for array of tool copies from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetGeometry(CFposEntArray)">
            <summary> Setter for array of geometry entity copies referenced by operations from the source file </summary>
            <param name="geometry"> The referenced array of geometry entities </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetGeometry">
            <summary> Getter for array of geometry entity copies referenced by operations from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetOperations(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;CLibraryOperation&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;&gt;)">
            <summary> Setter for Map of operation copies from the source file </summary>
            <param name="operations"> The reference to the OpMap </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOperations">
            <summary> Getter for Map of operation copies from the source file </summary>
            <returns> Returns OpMap </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetGroups(VArray&lt;std.shared_ptr&lt;op_group&gt;&gt;)">
            <summary> Setter for (Groups) vector of machine and toolpath group copies from the source file </summary>
            <param name="groupvector"> The reference to VArray of groups </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetGroups">
            <summary> Getter for (Groups) vector of machine and toolpath group copies from the source file </summary>
            <returns> Returns VArray of op_group pointers </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestNciOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading NCI into an operation. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading into m_Operations. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestTpEnt(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tp_net against masks before loading into m_Operations.m_TpEnts. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestOperation(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation against masks before loading into m_Operations. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestTool(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tool against masks before loading into m_Tools. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestViewEnt(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests view_ent against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestPlanes(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests planes against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestGeometry(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests geometry against masks before loading into m_Geometry. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.ValidOperationIterator(std._Tree_const_iterator&lt;std._Tree_val&lt;std._Tree_simple_types&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validate operation iterator from m_Operations (since m_Operations is public). </summary>
            <param name="iter"> The iterator. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.InitBnciExtents">
            <summary> Initializes the bnci extents. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.DependentOperationsExist">
            <summary> Return true if dependent operation types exist in m_Operaitons. </summary>
            <returns> Return true if dependent operation types exist in m_Operaitons. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SwapEptrs(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Swap the entity ptrs. </summary>
            <param name="mapGeom">	    The map geometry entity ID, pair of old eptr and new eptr. </param>
            <param name="updateDB">	    true to rewrite the entities to the current database. </param>
            <param name="markOpsDirty"> true to mark affected toolpath operations dirty. </param>
            <returns> Number of substitutions that occurred. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.RemoveOperation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes the operation described by opID from the map m_Operations. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.ReplaceOrAddOperation(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds (and replaces if needed) an operation to the map m_Operations. </summary>
            <param name="filePos"> The file position in a external file, -1 for the current db. </param>
            <param name="opEnt">   The operation entity. </param>
            <returns> An OpMap::iterator where the operation was added. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOperationPtrsByOpMgrOrder(std.vector&lt;std.shared_ptr&lt;CLibraryOperation&gt;,std.allocator&lt;std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets operation ptrs by operation manager order. </summary>
            <param name="opArray"> Array of operation map ptrs. </param>
            <returns> size of opArray. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetRootGroup(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the root group of a subgroup. </summary>
            <param name="groupID"> Identifier for the group. </param>
            <returns> Iterator to the root group in m_Groups. </returns>
        </member>
        <member name="D:IInterrogateMastercamFile.OpMap">
            <summary> Defines an alias representing the operation map (operation ID, copy of operation). </summary>
        </member>
        <member name="D:IInterrogateMastercamFile.OpMapPtr">
            <summary> Defines an alias representing the operation map pointer. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.GetFileName">
            <summary> Gets the file name of what's loaded. </summary>
            <returns> The file name. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskNciOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskNciOpcodes to filter which operation's NCI is loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskNciOpcodes array after setting. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskOpcodes to filter which operations are loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskOpcodes array after setting. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetDirtyOperationIDs(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets the dirty operation IDs. </summary>
            <param name="opIDs"> The dirty operation IDs. </param>
            <param name="dirty"> (Optional) the dirty flag to match. </param>
            <returns> The size of opIDs. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SortOperationIDsByOpMgrOrder(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sort operation IDs in opIDS by operation manager order. </summary>
            <param name="opIDs"> The operation IDs to sort. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetSelectedOperationIDs(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets selected operation IDs. </summary>
            <param name="opIDs">    The selected operation IDs. </param>
            <param name="selectON"> (Optional) the select flag to match. </param>
            <returns> The size of opIDs. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetGeometryEntityPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets geometry entity pointer. </summary>
            <param name="entID"> Identifier for the ent. </param>
            <returns> The geometry entity pointer. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the operation pointer by identifier. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetLibraryOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets library operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the library operation pointer by identifier. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.IsExternalFile">
            <summary> Query if this object was loaded from an external file. </summary>
            <returns> true if external file, false if not. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.IsLoaded">
            <summary> Query if this object is loaded (returns value of m_Loaded). </summary>
            <returns> true if loaded, false if not. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.CalcBnciExtents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Calculates the extents of the bnci in this object. </summary>
            <param name="relWcs"> (Optional) true to relative wcs. </param>
            <param name="adjTOS"> (Optional) true to adjust to TOS. </param>
            <param name="deleteToolRadius"> (Optional) true to delete the tool radius from "Z". </param>
            <param name="includeEndOfRapids"> (Optional) true to include the end of rapids in extents calc. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForPlanes(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with plane info from an external Mastercam file. </summary>
            <param name="mcxFileName"> Mastercam file name. </param>
            <returns> for planes. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForPlanes">
            <summary> Preset masks and loads this object with plane info from the current db. </summary>
            <returns> Number of planes loaded. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with operations and their NCI from and external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the external Mastercam file. </param>
            <param name="gcodeMask">   List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci(System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*,IDArray!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object with operations and their NCI from the current db from just the
		  operations whose IDs match ones in the given pIncludeOpIDs parameter and not ones whose ID's match
		  ones in the given pExcludeOpIDs parameter. </summary>
            <param name="useCache">		 true = attempt to use NCI cache in global Planes. </param>
            <param name="gcodeMask">	 List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <param name="pIncludeOpIDs"> (Optional) the include operation ids. </param>
            <param name="pExcludeOpIDs"> (Optional) the exclude operation ids. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with operations and their NCI from an external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci">
            <summary> Preset masks and loads this object with operations and their NCI from the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForWorkOffsetInfo(System.Boolean,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with work offset information from just the operations whose IDs match
		  ones in the given includeOpIDs parameter and not ones whose ID's match ones in the given excludeOpIDs
		  parameter. </summary>
            <param name="useCache">	    true = use NCI cache, false = read from disk. </param>
            <param name="includeOpIDs"> The operations to include. </param>
            <param name="excludeOpIDs"> The operations to exclude. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForSingleOperation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object for just the 1 operation from the current db. </summary>
            <param name="opID">		  Identifier for the operation. </param>
            <param name="includeNci"> true to include NCI, false to exclude NCI. </param>
            <param name="pGcodeMask"> (Optional) if (includeNci == true), ptr to NCI gcode mask, nullptr to read in all. </param>
            <returns> pointer to operation, null if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntityCount(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities (no associated geometry or planes) from the current db. </summary>
            <param name="opIDs"> The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities from an external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <param name="opIDs">	   The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose opcodes match ones 
		  in the given opCodeMask parameter and their toolpath entities from the current db. </summary>
            <param name="opCodeMask"> Only collect operations with these opcodes. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities from the current db. </summary>
            <param name="opIDs"> The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just operations and toolpath entities from an external Mastercam
		  file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities">
            <summary> Preset masks and loads this object with just operations and toolpath entities 
		  from the current db.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForDependencies(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities from an
		  external Mastercam file. TP_OPID type toolpath entities are typically used in transform and nesting
		  operations. </summary>
            <param name="mcxFileName"> Mastercam file name. </param>
            <returns> for dependencies. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForDependencies">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities 
		  from the current db. TP_OPID type toolpath entities are typically used in transform
		  and nesting operations.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadJustOperations(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadJustOperations">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.Load">
            <summary> Loads this object using the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.Load(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads this object using the given mcx file name. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.InitMasks">
            <summary> Initializes the masks. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.EmptyPlanes">
            <summary> Empty the m_pPlanes object. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="T:IInterrogateMastercamFile">
            <summary> Utility class to collect entities and info of the current db or an external Mastercam file. </summary>
        </member>
        <member name="M:CAssocUtils.Init(CInterrogateMastercamFile*)">
            <summary> Initializes this object. </summary>
            <param name="pInFile"> (Optional) If non-null, (Optional) the CInterrogateMastercamFile info object. </param>
        </member>
        <member name="M:CAssocUtils.GetOperationsByGeometry(ent!System.Runtime.CompilerServices.IsConst*,System.Int16,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets operation IDs by a geometry reference. </summary>
            <param name="pGeomEnt">  The geometry ent to search for. </param>
            <param name="solidOpID"> Identifier for the solid operation. </param>
            <param name="opIDs">	 The operation IDs that reference the geometry. </param>
            <returns> Size of opIDs array. </returns>
        </member>
        <member name="M:CAssocUtils.GetToolpathEntitiesByGeometry(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,CFposEntArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets toolpath entities that reference the given geometry entity. </summary>
            <param name="geomEnt">    the geometry entity. </param>
            <param name="solidOpID">  Identifier for the solid operation. </param>
            <param name="tpEntArray"> Array of toolpath entities that reference the geometry entity. </param>
            <returns> Size of tpEntArray. </returns>
        </member>
        <member name="M:CAssocUtils.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CAssocUtils.#ctor(CInterrogateMastercamFile*)">
            <summary> Constructor. </summary>
            <param name="pInFile"> (Optional) If non-null, (Optional) the CInterrogateMastercamFile info object. </param>
        </member>
        <member name="T:CAssocUtils">
            <summary> Utility class that collects operations by their referenced geometry. </summary>
        </member>
        <member name="M:CLibraryOperation.InitBnciExtents">
            <summary> Initializes the bnci extents. </summary>
        </member>
        <member name="M:CLibraryOperation.ReadNciSection(MCFile*,System.Int64,System.Int64,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Reads the operation's nci section from fposStartOfSection thru fposEndOfSection into m_spBnciRW. </summary>
            <param name="pOpenFile">		  [in,out] If non-null, the open file. </param>
            <param name="fposStartOfSection"> The file position to start reading. </param>
            <param name="fposEndOfSection">   The file end position of the last line to read. </param>
            <param name="pGcodeMask">		  The gcode mask. </param>
            <returns> The number of lines read into m_spBnciRW. </returns>
        </member>
        <member name="M:CLibraryOperation.ReadNciSection(System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Reads the operation's nci section into m_spBnciRW. </summary>
            <param name="useCache">   true = attempt to use NCI cache in global Planes. </param>
            <param name="pGcodeMask"> (Optional) The gcode mask. </param>
            <returns> The number of lines read into m_spBnciRW. </returns>
        </member>
        <member name="M:CLibraryOperation.CalcBnciExtents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Calculates the bnci extents. </summary>
            <param name="relWcs"> (Optional) true to relative wcs. </param>
            <param name="adjTOS"> (Optional) true to adjust to TOS. </param>
            <param name="deleteToolRadius"> (Optional) true to delete the tool radius from "Z". </param>
            <param name="includeEndOfRapids"> (Optional) true to include the end of rapids in extents calc. </param>
            <returns> true if successful. </returns>
        </member>
        <member name="M:CLibraryOperation.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:CLibraryOperation.GetOpPtr">
            <summary> Gets a ptr to the operation. </summary>
            <returns> null if it fails, else the operation pointer. </returns>
        </member>
        <member name="M:CLibraryOperation.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CLibraryOperation.#ctor(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="filePos"> The file position, -1 for current file. </param>
            <param name="opEnt">   The operation entity. </param>
        </member>
        <member name="M:CLibraryOperation.#ctor(CLibraryOperation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:CLibraryOperation.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CLibraryOperation.NciOpViewMismatchInfo.ModType">
            <summary> Values that represent the modification types needed or applied. </summary>
        </member>
        <member name="M:CLibraryOperation.NciOpViewMismatchInfo.#ctor(PlaneType,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Constructor. </summary>
            <param name="planeType">	    Type of the plane. </param>
            <param name="m33">			    The matrix of the Tplane, Cplane or WCS. </param>
            <param name="worldOrigin">	    The origin in world coords. </param>
            <param name="requestedPlaneID"> op's op_view's assigned plane ID. </param>
            <param name="planeReqd">	    Operation ID if a plane is required for this operation type, else a 0. </param>
            <param name="createIfNeeded">   true = create a new plane if needed. </param>
        </member>
        <member name="T:CLibraryOperation.NciOpViewMismatchInfo">
            <summary> Information about the operation's op_view data mismatch with its NCI. </summary>
        </member>
        <member name="T:CLibraryOperation">
            <summary> A toolpath operation's entity, associated toolpath entities and NCI information. </summary>
        </member>
        <member name="M:CFposEntArray.SetUseMultiMap(System.Boolean)">
            <summary> Sets value of m_UseMultiMap. </summary>
            <param name="on"> true = allow duplicate keys in m_Map, false = ensure unique keys (like std::map). </param>
            <returns> Previous value of m_UseMultiMap. </returns>
        </member>
        <member name="M:CFposEntArray.Add(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds theEntity to m_Map. </summary>
            <param name="mapKey">    The map key. </param>
            <param name="theEntity"> the entity. </param>
            <returns> A MapType::iterator to the item added. </returns>
        </member>
        <member name="M:CFposEntArray.op_Assign(CFposEntArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> Source for the object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:CFposEntArray.#ctor(CFposEntArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:CFposEntArray.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CFposEntArray.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="D:CFposEntArray.MapType">
            <summary> Defines an alias representing type of the map. </summary>
        </member>
        <member name="T:CFposEntArray">
            <summary> Array of entity information. </summary>
        </member>
        <member name="D:CFposEnt.ByteType">
            <summary> Defines an alias representing type of the byte. </summary>
        </member>
        <member name="M:CFposEnt.CopyFormulaeFile(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies the formulae file from m_FormulaeFile to theEnt. </summary>
            <param name="theEnt">	   the entity to copy to. </param>
            <param name="justZeroOut"> true to just zero out the ent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CFposEnt.CopyCriticalDepths(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies the critical depths from m_CriticalDepths to theEnt. </summary>
            <param name="theEnt">	   the entity to copy to. </param>
            <param name="justZeroOut"> true to just zero out the ent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CFposEnt.AllocMem(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Allocate memory to house the entity. </summary>
            <param name="sz"> The entity size. </param>
            <returns> nullptr if it fails, else an ent*. </returns>
        </member>
        <member name="M:CFposEnt.Kill">
            <summary> Initializes and frees memory of this object. </summary>
        </member>
        <member name="M:CFposEnt.Init">
            <summary> Initializes this object. </summary>
        </member>
        <member name="M:CFposEnt.Get(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets a copy of the ent defined in m_spBlock. </summary>
            <param name="theEnt">					    the entity to fill in. </param>
            <param name="copyVariableLengthParameters"> (Optional) true to copy variable length parameters (critical depths,
											formulae file, etc.). </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.GetPtr">
            <summary> Returns an ent* to m_spBlock. </summary>
            <returns>  Returns an ent* to m_spBlock. </returns>
        </member>
        <member name="M:CFposEnt.GetEntSize(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the size of theEnt. </summary>
            <param name="theEnt"> the entity. </param>
            <returns> The ent size. </returns>
        </member>
        <member name="M:CFposEnt.GetFromDb(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the entity stored in m_spBlock from the current database. </summary>
            <param name="entity"> The entity to fill in. </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.Replace(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces the given entity in m_spBlock. </summary>
            <param name="entity"> The entity. </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.Set(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Allocate memory and copy entity in member variable. </summary>
            <param name="fPos">   The file position if it's from an external file, -1 for the current file. </param>
            <param name="entity"> The entity to attach. </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CFposEnt.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CFposEnt">
            <summary> Entity information. </summary>
        </member>
        <member name="M:ManageVariableParameters.GetOperationVariableLengths(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Void!System.Runtime.CompilerServices.IsConst**,System.UInt64,std.less&lt;System.Void!System.Runtime.CompilerServices.IsConst**&gt;,std.allocator&lt;std.pair&lt;System.Void!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst,System.UInt64&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect ptrs and sizes ofr variable length fields in a toolpath operation. </summary>
            <param name="theOp">  the operation to test. </param>
            <param name="varMap"> the map to fill in. </param>
            <returns> The operation variable lengths. </returns>
        </member>
        <member name="M:ManageVariableParameters.EntityContainsVariableLengthData(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Test to see if an entity contains variable length data. </summary>
            <param name="theEnt"> the ent to test. </param>
            <returns> True if it does, false if it doesn't. </returns>
        </member>
        <member name="M:ManageVariableParameters.CopyDepths(prm_srf_depths!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,prm_srf_depths*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies critical depths from the source to the target. </summary>
            <param name="sourceDepths">	    List of depths of the sources. </param>
            <param name="targetDepths">	    List of depths of the targets. </param>
            <param name="freeTargetMemory"> true = first free target memory. </param>
            <returns> A CopyErrorFlag. </returns>
        </member>
        <member name="M:ManageVariableParameters.CopyDepths(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies critical depths from the source operation to the target operation. </summary>
            <param name="sourceOp">		    Source operation. </param>
            <param name="targetOp">		    Target operation. </param>
            <param name="freeTargetMemory"> true = first free target memory. </param>
            <returns> A CopyErrorFlag. </returns>
        </member>
        <member name="M:ManageVariableParameters.FreeDepthsPtr(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Free critical depths in the operation entity. </summary>
            <param name="opEnt"> The operation entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetDepthsPtr(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ManageVariableParameters.CheckCount,ManageVariableParameters.SupportedTypes)">
            <summary> Gets a pointer to the critical depths parameter in operations that have them. </summary>
            <param name="theOp">		  The operation to check in. </param>
            <param name="checkCount">	  true = also check that the count &gt; 0 before returning a ptr. </param>
            <param name="supportedTypes"> Check or don't check for supported operation types. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetDepthsPtr(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ManageVariableParameters.CheckCount,ManageVariableParameters.SupportedTypes)">
            <summary> Gets a pointer to the critical depths parameter in operations that have them. </summary>
            <param name="opEnt">		  The operation entity to look in. </param>
            <param name="checkCount">	  true = also check that the count &gt; 0 before returning a ptr. </param>
            <param name="supportedTypes"> Check or don't check for supported operation types. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ManageVariableParameters.CopyFormulaeFile(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies formulae file from the source operation to the target operation. </summary>
            <param name="sourceOp">		    Source operation. </param>
            <param name="targetOp">		    Target operation. </param>
            <param name="freeTargetMemory"> true to free target memory. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.FreeFormulaeFile(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Free formulae file allocation in an operation entity. </summary>
            <param name="opEnt"> The operation entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetFormulaeFile(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns a CString with the formulae file from the op. </summary>
            <param name="theOp"> the operation. </param>
            <returns> The formulae file, empty CString if not found. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetFormulaeFilePtr(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ManageVariableParameters.CheckCount,std.pair&lt;System.Int16**,System.Char****&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets formulae file size and pointer from the operation entity. </summary>
            <param name="opEnt">		    The operation entity. </param>
            <param name="checkCount">	    true = also check that the count &gt; 0 before returning a ptr. </param>
            <param name="formulaeFilePtrs"> Formulae file size and character ptr. </param>
            <param name="fileName">		    Full pathname of the formulae file with a null terminating character. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetFormulaeFilePtr(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ManageVariableParameters.CheckCount,std.pair&lt;System.Int16**,System.Char****&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets formulae file size and pointer from the operation entity. </summary>
            <param name="theOp">		    The operation. </param>
            <param name="checkCount">	    true = also check that the count &gt; 0 before returning a ptr. </param>
            <param name="formulaeFilePtrs"> Formulae file size and character ptr. </param>
            <param name="fileName">		    Full pathname of the formulae file with a null terminating character. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ManageVariableParameters.CopyErrorFlag">
            <summary> Return values for CopyDepths (). </summary>
        </member>
        <member name="T:ManageVariableParameters.SupportedTypes">
            <summary> Check or don't check for supported operation types in GetPtr() 
		  before return ptr to critical depths. </summary>
        </member>
        <member name="T:ManageVariableParameters.CheckCount">
            <summary> Values that represent whether to check the depth counts in operations. </summary>
        </member>
        <member name="T:ManageVariableParameters">
            <summary> Class to manage the variable length surface depths parameter. </summary>
        </member>
        <member name="M:ReservedPlanes.IsLatheTplane(ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'typeID' is lathe Tplane. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe Tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.AddReservedNamePair(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary> Adds a reserved name by resource ID to m_Names. </summary>
            <param name="name">			  The reserved name. </param>
            <param name="typeID">		  The reserved type ID. </param>
            <param name="nameResourceID"> The resource ID of the reserved name. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ReservedPlanes.AddReservedNamePair(System.UInt32,ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a reserved name by resource ID to m_Names. </summary>
            <param name="nameResourceID"> The resource ID of the reserved name. </param>
            <param name="typeID">		  The reserved type ID. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ReservedPlanes.BuildLatheNames(System.Boolean)">
            <summary> Builds the lathe Tplane name map. </summary>
            <param name="forceReload"> true to first clear m_Names and m_LatheNames to force reload. </param>
            <returns> size of m_LatheNames. </returns>
        </member>
        <member name="M:ReservedPlanes.BuildNames(System.Boolean)">
            <summary> Builds the reserved name map. </summary>
            <param name="forceReload"> true to first clear m_Names and m_LatheNames to force reload. </param>
            <returns> size of m_Named. </returns>
        </member>
        <member name="M:ReservedPlanes.BuildStandardMatrices">
            <summary> Build the array of hard-coded matrices. </summary>
            <returns> Size of array m_StandardMatrices. </returns>
        </member>
        <member name="M:ReservedPlanes.IsIsoType(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if the long 'typeID' is a valid Iso type. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.WarnLatheTplaneSetAsReserved(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Warning that a special lathe tplane is set as reserved. </summary>
            <param name="planeID">  Identifier for the plane. </param>
            <param name="reserved"> true if being set as reserved. </param>
        </member>
        <member name="M:ReservedPlanes.IsLatheCplaneOnlyReservedID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return true if the plane ID is a reserved lathe construction plane ID. </summary>
            <param name="planeID"> the Plane ID to check. </param>
            <returns> return true if the plane ID is a default one. </returns>
        </member>
        <member name="M:ReservedPlanes.IsStandardReservedID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Return true if the ID is one of the first standard plane ID's. </summary>
            <param name="planeID">		 the Plane ID to check. </param>
            <param name="includeLatheZ"> true to include Lathe_Z_Equals_World_Z. </param>
            <returns> true if one of the first standard, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsLatheVTL(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if 'typeID' is VTL type. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> True if a VTL type, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsLatheID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if the long 'typeID' is a valid lathe TypeID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsLatheTplane(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if the long 'typeID' is a valid lathe Tplane TypeID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.GetLatheNames">
            <summary> Gets lathe names. </summary>
            <returns> The lathe names. </returns>
        </member>
        <member name="M:ReservedPlanes.GetNames">
            <summary> Gets the names. </summary>
            <returns> The names. </returns>
        </member>
        <member name="M:ReservedPlanes.GetStandardMatrices">
            <summary> Gets const reference to m_StandardMatrices. </summary>
            <returns> The standard matrices. </returns>
        </member>
        <member name="M:ReservedPlanes.GetLatheMap">
            <summary> Gets constant reference to m_LathePlaneMap. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:ReservedPlanes.GetMap">
            <summary> Gets constant reference to the map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:ReservedPlanes.GetSize">
            <summary> Gets the size of m_Map. </summary>
            <returns> The size. </returns>
        </member>
        <member name="M:ReservedPlanes.Build(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Builds the map m_Map. </summary>
            <param name="productMask"> AEB_MILL, AEB_LATHE, AEB_MT or a combination of all. </param>
            <param name="forceReload"> true to first clear m_Names and m_LatheNames to force reload. </param>
            <returns> Size of map. </returns>
        </member>
        <member name="M:ReservedPlanes.GetPtr(PlaneClass,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to a reserved plane with the matching class and matrix. </summary>
            <param name="planeClass"> PlaneClass::SystemMatrix or PlaneClass::NamedPlane. </param>
            <param name="m33">		  Matrix to match. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a reserved plane name. </summary>
            <param name="newName"> New name of the reserved plane. </param>
            <param name="typeID">  Identifier for the reserved plane type. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ReservedPlanes.GetName(ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a name by TypeID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> The name. </returns>
        </member>
        <member name="M:ReservedPlanes.GetPtr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to a reserved plane with the matching name (not case sensitive). </summary>
            <param name="name"> Name to match. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.GetLathePlanePtr(ReservedPlanes.TypeID)">
            <summary> Gets a pointer to a kinda-reserved super special lathe Tplane with the matching type ID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.GetPtr(ReservedPlanes.TypeID)">
            <summary> Gets a pointer to a reserved plane with the matching type ID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.GetIterator(ReservedPlanes.TypeID)">
            <summary> Gets a pointer to the reserved info. </summary>
            <param name="resType"> Identifier for the resource. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.IsReservedName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'name' is reserved name. </summary>
            <param name="name">		    The name. </param>
            <param name="caseMismatch"> set to true = same name, but the case is mismatched. </param>
            <returns> true if reserved name, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.TypeIdToLong(ReservedPlanes.TypeID,System.Boolean)">
            <summary> Casts a TypeID identifier to a long. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <param name="warn">   true for debug warning. </param>
            <returns> A long, 0 if invalid type. </returns>
        </member>
        <member name="M:ReservedPlanes.IsValidType(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Query if 'longType' is valid TypeID. </summary>
            <param name="longType">	TypeID as a long. </param>
            <param name="warn">		true for debug warning. </param>
            <returns> true if valid type, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsSystemMatrixType(ReservedPlanes.TypeID)">
            <summary> Query if 'resType' is system matrix identifier. </summary>
            <param name="resType"> Identifier for the resource. </param>
            <returns> true if system matrix identifier, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.GetStandardMatrix(System.Int32)">
            <summary> Return copy of hard-coded matrices if within range. </summary>
            <param name="viewNo"> Array index in m_StandardMatrices. </param>
            <returns> The standard matrix. </returns>
        </member>
        <member name="M:ReservedPlanes.op_Assign(ReservedPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ReservedPlanes.#ctor(ReservedPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="D:ReservedPlanes.LatheNames">
            <summary> Defines an alias representing list of names of the lathe tplanes. </summary>
        </member>
        <member name="D:ReservedPlanes.ReservedNamePair">
            <summary> Defines an alias representing the reserved name pair. </summary>
        </member>
        <member name="D:ReservedPlanes.ReservedNames">
            <summary> Defines an alias representing list of names of the reserved planes. </summary>
        </member>
        <member name="D:ReservedPlanes.ReservedPlanePair">
            <summary> Defines an alias representing the reserved plane pair. </summary>
        </member>
        <member name="D:ReservedPlanes.ReservedPlaneMap">
            <summary> Defines an alias representing the reserved plane map. </summary>
        </member>
        <member name="M:ReservedPlanes.NameInfo.#ctor(ReservedPlanes.TypeID,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary> Constructor. </summary>
            <param name="typeID">		Identifier for the type. </param>
            <param name="name">			The name. </param>
            <param name="resourceID">	(Optional) identifier for the resource ID. </param>
        </member>
        <member name="T:ReservedPlanes.NameInfo">
            <summary> Information about the name. </summary>
        </member>
        <member name="M:ReservedPlanes.ResInfo.#ctor(ReservedPlanes.TypeID,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,CoordinateDisplayType,System.Boolean)">
            <summary> Named view constructor. </summary>
            <param name="typeID">		Identifier for the resource. </param>
            <param name="m33">			The matrix. </param>
            <param name="product">		The product. </param>
            <param name="coordDisplay">	The coordinate display. </param>
            <param name="placeHolder">  true to place holder. </param>
        </member>
        <member name="M:ReservedPlanes.ResInfo.#ctor(ReservedPlanes.TypeID,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> SystemMatrix constructor. </summary>
            <param name="typeID"> Identifier for the resource. </param>
            <param name="m33">    The matrix. </param>
        </member>
        <member name="M:ReservedPlanes.ResInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ReservedPlanes.ResInfo">
            <summary> Information about the reserved plane. </summary>
        </member>
        <member name="T:ReservedPlanes.TypeID">
            <summary> Reserved ID's for standard planes that are non-editable. </summary>
        </member>
        <member name="M:ReservedPlanes.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ReservedPlanes.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ReservedPlanes">
            <summary> A to create and maintain the reserved planes. </summary>
        </member>
        <member name="M:PlaneGnomon.SetColor(System.Int32)">
            <summary> Sets the color of the plane. </summary>
            <param name="color"> Plane color. </param>
        </member>
        <member name="M:PlaneGnomon.IsValid">
            <summary> Return true if Set () was called and the gnomon contains valid info. </summary>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:PlaneGnomon.SetOrigin(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the origin of the gnomon. </summary>
            <param name="origin"> Origin. </param>
        </member>
        <member name="M:PlaneGnomon.Set(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Initialize this gnomon to the given parameters. </summary>
            <param name="thePlane"> a Mastercam Plane. </param>
            <param name="enable">   true to enable, false to disable. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlaneGnomon.GetID">
            <summary> Get the plane ID of this gnomon. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneGnomon.Erase(System.Boolean)">
            <summary> erase the Plane gnomon; free the memory. </summary>
            <param name="repaint"> (Optional) true = repaint. </param>
        </member>
        <member name="M:PlaneGnomon.Draw(System.Boolean,System.Boolean,System.Boolean)">
            <summary> draw the Plane gnomon. </summary>
            <param name="includeName"> (Optional) true to include the plane name (default = true). </param>
            <param name="selected">    (Optional) true if plane planel active and plane selected (default = false). </param>
            <param name="enable">      (Optional) true to draw as enabled; false to draw as disabled (default = true). </param>
        </member>
        <member name="M:PlaneGnomon.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:PlaneGnomon.#ctor(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> parameterized constructor. </summary>
            <param name="thePlane">		  the plane. </param>
            <param name="singleInstance"> true to single instance. </param>
        </member>
        <member name="M:PlaneGnomon.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:PlaneSelectGnomon">
            <summary> A plane select gnomon. </summary>
        </member>
        <member name="T:PlaneGnomon">
            <summary> Mastercam PlaneGnomon definition to be used for drawing plane gnomons. </summary>
        </member>
        <member name="M:PlanePoint.GetRegenErrorString(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return CString of m_RegenErrors. </summary>
            <param name="regenErrors"> The regen errors. </param>
            <returns> The regen error string. </returns>
        </member>
        <member name="M:PlanePoint.GetRegenErrors">
            <summary> return value of m_RegenErrors. </summary>
            <returns> The regen errors. </returns>
        </member>
        <member name="M:PlanePoint.GetSolidFaceInfo(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets solid face information. </summary>
            <param name="solidEntIdn"> 	[out] Solid entity id number. </param>
            <param name="selectionIdx">	[out] Selection index. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlanePoint.GetGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect copies of the geometry used to define this PlanePoint. </summary>
            <param name="geometryArray"> Array to copy geometry entities into. </param>
            <param name="geomMap">		 entity ID and eptr so we don't have to read thru the db. </param>
            <param name="entsNotFound">  ID's entities that could not be found in geomMap. </param>
            <returns> return # of entities copied into array. </returns>
        </member>
        <member name="M:PlanePoint.SwapEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Swap the associated geoemtry entity ID's. </summary>
            <param name="oldID"> old entity ID. </param>
            <param name="newID"> new entity ID. </param>
            <returns> # of IDs swapped. </returns>
        </member>
        <member name="M:PlanePoint.SetSelPt(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the tvalue CAD entry values. </summary>
            <param name="selPt"> array of 2 doubles represeting tvalues into. </param>
        </member>
        <member name="M:PlanePoint.GetSelPt(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the tvalue CAD entry values. </summary>
            <param name="selPt"> array of 2 doubles to insert tvalues into. </param>
        </member>
        <member name="M:PlanePoint.SetTval(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the tvalue CAD entry values. </summary>
            <param name="tVal"> array of 2 doubles represeting tvalues into. </param>
        </member>
        <member name="M:PlanePoint.GetTval(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the tvalue CAD entry values. </summary>
            <param name="tVal"> array of 2 doubles to insert tvalues into. </param>
        </member>
        <member name="M:PlanePoint.GetCreationMethod">
            <summary> get the point CAD entry method. </summary>
            <returns> returns method  if successful. </returns>
        </member>
        <member name="M:PlanePoint.CreationMethodRequiresCalculation">
            <summary> Return true if the creation method requires a recalculation to its geometry (like PEC_ENDPOINT) </summary>
            <returns> true if it method required recalculation, false if doesn't (like PEC_VALUES). </returns>
        </member>
        <member name="M:PlanePoint.SetPointCreationMethod(System.Byte)">
            <summary> set the point CAD entry method. </summary>
            <param name="creationMethod"> MC_BYTE representing CAD creation method (PEC_ORIGIN, etc) </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:PlanePoint.ValidPointCreationMethod(System.Byte)">
            <summary> validate creation method. </summary>
            <param name="creationMethod"> MC_BYTE representing CAD creation method (PEC_ORIGIN, etc) </param>
            <returns> returns true if valid. </returns>
        </member>
        <member name="M:PlanePoint.AssocPointCreationMethod(System.Byte)">
            <summary> validate creation method. </summary>
            <param name="creationMethod"> MC_BYTE representing CAD creation method (PEC_ORIGIN, etc) </param>
            <returns> returns true if valid. </returns>
        </member>
        <member name="M:PlanePoint.SetEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set up to two entity ID's that P3D is created with. </summary>
            <param name="entID1"> 1 of 2 entity ID's. </param>
            <param name="entID2"> 2 of 2 entity ID's. </param>
        </member>
        <member name="M:PlanePoint.GetEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> return up to two entity ID's that P3D was created with. </summary>
            <param name="entityIDs"> array to fill in with entity ID's. </param>
            <returns> return # of entity ID's found. </returns>
        </member>
        <member name="M:PlanePoint.Convert(assoc_pt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert a P3D to a Mastercam assoc_pt. </summary>
            <param name="thePt"> the Mastercam assoc_pt to convert into. </param>
        </member>
        <member name="M:PlanePoint.Convert(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert a P3D to a Mastercam p3d. </summary>
            <param name="thePt"> the Mastercam p_3d to convert into. </param>
        </member>
        <member name="M:PlanePoint.GetPointInViewCoordinates(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the P3D m_Point member variable in view coordinates. </summary>
            <param name="m33"> the Mastercam view to convert point from world coordinates into. </param>
            <returns> return the P3D m_Point member variable in view coordinates. </returns>
        </member>
        <member name="M:PlanePoint.GetPointInWorldCoordinates">
            <summary> return the P3D m_Point member variable in world coordinates. </summary>
            <returns> The point in world coordinates. </returns>
        </member>
        <member name="M:PlanePoint.SetZ(System.Double)">
            <summary> set the origin's Z value in world coordinates. </summary>
            <param name="zVal"> the value to set Z to. </param>
            <returns> return the previous Z value. </returns>
        </member>
        <member name="M:PlanePoint.SetY(System.Double)">
            <summary> set the origin's Y value in world coordinates. </summary>
            <param name="yVal"> the value to set Y to. </param>
            <returns> return the previous Y value. </returns>
        </member>
        <member name="M:PlanePoint.SetX(System.Double)">
            <summary> set the origin's X value in world coordinates. </summary>
            <param name="xVal"> the value to set X to. </param>
            <returns> return the previous X value. </returns>
        </member>
        <member name="M:PlanePoint.SetPoint(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> initialize and set P3D m_Point member variable. </summary>
            <param name="srcPt"> Source point. </param>
            <param name="init">  true to initialise. </param>
            <returns> . </returns>
        </member>
        <member name="M:PlanePoint.SetVersion(System.Int32)">
            <summary> set the version. </summary>
            <param name="version"> the version number. </param>
            <returns> return the previous version value. </returns>
        </member>
        <member name="M:PlanePoint.GetVersion">
            <summary> return the version. </summary>
            <returns> The version. </returns>
        </member>
        <member name="M:PlanePoint.Regenerate(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> recalculate the point position. </summary>
            <param name="m33">	   The third m 3. </param>
            <param name="geomMap"> entity ID and eptr map so it does not have to read thru the db to find geometry entities. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlanePoint.Regenerate(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> recalculate the point position. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlanePoint.GetEntryMethod">
            <summary> return the point entry method, 0 if not yet set. </summary>
            <returns> The entry method. </returns>
        </member>
        <member name="M:PlanePoint.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:PlanePoint.op_Subscript(System.Int64)">
            <summary> subscript operator. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:PlanePoint.Init">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:PlanePoint.op_Equality(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.op_Inequality(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.op_Assign(aPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using Mastercam aPoint. </summary>
            <param name="aPt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlanePoint.op_Assign(assoc_pt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using Mastercam assoc_pt. </summary>
            <param name="aPt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlanePoint.op_Assign(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlanePoint.#ctor(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:PlanePoint.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:PlanePoint.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary>	Constructor for solid face plane point. </summary>
            <param name="origin">  	The origin. </param>
            <param name="solidIdn">	The solid body entity id number. </param>
            <param name="faceIdx"> 	Solid face selection index. </param>
        </member>
        <member name="M:PlanePoint.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="wOriginPt"> the origin point in world coordinates. </param>
        </member>
        <member name="M:PlanePoint.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="entID1">		  unique entity ID (ent.en_idn) </param>
            <param name="entID2">		  unique entity ID (ent.en_idn) </param>
            <param name="creationMethod"> MC_BYTE defining CAD creation method (PEC_ORIGIN, etc) </param>
            <param name="tVal">			  tValues from CAD creation. </param>
            <param name="wOriginPt">	  the origin point in world coordinates. </param>
        </member>
        <member name="M:PlanePoint.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Plane">
            <summary> make Plane a friend. </summary>
            <summary> Forward declaration. </summary>
            <summary> A plane. </summary>
            <summary> A macro that defines no work offset. </summary>
            <summary> Mastercam Plane definition</summary>
        </member>
        <member name="T:PlanePoint.REGEN_ERROR">
            <summary> error code applied in validation and regeneration. </summary>
        </member>
        <member name="T:PlanePoint">
            <summary> PlanePoint class defines a point entity used in creating a Plane.  
		  A plane contains up to 4 PlanePoint's: 1 for the origin and up to 3 to define the 3 axes.</summary>
        </member>
        <member name="M:DbViewMap.clear">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:DbViewMap.MergeOldIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Merge old IDs from node to map element. </summary>
            <param name="targetIDs"> The set to merge into. </param>
            <param name="sourceIDs"> The set to merge from. </param>
            <returns> # of IDs added. </returns>
        </member>
        <member name="M:DbViewMap.Dump">
            <summary> Dumps this object. </summary>
        </member>
        <member name="M:DbViewMap.AddToPlanes(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds marked system views to refPlanes global. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to add to. </param>
            <returns> Number of system views added to refPlanes. </returns>
        </member>
        <member name="M:DbViewMap.GetOldIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the old plane / view_ent IDs from the map nodes. </summary>
            <param name="oldIDs"> The set to fill in. </param>
            <returns> Size of set. </returns>
        </member>
        <member name="M:DbViewMap.GetMap">
            <summary> Gets the map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:DbViewMap.GetSize">
            <summary> Gets the size of the m_Map. </summary>
            <returns> The size. </returns>
        </member>
        <member name="M:DbViewMap.GetMaxEntID">
            <summary> Gets the value of m_MaxEntID. </summary>
            <returns> The value of m_MaxEntID. </returns>
        </member>
        <member name="M:DbViewMap.GetNewViewNo(System.Int32)">
            <summary> Gets the new view no from the old. </summary>
            <param name="oldViewNo"> The old view no. </param>
            <returns> The new view no. </returns>
        </member>
        <member name="M:DbViewMap.FindByOldViewNo(System.Int32,Matrix33!System.Runtime.CompilerServices.IsConst*)">
            <summary> get the DbViewMapNode that corrosponds with oldViewNo. </summary>
            <param name="oldViewNo"> The old view number. </param>
            <param name="p33">		 (Optional) The matrix to match. </param>
            <returns> iterator to match if found. </returns>
        </member>
        <member name="M:DbViewMap.FindByMatrix(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DbViewMapNode.NodeType)">
            <summary> get the DbViewMapNode that corrosponds with m33. </summary>
            <param name="m33">	    the 3x3 matrix to match. </param>
            <param name="added">    [in,out] set to true if matrix added, false if it already exists. </param>
            <param name="nodeType"> (Optional) DbViewMapNode::NodeType::Undefined to not make new if match not found. </param>
            <returns> iterator to match if found. </returns>
        </member>
        <member name="M:DbViewMap.Add(DbViewMapNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a view node to the map. </summary>
            <param name="node"> The node. </param>
            <returns> pointer to newly added or matching node in m_Map, nullptr if it fails. </returns>
        </member>
        <member name="M:DbViewMap.Build(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Populate the map directly from Planes global. </summary>
            <returns> Return size of m_Map. </returns>
        </member>
        <member name="M:DbViewMap.Build(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build a view map from the given open Mastercam file. </summary>
            <param name="mcFile">    [in,out] Already opened Mastercam file. </param>
            <param name="refPlanes"> [in,out] reference to planes object to set .m_InGetDb. </param>
            <returns> Return size of m_Map. </returns>
        </member>
        <member name="M:DbViewMap.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:DbViewMap.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="D:DbViewMap.Pair">
            <summary> Defines an alias representing the pair. </summary>
        </member>
        <member name="D:DbViewMap.Map">
            <summary> Defines an alias representing the map. </summary>
        </member>
        <member name="T:DbViewMap">
            <summary> DbViewMap class - used in get_db () to rebuild system views in the order they were saved. </summary>
        </member>
        <member name="M:DbViewMapNode.GetDescription">
            <summary> Gets the description. </summary>
            <returns> The description. </returns>
        </member>
        <member name="M:DbViewMapNode.FindNewViewNo(System.Boolean)">
            <summary> Return or create-and-return the new view # for this node. </summary>
            <param name="makeNew"> true to create and add a new system matrix. </param>
            <returns> The new view no. </returns>
        </member>
        <member name="M:DbViewMapNode.op_LessThan(DbViewMapNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:DbViewMapNode.op_Assign(DbViewMapNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:DbViewMapNode.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,DbViewMapNode.NodeType)">
            <summary> Constructor. </summary>
            <param name="oldID">	 The old view ent or plane ID. </param>
            <param name="m33">		 The matrix. </param>
            <param name="oldViewNo"> The old view no. </param>
            <param name="nodeType">  Type of the node. </param>
        </member>
        <member name="M:DbViewMapNode.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:DbViewMapNode.NodeType">
            <summary> Values that represent plane info source. </summary>
        </member>
        <member name="T:DbViewMapNode">
            <summary> DbViewMapNode class - used in DbViewMap.m_Map as an array element</summary>
        </member>
        <member name="M:EntityEptrMap.empty">
            <summary> Returns true if m_Map is empty. </summary>
            <returns> true if m_Map is empty. </returns>
        </member>
        <member name="M:EntityEptrMap.GetMultiMap">
            <summary> Gets multi map. </summary>
            <returns> The multi map. </returns>
        </member>
        <member name="M:EntityEptrMap.GetMap">
            <summary> Gets the entity map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:EntityEptrMap.GetEptr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets an eptr by entity ID. </summary>
            <param name="entID"> entity ID to match. </param>
            <returns> The eptr. </returns>
        </member>
        <member name="M:EntityEptrMap.GetID(DB_LIST_ENT*!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets entity identifier ID be the eptr. </summary>
            <param name="eptr"> The eptr to find. </param>
            <returns> The entity ID. </returns>
        </member>
        <member name="M:EntityEptrMap.GetSize">
            <summary> return number of elements. </summary>
            <returns> The size. </returns>
        </member>
        <member name="M:EntityEptrMap.GetMask">
            <summary> return value of entity mask. </summary>
            <returns> The mask. </returns>
        </member>
        <member name="M:EntityEptrMap.GetEntity(System.Int32!System.Runtime.CompilerServices.IsLong,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> find the entity with the given ID. </summary>
            <param name="entID">  entity ID (ent.ent_idn) to match. </param>
            <param name="theEnt"> the entity to copy into. </param>
            <returns> returns true if entity found and copied. </returns>
        </member>
        <member name="M:EntityEptrMap.Init(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> read thru the db and build the map. </summary>
            <param name="mask">			 entity type mask (GEOM_MASK, etc) </param>
            <param name="loadAssocEnts"> true to also load associative ents. </param>
            <returns> Return size of map. </returns>
        </member>
        <member name="D:EntityEptrMap.Pair">
            <summary> Defines an alias representing the pair. </summary>
        </member>
        <member name="D:EntityEptrMap.Map">
            <summary> Defines an alias representing the map. </summary>
        </member>
        <member name="M:EntityEptrMap.EntInfo.#ctor(DB_LIST_ENT*!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,ASSOC_ENT_TYPE)">
            <summary> Default constructor. </summary>
            <param name="ePtr">    (Optional) the ent's db pointer. </param>
            <param name="vw_refs"> (Optional) the # of plane references. </param>
            <param name="tp_refs"> (Optional) the # of toolpath references. </param>
        </member>
        <member name="T:EntityEptrMap.EntInfo">
            <summary> Information about the ent. </summary>
        </member>
        <member name="M:EntityEptrMap.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:EntityEptrMap.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Constructor. </summary>
            <param name="mask">			 The entity type mask (GEOM_MASK, etc). </param>
            <param name="loadAssocEnts"> (Optional) true to load associated ents. </param>
        </member>
        <member name="T:EntityEptrMap">
            <summary> EntityEptrMap class - read thru the current db once, create map of eptrs and 
		 entity ID's based on entity type mask</summary>
        </member>
        <member name="T:MCFile">
            <summary> A MCFile forward declaration. </summary>
        </member>
        <member name="D:MATRIX_CHOICES">
            <summary> Defines an alias representing array of matrix choices.
		  Base matrix in [0], CCW 90, 180, 270, CW 0, 90, 180, 270</summary>
        </member>
        <member name="M:XfmMatrix.GoingNowhere">
            <summary> Determines if transform matrix and origin are Top @ 0,0,0. </summary>
            <returns> True if it transform data doesn't result in any transformation, false if it does. </returns>
        </member>
        <member name="M:XfmMatrix.Convert(x_matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert this to a Mastercam x_matrix. </summary>
            <param name="xm"> valid X component. </param>
        </member>
        <member name="M:XfmMatrix.GetT">
            <summary> return value of m_r member variable. </summary>
            <returns> . </returns>
        </member>
        <member name="M:XfmMatrix.Get33">
            <summary> return value of m_33 member variable. </summary>
            <returns> The 33. </returns>
        </member>
        <member name="M:XfmMatrix.op_Equality(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:XfmMatrix.op_Inequality(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:XfmMatrix.op_Assign(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:XfmMatrix.Init">
            <summary> Initialize member variables. </summary>
        </member>
        <member name="M:XfmMatrix.op_Subscript(System.Int64)">
            <summary> subscript operator - return XCOORD, YCOORD or ZCOORD. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:XfmMatrix.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:XfmMatrix.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from 3 P3D's. </summary>
            <param name="X3"> valid X component. </param>
            <param name="Y3"> valid Y component. </param>
            <param name="Z3"> valid Z component. </param>
            <param name="T3"> valid T component. </param>
        </member>
        <member name="M:XfmMatrix.op_Assign(x_matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using Mastercam's x_matrix. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:XfmMatrix.#ctor(x_matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from matrix_33. </summary>
            <param name="xm"> the Mastercam x_matrix to copy from. </param>
        </member>
        <member name="M:XfmMatrix.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from matrix_33. </summary>
            <param name="m33"> the Matrix33 to copy from. </param>
            <param name="mT">  the P3D to copy from. </param>
        </member>
        <member name="M:XfmMatrix.#ctor(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:XfmMatrix.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:XfmMatrix.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:XfmMatrix">
            <summary> Constructs an XfmMatrix object to be used instead of Mastercam's x_matrix</summary>
        </member>
        <member name="M:Matrix33.AllZeros(System.Boolean)">
            <summary> Test matrix's components to see if they're all of zero value (like someone did a memset(0). </summary>
            <param name="warn"> True to display debug warning. </param>
            <returns> True if all zero, false if not. </returns>
        </member>
        <member name="M:Matrix33.CheckDotProduct(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check dot product of given Matrix33. </summary>
            <param name="m33"> The Matrix33 to check. </param>
            <returns> MatrixError::None for no error, MatrixError::DotProduct for bad dot product,. </returns>
        </member>
        <member name="M:Matrix33.CheckDotProduct(System.Boolean)">
            <summary> Check dot product of this. </summary>
            <param name="warn"> (Optional) the warning. </param>
            <returns> MatrixError::None for no error, MatrixError::DotProduct for bad dot product, 
		  MatrixError::DotProductOrthoNormalize for bad dot product that can be correct by re-orthonormalizing</returns>
        </member>
        <member name="M:Matrix33.ASSERT_MATRIX33(System.Boolean)">
            <summary> option to ASSERT. </summary>
            <param name="ok"> true if the operation was a success, false if it failed. </param>
        </member>
        <member name="M:Matrix33.ViewToView(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert a P3D in view coordinates to view coordinates in a different view. </summary>
            <param name="thePt">  the P3D in view coordinates to convert. </param>
            <param name="from33"> the view the point resides in. </param>
            <param name="to33">   the destination view. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.ViewToWorldSub(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert thePt in view coordinates to world coordinates then subtract wSubPt. </summary>
            <param name="thePt">  the P3D in view coordinates to convert. </param>
            <param name="wSubPt"> the point to subtract in world coords. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.ViewToWorldAdd(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert thePt in view coordinates to world coordinates then add wAddPt. </summary>
            <param name="thePt">  the P3D in view coordinates to convert. </param>
            <param name="wAddPt"> the point to add in world coords. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.WorldToViewAdd(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> add wAddPt from thePt, convert thePt to view coordinates. </summary>
            <param name="thePt">  the P3D in world coordinates to convert. </param>
            <param name="wAddPt"> point in world coordinates to subtract. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.WorldToViewSub(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtract wSubPt from thePt, convert thePt to view coordinates. </summary>
            <param name="thePt">  the P3D in world coordinates to convert. </param>
            <param name="wSubPt"> point in world coordinates to subtract. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.MultiplyMatrixVector(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply a 3x3 matrix by a 3 element vector. </summary>
            <param name="vec"> A column vector. </param>
            <returns> Result. </returns>
        </member>
        <member name="M:Matrix33.ViewToWorld(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point from view coordinates in the given matrix coordinates to world. </summary>
            <param name="vPoint"> The point in view coordiantes. </param>
            <returns> A point in world coordinates. </returns>
        </member>
        <member name="M:Matrix33.WorldToView(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point from world coordinates into given matrix coordinates. </summary>
            <param name="wPoint"> The point in world coordinates. </param>
            <returns> A point in view coordinates. </returns>
        </member>
        <member name="M:Matrix33.CheckAndFixMatrix(System.Boolean,System.Boolean)">
            <summary> check and correct bad matrix if needed. </summary>
            <param name="doK">  true = use MakeViewK() if all else fails. </param>
            <param name="warn"> (Optional) true = show debug warning if invalid. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Matrix33.OrthoNormalize(System.Int32)">
            <summary> re-orthonormalize via Gram-Schmidt algorithm. </summary>
            <param name="priorityAxis">    (Optional) Which axis (X, Y or Z) is priority.  Z is the default). </param>
            <returns> true if it passes dot product check, false if it fails. </returns>
        </member>
        <member name="M:Matrix33.RemoveNoise(System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set matrix values that are less than theTol to 0.0. </summary>
            <param name="theTol">   the tolerance. </param>
            <param name="nChanged"> [in,out] The number of components changed. </param>
            <returns> true if matrix valid. </returns>
        </member>
        <member name="M:Matrix33.FixMatrix(System.Boolean)">
            <summary> correct bad matrix. </summary>
            <param name="doK"> true = use MakeViewK() if all else fails. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Matrix33.GetDirty">
            <summary> Gets the dirty. </summary>
            <returns> return value of m_Dirty. </returns>
        </member>
        <member name="M:Matrix33.SetDirty(System.Boolean)">
            <summary> set value m_Dirty. </summary>
            <param name="isDirty"> true=dirty, false=clean. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:Matrix33.v_angle_3D(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate the axis rotation angle from this with to the m33. </summary>
            <param name="m33"> Matrix33 to compare to. </param>
            <returns> return P3D of axis rotations in radians. </returns>
        </member>
        <member name="M:Matrix33.MakeViewK(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this with a given k component. </summary>
            <param name="normXprd"> k component. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.MultiplyMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply two 3x3 matrices. </summary>
            <param name="m33"> a Matrix33 object. </param>
            <returns> return result. </returns>
        </member>
        <member name="M:Matrix33.FormatString(System.Int32)">
            <summary> return CString of coordinate values. </summary>
            <param name="nPlaces"> (Optional) number of places behind the decimal point. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="M:Matrix33.SetTol(System.Double)">
            <summary> set the tolerance. </summary>
            <param name="theTol"> the tolerance. </param>
            <returns> . </returns>
        </member>
        <member name="M:Matrix33.GetTol">
            <summary> return tolerance. </summary>
            <returns> The tolerance. </returns>
        </member>
        <member name="M:Matrix33.SetTop">
            <summary> set this to TOP. </summary>
        </member>
        <member name="M:Matrix33.SetZero">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:Matrix33.GetComponent(System.Int32)">
            <summary> Gets the X, Y or Z component. </summary>
            <param name="XYorZ"> The X, Y or Z component. </param>
            <returns> The component. </returns>
        </member>
        <member name="M:Matrix33.SetZ(System.Double,System.Double,System.Double)">
            <summary> set value of Z component. </summary>
            <param name="xVal"> new XCOORD value of Z component. </param>
            <param name="yVal"> new YCOORD value of Z component. </param>
            <param name="zVal"> new ZCOORD value of Z component. </param>
            <returns> return previous Z component. </returns>
        </member>
        <member name="M:Matrix33.SetZ(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set value of Z component. </summary>
            <param name="obj"> new Z component value. </param>
            <returns> return previous Z component. </returns>
        </member>
        <member name="M:Matrix33.GetZ">
            <summary> return P3D Z component. </summary>
            <returns> The z coordinate. </returns>
        </member>
        <member name="M:Matrix33.SetY(System.Double,System.Double,System.Double)">
            <summary> set value of Y component. </summary>
            <param name="xVal"> new XCOORD value of Y component. </param>
            <param name="yVal"> new YCOORD value of Y component. </param>
            <param name="zVal"> new ZCOORD value of Y component. </param>
            <returns> return previous Y component. </returns>
        </member>
        <member name="M:Matrix33.SetY(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set value of Y component. </summary>
            <param name="obj"> new Y component value. </param>
            <returns> return previous Y component. </returns>
        </member>
        <member name="M:Matrix33.GetY">
            <summary> return P3D Y component. </summary>
            <returns> The y coordinate. </returns>
        </member>
        <member name="M:Matrix33.SetX(System.Double,System.Double,System.Double)">
            <summary> set value of X component. </summary>
            <param name="xVal"> new XCOORD value of X component. </param>
            <param name="yVal"> new YCOORD value of X component. </param>
            <param name="zVal"> new ZCOORD value of X component. </param>
            <returns> return previous X component. </returns>
        </member>
        <member name="M:Matrix33.SetX(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set value of X component. </summary>
            <param name="obj"> new X component value. </param>
            <returns> return previous X component. </returns>
        </member>
        <member name="M:Matrix33.GetX">
            <summary> return P3D X component. </summary>
            <returns> The x coordinate. </returns>
        </member>
        <member name="M:Matrix33.AngleBetween(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate angle between this and another parallel matrix. </summary>
            <param name="m33">			  The parallel matrix to measure against. </param>
            <param name="angleInDegrees"> Angle in degrees. </param>
            <returns> true if parallel and calculation successful. </returns>
        </member>
        <member name="M:Matrix33.RotateAboutAxis(System.Int32,System.Double)">
            <summary> rotate a Matrix33 about an axis by degrees. </summary>
            <param name="rotAxis">	   the X, Y or Z axis to rotate about. </param>
            <param name="rotAngleDeg"> rotation amount in degrees. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.FlipZaxisAboutXaxis">
            <summary> Flip this matrix's Z axis about its X axis. </summary>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.FlipZaxisAboutYaxis">
            <summary> Flip this matrix's Z axis about its Y axis. </summary>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.FlipAxis(System.Int32,System.Int32)">
            <summary> Flip this matrix by an axis. </summary>
            <param name="axisNo">   XCOORD, YCOORD or ZCOORD. </param>
            <param name="zRotAxis"> (Optional) if flipping Z axis, rotate about X or Y axis. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.IsValid(System.Boolean,System.Boolean,Matrix33.MatrixError*)">
            <summary> Return true if all values in this are valid. </summary>
            <param name="warn">		    (Optional) true = debug only warning. </param>
            <param name="forceCheck">   (Optional) true = ignore m_Dirty value and check values. </param>
            <param name="pMatrixError"> [in,out] (Optional) If non-null, (Optional) the matrix error. </param>
            <returns> Return true if matrix is mathematically correct. </returns>
        </member>
        <member name="M:Matrix33.IsLeftHand(System.Boolean)">
            <summary> test Matrix33 for 'left-handed' defintion. </summary>
            <param name="warn"> (Optional) the warning. </param>
            <returns> returns true if invalid values exist within m33. </returns>
        </member>
        <member name="M:Matrix33.Convert(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert Matrix33 to matrix_33. </summary>
            <param name="m33"> the destination matrix_33. </param>
        </member>
        <member name="M:Matrix33.IsParallel(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> return true if Matrix33 is parallel with given Matrix33. </summary>
            <param name="m33">	    3x3 matrix to compare to this. </param>
            <param name="opposite"> set to true if component is in the opposite direction. </param>
            <param name="axis">	    (Optional) The axis to check. </param>
            <returns> return true if Matrix33 is parallel with given Matrix33. </returns>
        </member>
        <member name="M:Matrix33.AlignAxis(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> align axis of this to given matrix's axis. </summary>
            <param name="mDatum">	   3x3 matrix to align axis to. </param>
            <param name="axisToAlign"> X, Y or Z axis to align. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Matrix33.AxesAligned(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true if ALL view axes are aligned. </summary>
            <param name="m33">	    The matrix to compare. </param>
            <returns> true if axis aligned, false if not. </returns>
        </member>
        <member name="M:Matrix33.AxisAligned(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true if the requested axis is aligned with given axis. </summary>
            <param name="m33">	    The matrix to compare. </param>
            <param name="axisNo">   The axis no (XCOORD, YCOORD or ZCOORD). </param>
            <param name="opposite"> Allow opposite direction comparison. </param>
            <returns> true if axis aligned, false if not. </returns>
        </member>
        <member name="M:Matrix33.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:Matrix33.IsEqualNormalized(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Return true if ortho-normalized Matrix33 is equal within a tolerance. </summary>
            <param name="obj">	    another Matrix33 to compare this with. </param>
            <param name="matchTol"> (Optional) match tolerance. </param>
            <returns> Return true if equal. </returns>
        </member>
        <member name="M:Matrix33.IsEqual(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Return true if Matrix33 is equal within a tolerance. </summary>
            <param name="obj">	    another Matrix33 to compare this with. </param>
            <param name="matchTol"> (Optional) match tolerance. </param>
            <returns> Return true if equal. </returns>
        </member>
        <member name="M:Matrix33.op_GreaterThan(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. Use for std::map when a key. </summary>
            <param name="obj"> The matrix to compare. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:Matrix33.op_LessThan(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. Use for std::map when a key. </summary>
            <param name="obj"> The matrix to compare. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Matrix33.op_Inequality(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="m33"> The matrix to compare. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Equality(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="m33"> The matrix to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Equality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Inequality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Assign(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using a matrix_33. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Matrix33.op_Assign(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Matrix33.op_Subscript(System.Int64)">
            <summary> subscript operator - return XCOORD, YCOORD or ZCOORD. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:Matrix33.#ctor(a_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from a_3d. </summary>
            <param name="theArc"> arc info. </param>
        </member>
        <member name="M:Matrix33.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from 3 P3D's. </summary>
            <param name="normXprd"> k component. </param>
        </member>
        <member name="M:Matrix33.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from 3 P3D's. </summary>
            <param name="X3"> valid X component. </param>
            <param name="Y3"> valid Y component. </param>
            <param name="Z3"> valid Z component. </param>
        </member>
        <member name="M:Matrix33.#ctor(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from matrix_33. </summary>
            <param name="m33"> the matrix_33 to copy from. </param>
        </member>
        <member name="M:Matrix33.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:Matrix33.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:Matrix33.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Matrix33.MatrixError">
            <summary> Values that represent invalid components of a Matrix33. </summary>
        </member>
        <member name="T:Matrix33">
            <summary> Constructs a Matrix33 object to be used instead of Mastercam's matrix_33</summary>
        </member>
        <member name="M:L3D.Distance_P3D_L3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the 3D distance between a P3D and a L3D. </summary>
            <param name="pt">   the point. </param>
            <param name="line"> the line. </param>
            <returns> return the distance between to P3D's. </returns>
        </member>
        <member name="M:L3D.ConvertTo_l_3d">
            <summary> convert and return this L3D in l_3d format. </summary>
            <returns> object converted to a l 3D. </returns>
        </member>
        <member name="M:L3D.GetPoint2(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get point #2 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint2(System.Double*)">
            <summary> get point #2 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint2">
            <summary> get point #2 of this L3D. </summary>
            <returns> The point 2. </returns>
        </member>
        <member name="M:L3D.SetPoint2(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set point #2 of this L3D. </summary>
            <param name="pt2"> The second point. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:L3D.GetPoint1(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get point #1 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint1(System.Double*)">
            <summary> get point #1 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint1">
            <summary> get point #1 of this L3D. </summary>
            <returns> The point 1. </returns>
        </member>
        <member name="M:L3D.SetPoint1(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set point #1 of this L3D. </summary>
            <param name="pt1"> The first point. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:L3D.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:L3D.op_Equality(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:L3D.op_Inequality(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:L3D.op_Assign(l_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using a l_3d. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:L3D.op_Assign(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:L3D.#ctor(l_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:L3D.#ctor(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:L3D.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor from 2 P3D's. </summary>
            <param name="pt1"> The first point. </param>
            <param name="pt2"> The second point. </param>
        </member>
        <member name="M:L3D.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:L3D.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:L3D">
            <summary> Constructs a L3D object to be used instead of Mastercam's l_3d</summary>
        </member>
        <member name="M:P3DS.SetRelativeWcsID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set relative WCS ID. </summary>
            <param name="relativeWcsID"> Identifier for the relative wcs. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:P3DS.GetRelativeWcsID">
            <summary> return relative WCS ID. </summary>
            <returns> The relative wcs identifier. </returns>
        </member>
        <member name="M:P3DS.SetPlaneID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set parent plane ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:P3DS.GetPlaneID">
            <summary> return parent plane ID. </summary>
            <returns> The plane identifier. </returns>
        </member>
        <member name="M:P3DS.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> assignment operator for plane ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3DS.op_Assign(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator for P3D. </summary>
            <param name="pt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3DS.Dispose">
            <summary>destructor</summary>
        </member>
        <member name="M:P3DS.#ctor(P3DS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:P3DS.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> construct from P3D and a plane ID. </summary>
            <param name="pt">	   The point. </param>
            <param name="planeID"> (Optional) identifier for the plane. </param>
        </member>
        <member name="T:P3DS">
            <summary> Mastercam P3DS definition (same as P3D, but contains parent Plane ID and m_RelativeWcsID). </summary>
        </member>
        <member name="F:P3D.m_X">
            <summary> convert a P3D in world coordinates to world coordinates. </summary>
            <param name="thePt">  the P3D in world coordinates to convert. </param>
        </member>
        <member name="M:P3D.Distance_P3D_P3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> return the 3D distance between to P3D's. </summary>
            <param name="pt2">		    point #2 of 2. </param>
            <param name="do2Ddistance"> (Optional) return 2D distance instead of 3D. </param>
            <returns> return the distance between to P3D's. </returns>
        </member>
        <member name="M:P3D.FormatString(System.Int32)">
            <summary> return CString of coordinate values. </summary>
            <param name="nPlaces"> (Optional) number of places behind the decimal point. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="M:P3D.v_angle_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the angle formed by two 3d vectors. </summary>
            <param name="v2"> P3D representing a vector. </param>
            <returns> return the angle in radians between v2 and this. </returns>
        </member>
        <member name="M:P3D.v_scale_3D(System.Double)">
            <summary> apply a scalar to the values. </summary>
            <param name="scale"> the scalar. </param>

### <returns> return scaled P3D or this. </returns></member>
        <member name="M:P3D.v_neg_3D">
            <summary> negative of a 3D vector. </summary>
            <returns> return the negative of a 3D vector. </returns>
        </member>
        <member name="M:P3D.v_cross_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the cross product (vector product) of this and the given vector. </summary>
            <param name="v2"> the 2nd vector. </param>
            <returns> return the cross product. </returns>
        </member>
        <member name="M:P3D.v_dot_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the dot product (scalar product) of this and the given vector. </summary>
            <param name="v2"> the 2nd vector. </param>
            <returns> return the dot product. </returns>
        </member>
        <member name="M:P3D.v_norm_3D">
            <summary> normalize and return the vector. </summary>
            <returns> . </returns>
        </member>
        <member name="M:P3D.v_parallel_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determine if vector is parallel to this. </summary>
            <param name="v2"> The second P3D. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:P3D.v_length_3D">
            <summary> calculate and return the length of the vector. </summary>
            <returns> . </returns>
        </member>
        <member name="M:P3D.v_lincmb_3D(System.Double,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> find the linear combination of two 3d vectors. </summary>
            <param name="aFac"> The fac. </param>
            <param name="pt1">  The first point. </param>
            <param name="bFac"> The fac. </param>
            <param name="pt2">  The second point. </param>
            <returns> return the combination. </returns>
        </member>
        <member name="M:P3D.Convert(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the values in p_3d format. </summary>
            <param name="thePt"> the destination p_3d. </param>
        </member>
        <member name="M:P3D.RemoveNoise(System.Double)">
            <summary> Set values that are less than theTol to 0.0. </summary>
            <param name="theTol"> the tolerance. </param>
            <returns> Number of values changed. </returns>
        </member>
        <member name="M:P3D.Zero">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:P3D.SetTol(System.Double)">
            <summary> set value of tolerance. </summary>
            <param name="newTol"> new tolerance value. </param>
            <returns> return previous value of tolerance. </returns>
        </member>
        <member name="M:P3D.GetTol">
            <summary> return tolerance value. </summary>
            <returns> The tolerance. </returns>
        </member>
        <member name="M:P3D.SetXYZ(System.Double,System.Double,System.Double)">
            <summary> set XCOORD, YCOORD and ZCOORD values. </summary>
            <param name="newX"> new XCOORD component value. </param>
            <param name="newY"> new YCOORD component value. </param>
            <param name="newZ"> new ZCOORD component value. </param>
        </member>
        <member name="M:P3D.GetComponentPtr(System.Int32)">
            <summary> Gets a const pointer to the X, Y or Z component. </summary>
            <param name="XYorZ"> The X, Y or Z component. </param>
            <returns> The const pointer, nullptr if invalid XYorZ value. </returns>
        </member>
        <member name="M:P3D.GetComponent(System.Int32)">
            <summary> Gets the X, Y or Z component. </summary>
            <param name="XYorZ"> The X, Y or Z component. </param>
            <returns> The component. </returns>
        </member>
        <member name="M:P3D.SetZ(System.Double)">
            <summary> set value of ZCOORD component. </summary>
            <param name="newZ"> new ZCOORD component value. </param>
            <returns> return previous value of ZCOORD component. </returns>
        </member>
        <member name="M:P3D.GetZ">
            <summary> return ZCOORD component. </summary>
            <returns> return XCOORD component. </returns>
        </member>
        <member name="M:P3D.SetY(System.Double)">
            <summary> set value of YCOORD component. </summary>
            <param name="newY"> new YCOORD component value. </param>
            <returns> return previous value of YCOORD component. </returns>
        </member>
        <member name="M:P3D.GetY">
            <summary> return YCOORD component. </summary>
            <returns> return YCOORD component. </returns>
        </member>
        <member name="M:P3D.SetX(System.Double)">
            <summary> set value of XCOORD component. </summary>
            <param name="newX"> new XCOORD component value. </param>
            <returns> return previous value of XCOORD component. </returns>
        </member>
        <member name="M:P3D.GetX">
            <summary> return XCOORD component. </summary>
            <returns> return XCOORD component. </returns>
        </member>
        <member name="M:P3D.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:P3D.IsEqual(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Return true if P3D is equal within a tolerance. </summary>
            <param name="obj">	    another P3D to compare this with. </param>
            <param name="matchTol"> (Optional) match tolerance. </param>
            <returns> Return true if equal. </returns>
        </member>
        <member name="M:P3D.op_Subscript(System.Int64)">
            <summary> subscript operator. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> subscript operator. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:P3D.op_GreaterThan(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:P3D.op_LessThan(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. Use in std::map as a key. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:P3D.op_Equality(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:P3D.op_Inequality(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:P3D.op_Inequality(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> comparison operator. </summary>
            <param name="pObj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:P3D.op_Assign(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using a const a p_3d. </summary>
            <param name="pnt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3D.op_Assign(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> assignment operator using a const double * pointing to a p_3d. </summary>
            <param name="pObj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3D.op_Assign(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3D.op_AdditionAssignment(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> addition-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:P3D.op_SubtractionAssignment(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtraction-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:P3D.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:P3D.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:P3D.#ctor(System.Double,System.Double,System.Double)">
            <summary> construct from XCOORD, YCOORD &amp; ZCOORD. </summary>
            <param name="Xval"> The xval. </param>
            <param name="Yval"> The yval. </param>
            <param name="Zval"> The zval. </param>
        </member>
        <member name="M:P3D.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from p_3d. </summary>
            <param name="pnt"> The point. </param>
        </member>
        <member name="M:P3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> parameteritized constructor from double ptr pointing to a double[3]. </summary>
            <param name="pDouble"> The double. </param>
        </member>
        <member name="M:P3D.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:P3D">
            <summary> Mastercam P3D definition. </summary>
        </member>
        <member name="T:PlanesUpdated">
            <summary> Return value for Set() and Replace() </summary>
        </member>
        <member name="T:CoordinateDisplayType">
            <summary> Values that represent CoordinateDisplayType. </summary>
        </member>
        <member name="T:PlaneClass">
            <summary> Values that represent class of plane. </summary>
        </member>
        <member name="T:PlaneType">
            <summary> Plane types. </summary>
        </member>
        <member name="T:Cnc.Tool.ToolRef">
            <summary>	Tool reference information. </summary>
        </member>
        <member name="T:htl_list">
            <summary>	for linked lists of head tool entities. </summary>
        </member>
        <member name="T:BlockToolRecord">
            <summary>	Information about the block tool. </summary>
        </member>
        <member name="T:ltl_list">
for linked lists of lathe tool entities 
</member>
        <member name="T:tl_list">
for linked lists of mill tool entities 
</member>
        <member name="T:tp_holder">
holder segment definition *
</member>
        <member name="T:tp_tool">
tool definition 
</member>
        <member name="T:tool_attr_head">
tool parameters - Multi tool head specific -block tools/drills/aggregates 
</member>
        <member name="T:tool_attr_drill">
tool parameters - drill specific 
</member>
        <member name="T:tool_attr_mill">
tool parameters - mill specific 
</member>
        <member name="T:op_tool_info">
operation parameters - common tool parameters for all operation types 
</member>
        <member name="T:control_post_type">
Control Post ID
</member>
        <member name="T:control_component_type">
Control Component
</member>
        <member name="T:control_type">
Control Base ID
</member>
        <member name="T:ent_idn_ctrl">
Control link ent_idn
</member>
        <member name="T:wire_nc_path_ctrl">
Wire NC path values
</member>
        <member name="T:nc_wire_nocore_ctrl">
Wire nocore
</member>
        <member name="T:nc_wire_taper_ctrl">
Wire 4 axis
</member>
        <member name="T:nc_wire_aux_rev_ctrl">
Wire reverse auxiliary
</member>
        <member name="T:nc_wire_reverse_ctrl">
Wire reverse
</member>
        <member name="T:nc_wire_corner_ctrl">
Wire corners
</member>
        <member name="T:nc_wire_cuts_ctrl">
Wire cuts
</member>
        <member name="T:nc_wire_leads_ctrl">
Wire leads
</member>
        <member name="T:cycles_ctrl">
Machine Cycles
</member>
        <member name="T:nc_lathe_cycles_ctrl">
Lathe canned cycles
</member>
        <member name="T:nc_drill_cycles_ctrl">
Drill cycles
</member>
        <member name="T:nc_gen_cycles_ctrl">
General canned cycle
</member>
        <member name="T:nc_path_ctrl">
General NC path values
</member>
        <member name="T:nc_path_subs_ctrl">
Subprograms
</member>
        <member name="T:nc_path_comp_ctrl">
Cutter compensation
</member>
        <member name="T:nc_path_feed_ctrl">
Feed
</member>
        <member name="T:nc_path_rotary_ctrl">
Rotary
</member>
        <member name="T:nc_path_arc_ctrl">
Arc
</member>
        <member name="T:nc_path_linear_ctrl">
Linear
</member>
        <member name="T:nc_path_tool_ctrl">
Tool
</member>
        <member name="T:nc_path_worksys_ctrl">
Work system
</member>
        <member name="T:nc_output_ctrl">
NC Output
</member>
        <member name="T:nc_dialog_wire_ctrl">
NC Dialog Wire
</member>
        <member name="T:nc_dialog_lathe_ctrl">
NC Dialog Lathe
</member>
        <member name="T:nc_dialog_router_ctrl">
NC Dialog Router
</member>
        <member name="T:nc_dialog_mill_ctrl">
NC Dialog Mill
</member>
        <member name="T:file_postlist_ctrl">
Post file list element
</member>
        <member name="T:file_ctrl">
Files Common
</member>
        <member name="T:communication_ctrl">
Communication
</member>
        <member name="T:tolerance_ctrl">
DBvars_CH.h
@defgroup controldb_ch1 Control component union type 
@{ 
@} 
@defgroup controldb_ch2 Control post union type 
@{ 
@} 
@defgroup controldb_ch3 Control type defines 
@{ 
@} 
@defgroup controldb_ch5 Control class access types 
@{ 
@} 
@defgroup controldb_ch6 File status 
@{ 
@} 
@defgroup controldb_ch7 Pop menu selections 
@{ 
@} 
@defgroup controldb_ch8 CNCControl errors 
@{ 
@} 
@defgroup controldb_ch10 CNCControl file 
@{ 
@} 
@defgroup controldb_ch11 Multiple selection defines 
@{ 
@defgroup controldb_ch12 Control init option option 
@{ 
@} 
@defgroup controldb_ch13 Control misc option 
@{ 
@} 
@defgroup controldb_ch14 Control drill option 
@{ 
@} 
@defgroup controldb_ch15 snAddToToolRegister 
@{ 
@} 
@defgroup controldb_ch16 snTransOperParams 
@{ 
@} 
@defgroup controldb_ch17 snWorkOffsetNumberTPlane 
@{ 
@} 
@defgroup controldb_ch18 snWorkCoordinate 
@{ 
@} 
@defgroup controldb_ch19 snGetHomePosition 
@{ 
@} 
@defgroup controldb_ch20 snRapidDestination... 
@{ 
@} 
@defgroup controldb_ch21 snXYlinPlaneControl...\nsnXYbreakArc... 
@{ 
@} 
@defgroup controldb_ch22 snMoveEndOption 
@{ 
@} 
@defgroup controldb_ch23 snXYcenterType... 
@{ 
@} 
@defgroup controldb_ch24 snHelixType 
@{ 
@} 
@defgroup controldb_ch25 snThreeAxisFeed, snFourAxisFeed, snFourAxisRotFeed, snFiveAxisFeed, snFiveAxisRotFeed	
@{ 
@} 
@defgroup controldb_ch26 snInverseFeed 
@{ 
@} 
@defgroup controldb_ch27 snArcCheckEndPointType 
@{ 
@} 
@defgroup controldb_ch28 snSubLocationInNC 
@{ 
@} 
@defgroup controldb_ch30 snThreadType 
@{ 
@} 
@defgroup controldb_ch31 snLeadInType, snLeadOutType 
@{ 
@} 
@defgroup controldb_ch32 snRevPosCornerType..., snAuxRevPosReg1... 
@{ 
@} 
@defgroup controldb_ch33 snAuxRevModReg1 
@{ 
@} 
@defgroup controldb_ch34 snReturnDrill 
@{ 
@} 
@defgroup controldb_ch35 snInitAbsoluteMatching 
@{ 
@} 
@defgroup controldb_ch36 snRefAbsoluteMatching - snDepthAbsoluteMatching 
@{ 
@} 
@} 
Tolerances
 *
 *	Tolerance settings for posting, 'var' are MP variables

</member>
        <member name="F:cnc_machine_type.dataStreams_ent_idn">
data stream names
</member>
        <member name="F:cnc_machine_type.supportsEvents">
machine supports event-based programming - post must match
</member>
        <member name="F:cnc_machine_type.version">
version number major.minor starting with 11.2 (X2 MR2)
</member>
        <member name="F:cnc_machine_type.autoLoadTools">
automatically load tools when changing MGP machines
</member>
        <member name="F:cnc_machine_type.supportsRTCP">
does the machine support RTCP
</member>
        <member name="F:cnc_machine_type.id">
unique identifier for this machine
</member>
        <member name="F:cnc_machine_type.cplane">
default construction plane
</member>
        <member name="F:cnc_machine_type.maxWireTaperAngle">
maximum wire taper angle (deg)
</member>
        <member name="F:cnc_machine_type.holderCatalogFile">
holder catalog file
</member>
        <member name="F:cnc_machine_type.insertCatalogFile">
insert catalog file
</member>
        <member name="F:cnc_machine_type.machModeList_ent_idn">
ent_idn of list of machining modes
</member>
        <member name="F:cnc_machine_type.axisComboList_ent_idn">
ent_idn of list of axis combination entities
</member>
        <member name="F:cnc_machine_type.refPosList_ent_idn">
ent_idn of of list of machine reference positions
</member>
        <member name="F:cnc_machine_type.firstGroup_ent_idn">
ent_idn of 1st component group entity
</member>
        <member name="F:cnc_machine_type.machineBase_ent_idn">
ent_idn of machine base component entity
</member>
        <member name="F:cnc_machine_type.ctrlDef_ent_idn">
ent_idn of related control definition
</member>
        <member name="F:cnc_machine_type.ent_idn">
ent_idn for the cnc machine entity (this one!)
</member>
        <member name="F:cnc_machine_type.useTbState">
use the toolbar state
</member>
        <member name="F:cnc_machine_type.tbState">
name of tool bar state to load with machine
</member>
        <member name="F:cnc_machine_type.comment">
comment to describe the machine
</member>
        <member name="F:cnc_machine_type.matlLibFile">
material library file (inch, mm)
</member>
        <member name="F:cnc_machine_type.toolLibFile">
tool library files (inch, mm)
</member>
        <member name="F:cnc_machine_type.pstFile">
post-processor file
</member>
        <member name="F:cnc_machine_type.ctrlDefFile">
control definition file
</member>
        <member name="F:cnc_machine_type.coolant">
coolant
</member>
        <member name="F:cnc_machine_type.opFeedrates">
toolpath operation feedrate limits - inch, mm / min, deg/min, 1/sec
</member>
        <member name="F:cnc_machine_type.maxLinearFeedrates">
global maximum machine axis feedrates
</member>
        <member name="F:cnc_machine_type.pad1">
for rent
</member>
        <member name="F:cnc_machine_type.configurationId">
MT .machine configuration GUID - gets assigned when the machine is loaded into a machine group
</member>
        <member name="F:cnc_machine_type.macros">
macro event lists
</member>
        <member name="F:cnc_machine_type.eventDflts">
event defaults event list
</member>
        <member name="F:cnc_machine_type.dynamics">
machine dynamics information for high-feed machining
and operation timing calculations
</member>
        <member name="F:cnc_machine_type.multiAxMotion">
multi-axis motion control
</member>
        <member name="F:cnc_machine_type.dfltLatheWCS">
lathe default WCS - 0 = none, 1 = top, 2 = LATHEZ=WORLDZ
</member>
        <member name="F:cnc_machine_type.vtl">
Is this a VTL? (lathe only)
</member>
        <member name="F:cnc_machine_type.type">
machine type (mill, lathe, router, wire EDM currently supported)
</member>
        <member name="T:cnc_machine_type">
@} 
CNC machine definition
</member>
        <member name="T:post_axis_combo_type">
axis combo information in an MP friendly format
</member>
        <member name="F:machine_dynamics_type.machAccel">
machine motion acceleration value
</member>
        <member name="F:machine_dynamics_type.syncTimingStep">
@} 
@defgroup dynamic information NOT for high-feed 
@{ 
timing increment for MATSS sync-list
</member>
        <member name="F:machine_dynamics_type.centrip_accel">
cornering acceleration
</member>
        <member name="F:machine_dynamics_type.test_radius">
corner radius
</member>
        <member name="F:machine_dynamics_type.min_corner_fr">
feedrate to slow down to at sharp corners
</member>
        <member name="F:machine_dynamics_type.corner_angle">
minimum change in direction to slow down to min_corner_fr
</member>
        <member name="F:machine_dynamics_type.accel_seg_len_pct">
segment length as % of tool diameter
</member>
        <member name="F:machine_dynamics_type.accelerate">
apply acceleration
</member>
        <member name="F:machine_dynamics_type.max_fr_change">
maximum feedrate change per block
</member>
        <member name="F:machine_dynamics_type.look_ahead_pct">
look-ahead as a percentage of tool diameter
</member>
        <member name="F:machine_dynamics_type.recombine_pct">
@defgroup parameters taken from HighFeed_E.h 
@{ 
maximum change in feedrate to recombine segments (%)
</member>
        <member name="T:machine_dynamics_type">
Machine dynamic parameters
</member>
        <member name="F:coolant_type.submergedWire">
use coolant to control submerged wire
</member>
        <member name="F:coolant_type.useEventList">
use event list to activate coolant
</member>
        <member name="F:coolant_type.useCoolantFromPost">
use coolant commands in post-processor (provided for backward compatibility)
</member>
        <member name="F:coolant_type.firstCoolantOffShutsOffAll">
1st 'coolant off' command shuts off ALL coolant commands on the machine
</member>
        <member name="F:coolant_type.btnTxt">
coolant button text for tool page
</member>
        <member name="F:coolant_type.offTxt">
'coolant off' interface display text
</member>
        <member name="F:coolant_type.onTxt">
'coolant on' interface display text
</member>
        <member name="F:coolant_type.baseTxt">
'base' coolant interface display text
</member>
        <member name="T:coolant_type">
Coolant
</member>
        <member name="F:multiax_motion_type.maxCombinedAngle">
maximum combined angle before break is required
</member>
        <member name="F:multiax_motion_type.breakRotaryCombined">
break combined rotary axis motion
</member>
        <member name="T:multiax_motion_type">
@defgroup cnc_machine_parameters CNC machine parameters 
@{ 
Multi-axis motion control
</member>
        <member name="F:component_group_type.ent_idns">
ent_idns of this and related entities in database\n
ent_idns.thisEnt is used as the group reference stored with operations
</member>
        <member name="F:component_group_type.firstComponent_ent_idn">
ent_idn for 1st component in group
</member>
        <member name="F:component_group_type.firstParam_ent_idn">
ent_idn for 1st component group parameters entity in the list
</member>
        <member name="T:component_group_type">
            <summary>	 ! DEPRECATED ! Old Component group definition. Since 2020, replaced by CComponentGroup class members.  </summary>
        </member>
        <member name="D:machine_axis_data">
 @brief array for storing the number of each possible axis of motion for an operation

 Entry 0 isn't used, entries 1-&gt;LAST_AXIS_TYPE correspond to axis definitions
 The value identifies the number of each unique axis present

 endcode

</member>
        <member name="D:group_class_and_type">
 @brief single value to store group class and type for a set of component group parameters

 The value is represented as: (100000 x group class) + group type

</member>
        <member name="F:component_group_params.ent_idns">
ent_idns of this and related entities in database
</member>
        <member name="F:component_group_params.groupType">
specific group type (UL_TOOLS_GROUP, etc.)
</member>
        <member name="F:component_group_params.groupClass">
general component group class (PART_HOLDING_GROUP_TYPE, etc.)
</member>
        <member name="T:component_group_params">
Component group parameters
 @brief Component group parameters

 A linked list of these parameters is stored with a component group.
 This allows a group to have the parameters of more than one group type.
 For example, a component group can have both turret and spindle parameters.
 The turret and spindle specific parameters are stored in different entries
 in the list

</member>
        <member name="F:machine_component_type.u">
component type specific parameters
</member>
        <member name="F:machine_component_type.g">
geometry definition parameters (non-component specific)
</member>
        <member name="F:machine_component_type.geoType">
type of geometry used to define the component
</member>
        <member name="F:machine_component_type.machine_ent_idn">
ent_idn of owner machine
</member>
        <member name="F:machine_component_type.ent_idns">
ent_idns of this and related entities in database
</member>
        <member name="F:machine_component_type.curPos">
current position of anchorPt (world coordinates)
= anchorPt position on the machine at start of program most of the time... [REMOVE]
</member>
        <member name="F:machine_component_type.curXform">
transformation matrix to put component @ current NC position
= initXform initially [REMOVE]
</member>
        <member name="F:machine_component_type.initXform">
transformation matrix to put component on machine @ initial position
</member>
        <member name="F:machine_component_type.initPt">
position of reference point with component on machine @ initial position
in world coordinates
</member>
        <member name="F:machine_component_type.anchorPt">
point on component which is actually positioned in the NC program
(world coordinates)
</member>
        <member name="F:machine_component_type.refPt">
reference point on component in world coordinates,
</member>
        <member name="F:machine_component_type.color">
color to draw component
</member>
        <member name="F:machine_component_type.type">
type of component (machine base, chuck, turret, etc)
</member>
        <member name="F:machine_component_type.groupID">
component group id
</member>
        <member name="T:machine_component_type">
@} 
CNC machine component parameters
</member>
        <member name="F:multi_tool_component_type.aggHeadGeo">
aggregate head parametric geometry definition
</member>
        <member name="F:multi_tool_component_type.WCS_num">
work offset number
</member>
        <member name="F:multi_tool_component_type.tool_axis_length">
tool length
</member>
        <member name="F:multi_tool_component_type.z_angle">
tilt angle
</member>
        <member name="F:multi_tool_component_type.xy_angle">
machine view angle
</member>
        <member name="F:multi_tool_component_type.stationPosition">
X,Y,Z station position
</member>
        <member name="F:multi_tool_component_type.stationAnchor">
X,Y,Z block anchor position
</member>
        <member name="F:multi_tool_component_type.tc_type">
tool change type
</member>
        <member name="F:multi_tool_component_type.axis">
Orientation axis
</member>
        <member name="F:multi_tool_component_type.type">
Aggregate type
</member>
        <member name="F:multi_tool_component_type.idn">
station/block number
</member>
        <member name="T:multi_tool_component_type">
Aggregate head component parameters
</member>
        <member name="F:gang_tool_component_type.turretFace">
turret face number on which this gang is installed (if any...)
</member>
        <member name="F:gang_tool_component_type.slantAngle">
angle of slant bed that gang is installed on
used for determining tool alignment in tool location components
</member>
        <member name="F:gang_tool_component_type.spindleSpeeds">
min./max. spindle speed for live tools
</member>
        <member name="T:gang_tool_component_type">
Gang tool component parameters
</member>
        <member name="F:turret_component_type.useXStickout">
flags for applying the stickout values
</member>
        <member name="F:turret_component_type.xStickout">
default 'stickout' lengths for auto tooling the turret
</member>
        <member name="F:turret_component_type.slantAngle">
slant angle (deg.) - used for computing the axis of rotation and indexed tool vectors
</member>
        <member name="F:turret_component_type.spindleSpeeds">
min./max. spindle speed for live tools
</member>
        <member name="F:turret_component_type.geo">
turret parametric geometry definition
</member>
        <member name="F:turret_component_type.indexType">
CW, CCW, OPTIMIZE
</member>
        <member name="F:turret_component_type.numFaces">
number of tool stations defined
</member>
        <member name="F:turret_component_type.indexTime">
time to index between adjacent faces (sec.)
</member>
        <member name="F:turret_component_type.indexedToolAxis">
defines direction of tools in indexed position
must be perpendicular to rotaryAxis
</member>
        <member name="F:turret_component_type.rotaryAxis">
axis of turret rotation
defines CW/CCW direction for auto-face numbering
</member>
        <member name="T:turret_component_type">
Turret component parameters
</member>
        <member name="T:tool_spindle_component_type">
Tool spindle component parameters
This also applies to the turning tool device that works on machines that
use an ATC for turning tools
'standard' geometry types are supported
</member>
        <member name="F:atc_component_type.pad">
default tool in the spindle
</member>
        <member name="F:atc_component_type.indexTime">
time to index between adjacent ATC pockets
</member>
        <member name="F:atc_component_type.toolChgPos">
tool change machine position - not used
</member>
        <member name="F:atc_component_type.maxTools">
max. number of tools in carousel
</member>
        <member name="F:atc_component_type.timeToChange">
time to swap the tool in the spindle
</member>
        <member name="F:atc_component_type.indexMethod">
NO_INDEXING, +IVE, -IVE, MINIMIZE_TIME
</member>
        <member name="T:atc_component_type">
@} 
@defgroup multi_tool_component_types Multi-tool component types
@{ 
 @brief automatic tool changer (ATC) component parameters

 tool change kinematic simulation is not currently supported,
 this component is necessary:
 to provide tool change times
 so machine simulation knows where to send the tools for a tool change
 'standard' geometry types are supported

</member>
        <member name="T:tool_component_type">
Tool component type
</member>
        <member name="F:mh_piggyback_component_type.stationSpacing">
X,Y,Z spacing for the stations
</member>
        <member name="T:mh_piggyback_component_type">
Multi-head piggyback component parameters
</member>
        <member name="F:multi_head_component_type.stationSpacing">
X,Y,Z spacing for the stations
</member>
        <member name="T:multi_head_component_type">
Multi-head head component parameters
</member>
        <member name="F:drill_block_station_component_type.stationGeo">
station geometry definition
</member>
        <member name="F:drill_block_station_component_type.stationGeoType">
station geometry type
</member>
        <member name="F:drill_block_station_component_type.blockGeo">
block geometry definition
</member>
        <member name="F:drill_block_station_component_type.blockGeoType">
block geometry type
</member>
        <member name="F:drill_block_station_component_type.stationPosition">
X,Y,Z position for the stations
</member>
        <member name="F:drill_block_station_component_type.stationAnchor">
X,Y,Z block Anchor position
</member>
        <member name="F:drill_block_station_component_type.idn">
station/block number
</member>
        <member name="T:drill_block_station_component_type">
Router drill block station component parameters
</member>
        <member name="F:wire_lower_guide_component_type.geo">
guide geometry
</member>
        <member name="T:wire_lower_guide_component_type">
Wire lower guide component type
</member>
        <member name="F:wire_upper_guide_component_type.geo">
guide geometry
</member>
        <member name="F:wire_upper_guide_component_type.alignWithLower">
align guide vertically with lower guide at home position
</member>
        <member name="F:wire_upper_guide_component_type.threadTime">
thread time (sec)
</member>
        <member name="T:wire_upper_guide_component_type">
Wire upper guide component type
</member>
        <member name="F:wire_guide_geo_type.majorRad">
geometry
</member>
        <member name="T:wire_guide_geo_type">
wire guide geometry type
</member>
        <member name="F:tool_location_type.pad">
for rent
</member>
        <member name="F:tool_location_type.allowLatheDrills">
allow fixed (Lathe) drilling tools at this location
</member>
        <member name="F:tool_location_type.allowLiveTools">
allow live (Mill) tools at this station
</member>
        <member name="F:tool_location_type.allowInsertUpTools">
allow fixed (Lathe) tools at this location (NOT lathe drills!)
</member>
        <member name="F:tool_location_type.allowFaceTools">
allow face tools at this location
</member>
        <member name="F:tool_location_type.allowCrossTools">
allow cross tools at this location
</member>
        <member name="F:tool_location_type.anyStation">
use this locator for any tool, irregardless of the tool station #
</member>
        <member name="F:tool_location_type.toolStation">
tool station number to match on
</member>
        <member name="F:tool_location_type.allPositions">
use this locator for all turret index or gang tool positions
</member>
        <member name="F:tool_location_type.toolPosnType">
reference point on tool for this locator
TOOL_LOC_CENTER,	   TOOL_LOC_TOP_LEFT,	  TOOL_LOC_CENTER_LEFT,
TOOL_LOC_BOTTOM_LEFT,  TOOL_LOC_TOP_CENTER,	  TOOL_LOC_TOP_RIGHT,
TOOL_LOC_CENTER_RIGHT, TOOL_LOC_BOTTOM_RIGHT, TOOL_LOC_BOTTOM_CENTER,
TOOL_LOC_USER,	
</member>
        <member name="F:tool_location_type.toolXformType">
method by which the user defined the tool transformation view
TOOL_XFORM_CROSS_UPPER,	TOOL_XFORM_CROSS_LOWER,
TOOL_XFORM_FACE_LEFT,	TOOL_XFORM_FACE_RIGHT,
TOOL_XFORM_NAMED_VIEW
</member>
        <member name="F:tool_location_type.toolXformID">
tool transformation matrix named view v_idn
</member>
        <member name="F:tool_location_type.useStickout">
use the stickout value
</member>
        <member name="F:tool_location_type.stickout">
stickout length for the tool
</member>
        <member name="F:tool_location_type.gangToolPos">
gang tool position ID for a tool
</member>
        <member name="F:tool_location_type.turretFace">
turret face number for a tool
</member>
        <member name="F:tool_location_type.atcPocket">
ATC pocket for a tool
</member>
        <member name="F:tool_location_type.toolXform">
position and orientation tool for this location
used for pre-defined tool position and orientation for spindles, turrets,
and gangs
</member>
        <member name="T:tool_location_type">
@} 
@defgroup single_tool_component_types Single tool component types
@{ 
</member>
        <member name="T:steadyrest_component_type">
Steady rest component parameters
</member>
        <member name="T:steadyrest_geo_type">
Steady rest structure (X)
</member>
        <member name="T:tailstock_component_type">
Tailstock component parameters
</member>
        <member name="T:tailstock_geo_type">
Tailstock structure (X)
</member>
        <member name="T:lathe_center_component_type">
Centre component parameters (live or dead centre, no taper is modelled)
This is a special component added directly from the MGP stock setup page
</member>
        <member name="T:lathe_center_geo_type">
@} 
@defgroup programmable_misc_tooling_component_types Programmable misc tooling component types
@{ 
Centre component geometry (live or dead centre, no taper is modelled)
</member>
        <member name="T:guide_bushing_component_type">
Guide bushing component parameters
</member>
        <member name="F:collet_component_type.geo">
parametric geometry definition
</member>
        <member name="T:collet_component_type">
Collet component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:chuck_component_type">
Chuck component parameters
</member>
        <member name="T:chuck_geo_type">
Chuck geometry type
</member>
        <member name="T:chuckjaws_component_type">
Chuck jaw(s) component
This is a special component added directly from the MGP stock setup page
</member>
        <member name="T:chuckjaw_stock_stickout">
Chuck jaw stock stickout
</member>
        <member name="T:chuckjaw_geo_type">
Chuck jaw geometry
</member>
        <member name="T:vise_component_type">
Machine vise component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:vise_jaw_component_type">
@} 
@defgroup work_holding_comp_types Work Holding Component Types 
@{ 
Machine vise jaw component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:wire_table_component_type">
Wire EDM table component parameters
</member>
        <member name="T:round_table_component_type">
Round table component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:rect_table_component_type">
Rectangular table component parameters
</member>
        <member name="T:rect_table_geo_type">
Rectangular table geometry - not implemented currently in Mastercam X
</member>
        <member name="T:tslot_geo_type">
T slot parameters - not implemented currently in Mastercam X
</member>
        <member name="F:rotary_axis_component_type.disableEvFr">
disable feedrate programming for axis motion events
</member>
        <member name="F:rotary_axis_component_type.g28Angle">
simulation startup axis angle
</member>
        <member name="F:rotary_axis_component_type.travelLimits">
min/max rotational travel limits (deg.)
</member>
        <member name="F:rotary_axis_component_type.maxFeedrate">
maximum feedrate (deg/min)
</member>
        <member name="F:rotary_axis_component_type.maxAngularMove">
maximum angular move before breaking
</member>
        <member name="F:rotary_axis_component_type.breakWithChordal">
use chordal deviation to determine when to break
</member>
        <member name="F:rotary_axis_component_type.breakRotaryMoves">
break rotary move
</member>
        <member name="F:rotary_axis_component_type.axisOutputType">
signed continuous, signed direction (0-360 deg),
shortest direction (0 - 360 deg)
</member>
        <member name="F:rotary_axis_component_type.indexAngle">
must divide evenly into 360
</member>
        <member name="F:rotary_axis_component_type.indexingAxis">
is this an indexing axis?
</member>
        <member name="F:rotary_axis_component_type.reposAngles">
rotational reposition limits (deg)
</member>
        <member name="F:rotary_axis_component_type.rotAngle">
angle of rotation for nutated axis, right hand rule (degrees)
</member>
        <member name="F:rotary_axis_component_type.tiltAxis">
axis of rotation for axis out of plane (WCS axis!)\n
	  *		X_AXIS,		Y_AXIS,		Z_AXIS\n
	  * NEG_X_AXIS, NEG_Y_AXIS, NEG_Z_AXIS\n

</member>
        <member name="F:rotary_axis_component_type.isNutated">
nutated machine axis
</member>
        <member name="F:rotary_axis_component_type.cwAxis">
true = CW is +ive direction for this axis
</member>
        <member name="F:rotary_axis_component_type.zeroDegAxis">
axis '0 deg' vector WRT machine axes
lies in plane perpendicular to axis of rotation
</member>
        <member name="F:rotary_axis_component_type.wcsAxis">
axis of rotation wrt machine linear axes
</member>
        <member name="F:rotary_axis_component_type.machineAxis">
rotary axis to drive on the machine: A_AXIS, B_AXIS, C_AXIS, MACRO_AXIS
</member>
        <member name="T:rotary_axis_component_type">
Rotary axis component parameters
</member>
        <member name="F:linear_axis_component_type.disableEvFr">
disable feedrate programming for axis motion events
</member>
        <member name="F:linear_axis_component_type.maxFeedrates">
max. feed rates (rapid traverse rates)
</member>
        <member name="F:linear_axis_component_type.machineAxis">
axis to drive on the machine: X_AXIS, Y_AXIS, Z_AXIS, MACRO_AXIS
</member>
        <member name="F:linear_axis_component_type.common">
[0] = parameters for the physical axis direction on the machine
[1] = parameters for the programmed direction of machine motion for this axis, 
	  which may be in combination with other linear axes, if the machine axes are 
	  non-orthogonal
</member>
        <member name="T:linear_axis_component_type">
Linear axis component parameters
</member>
        <member name="F:axis_params_type.g28AxisPos">
simulation startup axis position
</member>
        <member name="F:axis_params_type.travelLimits">
min/max linear travel limits (in/mm) measured along axis direction from zeroPos
</member>
        <member name="F:axis_params_type.tiltAngle">
angle of rotation for tilt, right hand rule (degrees)
</member>
        <member name="F:axis_params_type.tiltAxis">
axis of rotation for axis out of plane (WCS axis!)\n
	  *		X_AXIS,		Y_AXIS,		Z_AXIS\n
	  * NEG_X_AXIS, NEG_Y_AXIS, NEG_Z_AXIS\n

</member>
        <member name="F:axis_params_type.isTilted">
tilt the axis
</member>
        <member name="F:axis_params_type.axisDir">
base axis direction WRT the WCS:
	X_AXIS,		Y_AXIS,		Z_AXIS
NEG_X_AXIS, NEG_Y_AXIS, NEG_Z_AXIS
</member>
        <member name="T:axis_params_type">
generic axis component parameters
The actual axis direction vector is computed by taking the wcsAxis
vector direction and rotating it about the tiltAxis by rotAngle
</member>
        <member name="T:travel_limits_type">
travel limits
</member>
        <member name="T:axis_feedrate_type">
Axis feed rates
</member>
        <member name="T:fixture_component_type">
General fixture component parameters
</member>
        <member name="T:machine_base_component_type">
Machine base component parameters
</member>
        <member name="T:misc_component_type">
Miscellaneous component parameters
</member>
        <member name="F:stock_component_type.barstockGeo">
round barstock geometry with stock margins
other stock types defined using standard solid types
</member>
        <member name="T:stock_component_type">
Stock component type
</member>
        <member name="T:barstock_geo_type">
@} 
@defgroup generic_comp_types Generic Component Types 
@{ 
Round bar stock (with optional hole) structure (X)
</member>
        <member name="T:tube_geo_type">
Cylinder with a hole in it (revolved component)
</member>
        <member name="T:polygon_geo_type">
Other specialized geometry geometry definitions
Filleted polygon
</member>
        <member name="T:solid_geo_dflts">
'Standard' solid component definition defaults
</member>
        <member name="T:revolved_component_def">
Parameters for a component definition from a revolved profile
</member>
        <member name="T:extruded_component_def">
Parameters for a component definition from an extruded profile
</member>
        <member name="T:cylinder_component_def">
Parameters for a component definition from a cylinder
</member>
        <member name="T:block_component_def">
Parameters for a component definition from a block
</member>
        <member name="T:stl_component_def">
Parameters for a component definition from a STL entity
</member>
        <member name="T:solid_component_def">
Component Geometry Definitions
Component geometry will provide the backbone for machine simulation in
future releases of Mastercam. It will also enable graphical descriptions
of CNC machines, currently provided via post-processor variables
Component geometry is NOT supported in the current version of Mastercam

@defgroup component_geometry_definitions Component Geometry Definitions 
@{ 
Parameters for a component definition from a solid entity
</member>
        <member name="D:eMachineTypes">
used to identify variables in the above enum
</member>
        <member name="D:eToolStorageIndexMethods">
used for turrets and tool changers
</member>
        <member name="D:eToolPosns">
used for tool location components
</member>
        <member name="D:eToolXforms">
used for tool location components
</member>
        <member name="D:eRotAxisOutputTypes">
used to identify variables in the above enum
</member>
        <member name="D:eComponentAxes">
used to identify variables in the above enum
</member>
        <member name="D:eComponentGeometryTypes">
used to identify variables in the above enum
</member>
        <member name="D:eComponentGroups">
used to identify variables in the above enum
</member>
        <member name="F:FIRST_CUSTOM_GROUP">
Custom groups, up to 99999
These will be used in future versions to cover groups that don't fit
into the pre-defined definitions
</member>
        <member name="F:START_WIRE_TOOLING_GROUPS">
Wire-specific miscellaneous tooling groups
</member>
        <member name="F:START_ROUTER_TOOLING_GROUPS">
Router-specific miscellaneous tooling groups
</member>
        <member name="F:START_LATHE_TOOLING_GROUPS">
Lathe-specific miscellaneous tooling groups
</member>
        <member name="F:START_MILL_TOOLING_GROUPS">
Miscellaneous tooling component groups
These groups contain auxiliary machine automation, not related to
holding/driving the part or tool
Mill-specific miscellaneous tooling groups
</member>
        <member name="F:START_WIRE_TOOL_STORAGE_GROUPS">
Wire-specific tool storage groups
</member>
        <member name="F:START_ROUTER_TOOL_STORAGE_GROUPS">
Router-specific tool storage groups
</member>
        <member name="F:START_LATHE_TOOL_STORAGE_GROUPS">
Lathe-specific tool storage groups
</member>
        <member name="F:START_MILL_TOOL_STORAGE_GROUPS">
Cutting tool storage component groups
Mill-specific tool storage groups
</member>
        <member name="F:START_WIRE_PART_HOLDING_GROUPS">
Wire-specific part holding groups
</member>
        <member name="F:START_ROUTER_PART_HOLDING_GROUPS">
Router-specific part holding groups
</member>
        <member name="F:START_LATHE_PART_HOLDING_GROUPS">
Lathe-specific part holding groups
</member>
        <member name="F:START_MILL_PART_HOLDING_GROUPS">
Part holding component groups
Mill-specific part holding groups
</member>
        <member name="D:eComponentGroupClasses">
used to identify variables in the above enum
</member>
        <member name="T:Cnc.MachineDef.ComponentTypes">
            <summary> Type codes for the machine components. </summary>
        </member>
        <member name="D:eComponentTypes">
            <summary>   Used to identify variables in the above enum. </summary>
        </member>
        <member name="F:FIRST_TOOLING_COMPONENT">
misc. tooling components, ATC included as tool components only
hold tools while cutting
</member>
        <member name="F:FIRST_MULTI_TOOL_COMPONENT">
Multi-cutting tool components
</member>
        <member name="F:FIRST_TOOL_COMPONENT">
Single tool holding components
</member>
        <member name="F:FIRST_WORK_HOLDING_COMPONENT">
Work holding components
(tables included, as the part can sit on a table)
</member>
        <member name="F:FIRST_GENERIC_COMPONENT">
Generic components
Components marked with an * aren't available currently in X2
</member>
        <member name="T:machining_mode_type">
Multi-tasking machining mode
</member>
        <member name="T:stream_info_type">
Multi-tasking data stream information for a machining mode
</member>
        <member name="F:axis_combination_type.compList_ent_idns">
ent_idn for lists of components (this list is stored in the database as an ent_idn_list)
</member>
        <member name="F:axis_combination_type.group_ent_idns">
component lists for this axis combination
- each list consists of components from 1 component group
- one list is for the tool holding components
- the other is for the part holding components
- miscop operations (ex. tailstock advance) may only require one list
- this list should be the first one
ent_idns of component groups to which all components belong
</member>
        <member name="F:axis_combination_type.toolChgPos">
Tool change (V9 home) position (inch, mm)
</member>
        <member name="F:axis_combination_type.name">
Axis combination name
</member>
        <member name="T:axis_combination_type">
 @par Machining mode axis combination

 @note Rules:
 - Any 'cutting' toolpath operation requires the interaction of 2
	 component groups and their components, hence 2 component lists.
 - Only one of each linear axis + 2 different rotary axes are allowed.
 - Tool and part holding components must NOT be stored in the same
	 component list. (Each list must have one or the other.)

</member>
        <member name="T:evl_list_info">
event list information
</member>
        <member name="D:stream_name_array">
array of data stream names
</member>
        <member name="D:stream_name_type">
@file MachiningMode_CH.h
machine/tool machining mode and axis combination information

@par Multi-tasking data stream parameters
@note MAX_DATA_STREAMS is defined in AssocTyp_ch.h

maximum length for a stream name
data stream name
</member>
        <member name="M:add_append_group(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Byte,System.Boolean*)">
@param[in]		parent_name		name of new group's parent group
@param[in]		group_name		name of new group
@param[in]		n_eptr			number of ents in eptr list, 0=use .sel ents
@param[in]		eptr			list of entity eptrs
@param[in]		product			PRODUCT_MILL, PRODUCT_LATHE, PRODUCT_ROUTER, PRODUCT_WIRE, or PRODUCT_MT
@param[out]		succf			true = group added

</member>
        <member name="M:list_grp_append_ents(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Boolean*)">
 @par Purpose:
			append ents to a group
 @param[in]		group_id group ID
 @param[in]		n_eptr	 number of ents in eptr list, 0=use .sel ents
 @param[in]		eptr	 list of entity eptrs
 @param[out]		succf	 true = group added

</member>
        <member name="M:list_grp_append_ents(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Boolean*)">
 @par Purpose:
			append ents to a group
 @param[in]		name	 group name
 @param[in]		n_eptr	 number of ents in eptr list, 0=use .sel ents
 @param[in]		eptr	 list of entity eptrs
 @param[out]		succf	 true = group added

</member>
        <member name="M:list_grp_add_ents(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Int16,System.Boolean*)">
 @par Purpose:
			add a new group to the list
 @param[in]		name	new group name
 @param[in]		n_eptr	number of ents in eptr list, 0=use .sel ents
 @param[in]		eptr	list of entity eptrs
 @param[in]		type	type of group
 @param[out]		succf	true = group added

</member>
        <member name="M:list_grp_remove_ents(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Boolean,System.Boolean*)">
 @par Purpose:
			remove ents from a group
 @param[in]		name   new group name
 @param[in]		n_eptr	 number of ents in eptr list, 0=use .sel ents
 @param[in]		eptr   list of entity eptrs
 @param[in]		del_empty	true = delete group from list if 0 ents are left
 @param[out]		succf	true = group added

</member>
        <member name="M:EptrExistsInArray(CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*,DB_LIST_ENT*)">
 @par Purpose:
		Find first occurence of "eptr" in "EPTRs"

 @return				array index if already exists in array, -1 if not found	
 @param[in]	EPTRs	array to search.
 @param[in]	eptr	item to find.

</member>
        <member name="M:InitGroup(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Int16,System.Byte)">
 @par Purpose:
			Initializes a new group to whatever parameters are passed in.

 @param[in]		gpl			the group to be initialized
 @param[in]		name		new group name
 @param[in]		parent_idn	parent group id #
 @param[in]		hidden		true = if you want group marked hidden
 @param[in]		type		type of group
 @param[in]		product		PRODUCT_MILL, PRODUCT_LATHE, PRODUCT_ROUTER, PRODUCT_WIRE, or PRODUCT_MT

</member>
        <member name="M:list_grp_add_empty(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Int16,System.Byte,System.Boolean,System.Boolean*)">
 @par Purpose:
			add a new group (empty) to the list

 @param[in]		name				new group name
 @param[in]		parent_idn			parent group id #
 @param[in]		hidden				true = if you want group marked hidden
 @param[in]		type				type of group
 @param[in]		product				PRODUCT_MILL, PRODUCT_LATHE, PRODUCT_ROUTER, PRODUCT_WIRE, or PRODUCT_MT
 @param[in]		move_insert_arrow	move insert arrow after group in opmgr
 @param[out]		succf				true = group added

 @returns			A pointer to the group newly added to the list

</member>
        <member name="M:op_group.SetVariableStockRowNum(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the variable stock row number. </summary>
            <param name="val"> The new value. </param>
        </member>
        <member name="M:op_group.GetVariableStockRowNum">
            <summary> Gets the variable stock row number. </summary>
            <returns> The row number. </returns>
        </member>
        <member name="M:op_group.SetVariableStockFloorStock(System.Double)">
            <summary> Sets the variable stock floor stock value. </summary>
            <param name="val"> The new value. </param>
        </member>
        <member name="M:op_group.SetVariableStockWallStock(System.Double)">
            <summary> Sets the variable stock wall stock value. </summary>
            <param name="val"> The new value. </param>
        </member>
        <member name="M:op_group.GetVariableStockMachiningType">
            <summary> Gets the variable stock to leave group type. </summary>
            <returns> 0 for machining (drive), 1 for avoidance (check). </returns>
        </member>
        <member name="M:op_group.SetVariableStockTpOpIdn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the variable stock to leave toolpath operation id # parameter. </summary>
        </member>
        <member name="M:op_group.GetVariableStockTpOpIdn">
            <summary> Gets the variable stock to leave toolpath operation id # parameter. </summary>
        </member>
        <member name="F:group_pg3.min_ltool_clr">
@} 
@defgroup groups_ch3 PRODUCT_LATHE and PRODUCT_MT parameters 
@{ 
</member>
        <member name="F:group_pg3.x">
@} 
@defgroup groups_ch2 PRODUCT_MILL, PRODUCT_ROUTER, PRODUCT_WIRE parameters 
@{ 
</member>
        <member name="F:group_pg3.stock_fit">
@defgroup groups_ch1 common parameters 
@{ 
</member>
        <member name="T:group_pg3">
@note group_pg2 is meaningless without the
  * product type, which is in the op_group 
</member>
        <member name="T:group_pg2">
machine group tool settings
</member>
        <member name="T:group_pg1">
machine group file settings
</member>
        <member name="T:lathe_mc_extension_prm">
MCExtensions lathe machine parameters
</member>
        <member name="T:tplane_z">
Tplane Z information for MCExtensions lathe machine parameters used with the MT Platform machines.
</member>
        <member name="T:turn_profile_prm">
Turn profile parameters
</member>
        <member name="T:group_view">
group view structure
</member>
        <member name="T:emap">
entity map structure
</member>
        <member name="T:group_pg1_advanced_defaults">
advanced tool options structure
</member>
        <member name="T:steadyrest_type">
steady rest structure (v9)
</member>
        <member name="T:tailstock_type">
tailstock structure (v9)
</member>
        <member name="T:chuck_type">
chuck jaw structure (v9)
</member>
        <member name="T:barstock_type">
round bar stock (with optional hole) structure
</member>
        <member name="T:TPlaneZ">
            <summary> How to compute Tplane Z coordinate for MT Platform lathe MCExtensions extended data. </summary>
        </member>
        <member name="T:WorkType">
            <summary> Values that represent MT JobSetup Work Types. (Note: LATHE_WORK_BAR / CHUCK deprecated old values). </summary>
        </member>
        <member name="M:IDArray.GetLastID">
            <summary> Gets the last identifier, 0 on error. </summary>
            <returns> The last identifier. </returns>
        </member>
        <member name="M:IDArray.IsEqualContents(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal contents to this. </summary>
            <param name="obj"> The object to compare. </param>
            <returns> true if equal contents, false if not. </returns>
        </member>
        <member name="M:IDArray.GetExcludedIDs">
            <summary> Returns reference to m_ExcludeIDs. </summary>
            <returns> reference to m_ExcludeIDs. </returns>
        </member>
        <member name="M:IDArray.HasExcludedIDs">
            <summary> Query if this object has excluded operation IDs. </summary>
            <returns> true if excluded operation IDs exist, false if not. </returns>
        </member>
        <member name="M:IDArray.ExcludeThisOpID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Add the given ID to the exclude mask (exclude this ID from being added to or 
		  existing in the array. Any existing matching ID's will be removed from the array. </summary>
            <param name="theID">			 The ID to exclude. </param>
            <param name="clearExcludeArray"> (Optional) first empty exclude mask. </param>
        </member>
        <member name="M:IDArray.RemoveID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes all instances of the ID from the array. </summary>
            <param name="theID"> The ID to remove. </param>
            <returns> Size of array. </returns>
        </member>
        <member name="M:IDArray.SetSize(System.Int64)">
            <summary> Sets new size of array. </summary>
            <param name="newSize"> The new size. </param>
            <returns> Size of array. </returns>
        </member>
        <member name="M:IDArray.GetAllowNegatives">
            <summary> Gets value of m_AllowNegatives. </summary>
            <returns> value of m_AllowNegatives. </returns>
        </member>
        <member name="M:IDArray.GetAllowDuplicates">
            <summary> Gets value of m_AllowDuplicates. </summary>
            <returns> value m_AllowDuplicates. </returns>
        </member>
        <member name="M:IDArray.SetAllowDuplicates(System.Boolean,System.Boolean)">
            <summary> Sets m_AllowDuplicates and removed duplicate IDs from the array. </summary>
            <param name="allowDuplicates"> true to allow, false to deny duplicates. </param>
            <param name="ensureUnique">    (Optional) true to ensure contents are unique. </param>
            <returns> Previous value of m_AllowDuplicates. </returns>
        </member>
        <member name="M:IDArray.GetSortMode">
            <summary> Gets sort mode. </summary>
            <returns> The sort mode. </returns>
        </member>
        <member name="M:IDArray.Sort(VArray&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;.SortMode)">
            <summary> Sorts the array per the given sort mode. </summary>
            <param name="sortMode"> (Optional) the sort mode. </param>
        </member>
        <member name="M:IDArray.Copy(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Use this member function to copy the elements of one array to another. </summary>
            <param name="obj"> Source of the elements to be copied to an array. </param>
            <returns> Returns true if successful. </returns>
        </member>
        <member name="M:IDArray.Append(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Appends the given set to this. </summary>
            <param name="obj"> Source of the elements to be appended to an array. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:IDArray.Append(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Appends the array of long ID's at pOpIDs. </summary>
            <param name="pOpIDs"> The ptr to the operation IDs. </param>
            <param name="nOpIDs"> The number operation IDs. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:IDArray.Append(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Appends the given array to this. </summary>
            <param name="obj"> Source of the elements to be appended to an array. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:IDArray.Add(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Adds the ID to the array. </summary>
            <param name="theID"> the identifier to add. </param>
            <returns> . </returns>
        </member>
        <member name="M:IDArray.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:IDArray.op_Assign(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object to copy. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IDArray.op_Assign(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object to copy. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IDArray.op_Assign(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IDArray.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:IDArray.#ctor(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor that accepts a set of longs. </summary>
            <param name="theIDs"> std::set of longs. </param>
        </member>
        <member name="M:IDArray.#ctor(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor that accepts a set of longs. </summary>
            <param name="theIDs"> std::set of longs. </param>
        </member>
        <member name="M:IDArray.#ctor(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:IDArray.#ctor(System.Boolean,VArray&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;.SortMode)">
            <summary> Constructor. </summary>
            <param name="allowDuplicates"> (Optional) allow duplicates IDs in the array. </param>
            <param name="sortMode">		   (Optional) the sort mode. </param>
        </member>
        <member name="T:IDArray">
            <summary> A std::vector of long data types used for operation ID's. </summary>
        </member>
        <member name="T:IDmap">
cnc machine parameters
</member>
        <member name="T:prm_probe_cycle">
probe toolpath parameters
</member>
        <member name="T:prm_nesting">
toolpath nesting parameters
</member>
        <member name="T:prm_solid_drill">
solid drill toolpath parameters
</member>
        <member name="T:v9_SDETECT_DRILL_PARAMS">
V9 Solids drill detection parameters
</member>
        <member name="T:SDETECT_DRILL_PARAMS">
Solid drill detection parameters
</member>
        <member name="T:AutoDrillPrm">
automatic drilling parameters
</member>
        <member name="T:prm_trimmed">
trimmed toolpath parameters
</member>
        <member name="T:prm_manual_entry">
manual entry parameters
</member>
        <member name="T:prm_chook">
chook operation
</member>
        <member name="T:prm_coons">
coons parameters 
</member>
        <member name="T:prm_swept3d">
swept 3D parameters 
</member>
        <member name="T:prm_swept2d">
swept 2D parameters 
</member>
        <member name="T:prm_lofted">
lofted parameters 
</member>
        <member name="T:prm_revolved">
revolved parameters 
</member>
        <member name="T:prm_ruled">
ruled parameters 
</member>
        <member name="T:prm_helix_bore">
helix bore parameters 
</member>
        <member name="T:prm_slotmill">
slotmill parameters 
</member>
        <member name="T:prm_thdmill">
thread mill parameters 
</member>
        <member name="T:prm_adv_5ax">
operation parameters - ADV 5 axis 
</member>
        <member name="T:prm_circle_5ax">
operation parameters - circle 5axis specific parameters 
</member>
        <member name="T:prm_circmill">
circmill parameters 
</member>
        <member name="T:prm_port_5ax">
operation parameters - Port 5 axis 
</member>
        <member name="T:prm_slice_5ax">
operation parameters - slice 5 axis 
</member>
        <member name="F:prm_msurf_5ax.iteration_count">
no longer used but leave to retrieve values from older .mc9 files 
</member>
        <member name="T:prm_msurf_5ax">
operation parameters - Msurf 5 axis 
</member>
        <member name="T:prm_m5_box">
Box Pattern data
</member>
        <member name="T:prm_m5_sph">
Sphere Pattern data
</member>
        <member name="T:prm_m5_cyl">
Support structures for Msurf 5 axis 
Cylinder Pattern data
</member>
        <member name="T:prm_swarf_5ax">
operation parameters - swarf 5 axis 
</member>
        <member name="F:prm_curve_5ax.step_meth">
@} 
</member>
        <member name="F:prm_curve_5ax.OutputFormat">
@defgroup cc5dlg_parameters1 CC5dlg parameters 
@{ 
</member>
        <member name="T:prm_curve_5ax">
operation parameters - curve 5 axis 
</member>
        <member name="F:prm_srf_4ax.gen">
@} 
</member>
        <member name="F:prm_srf_4ax.OutputFormat">
@defgroup cm5dlg_parameters4 CM5dlg parameters 
@{ 
</member>
        <member name="T:prm_srf_4ax">
operation parameters - surface finish 4 axis 
</member>
        <member name="F:prm_srf_flow5ax.f4thaxis">
@} 
</member>
        <member name="F:prm_srf_flow5ax.OutputFormat">
@defgroup cm5dlg_parameters1 CM5dlg parameters 
@{ 
</member>
        <member name="T:prm_srf_flow5ax">
operation parameters - surface finish flowline 5 axis 
</member>
        <member name="T:multax_exit_blend">
Exit_Blend Parameters 
</member>
        <member name="T:pt_generator">
Point generators
</member>
        <member name="T:multax_overlap">
multiaxis overlap settings 
</member>
        <member name="T:multax_entry_exit">
multiaxis entry and exit 
</member>
        <member name="T:ent_exit">
multiaxis entry or exit 
</member>
        <member name="T:prm_srf_hmm">
operation parameters - surface hmm 
</member>
        <member name="T:prm_srf_fin_conscalop">
operation parameters - surface finish constant scallop 
</member>
        <member name="T:prm_srf_fin_shallow">
operation parameters - surface finish shallow 
</member>
        <member name="T:prm_srf_fin_steep">
operation parameters - surface finish steep 
</member>
        <member name="T:prm_srf_fin_leftover">
operation parameters - surface finish leftover 
</member>
        <member name="T:prm_srf_fin_pencil">
operation parameters - surface finish pencil 
</member>
        <member name="T:prm_srf_fin_contour">
operation parameters - surface finish contour 
</member>
        <member name="T:prm_srf_fin_flowline">
operation parameters - surface finish flowline 
</member>
        <member name="T:prm_srf_fin_blend">
operation parameters - surface finish blend 
</member>
        <member name="T:prm_srf_fin_project">
operation parameters - surface finish project 
</member>
        <member name="T:prm_srf_fin_radial">
operation parameters - surface finish radial 
</member>
        <member name="T:prm_srf_fin_parallel">
operation parameters - surface finish parallel 
</member>
        <member name="T:prm_srf_rgh_plunge">
operation parameters - surface rough plunge 
</member>
        <member name="T:prm_srf_rgh_pocket">
operation parameters - surface rough pocket 
</member>
        <member name="T:prm_srf_rgh_restmill">
operation parameters - surface rough rest mill 
</member>
        <member name="T:prm_srf_rgh_contour">
operation parameters - surface rough contour 
</member>
        <member name="T:prm_srf_rgh_flowline">
operation parameters - surface rough flowline 
</member>
        <member name="T:prm_srf_rgh_project">
operation parameters - surface rough project 
</member>
        <member name="T:prm_srf_rgh_radial">
operation parameters - surface rough radial 
</member>
        <member name="T:prm_srf_rgh_parallel">
operation parameters - surface rough parallel 
</member>
        <member name="T:prm_srf_limits">
operation parameters - surface operation's limit settings 
</member>
        <member name="T:prm_srf_rough_settings">
operation parameters - surface operation's roughing settings 
</member>
        <member name="T:prm_srf_depths">
operation parameters - surface operation's depth settings 
</member>
        <member name="T:prm_srf_hsopts">
operation parameters - surface high speed parameters 
</member>
        <member name="T:prm_srf_direction">
operation parameters - surface operation's direction settings 
</member>
        <member name="T:prm_srf_edge_settings">
operation parameters - surface operation's edge settings 
</member>
        <member name="T:prm_srf_gap_settings">
operation parameters - surface operation's gap settings 
</member>
        <member name="T:prm_srf_common">
operation parameters - common parameters for all surface operations 
</member>
        <member name="T:prm_chamfer">
operation parameters - model chamfering 
</member>
        <member name="T:prm_2d_hmm">
operation parameters - 2D toolpaths hmm 
</member>
        <member name="T:prm_pocket_v7">
operation parameters - V7 pocketing parameters 
</member>
        <member name="T:prm_facing">
Facing
</member>
        <member name="T:prm_pocket">
Pocket
</member>
        <member name="T:prm_hem">
HEM parameters 
</member>
        <member name="T:prm_thinwall">
Thinwall pocket
</member>
        <member name="T:prm_pkt_hsopts">
High speed pocket options
</member>
        <member name="T:prm_open_pock">
Open pockets
</member>
        <member name="T:prm_remach_pock">
Pocket remachining
</member>
        <member name="T:prm_pock_facing">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_rgh_entry">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_ramp">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_helix">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_taper">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_lpark_turret">
lathe park turret operation
</member>
        <member name="T:prm_mt_turret">
turret operation
</member>
        <member name="T:prm_mt_center_point">
center point operation
</member>
        <member name="T:prm_mt_tailstock">
tailstock operation
</member>
        <member name="T:prm_mt_spindle_sync">
spindle sync operation
</member>
        <member name="T:ExactRotaryDirection">
            <summary> Exact rotary direction types. </summary>
            <remarks> Exact rotary type as in values that explicitly state the rotary direction.
		  A different way to specify rotary (or spindle) direction is to say "shortest",
		  but that should have its own enumeration to clearly differentiate between usages. </remarks>
        </member>
        <member name="T:SpindleSyncType">
            <summary> Spindle sync operation types. </summary>
        </member>
        <member name="T:prm_mt_spindle_move">
spindle advance/retract operation
</member>
        <member name="T:SpindleMoveType">
            <summary> Spindle move operation types. </summary>
        </member>
        <member name="T:prm_mt_spindle_grip">
chuck clamp/unclamp operation
</member>
        <member name="T:prm_mt_bar_feed">
bar feed operation
</member>
        <member name="T:axis_motion_type">
miscop axis motion description
</member>
        <member name="T:prm_lsteadyrest">
lathe steady rest position operation
</member>
        <member name="T:prm_ltailstock">
lathe tailstock position operation
</member>
        <member name="T:prm_lchuck_clamp">
lathe chuck clamp/un-clamp operation
</member>
        <member name="T:prm_lbarfeed">
lathe stock bar feed operation
</member>
        <member name="T:prm_lstock_flip">
lathe stock flip operation
</member>
        <member name="T:prm_lstock_xfer">
lathe stock transfer operation
</member>
        <member name="T:prm_lcan_pattern">
lathe pattern repeat toolpath 
</member>
        <member name="T:prm_lcan_finish">
lathe canned finish toolpath 
</member>
        <member name="T:prm_lcan_rough">
lathe canned rough toolpath 
</member>
        <member name="T:prm_lpoint">
lathe point toolpath parameters 
</member>
        <member name="T:prm_lthread">
lathe thread toolpath parameters 
</member>
        <member name="T:prm_thread_cut">
lathe thread cut parameters 
</member>
        <member name="T:prm_thread_shape">
lathe thread shape parameters 
</member>
        <member name="T:prm_lplunge">
lathe plunge and turn toolpath parameters 
</member>
        <member name="T:prm_plunge_finish">
lathe plunge and turn finish parameters 
</member>
        <member name="T:prm_plunge_rough">
lathe plunge and turn rough parameters 
</member>
        <member name="T:prm_lgroove">
lathe groove toolpath parameters 
</member>
        <member name="T:prm_groove_finish">
lathe groove finish parameters (not used with 2 boundary groove) 
</member>
        <member name="T:prm_groove_rough">
lathe groove rough parameters 
</member>
        <member name="T:prm_groove_step">
lathe groove roughing step removal parameters 
</member>
        <member name="T:PrmGrooveRibCutting">
Lathe groove rough rib cutting parameters. 
</member>
        <member name="T:prm_groove_depth">
lathe groove rough multiple depth cut parameters 
</member>
        <member name="T:prm_groove_shape">
lathe groove shape parameters (not used with 2 boundary groove) 
</member>
        <member name="F:prm_lcutoff.do_clearance">
clearance cut 
</member>
        <member name="T:prm_lcutoff">
lathe cutoff toolpath parameters 
</member>
        <member name="T:prm_lathe_corner">
lathe corner parameters 
</member>
        <member name="F:prm_lathe_peck.dwell_type">
dwell parameters 
</member>
        <member name="F:prm_lathe_peck.retract_type">
retract parameters 
</member>
        <member name="F:prm_lathe_peck.peck_type">
peck parameters 
</member>
        <member name="T:prm_lathe_peck">
lathe peck/dwell parameters 
</member>
        <member name="T:prm_pinch_turn">
lathe pinch turn operation
</member>
        <member name="T:PrmLathePrimeTurning">
            <summary> Lathe prime turning parameters. </summary>
        </member>
        <member name="T:PrmLathePrimeTurningFinish">
            <summary> Lathe prime turning finish parameters. </summary>
        </member>
        <member name="T:PrimeTurningFinishStrategy">
            <summary> Lathe prime turning finish strategies. </summary>
        </member>
        <member name="T:PrmLathePrimeTurningRough">
            <summary> Lathe prime turning rough parameters. </summary>
        </member>
        <member name="T:PrimeTurningRoughStrategy">
            <summary> Lathe prime turning rough strategies. </summary>
        </member>
        <member name="T:PrmLathePrimeTurningCommon">
            <summary> Lathe prime turning common parameters for rough and finish. </summary>
        </member>
        <member name="T:PrimeTurningFinishFeedSpeed">
            <summary> Feed rate and spindle speed parameters, used by prime turning finish. </summary>
        </member>
        <member name="T:PrimeTurningRoughFeedSpeed">
            <summary> Feed rate and spindle speed parameters, used by prime turning rough. </summary>
        </member>
        <member name="T:LatheFeedFromType">
            <summary> Lathe feed from types. </summary>
        </member>
        <member name="T:LatheFeedrateType">
            <summary> Lathe feed rate types. </summary>
        </member>
        <member name="T:prm_lcontour">
lathe contour rough toolpath parameters 
</member>
        <member name="T:prm_ldynamic">
lathe dynamic rough toolpath parameters 
</member>
        <member name="T:prm_lrough">
lathe rough toolpath parameters 
</member>
        <member name="T:LatheSemiFinishFeedSpeed">
            <summary> Lathe semi finish feed/speed parameters. </summary>
        </member>
        <member name="T:prm_pinch_params">
lathe pinch turn parameters 
</member>
        <member name="T:prm_lfinish">
lathe finish toolpath parameters 
</member>
        <member name="T:LatheCutDirection">
Lathe cut direction 
</member>
        <member name="T:prm_lathe_down_cutting">
lathe finish down cutting parameters 
</member>
        <member name="T:prm_lathe_corner_break">
lathe corner break parameters 
</member>
        <member name="T:prm_lathe_face">
lathe face toolpath parameters 
</member>
        <member name="T:SecondaryFeedSpeedPrm">
Lathe secondary feed/speed parameters. 
</member>
        <member name="T:prm_lathe_face_corner">
lathe face corner parameters 
</member>
        <member name="T:prm_lathe_plunge">
lathe plunge parameters 
</member>
        <member name="T:prm_lathe_ee">
lathe entry/exit parameters 
</member>
        <member name="T:prm_lathe_ee_vec">
individual lathe entry/exit parameters 
</member>
        <member name="T:prm_ldrill">
lathe drill toolpath parameters 
</member>
        <member name="T:prm_drill">
operation parameters - drilling specific parameters 
</member>
        <member name="T:prm_lathe_chip_break">
Lathe chip break parameters. 
</member>
        <member name="T:prm_ltool_inspect">
lathe tool inspection parameters 
</member>
        <member name="T:prm_5ax_limit">
Axis limit property page
</member>
        <member name="T:multax_limit">
@defgroup  Contour_Types Contour types 
@{ 
@} 
@defgroup  Pocket_Types Pocket types 
@{ 
@} 
multiaxis axis limit 
</member>
        <member name="T:prm_contour">
operation parameters - contour specific parameters 
</member>
        <member name="T:prm_oscillate_ctour">
Contour oscillate
</member>
        <member name="T:prm_tab">
Tab parameters
</member>
        <member name="T:prm_tp_common">
@} 
router common parameters 
</member>
        <member name="T:prm_ext_short">
Extend/shorten contour
</member>
        <member name="T:prm_ramp_ctour">
Contour ramp
</member>
        <member name="T:prm_chamfer_ctour">
Contour chamfer
</member>
        <member name="T:prm_ctourpock">
@defgroup operation_parameters_common_contour_and_pocket_parameters operation parameters - common contour and pocket parameters
*	@note get rid of this pathetic data structure for version 9.
*		  Move finish_all to op_multi_cuts.  Use op_common.cmp_to_tip

@{ 
Contour pocket
</member>
        <member name="T:prm_remach_ctour">
Contour remachining
</member>
        <member name="T:prm_xform">
operation parameters - xform toolpath 
</member>
        <member name="T:prm_xform_translate">
operation parameters - xform-translate (linear array) toolpath 
</member>
        <member name="T:prm_xform_rotate">
operation parameters - xform-rotate toolpath 
</member>
        <member name="T:prm_xform_mirror">
operation parameters - xform-mirror toolpath 
</member>
        <member name="T:prm_xform_view">
operation parameters - xform-view info 
</member>
        <member name="T:WireNewPowerSet">
wire new power set parameters 
</member>
        <member name="T:WireNewPowerPass">
wire new power pass parameters 
</member>
        <member name="T:WireAgieSet">
wire Agie parameters 
</member>
        <member name="T:prm_wire_4axis">
wire 4axis wirepath parameters 
</member>
        <member name="T:prm_wire_point">
wire point wirepath parameters 
</member>
        <member name="T:prm_wire_nocore">
wire nocore wirepath parameters 
</member>
        <member name="T:prm_wcan_cycle">
wire canned cycle wirepath parameters 
</member>
        <member name="T:prm_wire_contour">
wire contour wirepath parameters 
</member>
        <member name="T:prm_wire_tab">
Wire tab parameters
</member>
        <member name="T:prm_chain_sort">
wire window chain sorting parameters
</member>
        <member name="T:prm_wire_ee">
wire entry/exit parameters 
</member>
        <member name="T:prm_wire_common">
wire common parameters 
</member>
        <member name="T:op_misc">
@} 
operation parameters - miscellaneous integers and reals 
</member>
        <member name="T:tp_entity">
toolpath entity definition
* @note If a tp_entity member is added between flag and u and the new
*		  member is not supposed to be part of the tp_entity header, the define
*		  below must be changed to use the new member in place of u.

</member>
        <member name="T:tp_stock_model_result">
toolpath entity - Stock Model Result entity 
</member>
        <member name="T:tp_fbm_zone">
toolpath entity - FBM zone control entity 
</member>
        <member name="T:tp_fbm_chn">
toolpath entity - FBM chain control entity 
</member>
        <member name="T:tp_fbm_bnd">
toolpath entity - FBM chain boundary entity 
</member>
        <member name="T:tp_op_idn">
operation id entity
</member>
        <member name="T:tp_eptrs">
assoc info
</member>
        <member name="T:tp_nest_grp_info">
group info
</member>
        <member name="T:tp_nest_grp">
Group entity
</member>
        <member name="T:tp_nest_prt_opid">
Part operation id # entity
</member>
        <member name="T:tp_nest_prt">
Part entity
</member>
        <member name="T:tp_nest_sht">
@defgroup assoctyp_ch2412  Toolpath Nesting  
@{ 
Sheet entity
</member>
        <member name="T:tp_tab">
toolpath entity - Router tab entity 
</member>
        <member name="T:tp_chook">
CHook Toolpath Structure
</member>
        <member name="T:tp_group">
group entity 
</member>
        <member name="T:tp_surface">
surface entity - surface info 
</member>
        <member name="T:tp_arc_sld">
toolpath entity - arc from solid information 
</member>
        <member name="T:V8_SDETECT_DRILL_GEOM">
V8 SDetect Drill Geometry Structure
</member>
        <member name="T:tp_point_sld">
toolpath entity - drilling point from solid information 
</member>
        <member name="T:tp_line">
toolpath entity - 5axis position information 
</member>
        <member name="T:tp_point">
toolpath entity - drilling point information 
</member>
        <member name="T:LinkingParametersAssociativePointType">
            <summary> Linking parameters associative point type enumeration. </summary>
        </member>
        <member name="T:tp_grid">
toolpath entity - drilling grid information 
</member>
        <member name="T:tp_bolt_circle">
toolpath entity - drilling bolt circle information 
</member>
        <member name="T:tp_man_ent">
toolpath entity - manual entry 
</member>
        <member name="T:tp_chain">
toolpath entity - chain control entity 
</member>
        <member name="T:tp_boundary">
toolpath entity - chain boundary entity 
</member>
        <member name="T:tp_change">
toolpath entity - modify chain information 
</member>
        <member name="T:tp_thread_cut">
toolpath entity - thread cut entity (Used in Wire only) 
</member>
        <member name="T:tp_sync">
toolpath entity - chain sync entity 
</member>
        <member name="T:tp_density">
toolpath entity - chain boundary entity 
</member>
        <member name="T:wp_change_header">
Wire change at point header
</member>
        <member name="F:wp_change.list_index">
@} 
</member>
        <member name="F:wp_change.pass">
@} 
@defgroup pass-specific_data PASS-SPECIFIC DATA 
@{ 
</member>
        <member name="F:wp_change.taper">
@defgroup non-pass-specific_data NON-PASS-SPECIFIC DATA 
@{ 
</member>
        <member name="T:wp_change">
Wire change at point structure
</member>
        <member name="T:wp_cset_change">
Wire control settings change structure
</member>
        <member name="T:wp_cflag_change">
Wire control flag change structure
</member>
        <member name="T:wire_power_set_pass">
@} 
@defgroup wire_structures Wire Structures 
@{ 
Wire power set pass settings
</member>
        <member name="T:matl_list">
for linked lists of material entities 
</member>
        <member name="T:material">
material definition 
</member>
        <member name="T:matl_lathe">
lathe specific material specs 
</member>
        <member name="T:matl_mill">
@defgroup material_structures Material Structures 
@{ 
mill specific material specs 
</member>
        <member name="T:event_ent">
event entity
</member>
        <member name="T:event_prm_feed_type">
feed type event
</member>
        <member name="T:event_prm_feed_rate">
feed rate event
</member>
        <member name="T:event_prm_rotary_axis_master">
part rotary axis master event
</member>
        <member name="T:event_prm_spindle_speed_master">
part spindle speed master event
</member>
        <member name="T:event_prm_stock_transfer">
stock transfer event
</member>
        <member name="T:event_prm_tool_change">
tool change event
</member>
        <member name="T:event_prm_macro">
macro event
</member>
        <member name="T:event_prm_axis_clamp">
axis clamp event
</member>
        <member name="T:event_prm_quill">
quill event
</member>
        <member name="T:event_prm_steady_rest">
steady rest advance/retract event
</member>
        <member name="T:event_prm_axis_place_holder">
axis place holder event
</member>
        <member name="T:event_prm_axis_motion">
axis motion event
</member>
        <member name="T:event_prm_coolant_place_holder">
coolant place holder event
</member>
        <member name="T:event_prm_coolant">
coolant event
</member>
        <member name="T:event_prm_hidden_tc_marker">
hidden tool change marker event
</member>
        <member name="T:event_prm_sync">
sync event
</member>
        <member name="T:event_prm_string">
manual entry event
</member>
        <member name="T:event_prm_bar_feed">
bar feed event
</member>
        <member name="T:event_prm_spindle_move">
spindle move event (part spindle)
</member>
        <member name="T:event_prm_tool_grip">
tool grip length move event
</member>
        <member name="T:event_prm_tool_clear">
tool clearance move event
</member>
        <member name="T:event_prm_tool_linear">
tool linear move event
</member>
        <member name="T:event_prm_spindle_grip">
part spindle grip length move event 
</member>
        <member name="T:event_prm_spindle_clear">
part spindle clearance move event 
</member>
        <member name="T:event_prm_chuck">
chuck open/close event
</member>
        <member name="T:event_prm_tool_offset">
tool offset event
</member>
        <member name="T:event_prm_tool_stage">
tool stage event
</member>
        <member name="T:event_prm_tool_call">
tool call event 
</member>
        <member name="T:event_prm_tool_orient">
tool spindle orientation event 
</member>
        <member name="T:event_prm_part_orient">
part spindle orientation event 
</member>
        <member name="T:event_prm_tool_ss_clamp">
tool spindle speed clamp event 
</member>
        <member name="T:event_prm_part_ss_clamp">
part spindle speed clamp event 
</member>
        <member name="T:event_prm_tool_ss">
tool spindle speed event 
</member>
        <member name="T:event_prm_part_ss">
part spindle speed event 
</member>
        <member name="T:event_prm_dwell">
dwell event
</member>
        <member name="T:event_prm_custom">
custom event (canned text)
</member>
        <member name="T:event_prm_tool_rpm_css">
tool spindle rpm/css
</member>
        <member name="T:event_prm_tool_states">
tool spindle event with states
</member>
        <member name="T:event_prm_part_spindle_dir">
part spindle direction event
</member>
        <member name="T:event_prm_part_rpm_css">
part spindle rpm/css
</member>
        <member name="T:event_prm_part_states">
part spindle event with states
</member>
        <member name="T:event_prm_work_offset">
select event
</member>
        <member name="T:event_prm_select">
select event
</member>
        <member name="T:event_prm_comment_output">
comment output event
</member>
        <member name="T:event_prm_bar_puller_open">
bar puller open/close
</member>
        <member name="T:event_prm_tool_table">
tool table event
</member>
        <member name="T:event_prm_states">
event with multiple states, like on/off
</member>
        <member name="T:event_prm_spindle">
part spindle event
</member>
        <member name="T:event_prm_simple">
simple event
</member>
        <member name="T:event_prm_header">
event list header event
</member>
        <member name="D:GCODE_MASK">
            <summary> Defines an alias representing the gcode mask. </summary>
        </member>
        <member name="T:lathe_bdry">
lathe component boundary
</member>
        <member name="T:ltool_rec">
Lathe tool definition
</member>
        <member name="T:machine_position">
Machine reference position type and method of positioning
</member>
        <member name="T:ReferencePositionSource">
Reference position source (how it was created)
</member>
        <member name="T:ReferencePositionType">
For tool item id
For MT machine position data
Type of reference position
</member>
        <member name="F:TYPE_AXIS_COMBO_REFPT">
            <summary>	The next 2 members are used for axis combination reference POINTS and home position only. </summary>
        </member>
        <member name="T:view_ent">
View Entity Structure 
</member>
        <member name="T:WCSinfo">
WCS Information Structure 
</member>
        <member name="T:assoc_pt">
Named View Associative Geometry Selections 
</member>
        <member name="T:tp_ent">
for tp_ent type
</member>
        <member name="T:Cnc.Tool.V7LATHETOOL">
LATHE TOOL 
</member>
        <member name="T:Cnc.Tool.LATHETOOL">
LATHE TOOL 
</member>
        <member name="T:Cnc.Tool.CUSTOMLTOOL">
CUSTOM LATHE TOOL 
</member>
        <member name="T:Cnc.Tool.HOLDERCFG">
GENERAL HOLDER MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.LHOLDER">
GENERIC TOOL HOLDER (ALL UNITS ALWAYS IN INCHES!) 
</member>
        <member name="T:Cnc.Tool.INSERT">
LATHE INSERT/DRILLING TOOL DEFINITION 
</member>
        <member name="T:Cnc.Tool.LDRILLTOOLCFG">
DRILLING TOOL MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.LDRILLTOOL">
LATHE DRILLING TOOL DEFINITION 
</member>
        <member name="T:Cnc.Tool.GRVINSERTCFG">
GROOVING/PARTING INSERT MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.GRVINSERT">
GROOVING/PARTING INSERT 
</member>
        <member name="T:Cnc.Tool.THDINSERTCFG">
THREADING INSERT MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.THDINSERT">
THREADING INSERT 
</member>
        <member name="T:Cnc.Tool.GTBINSERTCFG">
GENERAL TURNING / BORING INSERT MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.GTBINSERT">
GENERAL TURNING/BORING INSERT (ALL UNITS ALWAYS IN INCHES!) 
</member>
        <member name="T:Cnc.Tool.LTOOLTYPECFG">
LATHE TOOL TYPE MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.DIMBMPINFO">
CONFIGURATION FOR DIMENSIONED BITMAP 
</member>
        <member name="T:Cnc.Tool.LISTINFO">
CONFIGURATION INFO FOR A LIST VIEW OR DROPDOWN 
</member>
        <member name="T:Cnc.Tool.MINMAXREAL">
@defgroup ltooldef_ch2 LIMITS 
@{ 
@} 
@defgroup ltooldef_ch3 LATHE TOOL TYPES 
@{ 
@} 
@defgroup ltooldef_ch4 CUSTOM GEOMETRY TOOL TYPES 
@{ 
@} 
@defgroup ltooldef_ch5 THREAD INSERT TYPES 
@{ 
@} 
@defgroup ltooldef_ch6 THREAD TYPES 
@{ 
@} 
@defgroup ltooldef_ch7 DRILLING TYPES 
@{ 
@} 
@defgroup ltooldef_ch8 TAP TYPES 
@{ 
@} 
@defgroup ltooldef_ch9 TOOL COMPENSATION TYPES 
@{ 
@} 
FLOATING POINT EDIT BOX LIMITS, DEFAULTS 
</member>
        <member name="M:Cnc.Tool.op_RightShift(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	CArchive read operator overload for the TlID class. </summary>
            <param name="ar">	The archive. </param>
            <param name="id">	The identifier. </param>
            <returns>	The archive. </returns>
        </member>
        <member name="M:Cnc.Tool.op_LeftShift(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID)">
            <summary>	CArchive write operator overload for the TlID class. </summary>
            <param name="ar">	The archive. </param>
            <param name="id">	The identifier. </param>
            <returns>	The adjusted archive. </returns>
        </member>
        <member name="F:Cnc.Tool.TlID.m_Guid">
            <summary>	Unique identifier. </summary>
        </member>
        <member name="F:Cnc.Tool.TlID.EmptyID">
            <summary>	Identifier for the empty tlid. </summary>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Implicit~_GUID">
            <summary>	GUID casting operator. </summary>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Implicit~ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;">
            <summary>	CString casting operator. </summary>
        </member>
        <member name="M:Cnc.Tool.TlID.op_LessThan(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Less-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_GreaterThan(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Greater-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Inequality(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Inequality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Equality(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Equality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Inequality(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Inequality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Equality(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Equality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Assign(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment guid operator. </summary>
            <param name="guidGUID">	Unique identifier. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Assign(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment string operator. </summary>
            <param name="stringGUID">	Unique identifier for the string. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.ToString">
            <summary>	Convert this object into a string representation. </summary>
            <returns>	This object as a CString. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary>	Parameterized blob constructor. </summary>
            <param name="blob">	   	The BLOB. </param>
            <param name="blobsize">	The blobsize. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Parameterized byte guid constructor. </summary>
            <param name="guidGUID">	Unique identifier. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*)">
            <summary>	Parameterized string constructor. </summary>
            <param name="stringGUID">	Unique identifier for the string. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Parameterized string constructor. </summary>
            <param name="stringGUID">	Unique identifier for the string. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlID">
            <summary> Class representing a tool identifier in the form of a GUID (Globally unique identifier) </summary>
        </member>
        <member name="T:TlDefinition">
            <summary>	Values that represent the insert definition. </summary>
        </member>
        <member name="T:TlCuttingSide">
            <summary>	Values that represent the handedness of a tool or tool item. </summary>
        </member>
        <member name="T:TlGraphicsFileFormat">
            <summary>	Values that represent tool graphics file formats. </summary>
        </member>
        <member name="T:TlLiveCenterTaperStyle">
            <summary> Values that represent the different Lathe Live Center taper styles. </summary>
        </member>
        <member name="T:TlLiveCenterPointStyle">
            <summary> Values that represent the different Lathe Live Center point styles. </summary>
        </member>
        <member name="T:TlThreadShape">
            <summary> Values that represent the different Thread Shapes. </summary>
        </member>
        <member name="T:TlShankType">
            <summary> Values that represent the different shank types on tools. </summary>
        </member>
        <member name="T:MCToolType">
            <summary> Values that represent the different tool types that Mastercam supports. </summary>
        </member>
        <member name="T:LowerConnectionType">
            <summary>	Enumeration representing the Holder Lower Connection Type. </summary>
        </member>
        <member name="T:UpperConnectionType">
            <summary>	Enumeration representing the Holder Upper Connection Type. </summary>
        </member>
        <member name="T:TlHelixType">
            <summary>	 Helix type for router tools </summary>
        </member>
        <member name="T:TlSpindleDir">
            <summary>	 Enumeration for spindle directions. </summary>
        </member>
        <member name="T:TlDisplayType">
            <summary>	 Enumeration representing the Tool Display Type </summary>
        </member>
        <member name="T:TlCornerType">
            <summary>	Enumeration that represent TlCornerType. </summary>
        </member>
        <member name="T:TlCutSource">
            <summary>	 Enumeration for source of cut params. </summary>
        </member>
        <member name="T:TlCutQuality">
            <summary>	Enumeration for cut quality. </summary>
        </member>
        <member name="T:TlRadiusType">
            <summary>	Enumeration for radius types </summary>
        </member>
        <member name="T:TlMaterialHardness">
            <summary>	Enumeration for different hardness scales. </summary>
        </member>
        <member name="T:TlMaterialISOValue">
            <summary>	Enumeration representing the different material ISO Group Values. </summary>
        </member>
        <member name="T:TlMaterialGroup">
@defgroup assocvar_ch26 tool radius types 
@{ 
@} 
@defgroup assocvar_ch27 canned cycle types 
@{ 
@} 
@defgroup assocvar_ch3 mill cutter capabilities 
@{ 
@}
<summary>	Enumeration for different material groups. </summary><summary>	Enumeration for different material groups. </summary></member>
        <member name="T:Cnc.Tool.TlTurnHolder">
            <summary>	Declares the TlTurnHolder type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlBoundaryGenerationParams">
            <summary>	Declares the TlBoundaryGenerationParams type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlConnection">
            <summary>	Declares the TlConnection type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A connection between tool components. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGraphicsFileCollection">
            <summary>	Declares the TlGraphicsFileCollection type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a collection of tool graphics files. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGraphicsFile">
            <summary>	Declares the TlGraphicsFile type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a tool graphics file in memory. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAccessoryCollection">
            <summary>	Declares the TlAccessoryCollection type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a collection of tool accessory items. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAccessory">
            <summary>	Declares the TlAccessory type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	The tl accessory class for assembly accessory items. </summary>
        </member>
        <member name="T:Cnc.Tool.TlLocator">
            <summary>	Declares the TlLocator type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A class that provides standard tool class behavior on top of wrapping a transformation matrix. </summary>
        </member>
        <member name="T:Cnc.Tool.TransformationMatrixColumn">
            <summary>	Declares the TransformationMatrixColumn type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a transformation matrix column for use with composite mill tool holders. </summary>
        </member>
        <member name="T:Cnc.Tool.TransformationMatrix">
            <summary>	Declares the TransformationMatrix type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a transformation matrix for use with composite mill tool holders. </summary>
        </member>
        <member name="T:Cnc.Tool.TlXMLNode">
            <summary>	Declares the TlXMLNode type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlManufacturer">
            <summary>	Declares the TlManufacturer type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tool manufacturer. </summary>
        </member>
        <member name="T:Cnc.Tool.TlOpType">
            <summary>	Declares the TlOpType type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined operation type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlOpGroup">
            <summary>	Declares the TlOpGroup type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined operation group. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolemakingOpParams">
            <summary>	Declares the TlHolemakingOpParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class defining Drilling Tool Operation Parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMillingOpParams">
            <summary>	Declares the TlMillingOpParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class defining Milling Tool Operation Parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlOpParams">
            <summary>	Declares the TlOpParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class defining Tool Operation Parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileArcSegment">
            <summary>	Declares the TlProfileArcSegment type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing an arc segment on a 2D profile. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileLineSegment">
            <summary>	Declares the TlProfileLineSegment type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a line segment on a 2D profile. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileSegment">
            <summary>	Declares the TlProfileSegment type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a segment on a 2d profile. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfile">
            <summary>	Declares the TlProfile type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a 2D profile comprised of instances of the TlProfileSegment class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMgr">
            <summary>	Declares the TlMgr type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class to maintain a list of tool items.  Can be added to the database to store a file tool item list, or
		  can be kept unattached to function as a "local" tool item list. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheLiveCenter">
            <summary>	Declares the TlHolderLatheLiveCenter type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a Lathe Live Center. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheTurning">
            <summary>	Declares the TlHolderLatheTurning type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe turning. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheThreading">
            <summary>	Declares the TlHolderLatheThreading type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe threading class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheGrooving">
            <summary>	Declares the TlHolderLatheGrooving type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe grooving class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheDrill">
            <summary>	Declares the TlHolderLatheDrill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe drill class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheBoring">
            <summary>	Declares the TlHolderLatheBoring type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe boring class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLathe">
            <summary>	Declares the TlHolderLathe type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertTurningBoring">
            <summary>	Declares the TlInsertTurningBoring type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl insert turning boring class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertThreading">
            <summary>	Declares the TlInsertThreading type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl insert threading class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertLatheDrill">
            <summary>	Declares the TlInsertLatheDrill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl insert lathe drill class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertGrooving">
            <summary>	Declares the TlInsertGrooving type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl insert grooving class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsert">
            <summary>	Declares the TlInsert type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Base class for insert representation </summary>
        </member>
        <member name="T:Cnc.Tool.TlCoolant">
            <summary>	Declares the TlCoolant type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a collection of tool coolant settings. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCutParam">
            <summary>	Declares the TlCutParam type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a cutting parameter. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolType">
            <summary>	Declares the TlToolType type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined tool type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolGroup">
            <summary>	Declares the TlToolGroup type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined tool group. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolGrade">
            <summary>	Declares the TlToolGrade type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined tool grade. </summary>
        </member>
        <member name="T:Cnc.Tool.TlWorkMaterial">
            <summary>	Declares the TlWorkMaterial type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a workpiece material within the Mastercam tool system. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolMaterial">
            <summary>	Declares the TlToolMaterial type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tool material. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMaterial">
            <summary>	Declares the TlMaterial type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a basic material. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderTreeNode">
            <summary>	Declares the TlHolderTreeNode type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a node within the tree of holders that make up a composite mill tool holder. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderComposite">
            <summary>	Declares the TlHolderComposite type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a composite mill tool holder. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolder">
            <summary>	Declares the TlHolder type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a mill tool holder. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolBarrelMill">
            <summary>	Declares the TlToolBarrelMill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing barrel mill tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolFeedMill">
            <summary>	Declares the TlToolFeedMill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing high feed milling tools </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolThreading">
            <summary>	Declares the TlToolThreading type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing tools that have threading characteristics. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolReamer">
            <summary>	Declares the TlToolReamer type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing reamer tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLatheCustom">
            <summary>	Declares the TlToolLatheCustom type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing custom lathe tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLatheISO">
            <summary>	Declares the TlToolLatheISO type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing isometric lathe tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLathe">
            <summary>	Declares the TlToolLathe type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> The base lathe tool class.  This class contains data and functions that are common to every tool. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolEndmill">
            <summary>	Declares the TlToolEndmill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class represnting tool types that contain similar end milling type parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolSlotMill">
            <summary>	Declares the TlToolSlotMill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing slot mill tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolDrill">
            <summary>	Declares the TlToolDrill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing tools that contain common holemaking parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolCenterDrill">
            <summary>	Declares the TlToolCenterDrill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing center drill tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolCounterBore">
            <summary>	Declares the TlToolCounterBore type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing counter bore tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolBoring">
            <summary>	Declares the TlToolBoring type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing fine boring tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolMill">
            <summary>	Declares the TlToolMill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> The base mill tool class.  This class contains data and functions that are common to every mill tool. </summary>
        </member>
        <member name="T:Cnc.Tool.TlTool">
            <summary>	Declares the TlTool type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> The base tool class.  This class contains data and functions that are common to every tool. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssembly">
            <summary>	Declares the TlAssembly type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a mill tool assembly. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyItem">
            <summary>	Declares the TlAssemblyItem type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tool assembly item. </summary>
        </member>
        <member name="T:Cnc.Tool.TlObject">
            <summary>	Declares the TlObject type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Base class for all tool class objects. </summary>
        </member>
        <member name="D:Cnc.Tool.TlIDListIter">
            <summary>	Defines an alias representing A constant iterator through a TlIDList. </summary>
        </member>
        <member name="D:Cnc.Tool.TlIDList">
            <summary>	Defines an alias representing a vector of type TlID. </summary>
        </member>
        <member name="D:LPMEMFILESTRUCT">
POINTER TO MEMFILESTRUCT STRUCTURE 
</member>
        <member name="F:MEMFILESTRUCT.hFileMap">
MEMORY FILE BUFFER INFORMATION 
</member>
        <member name="F:MEMFILESTRUCT.hFile">
DISK FILE INFORMATION 
</member>
        <member name="T:MEMFILESTRUCT">
WIN32 FILE INFORMATION 
</member>
        <member name="D:lineoftext">
lathe tool types
DATA PROTOTYPES 
</member>
        <member name="T:tool_station_type">
Tool station
</member>
        <member name="T:tool_block_type">
Tool block component parameters
</member>
        <member name="T:tool_head_type">
Tool heads
@defgroup block_types Block Types  
@{ 
@} 
@defgroup head_types Head Types 
@{ 
@} 
maximum length of a name  TOOLHEAD
Tool head component parameters
</member>
        <member name="T:safety_zone">
safety zones
</member>
        <member name="T:ent_idn_list_ptrs">
ent_list_idn memory pointer info
</member>
        <member name="T:ent_idn_list">
misc. list of entities by ent_idn
</member>
        <member name="T:ent_idn_type">
ent_idns for machine components and component groups in the database
</member>
        <member name="T:AxisPositions">
Positions (coordinates + method of getting there) for all axes
</member>
        <member name="T:AxisCoordinate">
Axis coordinate
</member>
        <member name="T:AxisCoordinateType">
Axis coordinate types
</member>
        <member name="F:AXIS_COMBO_ABS_COORD">
            <summary>	The next 2 members are used for axis combination reference POINTS and home position only. </summary>
        </member>
        <member name="D:component_id_type">
@defgroup assoctyp_ch1	some system limits 
@{ 
@} 
@defgroup  assocvar_ch40 tool types 
@{ 
@} 
custom operation
MT work type
MT prototype version
Machine component unique identifier
</member>
        <member name="T:SDETECT_CONE_FACE">
Solid Detection - conical face structure
</member>
        <member name="T:SDETECT_CYL_FACE">
Solid Detection - cylindrical face structure
</member>
        <member name="T:SDETECT_DRILL_GEOM">
Solid Drill detection Data
</member>
        <member name="T:drw_point">
AssocTyp_ch.h
</member>
        <member name="M:SetMainLevel(System.Int32)">
@} 
 @par Purpose:
		Sets the main level number global "main_level".  Note: unless temporarily set and restored, do not set "main_level" directly, use this function instead!

 @param[in]		level		level number

</member>
        <member name="F:constr_view_is_3d">
@defgroup math_varuables math variables
*
* initialized in this module

Maximum number of views
</member>
        <member name="T:v8_dimension">
structure for dimensions  
</member>
        <member name="T:v8_tangent">
structure for tangent dimensions  
</member>
        <member name="T:v8_perp">
structure for linear dimensions  
</member>
        <member name="T:v8_pt_dim">
structure for point dimensions	
</member>
        <member name="T:v8_ord_dim">
structure for ordinate dimensions  
</member>
        <member name="T:v8_circular">
structure for circular dimensions (rad/dia)  
</member>
        <member name="T:v8_angular">
structure for angular dimensions  
</member>
        <member name="T:v8_linear">
structure for linear dimensions  
</member>
        <member name="T:v8_note">
structure for notes  
</member>
        <member name="T:v8_dim_txt">
structure for dimension text  
</member>
        <member name="T:v8_wit_ldr">
structure for leaders and witness lines  
</member>
        <member name="T:v8_wl_arc">
circular leader  
</member>
        <member name="T:v8_wl_line">
structure for standard non_assoc points  
</member>
        <member name="T:DB_LIST_ENT">
@} 
Database List Entity
</member>
        <member name="T:CHAIN">
A CHAIN is a single chain or the start of a linked list of chains
</member>
        <member name="T:CHAIN_HASH_REC">
@} 
 @defgroup chain_data_structures Chain Data Structures
 @note END_OF_CHAIN is used only for manual sync (only at the end of
		 the first chain).	Normally, the end of chain is determined from
		 next == NULL.

@{ 
</member>
        <member name="T:pock_bound">
pocket boundary.  This is the central data structure used by pocketing.
All boundaries and islands can be expressed in this structure.  It
is a linked list.

</member>
        <member name="T:pock_chn">
@defgroup pock_data_structures Pocket Data Structures 
@{ 
</member>
        <member name="T:relief_info_type">
Relief Information Type
</member>
        <member name="T:art_assoc_entry">
Art Associative Entry
</member>
        <member name="T:art_bbox">
Art Bounding Box
</member>
        <member name="T:ent_profile">
profile entity type  
</member>
        <member name="T:polygonal_mesh">
polygonal_mesh (enhanced file_ent with persistant DB storage, smart memory usage, masking, selection, etc.)
</member>
        <member name="T:file_ent">
file entity (when e.id = FILE_ID, data is in e.u.f)
</member>
        <member name="T:font_attr">
            <summary> Data structure for font attributes. </summary>
        </member>
        <member name="T:fonts_type">
Fonts Type
</member>
        <member name="T:font_style">
Font style
</member>
        <member name="T:copious_data">
@} 
 @note If a copious_data member is added between lathe_bdry_valid and pad1
		 and the new member is not supposed to be part of the copious_data
		 header, the define below must be changed to use the new member in place
		 of pad1.

Copius Data structure
</member>
        <member name="T:entattr_type">
Entity Attribute Type
</member>
        <member name="T:ea_type">
EA Type
</member>
        <member name="T:bitmap_type">
Bitmap type
</member>
        <member name="T:descr_type">
Description type
</member>
        <member name="T:worksheet_type">
The worksheets structure
</member>
        <member name="T:levels_type">
The level structure
</member>
        <member name="T:levelNameStruct">
Structure to hold names of levels
</member>
        <member name="T:globals_type">
Visible levels
</member>
        <member name="T:fileLockHistoryType">
File Lock History Type
</member>
        <member name="T:fileLockHistoryStruct">
File Lock History Structure
</member>
        <member name="T:fileLockType">
Fle Lock Type
</member>
        <member name="T:history_type">
History Type
</member>
        <member name="T:history_struct">
History Structure
</member>
        <member name="T:version_header">
Version Header
</member>
        <member name="T:rel_density_type">
@} 
Relative density (used in NCS files only)
</member>
        <member name="T:screen_info_type">
Screen Information Type
</member>
        <member name="T:v_matrix_type">
@} 
@defgroup screen_types Screen Types 
@{ 
View Matrix Type
</member>
        <member name="T:CONE_sf">
            <summary> Cone definition structure that corresponds to Parasolid's cone structure. </summary>
            <remarks> To convert to Mastercam units one simply uses mastercamValue = PS2MC (parasolidValue)
		  for a value like the radius, or PS2MCPT3D (parasolidPoint, mastercamPoint) for point values.
		  No conversion is required for unit vectors like the axis and ref_direction or for an angular value. </remarks>
        </member>
        <member name="T:CYLINDER_sf">
            <summary> Cylinder definition structure that corresponds to Parasolid's cylinder structure. </summary>
            <remarks> To convert to Mastercam units one simply uses mastercamValue = PS2MC (parasolidValue)
		  for a value like the radius, or PS2MCPT3D (parasolidPoint, mastercamPoint) for point values.
		  No conversion is required for unit vectors like the axis and ref_direction or for an angular value. </remarks>
        </member>
        <member name="T:PLANE_sf">
This corresponds to Parasolid's plane structure
and to STEP's axis2_placement structure.
</member>
        <member name="T:mc_solid_ent">
Solid
</member>
        <member name="T:mc_solid_xmt_ent">
Solid data header for storing .x_t in partfile
</member>
        <member name="T:mc_opfile_ent">
@defgroup solid_types Solid Types 
@{ 
Operations file header for storing history file in partfile
</member>
        <member name="T:surf_type">
Surface Type 
</member>
        <member name="T:trim_type">
Trimmed Surface
</member>
        <member name="T:offset_type">
Offset Surface
</member>
        <member name="T:plane_type">
Plane
</member>
        <member name="T:fillet_type">
Fillet
</member>
        <member name="T:tabcyl_type">
Draft Surface
</member>
        <member name="T:rev_type">
Revolved Surface
</member>
        <member name="T:loft_type">
Loft Surface
</member>
        <member name="T:nbs_type">
NURBS Surface
</member>
        <member name="T:pps_type">
piecewise polynomial surface 
</member>
        <member name="T:surf_header">
@defgroup surface_types Surface Types 
@{ 
</member>
        <member name="T:cc_type">
composite curve 
</member>
        <member name="T:cons_type">
Curve ON Surface  
</member>
        <member name="T:nb_ptrs">
NURBS pointer type
</member>
        <member name="T:nb_type">
 @note If a spline member is added between pad and ent_ptr and the new
		 member is not supposed to be part of the spline header, the define
		 below must be changed to use the new member in place of ent_ptr.

NURBS Spline
</member>
        <member name="T:spline">
@defgroup curve_types Curve Types 
@{ 
Parametric spline 
</member>
        <member name="T:attributes">
@} 
Attribute structure
</member>
        <member name="D:homogeneous_matrix">
Homogeneous matrix
</member>
        <member name="D:art_data">
pointer to art data
</member>
        <member name="M:CncGaf.UtObject.Serialize(CncGaf.UtArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this object's data to (or from) an archive. </summary>
            <param name="ar"> Reference to archive. </param>
        </member>
        <member name="M:CncGaf.UtObject.GetObjectClassId">
            <summary> Gets the runtime class ID of this object. </summary>
            <returns> Class runtime ID. </returns>
        </member>
        <member name="M:CncGaf.UtObject.GetObjectClassName">
            <summary> Gets the class name of this object. </summary>
            <returns> Class name. </returns>
        </member>
        <member name="M:CncGaf.UtObject.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CncGaf.UtObject.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:CncGaf.UtObject">
            <summary> Base object for classes requiring serialization support. </summary>
        </member>
        <member name="T:CncGaf.UtArchive">
\ingroup GafBase
@{
</member>
        <member name="T:TP_ENT_TYPE">
            <summary> Values that represent toolpath entity types 
		  (for ent.u.tp.tp_id when ent.id == ASSOC_ID and ent.assoc_id == TP_ID). </summary>
        </member>
        <member name="T:ASSOC_ENT_TYPE">
            <summary> Values that represent associative entity types 
		  (for ent.assoc_id when ent.id == ASSOC_ID). </summary>
        </member>
        <member name="M:P4dToP3d(p_4d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a p_4d reference to a p_3d reference. </summary>
            <param name="pnt"> 4D point to convert. </param>
            <returns> p_3d reference. </returns>
        </member>
        <member name="M:P3dToP2d(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a p_3d reference to a p_2d reference. </summary>
            <param name="pnt"> 3D point to convert. </param>
            <returns> p_2d reference. </returns>
        </member>
        <member name="M:P4dRef(System.Double*)">
            <summary> Convert a double pointer to a p_4d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> p_4d reference. </returns>
        </member>
        <member name="M:P4dRef(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Convert a constant double pointer to a constant p_4d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> Constant p_4d reference. </returns>
        </member>
        <member name="M:P3dRef(System.Double*)">
            <summary> Convert a double pointer to a p_3d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> p_3d reference. </returns>
        </member>
        <member name="M:P3dRef(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Convert a constant double pointer to a constant p_3d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> Constant p_3d reference. </returns>
        </member>
        <member name="M:P2dRef(System.Double*)">
            <summary> Convert a double pointer to a p_2d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> p_2d reference. </returns>
        </member>
        <member name="M:P2dRef(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Convert a constant double pointer to a constant p_2d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> Constant p_2d reference. </returns>
        </member>
        <member name="M:op_Inequality(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator overload for 4D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are not equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Equality(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator overload for 4D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Inequality(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator overload for 3D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are not equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Equality(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator overload for 3D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Inequality(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator overload for 2D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are not equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Equality(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator overload for 2D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:Cross(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the cross product of two 3D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Cross product. </returns>
        </member>
        <member name="M:Cross(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the cross product of two 2D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Cross product. </returns>
        </member>
        <member name="M:Dot(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the dot product of two 4D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Dot product. </returns>
        </member>
        <member name="M:Dot(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the dot product of two 3D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Dot product. </returns>
        </member>
        <member name="M:Dot(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the dot product of two 2D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Dot product. </returns>
        </member>
        <member name="M:DistanceSq(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance squared between two 4D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance squared. </returns>
        </member>
        <member name="M:DistanceSq(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance squared between two 3D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance squared. </returns>
        </member>
        <member name="M:DistanceSq(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance squared between two 2D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance squared. </returns>
        </member>
        <member name="M:Distance(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance between two 4D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance. </returns>
        </member>
        <member name="M:Distance(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance between two 3D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance. </returns>
        </member>
        <member name="M:Distance(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@} 
<summary> Computes the distance between two 2D points. </summary><param name="pnt1"> First pnt. </param><param name="pnt2"> Second pnt. </param><returns> Distance. </returns></member>
        <member name="T:TlProfileEnt">
3D line, point or arc
</member>
        <member name="D:matrix_44">
@} 
<summary> Defines an alias representing the matrix 44. </summary></member>
        <member name="T:x_matrix">
Transformation matrix
</member>
        <member name="M:mat_43.op_Subscript(System.Int32)">
            <summary> Array indexer operator. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="T:mat_43">
            <summary> 4x3 matrix. </summary>
        </member>
        <member name="M:matrix_33i.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="m00"> row 0 column 0. </param>
            <param name="m01"> row 0 column 1. </param>
            <param name="m02"> row 0 column 2. </param>
            <param name="m10"> row 1 column 0. </param>
            <param name="m11"> row 1 column 1. </param>
            <param name="m12"> row 1 column 2. </param>
            <param name="m20"> row 2 column 0. </param>
            <param name="m21"> row 2 column 1. </param>
            <param name="m22"> row 2 column 2. </param>
        </member>
        <member name="M:matrix_33i.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="xAxis"> X axis (row 0). </param>
            <param name="yAxis"> Y axis (row 1). </param>
            <param name="zAxis"> Z axis (row 2). </param>
        </member>
        <member name="M:matrix_33i.#ctor(Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="mat"> Math Library-style matrix to copy. </param>
        </member>
        <member name="M:matrix_33i.#ctor(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="mat"> Matrix to copy. </param>
        </member>
        <member name="M:matrix_33i.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:matrix_33i">
            <summary> 3x3 matrix (initialized). </summary>
            <remarks> By default, the matrix is initialized to the identity matrix. </remarks>
        </member>
        <member name="M:matrix_33.TransposeThis">
            <summary> Transposes this matrix. </summary>
            <returns> Reference to this matrix. </returns>
        </member>
        <member name="M:matrix_33.Transpose">
            <summary> Returns a matrix that is the transpose of this matrix. </summary>
            <returns> Transposed matrix. </returns>
        </member>
        <member name="M:matrix_33.IsIdentity">
            <summary> Checks if this object is the identity matrix. </summary>
            <returns> True if identity matrix, false if not. </returns>
        </member>
        <member name="M:matrix_33.SetIdentity">
            <summary> Sets this object to the identity matrix. </summary>
        </member>
        <member name="M:matrix_33.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:matrix_33.op_Implicit~Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;">
            <summary> Operator (Cnc::Math::Matrix33) overload. </summary>
            <returns> This object converted to a Math Library-style matrix. </returns>
        </member>
        <member name="M:matrix_33.op_Assign(Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="mat"> Math Library-style matrix to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="T:matrix_33">
@} 
@defgroup matrix_types Matrix Types 
@{ 
<summary> 3x3 matrix. </summary></member>
        <member name="T:gt">
2D line, point or arc
</member>
        <member name="T:a_3d">
3D Arc
</member>
        <member name="T:a_2d">
2D Arc
</member>
        <member name="T:l_3d">
3D Line
</member>
        <member name="T:l_2d">
2D Line
</member>
        <member name="M:p_4di.op_Assign(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_4di.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Constructor. </summary>
            <param name="pnt"> 3D point. </param>
            <param name="w">   w value. </param>
        </member>
        <member name="M:p_4di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y/Z/W values. </param>
        </member>
        <member name="M:p_4di.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
            <param name="w"> W value. </param>
        </member>
        <member name="M:p_4di.#ctor(Cnc.Math.Vector.VecBase&lt;0x4,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="vec"> Math Library-style vector to copy. </param>
        </member>
        <member name="M:p_4di.#ctor(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="pnt"> Point to copy. </param>
        </member>
        <member name="M:p_4di.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:p_4di">
            <summary> 4D point (initialized). </summary>
            <remarks> By default, the point is initialized to (0., 0., 0., 0.). </remarks>
        </member>
        <member name="M:op_Multiply(System.Double,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiplication operator overload for "scale * p_4d". </summary>
            <param name="scale"> Value to multiply by. </param>
            <param name="pnt">   4D point to scale. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_4d.Normalize">
            <summary> Gets a normalized (unitized) copy of this "vector". </summary>
            <returns> Normalized "vector". </returns>
        </member>
        <member name="M:p_4d.NormalizeThis">
            <summary> Normalizes (unitizes) this "vector". </summary>
            <returns> A reference to this "vector". </returns>
        </member>
        <member name="M:p_4d.LengthSq">
            <summary> Gets the length squared of this "vector". </summary>
            <returns> Vector length squared. </returns>
        </member>
        <member name="M:p_4d.Length">
            <summary> Gets the length of this "vector". </summary>
            <returns> Vector length. </returns>
        </member>
        <member name="M:p_4d.op_DivisionAssignment(System.Double)">
            <summary> Division assignment operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Division(System.Double)">
            <summary> Division operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide by. </param>
            <returns> A point which contains the result of the division. </returns>
        </member>
        <member name="M:p_4d.op_MultiplicationAssignment(System.Double)">
            <summary> Multiplication assignment operator overload. </summary>
            <param name="scale"> Value to multiply this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Multiply(System.Double)">
            <summary> Multiplication operator overload. </summary>
            <param name="scale"> Value to multiply by. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_4d.op_SubtractionAssignment(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction assignment operator overload. </summary>
            <param name="pnt"> Point to subtract from this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Subtraction(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction operator overload. </summary>
            <param name="pnt"> Point to subtract. </param>
            <returns> A point which contains the result of the subtraction. </returns>
        </member>
        <member name="M:p_4d.op_UnaryNegation">
            <summary> Unary minus operator overload. </summary>
            <returns> A point which contains this point negated. </returns>
        </member>
        <member name="M:p_4d.op_AdditionAssignment(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator overload. </summary>
            <param name="pnt"> Point to add to this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Addition(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition operator overload. </summary>
            <param name="pnt"> Point to add. </param>
            <returns> A point which contains the result of the addition. </returns>
        </member>
        <member name="M:p_4d.op_LessThan(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less than operator overload. </summary>
            <param name="pnt"> Point to compare against. </param>
            <returns> True if this point is less than specified point, false otherwise. </returns>
        </member>
        <member name="M:p_4d.DoublePtr">
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
        </member>
        <member name="M:p_4d.ConvertTo3d">
            <summary> Converts this object to a 3D point. </summary>
            <returns> 3D point. </returns>
        </member>
        <member name="M:p_4d.SetXYZ(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the X/Y/Z components of this object to the specified values. </summary>
            <param name="pnt"> 3D point. </param>
        </member>
        <member name="M:p_4d.Set(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="pnt"> 3D point. </param>
            <param name="w">   W value. </param>
        </member>
        <member name="M:p_4d.Set(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y/Z/W values. </param>
        </member>
        <member name="M:p_4d.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
            <param name="w"> W value. </param>
        </member>
        <member name="M:p_4d.Set">
            <summary> Sets this object to (0., 0., 0., 0.). </summary>
        </member>
        <member name="M:p_4d.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:p_4d.op_Implicit~Cnc.Math.Vector.VecBase&lt;0x4,System.Double&gt;">
            <summary> Operator (Cnc::Math::Vector4D) overload. </summary>
            <returns> This object converted to a math. </returns>
        </member>
        <member name="M:p_4d.op_Assign(Cnc.Math.Vector.VecBase&lt;0x4,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="T:p_4d">
            <summary> 4D point. </summary>
        </member>
        <member name="M:p_3di.op_Assign(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_3di.#ctor(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Constructor. </summary>
            <param name="pnt"> 2D point. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*,System.Double)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y values. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y/Z values. </param>
        </member>
        <member name="M:p_3di.#ctor(System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
        </member>
        <member name="M:p_3di.#ctor(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="vec"> Math Library-style vector to copy. </param>
        </member>
        <member name="M:p_3di.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="pnt"> Point to copy. </param>
        </member>
        <member name="M:p_3di.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:p_3di">
            <summary> 3D point (initialized). </summary>
            <remarks> By default, the point is initialized to (0., 0., 0.). </remarks>
        </member>
        <member name="M:op_Multiply(System.Double,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiplication operator overload for "scale * p_3d". </summary>
            <param name="scale"> Value to multiply by. </param>
            <param name="pnt">   3D point to scale. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_3d.Normalize">
            <summary> Gets a normalized (unitized) copy of this "vector". </summary>
            <returns> Normalized "vector". </returns>
        </member>
        <member name="M:p_3d.NormalizeThis">
            <summary> Normalizes (unitizes) this "vector". </summary>
            <returns> A reference to this "vector". </returns>
        </member>
        <member name="M:p_3d.LengthSq">
            <summary> Gets the length squared of this "vector". </summary>
            <returns> Vector length squared. </returns>
        </member>
        <member name="M:p_3d.Length">
            <summary> Gets the length of this "vector". </summary>
            <returns> Vector length. </returns>
        </member>
        <member name="M:p_3d.op_DivisionAssignment(System.Double)">
            <summary> Division assignment operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Division(System.Double)">
            <summary> Division operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide by. </param>
            <returns> A point which contains the result of the division. </returns>
        </member>
        <member name="M:p_3d.op_MultiplicationAssignment(System.Double)">
            <summary> Multiplication assignment operator overload. </summary>
            <param name="scale"> Value to multiply this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Multiply(System.Double)">
            <summary> Multiplication operator overload. </summary>
            <param name="scale"> Value to multiply by. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_3d.op_SubtractionAssignment(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction assignment operator overload. </summary>
            <param name="pnt"> Point to subtract from this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Subtraction(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction operator overload. </summary>
            <param name="pnt"> Point to subtract. </param>
            <returns> A point which contains the result of the subtraction. </returns>
        </member>
        <member name="M:p_3d.op_UnaryNegation">
            <summary> Unary minus operator overload. </summary>
            <returns> A point which contains this point negated. </returns>
        </member>
        <member name="M:p_3d.op_AdditionAssignment(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator overload. </summary>
            <param name="pnt"> Point to add to this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Addition(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition operator overload. </summary>
            <param name="pnt"> Point to add. </param>
            <returns> A point which contains the result of the addition. </returns>
        </member>
        <member name="M:p_3d.op_LessThan(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less than operator overload. </summary>
            <param name="pnt"> Point to compare against. </param>
            <returns> True if this point is less than specified point, false otherwise. </returns>
        </member>
        <member name="M:p_3d.DoublePtr">
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
        </member>
        <member name="M:p_3d.ConvertTo2d">
            <summary> Converts this object to a 2D point. </summary>
            <returns> 2D point. </returns>
        </member>
        <member name="M:p_3d.SetXY(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="val"> X/Y value. </param>
        </member>
        <member name="M:p_3d.SetXY(System.Double,System.Double)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
        </member>
        <member name="M:p_3d.SetXY(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="pnt"> 3D point. </param>
        </member>
        <member name="M:p_3d.SetXY(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="pnt"> 2D point. </param>
        </member>
        <member name="M:p_3d.Set(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="pnt"> 2D point. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3d.Set(System.Double!System.Runtime.CompilerServices.IsConst*,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y values. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3d.Set(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y/Z value. </param>
        </member>
        <member name="M:p_3d.Set(System.Double,System.Double,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
        </member>
        <member name="M:p_3d.Set">
            <summary> Sets this object to (0., 0., 0.). </summary>
        </member>
        <member name="M:p_3d.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:p_3d.op_Implicit~Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;">
            <summary> Operator (Cnc::Math::Vector3D) overload. </summary>
            <returns> This object converted to a math. </returns>
        </member>
        <member name="M:p_3d.op_Assign(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_2di.op_Assign(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_2di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y values. </param>
        </member>
        <member name="M:p_2di.#ctor(System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
        </member>
        <member name="M:p_2di.#ctor(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="vec"> Math Library-style vector to copy. </param>
        </member>
        <member name="M:p_2di.#ctor(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="pnt"> Point to copy. </param>
        </member>
        <member name="M:p_2di.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:p_2di">
            <summary> 2D point (initialized). </summary>
            <remarks> By default, the point is initialized to (0., 0.). </remarks>
        </member>
        <member name="M:op_Multiply(System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiplication operator overload for "scale * p_2d". </summary>
            <param name="scale"> Value to multiply by. </param>
            <param name="pnt">   2D point to scale. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_2d.Normalize">
            <summary> Gets a normalized (unitized) copy of this "vector". </summary>
            <returns> Normalized "vector". </returns>
        </member>
        <member name="M:p_2d.NormalizeThis">
            <summary> Normalizes (unitizes) this "vector". </summary>
            <returns> A reference to this "vector". </returns>
        </member>
        <member name="M:p_2d.LengthSq">
            <summary> Gets the length squared of this "vector". </summary>
            <returns> Vector length squared. </returns>
        </member>
        <member name="M:p_2d.Length">
            <summary> Gets the length of this "vector". </summary>
            <returns> Vector length. </returns>
        </member>
        <member name="M:p_2d.op_DivisionAssignment(System.Double)">
            <summary> Division assignment operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Division(System.Double)">
            <summary> Division operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide by. </param>
            <returns> A point which contains the result of the division. </returns>
        </member>
        <member name="M:p_2d.op_MultiplicationAssignment(System.Double)">
            <summary> Multiplication assignment operator overload. </summary>
            <param name="scale"> Value to multiply this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Multiply(System.Double)">
            <summary> Multiplication operator overload. </summary>
            <param name="scale"> Value to multiply by. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_2d.op_SubtractionAssignment(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction assignment operator overload. </summary>
            <param name="pnt"> Point to subtract from this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Subtraction(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction operator overload. </summary>
            <param name="pnt"> Point to subtract. </param>
            <returns> A point which contains the result of the subtraction. </returns>
        </member>
        <member name="M:p_2d.op_UnaryNegation">
            <summary> Unary minus operator overload. </summary>
            <returns> A point which contains this point negated. </returns>
        </member>
        <member name="M:p_2d.op_AdditionAssignment(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator overload. </summary>
            <param name="pnt"> Point to add to this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Addition(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition operator overload. </summary>
            <param name="pnt"> Point to add. </param>
            <returns> A point which contains the result of the addition. </returns>
        </member>
        <member name="M:p_2d.op_LessThan(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less than operator overload. </summary>
            <param name="pnt"> Point to compare against. </param>
            <returns> True if this point is less than specified point, false otherwise. </returns>
        </member>
        <member name="M:p_2d.DoublePtr">
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
        </member>
        <member name="M:p_2d.ConvertTo3d">
            <summary> Converts this object to a 3D point. </summary>
            <returns> 3D point. </returns>
        </member>
        <member name="M:p_2d.Set(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y values. </param>
        </member>
        <member name="M:p_2d.Set(System.Double,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
        </member>
        <member name="M:p_2d.Set">
            <summary> Sets this object to (0., 0.). </summary>
        </member>
        <member name="M:p_2d.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:p_2d.op_Implicit~Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;">
            <summary> Operator (Cnc::Math::Vector2D) overload. </summary>
            <returns> This object converted to a math. </returns>
        </member>
        <member name="M:p_2d.op_Assign(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="T:p_2d">
            <summary> 2D point. </summary>
        </member>
        <member name="T:p_3d">
@defgroup Points_Lines_Arcs Point, Line, and Arc Types 
@{ 
<summary> 3D point. </summary></member>
        <member name="D:Cnc.Math.Transform2D">
            <summary> Defines an alias representing a 2D transform object. </summary>
        </member>
        <member name="D:Cnc.Math.Transform3D">
            <summary> Defines an alias representing a 2D float or double vector. </summary>
            <summary> Defines an alias representing a 3D float or double vector. </summary>
            <summary> Defines an alias representing a 4D float or double vector. </summary>
            <summary> Defines an alias representing a 2x2 float or double matrix. </summary>
            <summary> Defines an alias representing a 3x3 float or double matrix. </summary>
            <summary> Defines an alias representing a 4x4 float or double matrix. </summary>
            <summary> Defines an alias representing a 3D transform object. </summary>
        </member>
        <member name="D:Cnc.Math.Vector4Df">
            <summary> Defines an alias representing a 4D float vector. </summary>
        </member>
        <member name="D:Cnc.Math.Vector3Df">
            <summary> Defines an alias representing a 3D float vector. </summary>
        </member>
        <member name="D:Cnc.Math.Vector2Df">
            <summary> Defines an alias representing a 2D float vector. </summary>
        </member>
        <member name="D:Cnc.Math.Matrix44">
            <summary> Defines an alias representing a 4x4 double matrix. </summary>
        </member>
        <member name="D:Cnc.Math.Matrix33">
            <summary> Defines an alias representing a 3x3 double matrix. </summary>
        </member>
        <member name="D:Cnc.Math.Matrix22">
            <summary> Defines an alias representing a 2x2 double matrix. </summary>
        </member>
        <member name="D:Cnc.Math.Vector4D">
            <summary> Defines an alias representing a 4D double vector. </summary>
        </member>
        <member name="D:Cnc.Math.Vector3D">
            <summary> Defines an alias representing a 3D double vector. </summary>
        </member>
        <member name="D:Cnc.Math.Vector2D">
            <summary> Defines an alias representing a 2D double vector. </summary>
        </member>
        <member name="F:nc_tol">
@} 
</member>
        <member name="F:main_level">
@defgroup math_varuables math variables
  *
  * initialized in this module

</member>
        <member name="F:tol">
@{ 
System Tolerance
</member>
        <member name="M:FormatMessageFromID(System.UInt32,BTEllipsis)">
            <summary> Write formatted (CString::FormatMessage style) data to a CString. </summary>
            <param name="nFormatID"> String resource identifier that contains the format-control string. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="M:FormatFromID(System.UInt32,BTEllipsis)">
            <summary> Write formatted (printf style) data to a CString. </summary>
            <param name="nFormatID"> String resource identifier that contains the format-control string. </param>
            <returns> The formatted string. </returns>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetTotalHolderLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetToolProjection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetGaugeLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetTotalHolderLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetToolProjection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetGaugeLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetTotalHolderLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetToolProjection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetGaugeLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetTotalHolderLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetToolProjection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetGaugeLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetTotalHolderLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetToolProjection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetGaugeLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetTotalHolderLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetToolProjection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetGaugeLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetTotalHolderLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetToolProjection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetGaugeLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
    </members>
</doc>