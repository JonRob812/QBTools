<?xml version="1.0"?>
<doc>
    <assembly>
        "NETHook3_0"
    </assembly>
    <members>
        <member name="M:ResolveAssemblies">
            <summary> Resolve assemblies. </summary>
        </member>
        <member name="M:Handle_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary> Handles the assembly resolve. </summary>
            <param name="sender"> If non-null, the sender. </param>
            <param name="args">   If non-null, the arguments. </param>
            <returns> nullptr if it fails, else an Assembly^. </returns>
        </member>
        <member name="M:Mastercam.Support.UI.MastercamRibbon.InsertThirdPartyRibbonTabs(System.String)">
            <summary> Inserts a third party ribbon tab as described by ribbonXml. </summary>
            <param name="ribbonXml"> The XML that defines the Tab and its contents. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Mastercam.Support.UI.MastercamRibbon">
            <summary> A class for the creation of a custom Tab in the Mastercam Ribbon. </summary>
        </member>
        <member name="M:export_operations(System.Char*,std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char*,System.Boolean,System.Boolean,System.Boolean*)">
 @par Purpose:
			export operations with all their assoc geometry to an external file

 @param[in]		fname			destination file to open
 @param[in]		op_ids			op numbers to export
 @param[in]		grpname			name of group to export it under
 @param[in]		just_op			true = export just the operation - no geometry
 @param[in]		no_duptool_chk	true do not check for similar tools in destination library
 @param[out]		succf			true = operation added to current db

</member>
        <member name="M:import_operations(System.Char!System.Runtime.CompilerServices.IsConst*,p_3d!System.Runtime.CompilerServices.IsConst*,std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int16,System.Boolean,System.Boolean,DUPTOOL_CHK,System.Boolean,System.Boolean*,System.Boolean)">
 @par Purpose:
			import operations with all their assoc geometry from an external file

 @param[in]		fname			source file to open and search
 @param[in]		pOrigin_pt		predefined origin pt, NULL to call point_proc()
 @param[in,out]	op_ids			op numbers to import, list will be update to new id's
 @param[in]		n_ops			# of operations in list
 @param[in]		just_op			true = import just the operation - no geometry
 @param[in]		get_groups		0 = don't import op groups, 1=import op groups, -1=ask
 @param[in]		calc_fs			true = recalc speed and feed to current material
 @param[in]		assign_views	true = use system views, false=use views stored with op
 @param[in]		duptool_chk		check for similar tools
 @param[in]		expand_ops		true = expand new operation in operation manager
 @param[out]		succf			true = operation found and added to current db
 @param[in]		display			true = display debug progess messages

</member>
        <member name="M:import_all_operations(System.Char*,p_3d!System.Runtime.CompilerServices.IsConst*,std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int16,System.Boolean,System.Boolean,DUPTOOL_CHK,System.Boolean,System.Boolean,System.Boolean*)">
 @par Purpose:
			import all operations with all their assoc geometry from an external file

 @param[in]		fname			source file to open and search
 @param[in]		pOrigin_pt		predefined origin pt, NULL to call point_proc()
 @param[out]		op_ids			op ids that were to imported
 @param[in]		just_op			true = import just the operation - no geometry
 @param[in]		get_groups		0=don't import op groups, 1=import op groups, -1=ask
 @param[in]		calc_fs			true = recalc speed and feed to current material
 @param[in]		assign_views	true = use system views, false = use views stored with op
 @param[in]		duptool_chk		check for similar tools
 @param[in]		expand_ops		true = expand new operation in operation manager
 @param[in]		display			true = display debug progess messages
 @param[out]		succf			true = operation found and added to current db

</member>
        <member name="T:DUPTOOL_CHK">
operation parameters - common tool parameters for all operation types 
</member>
        <member name="M:Mastercam.Support.ReportManager.RunSetupSheetNoDialog(System.Collections.Generic.List`1{System.String}@,System.Collections.Generic.List`1{System.String}@,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.List`1{System.String}@,System.Boolean)">
            <summary> Run the setup sheet bypassing the usual dialog. </summary>
            <param name="dlgItems">		   Strings to use instead of dialog items (Programmer, etc)
							   MUST be a list of 8 items! </param>
            <param name="rpxFiles">		   The list of rpx templates to be used. Count MUST equal the number of Machine
							   Groups in the file! </param>
            <param name="anyImages">	   Generate automatic images (y/n). </param>
            <param name="opImages">		   Generate automatic operation images (anyImages must be true). </param>
            <param name="colors">		   Generate color images (anyImages or opImages must be true). </param>
            <param name="opViewMode">	   0=WCS, 1=TPLANE, 2=Isometric relative to WCS, 3=Isometric (WORLD). </param>
            <param name="useViewer">	   Display results in viewer (y/n). </param>
            <param name="writePDF">		   Write PDF files? (useViewer must be false). </param>
            <param name="xmlFiles">		   [out] List of XML files that were written. </param>
            <param name="writeAllXmlData"> True to write ALL the XML data. </param>
            <returns> True if successful, false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.ReportManager.RunSetupSheetNoDialog(System.Collections.Generic.List`1{System.String}@,System.Collections.Generic.List`1{System.String}@,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.List`1{System.String}@)">
            <summary> Run the setup sheet bypassing the usual dialog. </summary>
            <param name="dlgItems">		   Strings to use instead of dialog items (Programmer, etc)
							   MUST be a list of 8 items! </param>
            <param name="rpxFiles">		   The list of rpx templates to be used. Count MUST equal the number of Machine
							   Groups in the file! </param>
            <param name="anyImages">	   Generate automatic images (y/n). </param>
            <param name="opImages">		   Generate automatic operation images (anyImages must be true). </param>
            <param name="colors">		   Generate color images (anyImages or opImages must be true). </param>
            <param name="opViewMode">	   0=WCS, 1=TPLANE, 2=Isometric relative to WCS, 3=Isometric (WORLD). </param>
            <param name="useViewer">	   Display results in viewer (y/n). </param>
            <param name="writePDF">		   Write PDF files? (useViewer must be false). </param>
            <param name="xmlFiles">		   [out] List of XML files that were written. </param>
            <returns> True if successful, false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.ReportManager.#ctor">
            <summary> Initializes a new instance of the ReportManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.ReportManager">
            <summary> This class is used to manage the running and execution of external apps. </summary>
        </member>
        <member name="M:Mastercam.Math.Arc2D.op_Inequality(Mastercam.Math.Arc2D,Mastercam.Math.Arc2D)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Arc1"> This is the first arc to compare. </param>
            <param name="Arc2"> This is the second arc to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Arc2D.op_Equality(Mastercam.Math.Arc2D,Mastercam.Math.Arc2D)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Arc1"> This is the first arc to compare. </param>
            <param name="Arc2"> This is the second arc to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Arc2D.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this math object to
          another one.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="obj"> [in,out] This is the arc to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Arc2D.Equals(Mastercam.Math.Arc2D,Mastercam.Math.Arc2D)">
            <summary> This is a static equality method for the purposes of comparing these math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Arc1"> This is the first arc to compare. </param>
            <param name="Arc2"> This is the second arc to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Arc2D.ToString">
            <summary> Converts this object into a string representation. </summary>
            <returns> A text string that represents this object. </returns>
        </member>
        <member name="P:Mastercam.Math.Arc2D.EndAngleDegrees">
            <summary> Gets or sets the location of the ending point of this arc,
          an angle, in degrees, from the (3 O'Clock) base point.
          </summary>
        </member>
        <member name="P:Mastercam.Math.Arc2D.StartAngleDegrees">
            <summary> Gets or sets the location of the starting point of this arc,
           an angle, in degrees, from the (3 O'Clock) base point.
          </summary>
        </member>
        <member name="P:Mastercam.Math.Arc2D.Radius">
            <summary> Gets or sets the radius of this arc. </summary>
        </member>
        <member name="F:Mastercam.Math.Arc2D.CenterPoint">
            <summary> Gets or sets the center point of this arc. </summary>
        </member>
        <member name="M:Mastercam.Math.Arc2D.#ctor(Mastercam.Math.Point2D,System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the Arc2D class. </summary>
            <remarks> This takes all of the necessary data to construct this arc object.
          </remarks>
            <param name="CenterPoint">       The center point of the arc to be created. </param>
            <param name="Radius">            The radius (distance from the center point to the outer
                                 edge of the arc) of the arc to be created.
                                 </param>
            <param name="StartAngleDegrees"> The angle in degrees, from the origin, from which the arc
                                 starts.
                                 </param>
            <param name="EndAngleDegrees">   The angle in degrees, from the origin, from which the arc
                                 ends.
                                 </param>
        </member>
        <member name="M:Mastercam.Math.Arc2D.ConvertMastercam(a_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> "Converts" this NET-Hook type to the corresponding Mastercam math type. </summary>
            <param name="MCamArc"> [out] The Mastercam math type. </param>
        </member>
        <member name="M:Mastercam.Math.Arc2D.#ctor(a_2d)">
            <summary> Initializes a new instance of the Arc2D class. </summary>
            <param name="ArcGeometry"> The Mastercam 2D arc geometry data. </param>
        </member>
        <member name="T:Mastercam.Math.Arc2D">
            <summary>This class is used as a mathematical representation of a 2D Arc.</summary>
        </member>
        <member name="M:Mastercam.Math.Line2D.op_Inequality(Mastercam.Math.Line2D,Mastercam.Math.Line2D)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Line1"> This is the first line to compare. </param>
            <param name="Line2"> This is the second line to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Line2D.op_Equality(Mastercam.Math.Line2D,Mastercam.Math.Line2D)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Line1"> This is the first line to compare. </param>
            <param name="Line2"> This is the second line to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Line2D.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this math object to
          another one.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="obj"> [in,out] This is the line to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Line2D.Equals(Mastercam.Math.Line2D,Mastercam.Math.Line2D)">
            <summary> This is a static equality method for the purposes of comparing these math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Line1"> This is the first line to compare. </param>
            <param name="Line2"> This is the second line to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="P:Mastercam.Math.Line2D.default(System.Int32)">
            <summary> Gets or set the specified endpoint of this Line2D.
          This is the bracket operator overload so that the points within this line can be
          accessed via an array-like interface.
          </summary>
            <param name="index"> The index used within the brackets must be either 0 or 1 to access either
                     the first or the second endpoint.
                     </param>
            <exception cref="T:System.IndexOutOfRangeException"> Thrown if an index is passed in that is out of the allowed range.
                                            </exception>
        </member>
        <member name="M:Mastercam.Math.Line2D.ToString">
            <summary> Converts this object into a string representation. </summary>
            <returns> A text string that represents this object. </returns>
        </member>
        <member name="F:Mastercam.Math.Line2D.Point2">
            <summary> Gets or sets the second endpoint of the specified line object. </summary>
        </member>
        <member name="F:Mastercam.Math.Line2D.Point1">
            <summary> Gets or sets the first endpoint of the specified line object. </summary>
        </member>
        <member name="M:Mastercam.Math.Line2D.#ctor(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> Initializes a new instance of the Line2D class. </summary>
            <remarks> This construction method takes two 2D points and constructs a line object from them.
          </remarks>
            <param name="Point1Input"> The point to become the first endpoint. </param>
            <param name="Point2Input"> The point to become the second endpoint. </param>
        </member>
        <member name="M:Mastercam.Math.Line2D.ConvertMastercam(l_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> "Converts" this NET-Hook type to the corresponding Mastercam math type. </summary>
            <param name="MCamLine"> [out] The Mastercam math type. </param>
        </member>
        <member name="M:Mastercam.Math.Line2D.#ctor(l_2d)">
            <summary> Initializes a new instance of the Line2D class. </summary>
            <param name="LineGeometry"> The Mastercam 2D line geometry data. </param>
        </member>
        <member name="T:Mastercam.Math.Line2D">
            <summary> This class is used as a mathematical representation of a 2D Line. </summary>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.Read(System.String,System.Object@)">
            <summary> This method reads information from a cell in the currently open Microsoft Excel
          file.
          </summary>
            <param name="CellName"> The identifier for the cell to write information to.
                        </param>
            <param name="Value">    The general Object to be read into from the specified cell.
                        </param>
            <returns> True if the data was read and stored to the specified Value parameter correctly,
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.Read(System.String,System.ValueType!System.Double!System.Runtime.CompilerServices.IsBoxed)">
            <summary> This method reads information from a cell in the currently open Microsoft Excel
          file.
          </summary>
            <param name="CellName"> The identifier for the cell to write information to.
                        </param>
            <param name="Value">    The double object to be read into from the specified cell.
                        </param>
            <returns> True if the data was read and stored to the specified Value parameter correctly,
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.Read(System.String,System.ValueType!System.Int32!System.Runtime.CompilerServices.IsBoxed)">
            <summary> This method reads information from a cell in the currently open Microsoft Excel
          file.
          </summary>
            <param name="CellName"> The identifier for the cell to write information to.
                        </param>
            <param name="Value">    The integer object to be read into from the specified cell.
                        </param>
            <returns> True if the data was read and stored to the specified Value parameter correctly,
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.Read(System.String,System.String@,System.Int32)">
            <summary> This method reads information from a cell in the currently open Microsoft Excel
          file.
          </summary>
            <param name="CellName"> The identifier for the cell to write information to.
                        </param>
            <param name="Value">    The string object to be read into from the specified cell.
                        </param>
            <param name="maxChars"> The maximum number of characters for the string object
                        </param>
            <returns> True if the data was read and stored to the specified Value parameter correctly,
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.Write(System.String,System.Double)">
            <summary> This method writes information to a cell in the currently open Microsoft Excel file.
          </summary>
            <param name="CellName"> The identifier for the cell to write information to.
                        </param>
            <param name="Value">    The double value to be written into the specified cell.
                        </param>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.Write(System.String,System.Int32)">
            <summary> This method writes information to a cell in the currently open Microsoft Excel file.
          </summary>
            <param name="CellName"> The identifier for the cell to write information to.
                        </param>
            <param name="Value">    The integer value to be written into the specified cell.
                        </param>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.Write(System.String,System.String)">
            <summary> This method writes information to a cell in the currently open Microsoft Excel file.
          </summary>
            <param name="CellName"> The identifier for the cell to write information to.
                        </param>
            <param name="Value">    The String object to be written into the specified cell.
                        </param>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.SaveFile(System.String)">
            <summary> This method saves the currently open Microsoft Excel file. </summary>
            <param name="ExcelFileName"> The full name and path for the Microsoft Excel file to save.
                             </param>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.CloseFile">
            <summary> This method closes the currently open Microsoft Excel file. </summary>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.OpenFile(System.String)">
            <summary> This method opens a Microsoft Excel file for editing. </summary>
            <param name="ExcelFileName"> The full name and path for the Microsoft Excel file to open.
                             </param>
            <returns> True if the file was opened correctly, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.ExcelFileManager.#ctor">
            <summary> Initializes a new instance of the ExcelFileManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.ExcelFileManager">
            <summary> This class is provided as a utility for working with Microsoft Excel files. </summary>
        </member>
        <member name="F:Mastercam.Operations.BlockDrillOperation.BlockIDNumber">
            <summary> Gets or sets the block ID number being used in the current block drilling operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.BlockDrillOperation.BlockLibraryName">
            <summary> Gets or sets the block drill library name used in the current block drilling operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.BlockDrillOperation.BreakThrough">
            <summary> Gets or sets the value of the break through depth to be used in the current block
          drilling operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.BlockDrillOperation.FinishAmount">
            <summary> Gets or sets the value of the finishing amount to be used in the current block drilling
          operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.BlockDrillOperation.RoughAmount">
            <summary> Gets or sets the value of the roughing amount to be used in the current block drilling
          operation.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.BlockDrillOperation.Commit(System.Boolean)">
            <summary> This method commits the current Block Drill operation to the Mastercam database. </summary>
            <param name="includePoints"> true to update any points assigned to the operation. </param>
            <remarks> If you know that you've not altered the points used by this operation,
		  you may wish to used this &gt;.Commit(false). </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.BlockDrillOperation.Commit">
            <summary> This method commits the current Block Drill operation to the Mastercam database.
          </summary>
            <remarks> This commit also updates any the points used by this operation.
		   If you know that do not want the points touched during the commit,
		   you may wish to use the .Commit(false) method overload. </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.BlockDrillOperation.#ctor">
            <summary> Initializes a new instance of the BlockDrillOperation class. </summary>
            <remarks> This creates a new block drill toolpath operation with default settings. </remarks>
        </member>
        <member name="M:Mastercam.Operations.BlockDrillOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads the default values for a given operation object from the operation passed in.</summary>
            <param name="Op">The operation structure to use as defaults for this operation object.</param>
        </member>
        <member name="M:Mastercam.Operations.BlockDrillOperation.CommitOperation(System.Boolean)">
            <summary> Commits the operation. </summary>
            <param name="includePoints"> true to include, false to exclude touching the points during the commit. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.BlockDrillOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the BlockDrillOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from the Mastercam
           database and use that to initialize this operation object.
    <para> If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Operations.BlockDrillOperation.LoadDefaults">
            <summary>Loads the default values for a given operation object.</summary>
        </member>
        <member name="M:Mastercam.Operations.BlockDrillOperation.GetBlockDrillTool(System.String,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method takes a block drill library name and gets a block drill. </summary>
            <param name="LibraryName"> The path and name of the block library file to get the tool from.
                           </param>
            <param name="Tool">        [out] The tool found, if one was found. </param>
            <returns> True if a block drill was found; else false if not. </returns>
        </member>
        <member name="T:Mastercam.Operations.BlockDrillOperation">
            <summary> This class is used for working with block drilling toolpath operations. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.OffsetSurface.BaseSurface">
            <summary> Gets or sets this surface's base surface geometry. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.OffsetSurface.DistanceOffset">
            <summary> Gets or sets the offset distance from this surface's base surface. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.OffsetSurface.NormalDirection">
            <summary> Gets or sets the vector representing the direction of this surface's normal vector.
          </summary>
        </member>
        <member name="M:Mastercam.Surfaces.OffsetSurface.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given surface geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The surface geometry entity to use as defaults for this
                   surface geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Surfaces.OffsetSurface.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a surface geometry entity to the Mastercam database. </summary>
            <param name="Ent"> [in,out] The surface geometry entity to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Surfaces.OffsetSurface.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the OffsetSurface class. </summary>
            <remarks> Attempts to retrieve a surface geometry entity with the given ID from the Mastercam
          database and use that to initialize this surface geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the surface geometry entity to look up in the Mastercam database.
               </param>
        </member>
        <member name="T:Mastercam.Surfaces.OffsetSurface">
            <summary> This class is used for working with offset surfaces within Mastercam. </summary>
        </member>
        <member name="P:Mastercam.Solids.SphereSolid.EndAngle">
            <summary> Gets or sets the location of the ending point for drawing this sphere
          primitive solid as an angle, in degrees, from the base point.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.SphereSolid.StartAngle">
            <summary> Gets or sets the location of the starting point for drawing this sphere
          primitive solid as an angle, in degrees, from the base point.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.SphereSolid.Radius">
            <summary> Gets or sets the distance of the outer edge of the sphere from this sphere
          primitive solid's base point.
          </summary>
        </member>
        <member name="M:Mastercam.Solids.SphereSolid.#ctor">
            <summary> Initializes a new instance of the SphereSolid class. </summary>
            <remarks> This constructs a new spherical solid object with default parameters.
   <para> The default parameters of a sphere solid are for a full (360 degree) sphere
          with the center at the WCS origin, (0.0, 0.0, 0.0), and with a radius of 0.5. </para></remarks>
        </member>
        <member name="M:Mastercam.Solids.SphereSolid.LoadDefaults">
            <summary> Loads the default values for a given solid geometry object. </summary>
        </member>
        <member name="M:Mastercam.Solids.SphereSolid.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given solid geometry object from the
          solid geometry entity passed in.
          </summary>
            <param name="Ent"> The geometry entity to use as defaults for this solid geometry object. </param>
        </member>
        <member name="M:Mastercam.Solids.SphereSolid.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SLD_PRIMITIVE_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a solid geometry entity to the Mastercam database. </summary>
            <param name="Ent">    The solid geometry entity to be committed. </param>
            <param name="Params"> The solid parameters to initialize the object with. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Solids.SphereSolid.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the SphereSolid class. </summary>
            <remarks> Attempts to retrieve a solid geometry entity with the given ID from the Mastercam
          database and use that to initialize this solid geometry object.
          If no matching solid geometry entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the solid geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="T:Mastercam.Solids.SphereSolid">
            <summary> This class is used for working with sphere shaped primitive solids. </summary>
        </member>
        <member name="M:Mastercam.Surfaces.LoftedSurface.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given surface geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The surface geometry entity to use as defaults for this
                   surface geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Surfaces.LoftedSurface.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a surface geometry entity to the Mastercam database. </summary>
            <param name="Ent"> [in,out] The surface geometry entity to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Surfaces.LoftedSurface.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the LoftedSurface class. </summary>
            <remarks> Attempts to retrieve a surface geometry entity with the given ID from the Mastercam
          database and use that to initialize this surface geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the surface geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="T:Mastercam.Surfaces.LoftedSurface">
            <summary> This class is used for working with lofted surfaces within Mastercam. </summary>
            <remarks> Due to the complex nature of working with lofted surfaces, the internal data of a
          lofted surface is unavailable in this version of the NET-Hook API.
          </remarks>
        </member>
        <member name="F:Mastercam.Support.UI.MastercamWindow.hwnd">
            <summary> The Window Handle. </summary>
        </member>
        <member name="M:Mastercam.Support.UI.MastercamWindow.SendEscapeKeyPress">
            <summary> Sends an Escape key press to Mastercam (if it has the focus). </summary>
        </member>
        <member name="M:Mastercam.Support.UI.MastercamWindow.SetFocusToMastercam">
            <summary> Sets the input focus to Mastercam. </summary>
            <remarks> This is something you would normally do not need to do.
		  A situation when you would is...
		  Your add-in is running a modeless dialog. 
		  You allow the user to select some entities via some action from your dialog.
		  You are not hiding your dialog during this process.
		  Now is when you will need this to set the focus to Mastercam. </remarks>
            <returns> True if it succeeds to send the set focus request, false if not. </returns>
        </member>
        <member name="P:Mastercam.Support.UI.MastercamWindow.Handle">
            <summary> Gets the handle to the window represented by the implementer. </summary>
        </member>
        <member name="M:Mastercam.Support.UI.MastercamWindow.#ctor(System.IntPtr)">
            <summary> Initializes a new instance of the WindowWrapper class. </summary>
            <param name="handle"> The handle. </param>
        </member>
        <member name="M:Mastercam.Support.UI.MastercamWindow.GetHandle">
            <summary> Gets the Mastercam window handle.
          Wrapped as an IWin32Window for use with .NET forms. </summary>
            <returns> The Mastercam main window handle, else nullptr if it fails. </returns>
        </member>
        <member name="T:Mastercam.Support.UI.MastercamWindow">
            <summary> This class implements the IWin32Window interface. </summary>
            <remarks> You can use this as the parent of a modeless dialog.
		  So when you hide/show your modeless dialog, 
		  when you reshow it, it pops up on top of Mastercam. </remarks>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryInteractionManager.DeleteDuplicates(System.Boolean)">
            <summary> This method deletes all duplicates in the current drawing. </summary>
            <param name="silent"> true for silent (no dialog) operation. </param>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryInteractionManager.CombineArcsByViews">
            <summary> This method combines arcs in parallel views. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryInteractionManager.#ctor">
            <summary> Initializes a new instance of the GeometryInteractionManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.GeometryUtility.GeometryInteractionManager">
            <summary> This class is used for performing graphics-related tasks and activities. </summary>
        </member>
        <member name="P:Mastercam.Posting.PostingManager.PostProcessorArguments">
            <summary> Gets or sets the current post processor arguments in Mastercam.
          </summary>
        </member>
        <member name="M:Mastercam.Posting.PostingManager.#ctor">
            <summary> Initializes a new instance of the PostingManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Posting.PostingManager">
            <summary> This class is used for working with Mastercam post processor settings. </summary>
            <remarks> It allows for passing (3) string variables from a Post Processor to a NET-Hook,
          and also passing (3) values back from the NET-Hook to the Post. </remarks>
        </member>
        <member name="F:Mastercam.Posting.Types.PostProcessorArgumentsType.Argument3">
            <summary> Gets or sets the third post processor argument. </summary>
        </member>
        <member name="F:Mastercam.Posting.Types.PostProcessorArgumentsType.Argument2">
            <summary> Gets or sets the second post processor argument. </summary>
        </member>
        <member name="F:Mastercam.Posting.Types.PostProcessorArgumentsType.Argument1">
            <summary> Gets or sets the first post processor argument. </summary>
        </member>
        <member name="M:Mastercam.Posting.Types.PostProcessorArgumentsType.op_Inequality(Mastercam.Posting.Types.PostProcessorArgumentsType,Mastercam.Posting.Types.PostProcessorArgumentsType)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Posting.Types.PostProcessorArgumentsType.op_Equality(Mastercam.Posting.Types.PostProcessorArgumentsType,Mastercam.Posting.Types.PostProcessorArgumentsType)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Posting.Types.PostProcessorArgumentsType.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Posting.Types.PostProcessorArgumentsType.Equals(Mastercam.Posting.Types.PostProcessorArgumentsType,Mastercam.Posting.Types.PostProcessorArgumentsType)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Posting.Types.PostProcessorArgumentsType">
            <summary> This class represents the data needed to represent a polygon. </summary>
        </member>
        <member name="M:Mastercam.Surfaces.TrimmedSurface.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given surface geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The surface geometry entity to use as defaults for this
                   surface geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Surfaces.TrimmedSurface.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a surface geometry entity to the Mastercam database. </summary>
            <param name="Ent"> [in,out] The surface geometry entity to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Surfaces.TrimmedSurface.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the TrimmedSurface class. </summary>
            <remarks> Attempts to retrieve a surface geometry entity with the given ID from the Mastercam
          database and use that to initialize this surface geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the surface geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="T:Mastercam.Surfaces.TrimmedSurface">
            <summary> This class is used for working with trimmed surfaces within Mastercam. </summary>
            <remarks> Due to the complex nature of working with trimmed surfaces, the internal data of a
          trimmed surface is unavailable in this version of the NET-Hook API.
          </remarks>
        </member>
        <member name="M:Mastercam.IO.ViewManager.RefreshPlanesManager">
            <summary> Updates the plane manager dialog. </summary>
        </member>
        <member name="P:Mastercam.IO.ViewManager.ConstructionDepth">
            <summary> Gets or sets the current construction depth.</summary>
        </member>
        <member name="P:Mastercam.IO.ViewManager.CoordinateDisplay">
            <summary> Gets or set the plane (view) coordinate display mode. </summary>
            <param name="settings"> MILL_COORD, LATHE_COORD_X or LATHE_COORD_D. </param>
            <value> If the setting value is not one of the these valid choices -
<para>  The setting will default to the MILL_COORD display. </para><list type="bullet"><item> 0 = MILL_COORD     for Mill coordinates: XYZ </item><item> 1 = LATHE_COORD_X  for Lathe radial coordinates: XZY </item><item> 2 = LATHE_COORD_D  for Lathe diameter coordinates: DZY </item></list></value>
        </member>
        <member name="P:Mastercam.IO.ViewManager.CplaneFollowsWcs">
            <summary> Gets or sets a value indicating the setting of the
          'Set Cplane follow WCS' rule'.
          </summary>
            <value> true to enable, false to disable. </value>
        </member>
        <member name="P:Mastercam.IO.ViewManager.GplaneFollowsWcs">
            <summary> Gets or sets a value indicating the setting of the
          'Set Gplane follow WCS' rule'.
          </summary>
            <value> true to enable, false to disable. </value>
        </member>
        <member name="P:Mastercam.IO.ViewManager.CplaneTopWhenGplaneIso">
            <summary> Gets or sets a value indicating the setting of the
          'Set Cplane to TOP when Gplane is set to ISO rule'.
          </summary>
            <value> true to enable, false to disable. </value>
        </member>
        <member name="P:Mastercam.IO.ViewManager.CplaneFollowsGplane">
            <summary> Gets or sets a value indicating the setting of the 'Cplane follow Gplane rule'.
          </summary>
            <value> true to enable, false to disable. </value>
        </member>
        <member name="P:Mastercam.IO.ViewManager.WorkCoordinateSystem">
            <summary> Gets or sets the current WCS view. </summary>
        </member>
        <member name="P:Mastercam.IO.ViewManager.TPlane">
            <summary> Gets or sets the current tool plane view. </summary>
        </member>
        <member name="P:Mastercam.IO.ViewManager.CPlane">
            <summary> Gets or sets the current construction plane view. </summary>
        </member>
        <member name="P:Mastercam.IO.ViewManager.GraphicsView">
            <summary> Gets or sets the current graphics view.</summary>
        </member>
        <member name="M:Mastercam.IO.ViewManager.GetAllViews(System.Boolean)">
            <summary> Gets all of the named planes (views) in the database. </summary>
            <param name="excludeSystemViews"> True to exclude, false to include the system views. </param>
            <returns> A list of all views. </returns>
        </member>
        <member name="M:Mastercam.IO.ViewManager.SetPlaneEqualToWCS">
            <summary> Sets the (other) planes equal to current WCS. </summary>
            <remarks> Equivalent to selecting 'Planes = WCS' from StatusBar Planes option. </remarks>
        </member>
        <member name="M:Mastercam.IO.ViewManager.ConvertToViewCoordinates(Mastercam.Math.Point3D,Mastercam.Database.MCView)">
            <summary> This method converts a given set of 3D world coordinates to view coordinates. </summary>
            <param name="WorldCoordinates"> The world coordinates to convert to view coordinates. </param>
            <param name="View">             The view the input coordinates are being transformed to.
                                If the supplied View does not identify a "valid" defined view,
                                the view used will default to the active construction plane.
                                </param>
            <returns> The converted view coordinates. </returns>
        </member>
        <member name="M:Mastercam.IO.ViewManager.ConvertToViewCoordinates(Mastercam.Math.Point3D,System.Int16)">
            <summary> This method converts a given set of 3D world coordinates to view coordinates.
          </summary>
            <remarks> Use this method for transforming coordinates when you have a View 'Number'.
          (e.g. An Arc Geometry's <see cref="P:Mastercam.Curves.ArcGeometry.ViewNumber" />) </remarks>
            <param name="WorldCoordinates"> The world coordinates to convert to view coordinates. </param>
            <param name="ViewNumber">       The view number of the view the input coordinates are being
                                transformed to.
                                If the supplied View Number does not identify a "valid" defined view,
                                the view used will default to the active construction plane.
                                </param>
            <returns> The converted view coordinates. </returns>
        </member>
        <member name="M:Mastercam.IO.ViewManager.ConvertToViewCoordinates(Mastercam.Math.Point3D)">
            <summary> This method converts a given set of 3D world coordinates to view coordinates. </summary>
            <remarks> Converts the world coordinates assuming the point is to be converted to the current
          construction plane view.
          </remarks>
            <param name="WorldCoordinates"> The world coordinates to convert to view coordinates. </param>
            <returns> The converted view coordinates. </returns>
        </member>
        <member name="M:Mastercam.IO.ViewManager.ConvertToWorldCoordinates(Mastercam.Math.Point3D,Mastercam.Database.MCView)">
            <summary> This method converts a given set of 3D view coordinates to world coordinates. </summary>
            <param name="ViewCoordinates"> The view coordinates to convert to world coordinates. </param>
            <param name="View">            The view the input coordinates are being transformed from.
                               If the supplied View does not identify a "valid" defined view,
                               the view used will default to the active construction plane.
                               </param>
            <returns> The converted world coordinates. </returns>
        </member>
        <member name="M:Mastercam.IO.ViewManager.ConvertToWorldCoordinates(Mastercam.Math.Point3D,System.Int16)">
            <summary> This method converts a given set of 3D view coordinates to world coordinates. </summary>
            <remarks> Use this method for transforming coordinates when you have a View 'Number'.
          (e.g. An Arc Geometry's <see cref="P:Mastercam.Curves.ArcGeometry.ViewNumber" />) </remarks>
            <param name="ViewCoordinates"> The view coordinates to convert to world coordinates. </param>
            <param name="ViewNumber">      The view number of the view the input coordinates are being
                               transformed from.
                               If the supplied View Number does not identify a "valid" defined view,
                               the view used will default to the active construction plane.
                               </param>
            <returns> The converted world coordinates. </returns>
        </member>
        <member name="M:Mastercam.IO.ViewManager.ConvertToWorldCoordinates(Mastercam.Math.Point3D)">
            <summary> This method converts a given set of 3D view coordinates to world coordinates. </summary>
            <remarks> Converts the view coordinates assuming they're in the current construction plane view.
          </remarks>
            <param name="ViewCoordinates"> The view coordinates to convert to world coordinates. </param>
            <returns> The converted world coordinates. </returns>
        </member>
        <member name="M:Mastercam.IO.ViewManager.IsOriginOn(Mastercam.IO.Types.ViewType)">
            <summary> Query if the origin of the specified ViewType is enabled. (a non-zero origin) </summary>
            <remarks> Even though GPlane is a ViewType, it does not have an origin.
		  If given ViewType.GPLANE, this will always return false. </remarks>
            <param name="viewType"> The type of the view to query (CPLANE, TPLANE or WCSPLANE). </param>
            <returns> True if the origin is a non-zero origin point, false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.ViewManager.IsConstructionView3D">
            <summary> This method determines whether or not the current construction view is 3D or not.
          </summary>
            <returns> True if the current construction view is 3D and false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.ViewManager.#ctor">
            <summary> Private Manager Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </summary>
        </member>
        <member name="T:Mastercam.IO.ViewManager">
            <summary> This class handles the interaction and manipulation of Mastercam view settings. </summary>
        </member>
        <member name="F:Mastercam.Solids.BlockSolid.ZWidth">
            <summary> Get or sets the width of the block primitive solid along it's Z axis. </summary>
        </member>
        <member name="F:Mastercam.Solids.BlockSolid.YWidth">
            <summary> Get or sets the width of the block primitive solid along it's Y axis. </summary>
        </member>
        <member name="F:Mastercam.Solids.BlockSolid.XWidth">
            <summary> Get or sets the width of the block primitive solid along it's X axis. </summary>
        </member>
        <member name="M:Mastercam.Solids.BlockSolid.#ctor">
            <summary> Initializes a new instance of the BlockSolid class. </summary>
            <remarks> This constructs a new block solid object with default parameters.
   <para> The default parameters of a block solid are for a 1" x 1" x 1" cube,
          with the center at the WCS origin, (0.0, 0.0, 0.0). </para></remarks>
        </member>
        <member name="M:Mastercam.Solids.BlockSolid.LoadDefaults">
            <summary> Loads the default values for a given solid geometry object. </summary>
        </member>
        <member name="M:Mastercam.Solids.BlockSolid.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given solid geometry object from the solid geometry
          entity passed in.
          </summary>
            <param name="Ent"> The geometry entity to use as defaults for this solid geometry
                   object.
                   </param>
        </member>
        <member name="M:Mastercam.Solids.BlockSolid.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SLD_PRIMITIVE_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a solid geometry entity to the Mastercam database. </summary>
            <param name="Ent">    The solid geometry entity to be committed. </param>
            <param name="Params"> The solid parameters to initialize the object with. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Solids.BlockSolid.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the BlockSolid class. </summary>
            <remarks> Attempts to retrieve a solid geometry entity with the given ID from the Mastercam
          database and use that to initialize this solid geometry object.
          If no matching solid geometry entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the solid geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="T:Mastercam.Solids.BlockSolid">
            <summary> This class is used for working with block shaped primitive solids. </summary>
        </member>
        <member name="P:Mastercam.Solids.CylinderSolid.EndAngle">
            <summary> Gets or sets the location of the ending point for drawing this cylinder
          primitive solid as an angle, in degrees, from the base point.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.CylinderSolid.StartAngle">
            <summary> Gets or sets the location of the starting point for drawing this cylinder
          primitive solid as an angle, in degrees, from the base point.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.CylinderSolid.Height">
            <summary> Gets or sets the height of the cylinder, from the base point
          (specifically, the base point's Y value) to the top of the cylinder.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.CylinderSolid.Radius">
            <summary> Gets or sets the distance of the outer edge of the cylinder from this cylinder
          primitive solid's base point.
          </summary>
        </member>
        <member name="M:Mastercam.Solids.CylinderSolid.#ctor">
            <summary> Initializes a new instance of the CylinderSolid class. </summary>
            <remarks> This constructs a new cylindrical solid object with default parameters.
   <para> The default parameters of a sphere solid are for a full (360 degree) sphere with
          the center at the WCS origin, (0.0, 0.0, 0.0), with a radius of 0.5, and with a
          height of 1.0. </para></remarks>
        </member>
        <member name="M:Mastercam.Solids.CylinderSolid.LoadDefaults">
            <summary> Loads the default values for a given solid geometry object. </summary>
        </member>
        <member name="M:Mastercam.Solids.CylinderSolid.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given solid geometry object from the solid geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The geometry entity to use as defaults for this solid geometry
                object.
                </param>
        </member>
        <member name="M:Mastercam.Solids.CylinderSolid.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SLD_PRIMITIVE_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a solid geometry entity to the Mastercam database. </summary>
            <param name="Ent">    [in,out] The solid geometry entity to be committed. </param>
            <param name="Params"> [in,out] The solid parameters to initialize the object with. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Solids.CylinderSolid.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the CylinderSolid class. </summary>
            <remarks> Attempts to retrieve a solid geometry entity with the given ID from the Mastercam
          database and use that to initialize this solid geometry object.
          If no matching solid geometry entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the solid geometry entity to look up in the Mastercam database.
               </param>
        </member>
        <member name="T:Mastercam.Solids.CylinderSolid">
            <summary> This class is used for working with cylinder shaped primitive solids. </summary>
        </member>
        <member name="P:Mastercam.Solids.ConeSolid.EndAngle">
            <summary> Gets or sets the location of the ending point for drawing this cone primitive
          solid as an angle, in degrees, from the base point.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.ConeSolid.StartAngle">
            <summary> Gets or sets the location of the starting point for drawing this cone
          primitive solid as an angle, in degrees, from the base point.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.ConeSolid.Height">
            <summary> Gets or sets the height of the cone, from the base point
         (specifically, the base point's Y value) to the top of the cone.
         </summary>
        </member>
        <member name="P:Mastercam.Solids.ConeSolid.TopRadius">
            <summary> Gets or sets the distance of the outer edge of the cone from the center of
          the cone at the very top of the cone, set by this cone's height value.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.ConeSolid.BaseRadius">
            <summary> Gets or sets the distance of the outer edge of the cone from this cone's
          base point at the base of the cone.
          </summary>
        </member>
        <member name="M:Mastercam.Solids.ConeSolid.#ctor">
            <summary> Initializes a new instance of the ConeSolid class. </summary>
            <remarks> This constructs a new conical solid object with default parameters.
          The default parameters of a conical solid are for a full (360 degree) cone with the
          center at the WCS origin, (0.0, 0.0, 0.0), with a radius at the base of 0.5 and
          at the top of 0.0, and with a height of 1.0.
          </remarks>
        </member>
        <member name="M:Mastercam.Solids.ConeSolid.LoadDefaults">
            <summary> Loads the default values for a given solid geometry object. </summary>
        </member>
        <member name="M:Mastercam.Solids.ConeSolid.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given solid geometry object from the solid geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The geometry entity to use as defaults for this solid geometry
                   object.
                   </param>
        </member>
        <member name="M:Mastercam.Solids.ConeSolid.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SLD_PRIMITIVE_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a solid geometry entity to the Mastercam database. </summary>
            <param name="Ent">    [in,out] The solid geometry entity to be committed. </param>
            <param name="Params"> [in,out] The solid parameters to initialize the object with. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Solids.ConeSolid.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the ConeSolid class. </summary>
            <remarks> Attempts to retrieve a solid geometry entity with the given ID from the Mastercam
          database and use that to initialize this solid geometry object.
          If no matching solid geometry entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the solid geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="T:Mastercam.Solids.ConeSolid">
            <summary> This class is used for working with cone shaped primitive solids. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.RevolvedSurface.BaseCurve">
            <summary> Gets or sets the geometry object representing the base curve geometry for this revolved surface.
          </summary>
        </member>
        <member name="P:Mastercam.Surfaces.RevolvedSurface.RevolutionAxisLine">
            <summary> Gets or sets the line object of the axis of revolution for this revolved surface.
          </summary>
        </member>
        <member name="P:Mastercam.Surfaces.RevolvedSurface.EndAngle">
            <summary> Gets or sets the ending angle of the revolved surface's drawing in radians. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.RevolvedSurface.StartAngle">
            <summary> Gets or sets the starting angle of the revolved surface's drawing in radians. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.RevolvedSurface.AxisOrigin">
            <summary> Gets or sets the origin of the axis line. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.RevolvedSurface.AxisVector">
            <summary> Gets or sets the axis vector. </summary>
        </member>
        <member name="M:Mastercam.Surfaces.RevolvedSurface.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given surface geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The surface geometry entity to use as defaults for this
                   surface geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Surfaces.RevolvedSurface.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a surface geometry entity to the Mastercam database. </summary>
            <param name="Ent"> [in,out] The surface geometry entity to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Surfaces.RevolvedSurface.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the RevolvedSurface class. </summary>
            <remarks> Attempts to retrieve a surface geometry entity with the given ID from the Mastercam
          database and use that to initialize this surface geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the surface geometry entity to look up in the Mastercam database.
               </param>
        </member>
        <member name="T:Mastercam.Surfaces.RevolvedSurface">
            <summary> This class is used for working with revolved surface geometry in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.UnRegisterVariable(System.ValueType!System.Double!System.Runtime.CompilerServices.IsBoxed)">
            <summary> This method un-registers a variable. </summary>
            <param name="Variable"> The variable to un-register. </param>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.UnRegisterVariableEnglish(System.ValueType!System.Double!System.Runtime.CompilerServices.IsBoxed)">
            <summary> This method un-registers a English variable. </summary>
            <param name="Variable"> The variable to un-register. </param>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.UnRegisterVariableMetric(System.ValueType!System.Double!System.Runtime.CompilerServices.IsBoxed)">
            <summary> This method un-registers a Metric variable. </summary>
            <param name="Variable"> The variable to un-register. </param>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.ResetVariable(System.ValueType!System.Double!System.Runtime.CompilerServices.IsBoxed,System.Double,System.Boolean)">
            <summary> This method resets a variable to a new value. </summary>
            <param name="Variable"> The variable to reset. </param>
            <param name="NewValue"> The new value to store with the variable. </param>
            <param name="IsMetric"> True if the value is to be stored as the Metric value, else false
                        if it's to be stored to the English value.
                        </param>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.RegisterVariableMetric(System.ValueType!System.Double!System.Runtime.CompilerServices.IsBoxed,System.Double)">
            <summary> This method registers a new Metric variable. </summary>
            <param name="Variable">     The variable to register. </param>
            <param name="DefaultValue"> The default value for this Metric variable. </param>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.RegisterVariableEnglish(System.ValueType!System.Double!System.Runtime.CompilerServices.IsBoxed,System.Double)">
            <summary> This method registers a new English variable. </summary>
            <param name="Variable">     The variable to register. </param>
            <param name="DefaultValue"> The default value for this English variable. </param>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.RegisterVariable(System.ValueType!System.Double!System.Runtime.CompilerServices.IsBoxed,System.Double,System.Double)">
            <summary> This method registers a new variable. </summary>
            <param name="Variable">       The variable to register. </param>
            <param name="MetricDefault">  The default Metric value for this variable. </param>
            <param name="EnglishDefault"> The default English value for this variable. </param>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.RefreshVariable(System.ValueType!System.Double!System.Runtime.CompilerServices.IsBoxed)">
            <summary> This method refreshes a specified variable. </summary>
            <param name="Variable"> The variable to refresh. </param>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.FreeVariableRegistry">
            <summary> This method frees the current Mastercam variable registry. </summary>
        </member>
        <member name="M:Mastercam.Support.RegistryVariableManager.#ctor">
            <summary> Initializes a new instance of the RegistryVariableManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.RegistryVariableManager">
            <summary> This class is used for working with Mastercam registry variables. </summary>
        </member>
        <member name="M:Mastercam.Support.RegistryManager.ChangeConfiguration(System.Boolean,Mastercam.Support.Types.ConfigurationChangeType,System.Boolean)">
            <summary> This method is used for changing the system metric configuration. </summary>
            <param name="Metric">           True and the system is changed to Metric, else
                                false and the system is changed to English.
                                </param>
            <param name="Change">           How the settings are to be changed. </param>
            <param name="RegenerateSolids"> True and solids are regenerated with the new settings,
                                else false if solids are not to be regenerated.
                                </param>
        </member>
        <member name="M:Mastercam.Support.RegistryManager.ReloadConfigurationFile">
            <summary> This method reloads Mastercam's configuration file. </summary>
        </member>
        <member name="M:Mastercam.Support.RegistryManager.LastInstalledVersion">
            <summary> This method is for retrieving the most recently installed version of Mastercam.
          </summary>
            <returns> A string containing the most recently installed version of Mastercam's name.
          </returns>
        </member>
        <member name="M:Mastercam.Support.RegistryManager.MastercamKey">
            <summary> This method gets the registry path and key name for the instance of Mastercam
          currently running.
          </summary>
            <returns> The string value of the registry path and name for the currently running instance
          of Mastercam.
          </returns>
        </member>
        <member name="M:Mastercam.Support.RegistryManager.GetUserType">
            <summary> This method returns the currently active "user" type. </summary>
            <returns> The user type Mastercam is running in. </returns>
        </member>
        <member name="M:Mastercam.Support.RegistryManager.GetCurrentProduct">
            <summary> This method returns the currently active "product" type in Mastercam. </summary>
            <returns> The product mode Mastercam is currently in. </returns>
            <remarks> Note that this does not return information regarding any active machines, but
          rather information regarding the product itself and could include modes
          such as Drafting and Design.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.RegistryManager.GetSerialNumber">
            <summary> Gets the serial number from the Mastercam license. </summary>
            <returns> The Serial number. </returns>
        </member>
        <member name="M:Mastercam.Support.RegistryManager.#ctor">
            <summary> Initializes a new instance of the RegistryManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.RegistryManager">
            <summary> This class provides the methods for working with the general parameters of the registry.
          </summary>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.ValidRange(System.Int32)">
            <summary> Range check incoming RGB values (Must be 0-255). </summary>
            <param name="value"> The value to be checked. </param>
            <returns> A value guaranteed to be within the valid range. </returns>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.op_Inequality(Mastercam.Support.Types.MastercamColor,Mastercam.Support.Types.MastercamColor)">
            <summary> This is a static inequality operator overload for the purposes of comparing these color objects.
          </summary>
            <param name="color1"> This is the first mask to compare. </param>
            <param name="color2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.op_Equality(Mastercam.Support.Types.MastercamColor,Mastercam.Support.Types.MastercamColor)">
            <summary> This is a static equality operator overload for the purposes of comparing these color objects.
          </summary>
            <param name="color1"> This is the first mask to compare. </param>
            <param name="color2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.Equals(Mastercam.Support.Types.MastercamColor,Mastercam.Support.Types.MastercamColor)">
            <summary> This is a static equality method for the purposes of comparing MastercamColor objects.
          </summary>
            <param name="color1"> This is the first color to compare. </param>
            <param name="color2"> This is the second color to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.ToString">
            <summary> Convert this object into a string representation. </summary>
            <returns> A text string that represents this object's value. </returns>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.UpdateMastercamColorMap(System.Collections.Generic.Dictionary`2{System.Int32,Mastercam.Support.Types.MastercamColor})">
            <summary> Updates the Mastercam color map described by colors  in the supplied collection. </summary>
            <remarks> The Key is the color index number and the Value is the Color to assign. </remarks>
            <param name="colors"> A collection of Mastercam colors. </param>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.UpdateMastercamColorMap(System.Collections.Generic.Dictionary`2{System.Int32,System.Drawing.Color})">
            <summary> Updates the Mastercam color map described by the colors in the supplied collection. </summary>
            <remarks> The Key is the color index number and the Value is the Color to assign. </remarks>
            <param name="colors"> A collection of .NET colors. </param>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.GetColorRGB(System.Int32,Mastercam.Support.Types.MastercamColor@)">
            <summary> Gets color RGB of the specified Mastercam color number. </summary>
            <param name="colorNumber"> The color number index (0-255). </param>
            <param name="rgb">         [out] A Mastercam color object containing the RGB values. </param>
            <returns> true if it succeeds, false if it fails (the color number was not in range). </returns>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.GetMastercamColor(System.Int32)">
            <summary> Gets color RGB of the specified Mastercam color number. </summary>
            <remarks> Deprecated. Please use the <see cref="M:Mastercam.Support.Colors.GetColorAtIndex(System.Byte)" /> class. </remarks>
            <param name="colorNumber"> The color number index (0-255). </param>
            <returns> The color data, else null if the colorNumber was not in range. </returns>
        </member>
        <member name="M:Mastercam.Support.Types.MastercamColor.#ctor(System.Drawing.Color)">
            <summary> Initializes a new MastercamColor from a .NET Color RGB values . </summary>
            <param name="color"> The Color used to initialize the RGB values. </param>
        </member>
        <member name="P:Mastercam.Support.Types.MastercamColor.B">
            <summary> Gets or sets the Blue component of the color. </summary>
        </member>
        <member name="P:Mastercam.Support.Types.MastercamColor.G">
            <summary> Gets or sets the Green component of the color. </summary>
        </member>
        <member name="P:Mastercam.Support.Types.MastercamColor.R">
            <summary> Gets or sets the Red component of the color. </summary>
        </member>
        <member name="T:Mastercam.Support.Types.MastercamColor">
            <summary> A Mastercam RGB color. </summary>
            <remarks> This class has been deprecated, Please use the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.ConvertViewSheetData(Mastercam.Support.ViewSheets.ViewSheetData,ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a Managed ViewSheetData package to the native format. </summary>
            <param name="dataIn">  The managed representation of the ViewSheetData. </param>
            <param name="dataOut"> The resulting unmanaged representation of the ViewSheetData. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.#ctor">
            <summary> Initializes a new instance of the ViewSheets class. </summary>
            <remarks> Private Constructor. </remarks>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.SetAllSaveToViewSheetSettings(System.Boolean)">
            <summary> Sets the current state for all "Save to ViewSheets" settings. </summary>
            <remarks> The is equivalent to Enable/Disable All. </remarks>
            <param name="state"> The desired on/off state for all settings. </param>
            <returns> A ViewSheetSettings with the requested state, else null if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.SetSaveToViewSheetSettings(Mastercam.Support.ViewSheets.ViewSheetSettings)">
            <summary> Sets the current "Save to ViewSheets" settings. </summary>
            <param name="settings"> The options for controlling the  operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.GetSaveToViewSheetSettings(Mastercam.Support.ViewSheets.ViewSheetSettings@)">
            <summary> Gets the current "Save to ViewSheets" settings. </summary>
            <param name="settings"> [out] The options for controlling the save operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.ShowSheetSettings">
            <summary> Displays the ViewSheet settings dialog. </summary>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.IsNameValid(System.String)">
            <summary> Query if 'name' is valid name (not already used). </summary>
            <param name="name"> The name to check. </param>
            <returns> true if the name is valid, false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.CreateCopySheet(System.Int32)">
            <summary> Creates a copy of the specified ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet to be copied. </param>
            <returns> The (zero-based list) index of the new ViewSheet, else -1 if failed. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.SetViewSheetBookmarkData(System.Int32,Mastercam.Support.ViewSheets.ViewSheetData)">
            <summary> Sets the bookmark data package for the specified ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <param name="data">       [out] The data package for the bookmark. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.GetViewSheetBookmarkData(System.Int32,Mastercam.Support.ViewSheets.ViewSheetData@)">
            <summary> Gets the data bookmark package for the specified ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <param name="data">       [out] The data package for the bookmark. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.SetViewSheetData(System.Int32,Mastercam.Support.ViewSheets.ViewSheetData)">
            <summary> Sets the data package for the specified ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <param name="data">       The data package. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.GetViewSheetData(System.Int32,Mastercam.Support.ViewSheets.ViewSheetData@)">
            <summary> Gets the data package for the specified ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <param name="data">       [out] The data package. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.RenameViewSheet(System.Int32,System.String)">
            <summary> Rename a ViewSheet. </summary>
            <remarks> ViewSheet names must be unique! </remarks>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <param name="name">       The new name for the specified ViewSheet. </param>
            <returns> true if it succeeds, false if it fails (invalid index or invalid name). </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.DeleteBookmark(System.Int32)">
            <summary> Deletes the bookmark on a ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails (invalid index). </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.SheetHasBookmark(System.Int32)">
            <summary> Query if a ViewSheet has bookmark. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet to be copied. </param>
            <returns> true if it does, false if it not. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.RestoreBookmark(System.Int32)">
            <summary> Restore bookmark. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet to be copied. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.SaveBookmark(System.Int32)">
            <summary> Saves a bookmark on a ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails (invalid index). </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.GetViewSheetName(System.Int32)">
            <summary> Gets the name of a ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> The name is successful, else an empty string if not. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.GetViewSheet(System.String)">
            <summary> Gets the index of a ViewSheet. </summary>
            <param name="name"> The name to search for. (case sensitive!) </param>
            <returns> The (zero-based list) index of the ViewSheet if found, else -1 </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.SetActiveViewSheet(System.Int32)">
            <summary> Sets the active ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.GetActiveViewSheet">
            <summary> Gets the index of the active ViewSheet. </summary>
            <returns> The (zero-based list) index of the active ViewSheet. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.DeleteViewSheet(System.Int32)">
            <summary> Deletes a ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails (invalid index). </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.CreateViewSheet(System.String)">
            <summary> Creates a new ViewSheet. </summary>
            <remarks> ViewSheet names must be unique! </remarks>
            <param name="name"> The name for the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.CreateViewSheet">
            <summary> Creates a new ViewSheet. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.GetSheetCount">
            <summary> Gets the ViewSheets count. </summary>
            <returns> The number of ViewSheets in the list. </returns>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.set_ViewSheetsEnabled(System.Boolean)">
            <summary> Sets the enabled state of ViewSheets in the Mastercam session </summary>
            <param name="value"> The on/off state to set. </param>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.get_ViewSheetsEnabled">
            <summary> Get the enabled status of ViewSheets in the Mastercam session. </summary>
            <returns> true if the are enabled, else false if not. </returns>
        </member>
        <member name="P:Mastercam.Support.ViewSheets.ViewSheetsEnabled">
            <summary> Gets a or sets value indicating whether the multiple view sheets are enabled. </summary>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.ViewSheetSettings.#ctor(ViewsheetSettings)">
            <summary> Initializes a new instance of a ViewSheetSettings. </summary>
            <param name="settings">The native unmanaged data used to initialize the managed. </param>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.ViewSheetSettings.#ctor">
            <summary> Initializes a new instance of a ViewSheetSettings. </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.SpaceBallPosition">
            <summary> When checked, save spaceball position </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.DisplayMode">
            <summary> When checked, save display mode settings </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.VsStockDisplay">
            <summary> When checked, save stock display settings </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.AdvToolpathDisplay">
            <summary> When checked, save advanced toolpath display settings </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.SelectedPlanes">
            <summary> When checked, save selected planes </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.SectionViewSettings">
            <summary> When checked, save section view settings </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.AutoRestore">
            <summary> Auto restore bookmark settings? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.SurfaceDensity">
            <summary> Save the Surface Density setting? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.LineWidth">
            <summary> Save the Line width? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.PointStyle">
            <summary> Save the Point style? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.LineStyle">
            <summary> Save the Line style? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.ActiveLevel">
            <summary> Save the Active level? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.Color">
            <summary> Save the Color setting? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.WcsPlane">
            <summary> Save the WCS Plane? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.Zdepth">
            <summary> Save the Construction Z Depth? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.ConstructionPlanes">
            <summary> Save the Construction Planes? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.ToolPlanes">
            <summary> Save the Tool Planes? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.SectionViews">
            <summary> Save the section view planes? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.GraphicsView">
            <summary> Save the Graphic View? </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetSettings.ConstructionMode">
            <summary> Save the 2D/3D construction mode setting? </summary>
        </member>
        <member name="T:Mastercam.Support.ViewSheets.ViewSheetSettings">
            <summary> The "Save to ViewSheets" settings. </summary>
            <remarks> Each represents the on/off state of the checkbox options. </remarks>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.ViewSheetData.#ctor(ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes a new instance of a ViewSheetDataPackage. </summary>
            <param name="data"> The "native" data to convert into a managed package. </param>
        </member>
        <member name="M:Mastercam.Support.ViewSheets.ViewSheetData.#ctor">
            <summary> Initializes a new instance of a ViewSheetDataPackage. </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderOmitInternalEdges">
            <summary> True to omit internal edges </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderOmitSmoothEdges">
            <summary> True to omit smooth edges </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderRadialAngle">
            <summary> Angle in degrees of radial hatching on primitive </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderOutlinedEdgeColor">
            <summary> The color of edges when in outline mode </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderHiddenColor">
            <summary> Alternative hidden color </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderColor">
            <summary> Render color </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderHiddenDimFactor">
            <summary> Dim percent (0 - 100) </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderHiddenFlags">
            <summary>Combination of HIDDEN_NOSHOW, HIDDEN_DIMMED, HIDDEN_DASHED </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderTessellation">
            <summary> 1 = Course, 10 = Fine </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderType">
            <summary> RENDER_WIRE, RENDER_HIDDEN, RENDER_SHADE, RENDER_OUTLINED. </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.RenderMode">
            <summary> Holds viewsheet's copy of pCurrentGraphicsView-&gt;m_CurrentRenderMode. </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.Translucent">
            <summary> Holds viewsheet's copy of global gl_fulltime_translucent flag. </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.StockDisplayType">
            <summary> keeps track of which stock display types get saved </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.StockShow">
            <summary> True if stock display is enabled, otherwise false. </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.SectionViewType">
            <summary> Keeps track of which section view types get saved in the viewsheet </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.SectionView">
            <summary> True if section view is enabled, otherwise false. </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.AdvDisplayType">
            <summary> Keeps track of which advanced toolpath display types get saved in the viewsheet </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.AdvDisplay">
            <summary> True if advanced toolpath display is enabled, otherwise false. </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.SelectedPlanes">
            <summary> List of plane IDs for planes that are currently selected </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.SbRotationPt">
            <summary> Spaceball rotation point </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.SectionPlanes">
            <summary> List of plane IDs for planes that have section property set </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.WcsPlaneID">
            <summary> WCS Plane ID# </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.GraphicsPlaneID">
            <summary> Graphics (view) Plane ID# </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.ToolPlaneID">
            <summary> Tool Plane ID# </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.ConstructionPlaneID">
            <summary> Construction Plane ID# </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.ActiveLevel">
            <summary> The active level number </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.SurfaceDensity">
            <summary> Surface Density setting </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.VisibleLevels">
            <summary> List of (visible) level numbers </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.LineWidth">
            <summary> Line width setting </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.ConstructionDepthZ">
            <summary> Construction Z depth </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.ViewportHeight">
            <summary> Graphics viewport height </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.ViewportCenter">
            <summary> Graphics viewport center point </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.WcsPlaneMatrix">
            <summary> WCS matrix </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.GraphicsPlaneMatrix">
            <summary> Graphics Plane (view) matrix </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.ToolPlaneMatrix">
            <summary> Tool Plane matrix </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.ConstructionPlaneMatrix">
            <summary> Construction Plane matrix </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.SolidColor">
            <summary> Solids color </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.SurfaceColor">
            <summary> Surface color </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.WireframeColor">
            <summary> Wireframe color </summary>
        </member>
        <member name="F:Mastercam.Support.ViewSheets.ViewSheetData.ConstructionMode3D">
            <summary> Construction Mode; true = 3D, false = 2D </summary>
        </member>
        <member name="T:Mastercam.Support.ViewSheets.ViewSheetData">
            <summary> A ViewSheet data package. </summary>
        </member>
        <member name="T:Mastercam.Support.ViewSheets">
            <summary> This class is used to work with and manage Mastercam ViewSheets. </summary>
        </member>
        <member name="F:Mastercam.Support.MastercamViewSheets.s_pWorkSheetTabControl">
            <summary> Pointer to Mastercam's work (view) sheet tab control class. </summary>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.IsValidIndex(System.Int32)">
            <summary> Query if 'index' is a valid index. </summary>
            <param name="index"> Zero-based index of the list of ViewSheets to check. </param>
            <returns> true if valid index, false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.CopyViewSheetDataPackage(ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a copy of a ViewSheetData class. </summary>
            <param name="dataIn">  The data to be copied for the ViewSheet. </param>
            <param name="dataOut"> The resulting copy. </param>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.Initialized">
            <summary> Initialized this object. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.#ctor">
            <summary> Initializes a new instance of the ViewSheets class. </summary>
            <remarks> Private Constructor. </remarks>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.ShowSheetSettings">
            <summary> Displays the ViewSheet settings dialog. </summary>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.IsNameValid(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Query if 'name' is name valid (not already used). </summary>
            <param name="name">          The name to check. </param>
            <param name="caseSensitive"> (Optional) true to do a case sensitive match. </param>
            <returns> true if the name is valid, false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.DoesSheetHaveBookmark(System.Int32)">
            <summary> Query if a ViewSheet has bookmark. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet to be copied. </param>
            <returns> true if it does, false if it not. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.RestoreBookmark(System.Int32)">
            <summary> Restore bookmark. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet to be copied. </param>
            <returns> true if it succeeds, false if it fails (invalid index). </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.CreateCopySheet(System.Int32)">
            <summary> Creates a copy of the specified ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet to be copied. </param>
            <returns> The (zero-based list) index of the new ViewSheet, else -1 if failed. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.SetViewSheetData(System.Int32,ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Sets the data package for the specific ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <param name="data">       [in] The data package. </param>
            <param name="bookmark">   (Optional) true to update the bookmark data. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.GetViewSheetData(System.Int32,ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets the data package for the specific ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <param name="data">       [out] The data package. </param>
            <param name="bookmark">   (Optional) true to retrieve the bookmark data. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.GetViewSheetName(System.Int32)">
            <summary> Gets the name of a ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> The name is successful, else and empty string if not. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.RenameViewSheet(System.Int32,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Rename a ViewSheet. </summary>
            <remarks> ViewSheet names must be unique! </remarks>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <param name="name">       The new name for the specified ViewSheet. </param>
            <returns> true if it succeeds, false if it fails (invalid index or invalid name). </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.GetViewSheet(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets the index of a ViewSheet. </summary>
            <param name="name"> The name to search for. </param>
            <param name="caseSensitive"> (Optional) true to do a case sensitive match. </param>
            <returns> The (zero-based list) index of the ViewSheet if found, else -1 </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.DeleteBookmark(System.Int32)">
            <summary> Deletes the bookmark on a ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails (invalid index). </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.SaveBookmark(System.Int32)">
            <summary> Saves a bookmark on a ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails (invalid index). </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.SetActiveViewSheet(System.Int32)">
            <summary> Sets the active ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.GetActiveViewSheet">
            <summary> Gets the index of the active ViewSheet. </summary>
            <returns> The index of the active ViewSheet. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.DeleteViewSheet(System.Int32)">
            <summary> Deletes a ViewSheet. </summary>
            <param name="sheetIndex"> The (zero-based list) index of the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails (invalid index). </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.CreateViewSheet(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new ViewSheet. </summary>
            <param name="name"> The name for the ViewSheet. </param>
            <returns> true if it succeeds, false if it fails (name already used?). </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.CreateViewSheet">
            <summary> Creates a new ViewSheet. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.GetNumSheets">
            <summary> Gets the number if ViewSheets. </summary>
            <returns> The number sheets. </returns>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.SetEnabled(System.Boolean)">
            <summary> Sets the enabled state of ViewSheets. </summary>
            <param name="state"> true to enable, false to disable. </param>
        </member>
        <member name="M:Mastercam.Support.MastercamViewSheets.Enabled">
            <summary> Query if ViewSheets are enabled. </summary>
            <returns> true if it they are, false if not. </returns>
        </member>
        <member name="T:Mastercam.Support.MastercamViewSheets">
            <summary> This class is an "unmanaged" wrapper around Mastercam's ViewSheets. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.OffsetChains(System.Collections.Generic.List`1{Mastercam.Database.Chain},Mastercam.GeometryUtility.Types.OffsetChainParameters,System.Collections.Generic.List`1{Mastercam.Database.Geometry}@)">
            <summary> Offset Chains. </summary>
            <param name="chains">		  The chains to be processed. </param>
            <param name="offsetParams">   Options for controlling the offset. </param>
            <param name="resultGeometry"> [out] A list of the resulting "new" geometry. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.OffsetChains(Mastercam.Database.Chain,Mastercam.GeometryUtility.Types.OffsetChainParameters,System.Collections.Generic.List`1{Mastercam.Database.Geometry}@)">
            <summary> Offset a single Chain. </summary>
            <param name="chain">		  The chain to be processed. </param>
            <param name="offsetParams">   Options for controlling the offset. </param>
            <param name="resultGeometry"> [out] A list of the resulting "new" geometry. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.BreakManyPieces(System.Collections.Generic.List`1{Mastercam.Database.Geometry},Mastercam.GeometryUtility.Types.BreakManyPiecesParameters,System.Collections.Generic.List`1{Mastercam.Database.Geometry}@,System.Collections.Generic.List`1{Mastercam.Database.Geometry}@)">
            <summary> Break many pieces. </summary>
            <param name="geometry">		  The geometry to be processed. This geometry must already have been committed to
							  Mastercam's database! </param>
            <param name="breakParams">    Options for controlling the break. </param>
            <param name="resultGeometry"> [out] A list of the resulting "new" geometry. </param>
            <param name="errorGeometry">  [out] A list of geometries where errors occurred (if any). </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.MoveToOrigin(Mastercam.Math.Point3D,System.Boolean)">
            <summary> Executes the "transform - move to origin" action. </summary>
            <param name="fromPoint">   The "from point" (world coordinates).. </param>
            <param name="allEntities"> True to move all entities, false move just the selected entities. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.CombineViews">
            <summary> Perform a "silent" Combine Views operation on the active database. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.MoveGroupGeometryToLevel(Mastercam.Database.Types.GroupSelectionMask,System.Int32)">
            <summary> Move 'grouped' geometry to level. </summary>
            <param name="groupType">        The type(s) of selection groups to search for. </param>
            <param name="destinationLevel"> The target Level# (move "to"). </param>
            <remarks> This method resets the Level# of all current entities that match
          the specified Group Type; Result and/or Group.
   <para> This only affects geometry that is already committed to Mastercam's database! </para><para> It does NOT effect the state of any NET-Hook side geometry objects.
           That is why it can be "fast". </para></remarks>
            <returns> The number of entities that were copied, or -1 if the specified level# was not valid.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.MoveSelectedGeometryToLevel(System.Int32,System.Boolean)">
            <summary> Move all selected geometry to a level. </summary>
            <remarks> This method resets the Level# of all currently 'selected' entities to
          the specified destination level.
   <para> This only affects geometry that is already committed to Mastercam's database!
          It does NOT effect the state of any NET-Hook side geometry objects.
          That is why it can be "fast". </para></remarks>
            <param name="destinationLevel"> The target Level# (move "to" level). </param>
            <param name="clearSelectBit"> Clear the 'selection' on the entities when done? </param>
            <returns> The number of entities that were copied, or -1 if the specified level# was not valid.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.CopySelectedGeometryToLevel(System.Int32,System.Boolean)">
            <summary> Copy all selected geometry to a level. </summary>
            <remarks> This method does an "in-place" XForm translate on ALL selected entities
          (regardless of their Level) which makes copies and then scans the
          database for all RESULT GROUP entities and resets their Level# to the
          specified destination level.
   <para> This only affects geometry that is already committed to Mastercam's database!
          It does NOT effect the state of any NET-Hook side geometry objects.
          That is why it can be "fast". </para></remarks>
            <param name="destinationLevel"> The target Level# (copy "to"). </param>
            <param name="clearSelectBit"> Clear the 'selection' on the entities when done? </param>
            <returns> The number of entities that were copied, or -1 if the specified level# was not valid.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.ScaleGeometry(Mastercam.Math.Point3D,System.Double,System.Boolean)">
            <summary> XForm-Scale all of the 'selected' geometry entities. </summary>
            <remarks> NOTE!
    <para>Any Geometry objects that get altered will NOT be reflected in that entity's data
          "on the NET-Hook side" if that entity's data is being held in a NET-Hook Geometry object!</para><para> You can use <see cref="M:Mastercam.Support.SearchManager.GetResultGeometry" /> to retrieve the result
           of the XForm operation. </para><para> If there was no 'selected' geometry found to be XForm'd,
           the return result will be 'true'. </para><para> Note that all 'selections' will be cleared by the XForm operation. </para></remarks>
            <param name="ScaleOrigin"> The scale origin point (in world coordinates). </param>
            <param name="Scale">       The scaling factor. </param>
            <param name="Copy">        true to copy, else false to move. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.MirrorGeometry(Mastercam.Math.Line3D,Mastercam.Database.MCView,System.Boolean)">
            <summary> XForm-Mirror all of the 'selected' geometry entities. </summary>
            <remarks> NOTE!
    <para>Any Geometry objects that get altered will NOT be reflected in that entity's data
          "on the NET-Hook side" if that entity's data is being held in a NET-Hook Geometry object!</para><para> You can use <see cref="M:Mastercam.Support.SearchManager.GetResultGeometry" /> to retrieve the result of
           the XForm operation.</para><para> If the supplied view is null, the active Construction View will be used. </para><para> If there was no 'selected' geometry found to be XForm'd, the return result will be 'true'. </para><para> Note that all 'selections' will be cleared by the XForm operation. </para></remarks>
            <param name="Axis"> The axis to mirror about. </param>
            <param name="View"> The view. </param>
            <param name="Copy"> true to copy, else false to move. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.RotateGeometry(Mastercam.Math.Point3D,System.Double,Mastercam.Database.MCView,System.Boolean)">
            <summary> XForm-Rotate all of the 'selected' geometry entities. </summary>
            <param name="RotationOrigin"> The rotation origin point (in world coordinates). </param>
            <param name="Angle"> The rotation angle. </param>
            <param name="View">  The view. </param>
            <param name="Copy">  true to copy, else false to move. </param>
            <remarks> NOTE!
    <para> Any Geometry objects that get altered will NOT be reflected in that entity's data
           "on the NET-Hook side" if that entity's data is being held in a NET-Hook Geometry object! </para><para> You can use <see cref="M:Mastercam.Support.SearchManager.GetResultGeometry" /> to retrieve the result of the
           XForm operation. </para><para> If the View is null, the active Construction View will be used. </para><para> If there was no 'selected' geometry found to be XForm'd, the return result will be 'true'. </para><para> Note that all 'selections' will be cleared by the XForm operation. </para></remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.TranslateGeometry(Mastercam.Math.Point3D,Mastercam.Math.Point3D,Mastercam.Database.MCView,Mastercam.Database.MCView,System.Boolean)">
            <summary> XForm-Translate all of the 'selected' geometry entities. </summary>
            <remarks> NOTE!
   <para> Any Geometry objects that get altered will NOT be reflected in that entity's data
          "on the NET-Hook side" if that entity's data is being held in a NET-Hook Geometry object! </para><para> You can use <see cref="M:Mastercam.Support.SearchManager.GetResultGeometry" /> to retrieve the
           result of the XForm operation. </para><para> If a supplied view is null, the active Construction View will be used. </para><para> If there was no 'selected' geometry found to be XForm'd, the return result will be 'true'. </para><para> Note that all 'selections' will be cleared by the XForm operation. </para></remarks>
            <param name="FromPoint"> The 'from' point (in world coordinates). </param>
            <param name="ToPoint">   The 'to' point (in world coordinates). </param>
            <param name="FromView">  The 'from' view. </param>
            <param name="ToView">    The 'to' view. </param>
            <param name="Copy">      true to copy, else false to move. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.JoinEntities(Mastercam.Curves.LineGeometry[]@)">
            <summary> Join entities. </summary>
            <param name="lines"> [in,out] The lines to be joined. </param>
            <remarks> The lines are passed 'by reference' as the lines in the array will be altered.
          Some lines will be deleted and others will be altered by the join.
         </remarks>
            <returns> The number of joins that were made (or -1 on error). </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.JoinEntities(Mastercam.Curves.ArcGeometry[]@)">
            <summary> Join arcs entities. </summary>
            <param name="arcs"> [in,out] The arcs to be joined. </param>
            <remarks> The arcs are passed 'by reference' as the arcs in the array will be altered.
          Some arcs will be deleted and others will be altered by the join.
         </remarks>
            <returns> The number of joins that were made (or -1 on error). </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.BreakAtMidpoint(Mastercam.Curves.ArcGeometry)">
            <summary> Break an Arc at its midpoint. </summary>
            <param name="Arc"> [in,out] The arc to break. </param>
            <returns> The 2nd half of the arc, else null if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.BreakAtMidpoint(Mastercam.Curves.LineGeometry)">
            <summary> Break a Line at its midpoint. </summary>
            <param name="Line"> [in,out] The line to break. </param>
            <returns> The 2nd half of the line, else null if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.FilletChain(Mastercam.Database.Chain,System.Double,System.Int32,System.Int32)">
            <summary> Fillet a chain. </summary>
            <remarks> If you pass '-1' for Color and/or Level the active "main" Color and/or Level will be used.
          </remarks>
            <param name="Chain">        The chain to be filleted. </param>
            <param name="FilletRadius"> The fillet radius. </param>
            <param name="Color">        The color# to be used for the fillet(s). </param>
            <param name="Level">        The level# to place the fillet(s) on. </param>
            <returns> An array of the fillet (arcs) that were created. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.FilletChain(Mastercam.Database.Chain,System.Double)">
            <summary> Fillet a chain. </summary>
            <param name="Chain">        The chain to be filleted. </param>
            <param name="FilletRadius"> The fillet radius. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.FilletTwoCurves(Mastercam.Database.CurveGeometry,Mastercam.Database.CurveGeometry,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary> Create a Fillet between two entities. </summary>
            <remarks> GeomCurve1 and GeomCurve1 can be either lines and/or arcs.
    <para> If you pass '-1' for Color and/or Level the active "main" Color and/or Level will be used. </para></remarks>
            <param name="GeomCurve1">   The first geometry entity. </param>
            <param name="GeomCurve2">   The second geometry entity. </param>
            <param name="FilletRadius"> The fillet radius. </param>
            <param name="Color">        The color# to be used for the fillet. </param>
            <param name="Level">        The level# to place the fillet on. </param>
            <param name="Trim">         true to trim the supplied geometry to the fillet. </param>
            <returns> The fillet (arc) that was created, else null if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.FilletTwoCurves(Mastercam.Database.CurveGeometry,Mastercam.Database.CurveGeometry,System.Double,System.Boolean)">
            <summary> Create a Fillet between two entities. </summary>
            <remarks> GeomCurve1 and GeomCurve1 can be either lines and/or arcs. </remarks>
            <param name="GeomCurve1">   The first geometry entity. </param>
            <param name="GeomCurve2">   The second geometry entity. </param>
            <param name="FilletRadius"> The radius of the fillet. </param>
            <param name="Trim">         true to trim the supplied geometry to the fillet. </param>
            <returns> True fillet was successfully created, else false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.BreakCurveAtMidpoint(Mastercam.Database.CurveGeometry)">
            <summary> Break an 'curve' entity (line or arc) at its midpoint (worker method). </summary>
            <param name="Curve"> [in,out] The geometry entity to be broken. </param>
            <returns> The 2nd half of the entity, else null if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.FilletChain(Mastercam.Database.Chain,System.Double,System.Int32,System.Int32,Mastercam.Curves.ArcGeometry[]@)">
            <summary> Fillet a chain (worker method). </summary>
            <param name="Chain">        The chain to be filleted. </param>
            <param name="FilletRadius"> The fillet radius. </param>
            <param name="Color">        The color# to be used for the fillet. </param>
            <param name="Level">        The level# to place the fillet on. </param>
            <param name="Fillets">      [out] The fillets that were created. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.FilletTwoCurves(Mastercam.Database.CurveGeometry,Mastercam.Database.CurveGeometry,System.Double,System.Int32,System.Int32,System.Boolean,Mastercam.Curves.ArcGeometry@)">
            <summary> Create a Fillet between two entities (worker method). </summary>
            <remarks> GeomCurve1 and GeomCurve1 can be either lines and/or arcs. </remarks>
            <param name="GeomCurve1">   The first geometry entity. </param>
            <param name="GeomCurve2">   The second geometry entity. </param>
            <param name="FilletRadius"> The radius of the fillet. </param>
            <param name="Color">        The color# to be used for the fillet. </param>
            <param name="Level">        The level# to place the fillet on. </param>
            <param name="Trim">         true to trim the supplied geometry to the fillet. </param>
            <param name="Fillet">       [out] The fillet that was created. </param>
            <returns> true if fillet was successfully created, else false if it fails </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.JoinEntities(Mastercam.Database.CurveGeometry[]@)">
            <summary> Join entities (worker method). </summary>
            <param name="Geom"> [in,out] The geometry to be joined. </param>
            <remarks> The array of entities must contains either <i>all</i> lines or <i>all</i> arcs! </remarks>
            <returns> The number of joins that were made (or -1 on error). </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryManipulationManager.#ctor">
            <summary> Private Manager Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.GeometryManipulationManager">
            <summary>This class is used for performing graphics-related tasks and activities.</summary>
        </member>
        <member name="M:rd_stl(SysFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char*,System.Boolean*)">
 @par Purpose:
		Read an open STL file and create lines

 @param[in]	fp				Pointer to the open STL file
 @param[in]	fname			Name of the open STL file
 @param[out]	interrupted		true if the read was interrupted by the user

</member>
        <member name="M:wr_stl(System.Double,SysFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean)">
 @par Purpose:
		Write the database to an open STL file

 @param[in]	err_tol			error tolerance value
 @param[in]	f				Pointer to the open STL file
 @param[in]	fname			Name of the open STL file
 @param[in]	ent_idn			Specific entity to output or if '0', output all, or if '-1', output only selected entities
 @param[in]	ascii_data		Set to true if the data is to be written in ASCII text
 @param[in]	silent			Set to true if no warnings, progress reports, or messages are to be presented to the user
		This outputs to world coordinates.

</member>
        <member name="M:wr_stl(System.Double,SysFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 @par Purpose:
		Write the database to an open STL file

 @param[in]	err_tol			error tolerance value
 @param[in]	f				Pointer to the open STL file ( Must be opened for binary writing if ascii_data == false)
 @param[in]	fname			Name of the open STL file
 @param[in]	ent_idn			Specific entity to output or if '0', output all, or if '-1', output only selected entities
 @param[in]	ascii_data		Set to true if the data is to be written in ASCII text
 @param[in]	silent			Set to true if no warnings, progress reports, or messages are to be presented to the user
 @param[in]	use_wcs			Set to true to output STL relative to CPlane view and origin (false is world coordinates)
 @param[in]	okIfNotVisible	Set to true if solid is not currently on a visible level
 @param[in]	okIfBlanked		Set to true if solid/surf/pmesh is blanked

</member>
        <member name="M:DeletePostArguments">
            <summary> Deletes the posting arguments. </summary>
        </member>
        <member name="M:Mastercam.Support.Configuration.EvaluationLicense">
            <summary> Query if Mastercam is running under an evaluation license (software licenses only). </summary>
            <returns> true if evaluation license, false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.Configuration.GetUserType">
            <summary> This method returns the currently active "user" type. </summary>
            <returns> The user type Mastercam is running in. </returns>
        </member>
        <member name="M:Mastercam.Support.Configuration.GetCurrentProduct">
            <summary> This method returns the currently active "product" type in Mastercam. </summary>
            <returns> The product mode Mastercam is currently in. </returns>
            <remarks> Note that this does not return information regarding any active machines,
		  but rather information regarding the product itself and could include modes,
          such as Drafting and Design.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.Configuration.GetSerialNumber">
            <summary> Gets the serial number from the Mastercam license. </summary>
            <returns> The Serial number. </returns>
        </member>
        <member name="M:Mastercam.Support.Configuration.WriteConfigFile(System.String)">
            <summary> Writes the active configuration to a configuration file. </summary>
            <param name="filename"> The (full path) name of the Config file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.Configuration.ReadConfigFile(System.String,System.Boolean)">
            <summary> Reads configuration file. </summary>
            <param name="filename">		 The (full path) name of the Config file. </param>
            <param name="repaintColors"> true to repaint graphics. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.Configuration.ChangeConfiguration(System.Boolean,Mastercam.Support.Types.ConfigurationChangeType,System.Boolean)">
            <summary> This method is used for changing Inch / Metric configuration in the system. </summary>
            <param name="metric">		    True and the system is changed to Metric,
								else false and the system is changed to Inch. </param>
            <param name="changeType">	    How the settings are to be changed. 
								You can display the standard  Units Changing dialog to ask the user, or...
								Set the option you want "silently". </param>
            <param name="regenerateSolids"> True regenerate any Solids with the new settings. </param>
        </member>
        <member name="M:Mastercam.Support.Configuration.ReloadConfiguration">
            <summary> This method reloads the configuration file. </summary>
        </member>
        <member name="P:Mastercam.Support.Configuration.ConfigurationFilename">
            <summary> Gets the active Configuration filename. </summary>
        </member>
        <member name="M:Mastercam.Support.Configuration.Dispose">
            <summary> Finalizes an instance of the Configuration class. </summary>
        </member>
        <member name="M:Mastercam.Support.Configuration.#ctor">
            <summary> Initializes a new instance of the Configuration class. </summary>
        </member>
        <member name="T:Mastercam.Support.Configuration">
            <summary> This class is used for various Mastercam configuration items. </summary>
        </member>
        <member name="M:Mastercam.Nesting.NestingManager.GetNestedOperation(System.Int32)">
            <summary> This method takes the ID of a nesting sheet, tries to find the operation in the
          database matching that sheet ID, and returns a NestingOperation object representing
          that operation in the database.
          </summary>
            <param name="SheetID"> This is the ID of the sheet to look for in the database. </param>
            <returns> A NestingOperation object if the operation was found in the database,
          else a null object if not.
          </returns>
        </member>
        <member name="M:Mastercam.Nesting.NestingManager.MakeNestedSheetBitmap(System.String,System.Int32)">
            <summary> This method makes a bitmap image file of the specified sheet within the currently
          opened Mastercam part file.
          </summary>
            <param name="FilePath">    The name and path of the bitmap file to create. </param>
            <param name="SheetNumber"> This needs to be the number of the sheet to create a bitmap image of.
                           </param>
            <returns> True if the bitmap file was created successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Nesting.NestingManager.GetNestedSheetCount">
            <summary> This method returns the number of nested sheets in the currently opened Mastercam part
          file.
          </summary>
            <returns> The number of nested sheets in the current file. </returns>
        </member>
        <member name="M:Mastercam.Nesting.NestingManager.#ctor">
            <summary> Initializes a new instance of the NestingManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Nesting.NestingManager">
            <summary> This class is used to manage nesting settings within the Mastercam environment. </summary>
        </member>
        <member name="M:Mastercam.Operations.NestingOperation.Commit">
            <summary> This method commits any changes to this Nesting operation to the Mastercam database.
          </summary>
            <returns> True if the database commit was successful, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.NestingOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation passed in.
          </summary>
            <param name="Op"> [in,out] The operation to use as defaults for this operation object.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.NestingOperation.Commit(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits an operation to the Mastercam database. </summary>
            <param name="Op"> The operation to be committed. </param>
            <returns> True if the commit was successful, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.NestingOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the NestingOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from the Mastercam
          database and use that to initialize this operation object.
   <para> If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Operations.NestingOperation.#ctor">
            <summary> Initializes a new instance of the NestingOperation class. </summary>
            <remarks> This creates a new nesting toolpath operation with default settings. </remarks>
        </member>
        <member name="T:Mastercam.Operations.NestingOperation">
            <summary>This class is a class used for working with Nesting operations in the Mastercam database.</summary>
        </member>
        <member name="P:Mastercam.Solids.TorusSolid.EndAngle">
            <summary> Gets or sets the location of the ending point for drawing this torus
          primitive solid as an angle, in degrees, from the base point.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.TorusSolid.StartAngle">
            <summary> Gets or sets thee location of the starting point for drawing this torus
          primitive solid as an angle, in degrees, from the base point.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.TorusSolid.MinorRadius">
            <summary> Gets or sets the distance of the inner edge of the torus from this torus
          primitive solid's base point.
          </summary>
        </member>
        <member name="P:Mastercam.Solids.TorusSolid.MajorRadius">
            <summary> Gets or sets the distance of the outer edge of the torus from this torus
          primitive solid's base point.
          </summary>
        </member>
        <member name="M:Mastercam.Solids.TorusSolid.#ctor">
            <summary> Initializes a new instance of the TorusSolid class. </summary>
            <remarks> This constructs a new torus solid object with default parameters.
   <para> The default parameters of a torus solid are for a full (360 degree) torus with
          the center at the WCS origin, (0.0, 0.0, 0.0), with a major radius of 0.5 and
          a minor radius of 0.25. </para></remarks>
        </member>
        <member name="M:Mastercam.Solids.TorusSolid.LoadDefaults">
            <summary> Loads the default values for a given solid geometry object. </summary>
        </member>
        <member name="M:Mastercam.Solids.TorusSolid.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given solid geometry object from the solid geometry
          entity passed in.
          </summary>
            <param name="Ent"> The geometry entity to use as defaults for this solid geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Solids.TorusSolid.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SLD_PRIMITIVE_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a solid geometry entity to the Mastercam database. </summary>
            <param name="Ent">    The solid geometry entity to be committed. </param>
            <param name="Params"> The solid parameters to initialize the object with. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Solids.TorusSolid.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the TorusSolid class. </summary>
            <remarks> Attempts to retrieve a solid geometry entity with the given ID from the Mastercam
          database and use that to initialize this solid geometry object.
          If no matching solid geometry entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the solid geometry entity to look up in the Mastercam database.
               </param>
        </member>
        <member name="T:Mastercam.Solids.TorusSolid">
            <summary> This class is used for working with torus shaped primitive solids. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.LetterCreationManager.CreateLetters(Mastercam.GeometryUtility.Types.LetterCreationData)">
            <summary> This method is used to create letters in the current Mastercam part file.
          </summary>
            <param name="Data"> The letter creation settings to use. </param>
            <returns> True if the letters were created successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.LetterCreationManager.GetFontPrefix(Mastercam.GeometryUtility.Types.LetterCreationData)">
            <summary> Creates and returns the appropriate font prefix string for Mastercam letter creation.
          </summary>
            <param name="data"> The letter creation settings to use. </param>
            <returns> A string representing the appropriate font prefix for letter creation based on the
          given font mode.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.LetterCreationManager.#ctor">
            <summary> Initializes a new instance of the LetterCreationManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.GeometryUtility.LetterCreationManager">
            <summary> This class is used for performing graphics-related tasks and activities. </summary>
        </member>
        <member name="M:Mastercam.Mesh.MeshGeometry.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given mesh geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The mesh geometry entity to use as defaults for this
                   mesh geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Mesh.MeshGeometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a mesh geometry entity to the Mastercam database. </summary>
            <param name="Ent"> [in,out] The mesh geometry entity to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Mesh.MeshGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the MeshGeometry class. </summary>
            <remarks> Attempts to retrieve a mesh geometry entity with the given ID from the Mastercam
          database and use that to initialize this mesh geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the mesh geometry entity to look up in the Mastercam database.
               </param>
        </member>
        <member name="T:Mastercam.Mesh.MeshGeometry">
            <summary> This class is used for working with Polygonal Mesh entities within Mastercam. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.DraftSurface.GeneratingCurve">
            <summary> Gets or sets the object representing this draft surface's generating curve geometry.
          </summary>
        </member>
        <member name="P:Mastercam.Surfaces.DraftSurface.LineAngleTimesSin">
            <summary> Gets or sets the sine of the drive line's angle. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.DraftSurface.CylinderLine">
            <summary> Gets or sets the vector of the drive line for this draft surface. </summary>
        </member>
        <member name="M:Mastercam.Surfaces.DraftSurface.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given surface geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The surface geometry entity to use as defaults for this
                   surface geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Surfaces.DraftSurface.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a surface geometry entity to the Mastercam database. </summary>
            <param name="Ent"> [in,out] The surface geometry entity to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Surfaces.DraftSurface.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the DraftSurface class. </summary>
            <remarks> Attempts to retrieve a surface geometry entity with the given ID from the
          Mastercam database and use that to initialize this surface geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the surface geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="T:Mastercam.Surfaces.DraftSurface">
            <summary> This class is used for working with draft surface geometry in Mastercam. </summary>
        </member>
        <member name="M:MCWaitCursor.Pop">
            <summary> Pops the wait cursor. </summary>
        </member>
        <member name="M:MCWaitCursor.Push">
            <summary> Pushes the wait cursor. </summary>
        </member>
        <member name="M:MCWaitCursor.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:MCWaitCursor.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Compress">
            <summary> Utility function that compresses the database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BrowseForToolLibraryToSaveOrAppend(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to save or append dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BrowseForToolLibraryToSave(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to save dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BrowseForToolLibraryToOpen(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to open dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.WasMigrated">
            <summary> Queries if the library has been migrated.  If it has, callers should call "GetLibraryPath" to retrieve an
		  updated library path. </summary>
            <returns> true if the library has been migrated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.IsUpdated">
            <summary> Query if the library is updated. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if updated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.IsOpen">
            <summary> Query if this object is open. </summary>
            <returns> true if open, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibraryPath">
            <summary> Gets the full library path including the filename. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library path. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibraryFilename">
            <summary> Gets library filename including the extension. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library filename. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibraryDataVersion">
            <summary> Gets the library data version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library data version. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibrarySchemaVersion">
            <summary> Gets the library schema version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library schema version. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.PerformBatchChanges(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Performs a batch of changes including the addition of items, deletion of items, and the update of items. </summary>
            <param name="itemsToAdd">    The items to add. </param>
            <param name="itemsToDelete"> The items to delete. </param>
            <param name="itemsToUpdate"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAll">
            <summary> Deletes all items in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlCutParams">
            <summary> Deletes all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolGrades">
            <summary> Deletes all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlManufacturers">
            <summary> Deletes all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolTypes">
            <summary> Deletes all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolGroups">
            <summary> Deletes all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlMaterials">
            <summary> Deletes all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlOpTypes">
            <summary> Deletes all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlOpGroups">
            <summary> Deletes all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlHolderLathes">
            <summary> Deletes all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlInserts">
            <summary> Deletes all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlHolders">
            <summary> Deletes all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolLathes">
            <summary> Deletes all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolMills">
            <summary> Deletes all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlTools">
            <summary> Deletes all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlAssemblies">
            <summary> Deletes all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Delete(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given items from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Delete(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given item from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Update(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given items in the library. The items must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Update(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given item in the library. The item must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllItems(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllItems(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlCutParams(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolGrades(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGrade&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGrade&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlManufacturers(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlManufacturer&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlManufacturer&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolTypes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolType&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolType&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolGroups(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGroup&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGroup&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlMaterials(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlMaterial&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlMaterial&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlOpTypes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlOpType&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlOpType&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlOpGroups(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlOpGroup&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlOpGroup&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlTurnHolders(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlTurnHolder&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlTurnHolder&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTurnHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlHolderLathes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderLathe&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderLathe&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlInserts(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlHolders(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolLathes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolMills(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlTools(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlTool&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlAssemblies(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items">				    The resulting items. </param>
            <param name="includeDefaultAssemblies"> True to locally convert mill tools that are not in an assembly into
										an assembly with a default holder, and include them in the resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the contents of a TlMgr to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The TlMgr to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a vector of TlObjectPtrs to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a TlObject item to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetFilterString(System.Boolean)">
            <summary>	Gets filter string. </summary>
            <param name="wireMachine">	true if wire machine. </param>
            <returns>	The filter string. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.CreateNewLibrary(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Creates new library at the specified libraryPath. </summary>
            <param name="libraryPath"> The library file path, including the filename. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BackupLibrary">
            <summary> Creates a backup up the opened library. Auto-generates backup filename, and places it in the same location
		  as the opened library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.UpdateLibrary(System.Boolean)">
            <summary> Updates the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="createBackup"> (Optional) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.CloseLibrary">
            <summary> Closes the library. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.OpenLibrary(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean)">
            <summary> Opens the specified library. Will create the library if it does not exist. </summary>
            <param name="libraryPath">   Full pathname of the library file to open. </param>
            <param name="updateLibrary"> true to update the library to the latest schema version. </param>
            <param name="createBackup">  (Optional) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.ToolLibrarySystem">
            <summary> The tool library system class. </summary>
        </member>
        <member name="M:FileIsUnicode(System.Char!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose: Inspect contents of a text file to determine MBCS or some type of Unicode

 @param[in]	lpFile		Name of file to inspect

 @return		true if BOM detected, or some other Unicode indicators, otherwise false

</member>
        <member name="M:ConvertString(System.Char*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64!System.Runtime.CompilerServices.IsConst)">
 @par Purpose: Convert an MBCS string to a wide string.

 @param[in,out]	lpDest		Output: The wide character buffer.
 @param[in]		lpSrc		Pointer to the MBCS string.
 @param[in]		maxChars	The maximumn number of wide characters the destination can hold.  Must include the null terminator.

 @return		The number of characters converted.

</member>
        <member name="M:parse_reals(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16,System.Double*,System.Int16*)">
 *	@par Purpose:
#		Reduces a string to an array of double numbers.
 *
 *	@param[in]		s1			A double number string (0. -3.2 .5)
 *	@param[in]		size_reals	The maximum number of reals.
 *	@param[out]		reals		The real numbers.
 *	@param[out]		n_elements	The number of entries in reals.

</member>
        <member name="M:add_prefix_suffix_s(System.Char*,System.UInt64,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
	@par Purpose: Safe version of add_prefix_suffix.

	@param[in,out]	filename			the file name.
	@param[in]		filename_length		size of filename buffer.
	@param[in]		prefix				the prefix.
	@param[in]		suffix				the suffix.
	@param[out]		filename			file name with prefix and suffix.

</member>
        <member name="M:add_prefix_suffix(System.Char*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
	@par Purpose:
		This method adds a prefix to a filename if ':' or '\\' are not present.  It also adds a suffix if '.' is not found.

	@param[in,out]	filename	the file name.
	@param[in]		prefix		the prefix.
	@param[in]		suffix		the suffix.
	@param[out]		filename	file name with prefix and suffix.

</member>
        <member name="M:SecureReduceFileName(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char*,System.UInt64,System.Char*,System.UInt64,System.Char*,System.UInt64)">
 @par Purpose:
		reduces a string containing a filename into the path, name and extension of the filename; filename is unaffected

 @param[in]		fileName	The complete file name (C:\\my mcam2019\\parts\\Design\\part.mcam)
 @param[out]		prefix		Path to the file (C:\\my mcam2019\\parts\\Design\\)
 @param[in]		prefixCount	prefix number of characters (NOT number of bytes)
 @param[out]		name		Name (part)
 @param[in]		nameCount	name number of characters (NOT number of bytes)
 @param[out]		ext			Extension (.mcam)
 @param[in]		extCount	extension number of characters (NOT number of bytes)

</member>
        <member name="M:insert_str(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char*)">
 @par Purpose:
		Insert a string into another string

 @param[in]		prefix	The string that acts as the prefix to string s
 @param[in,out]	s		The string that acts as the end of our composed string; returns the newly composed string

</member>
        <member name="M:insert_ch(System.Char,System.Char*,System.Int16)">
 @par Purpose:
		Insert a character into a string

 @param[in]		c	The character to insert
 @param[in,out]	s	The string to insert the character into
 @param[in]		pos The position within the string to insert the character

</member>
        <member name="M:del_spaces(System.Char*)">
 @par Purpose:
		Delete spaces from a string

 @param[in,out]	lst The string to remove spaces from

</member>
        <member name="M:ch_in_str(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char)">
 @par Purpose:
		Tests for a character in a string

 @param[in]	s	The string to test with
 @param[in]	c	The character to test for

 @return		true if c is in string s; false if not

</member>
        <member name="M:build_filename_s(System.Char*,System.UInt64,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose: Safe version of build_filename.

 @param[in,out]	filename			Input: the string representing the new file name. Output: the filename with the full path and extension.
 @param[in]		filename_length		Size of filename buffer.
 @param[in]		prefix				The prefix for the new filename
 @param[in]		suffix			The suffix for the new filename

</member>
        <member name="M:build_filename(System.Char*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
		Extract name, add prefix and suffix.

 @param[in,out]	filename	Input: the string representing the new file name. Output: the filename with the full path and extension.
 @param[in]		prefix		The prefix for the new filename
 @param[in]		suffix		The suffix for the new filename

</member>
        <member name="M:pack_string(System.Char*)">
 @par Purpose:
		Parse and compact any string with multiple fields.
			changes newline to null, removes preceding and trailing white space,
			leaves only 1 space in between fields, removes trailing 0's
			from fields determined to be reals (decimal '.' exists in field)

 @param[in,out]	str   text string before/after compacting

</member>
        <member name="M:Strip0s(System.Char*)">
 @par Purpose:
		Strip trailing zeros from a text string.

 @param[in,out]	str   text string before/after stripping trailing zeros

</member>
        <member name="M:calc(System.Char*,System.Boolean*)">
Defines streq to be the opposite of the results of strcmp
Defines streqi to be the opposite of the results of strcmpi
 @par Purpose:
		This method parses a string, performs math, and returns the calculated value.

 @param[in]	   lstr    the string to parse.
 @param[out]	   succf   true, if OK, else, false.

 @return		   the result of the calculation.

</member>
        <member name="M:Cnc.Tool.IsToolAtSlotAPrimeTurningTool(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Query if the tool at the given slot number is a prime turning tool. </summary>
            <param name="slot">	The lathe tool slot number to search at. </param>
            <returns>	True if the tool at the given slot number is a prime turning tool, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlFixCorruptOpAssemblyID(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	fix corrupt operation assembly identifier. </summary>
            <param name="op">	[in,out] The operation. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.StoreProfileInTool(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;,System.Boolean)">
            <summary>	Refreshes the tool's profile data from the tool geometry source. </summary>
            <param name="spTool">				The tool. </param>
            <param name="toolIsFromLibrary">	True if tool is from library. This will influence where the profile is
									searched for when it cannot be found from file or level. </param>
        </member>
        <member name="M:Cnc.Tool.StoreProfileInTool(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;,System.Boolean)">
            <summary> Stores a profile within the input tool. </summary>
            <param name="tool">			    The tool. </param>
            <param name="warnAboutBadLink"> (Optional) true to warn about a custom tool's bad source profile. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ValidateToolProfile(Cnc.Tool.TlTool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validate tool profile. </summary>
            <param name="newtool"> The newtool. </param>
        </member>
        <member name="M:Cnc.Tool.CheckAndFixLollipopCornerRadius(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Fix lollipop corner radius. </summary>
            <param name="currentOp"> The current operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.UpdateFeedsAndSpeeds(System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,_GUID!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,System.Int16,System.Int32,System.Boolean,System.Double)">
            <summary> Recaclulates feeds and speeds based on work material settings. </summary>
            <param name="isDrill">				   True if this is a drill tool, otherwise false. </param>
            <param name="fluteCount">			   Flute Count. </param>
            <param name="mastercamToolMaterialID"> TlToolMaterialID in Mastercam _GUID format. </param>
            <param name="cuttingDiameter">		   Cutting Diameter. </param>
            <param name="feedRate">				   Feed rate. </param>
            <param name="plungeRate">			   Plunge rate. </param>
            <param name="retractRate">			   Retract rate. </param>
            <param name="spindleSpeed">			   Spindle speed. </param>
            <param name="feedPercentage">		   The feed percentage. </param>
            <param name="sfmPercentage">		   The sfm percentage. </param>
            <param name="spindleRot">			   The spindle rot. </param>
            <param name="toolType">				   Type of the tool. </param>
            <param name="isMetric">				   true if this object is metric. </param>
            <param name="thds">					   The thds. </param>
            <returns> true if feeds and speeds were successfuly recalculated. </returns>
        </member>
        <member name="M:Cnc.Tool.CompareLatheTools(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two old lathe tools, compare them to find if they are equal. </summary>
            <param name="left">  The first lathe tool. </param>
            <param name="right"> The second lathe tool. </param>
            <returns> true if the lathe tools are equal. </returns>
        </member>
        <member name="M:Cnc.Tool.CompareInserts(Cnc.Tool.INSERT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.INSERT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two old inserts, compare them to find if they are equal. </summary>
            <param name="left">  The first insert. </param>
            <param name="right"> The second insert. </param>
            <returns> true if the inserts are equal. </returns>
        </member>
        <member name="M:Cnc.Tool.CompareHolders(Cnc.Tool.LHOLDER!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.LHOLDER!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two old holders, compare them to find if they are equal. </summary>
            <param name="left">  The first holder. </param>
            <param name="right"> The second holder. </param>
            <returns> true if the holders are equal. </returns>
        </member>
        <member name="M:Cnc.Tool.EqWithinTol(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two double, returns true if they are equal within tolerance. </summary>
            <param name="first">  The first double to compare. </param>
            <param name="second"> The double to compare against "first". </param>
            <returns> true if the attributes match within tol, false otherwise. </returns>
        </member>
        <member name="M:Mastercam.Tools.UndefinedTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the UndefinedTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.UndefinedTool.#ctor">
            <summary> Initializes a new instance of the UndefinedTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.UndefinedTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the UndefinedTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.UndefinedTool">
            <summary> This class is for identifying and using Undefined tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.BarrelMillTool.Commit">
            <summary> This method commits a Barrel Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition occurs
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.BarrelMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the BarrelMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.BarrelMillTool.#ctor">
            <summary> Initializes a new instance of the BarrelMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.BarrelMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the BarrelMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.BarrelMillTool">
            <summary> This class is for modifying and using Barrel Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.ThreadMillTool.Commit">
            <summary> This method commits a Thread Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition occurs
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.ThreadMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the ThreadMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.ThreadMillTool.#ctor">
            <summary> Initializes a new instance of the ThreadMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.ThreadMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the ThreadMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.ThreadMillTool">
            <summary> This class is for modifying and using Thread Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.HighFeedMillTool.Commit">
            <summary> This method commits a HighSpeed Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition occurs
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.HighFeedMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the FeedMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.HighFeedMillTool.#ctor">
            <summary> Initializes a new instance of the FeedMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.HighFeedMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the FeedMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.HighFeedMillTool">
            <summary> This class is for modifying and using HighFeed Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.BradPointDrillTool.Commit">
            <summary> This method commits a BradPointDrillTool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, else false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.BradPointDrillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the BradPointDrillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.BradPointDrillTool.#ctor">
            <summary> Initializes a new instance of the BradPointDrillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.BradPointDrillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the BradPointDrillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.BradPointDrillTool">
            <summary>This class is for modifying and using Brad Point Drill tools in Mastercam.</summary>
        </member>
        <member name="M:Mastercam.Tools.EngraveTool.Commit">
            <summary> This method commits a Engrave tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.EngraveTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the EngraveTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.EngraveTool.#ctor">
            <summary> Initializes a new instance of the EngraveTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.EngraveTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the EngraveTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.EngraveTool">
            <summary> This class is for modifying and using Engrave tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.BlockDrillTool.Commit">
            <summary> This method commits a Block Drill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, else false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.BlockDrillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the BlockDrillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.BlockDrillTool.#ctor">
            <summary> Initializes a new instance of the BlockDrillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.BlockDrillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the BlockDrillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.BlockDrillTool">
            <summary> This class is for modifying and using Router Block Drill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.EndMillBullnoseTool.Commit">
            <summary> This method commits a End Mill Bullnose tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.EndMillBullnoseTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the EndMillBullnoseTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.EndMillBullnoseTool.#ctor">
            <summary> Initializes a new instance of the EndMillBullnoseTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.EndMillBullnoseTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the EndMillBullnoseTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.EndMillBullnoseTool">
            <summary> This class is for modifying and using End Mill Bullnose tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.LollipopMillTool.Commit">
            <summary> This method commits a Lollipop Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.LollipopMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the LollipopMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.LollipopMillTool.#ctor">
            <summary> Initializes a new instance of the LollipopMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.LollipopMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the LollipopMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.LollipopMillTool">
            <summary> This class is for modifying and using Lollipop Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.TaperedMillTool.Commit">
            <summary> This method commits a Tapered Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.TaperedMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the TaperedMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.TaperedMillTool.#ctor">
            <summary> Initializes a new instance of the TaperedMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.TaperedMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the TaperedMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.TaperedMillTool">
            <summary> This class is for modifying and using Tapered Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.DoveMillTool.Commit">
            <summary> This method commits a Dove Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.DoveMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the DoveMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.DoveMillTool.#ctor">
            <summary> Initializes a new instance of the DoveMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.DoveMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the DoveMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.DoveMillTool">
            <summary> This class is for modifying and using Dove Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.RadiusMillTool.Commit">
            <summary> This method commits a Radius Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.RadiusMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the RadiusMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.RadiusMillTool.#ctor">
            <summary> Initializes a new instance of the RadiusMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.RadiusMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the RadiusMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.RadiusMillTool">
            <summary> This class is for modifying and using Radius Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.SlotMillTool.Commit">
            <summary> This method commits a Slot Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.SlotMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the SlotMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.SlotMillTool.#ctor">
            <summary> Initializes a new instance of the SlotMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.SlotMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the SlotMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.SlotMillTool">
            <summary> This class is for modifying and using Slot Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.FaceMillTool.Commit">
            <summary> This method commits a Face Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.FaceMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the FaceMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.FaceMillTool.#ctor">
            <summary> Initializes a new instance of the FaceMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.FaceMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the FaceMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.FaceMillTool">
            <summary> This class is for modifying and using Face Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.ChamferMillTool.Commit">
            <summary> This method commits a Chamfer Mill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.ChamferMillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the ChamferMillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.ChamferMillTool.#ctor">
            <summary> Initializes a new instance of the ChamferMillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.ChamferMillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the ChamferMillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.ChamferMillTool">
            <summary> This class is for modifying and using Chamfer Mill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.EndMillSphericalTool.Commit">
            <summary> This method commits a End Mill Spherical tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.EndMillSphericalTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the EndMillSphericalTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.EndMillSphericalTool.#ctor">
            <summary> Initializes a new instance of the EndMillSphericalTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.EndMillSphericalTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the EndMillSphericalTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.EndMillSphericalTool">
            <summary> This class is for modifying and using End Mill Spherical tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.CounterSinkTool.Commit">
            <summary> This method commits a Counter Sink tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.CounterSinkTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the CounterSinkTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.CounterSinkTool.#ctor">
            <summary> Initializes a new instance of the CounterSinkTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.CounterSinkTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the CounterSinkTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.CounterSinkTool">
            <summary> This class is for modifying and using Counter Sink tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.CounterBoreTool.Commit">
            <summary> This method commits a Counter Bore tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.CounterBoreTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the CounterBoreTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.CounterBoreTool.#ctor">
            <summary> Initializes a new instance of the CounterBoreTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.CounterBoreTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the CounterBoreTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.CounterBoreTool">
            <summary> This class is for modifying and using Counter Bore tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.BoreTool.Commit">
            <summary> This method commits a Simple Bore tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, else false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.BoreTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the BoreTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.BoreTool.#ctor">
            <summary> Initializes a new instance of the BoreTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.BoreTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the BoreTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.BoreTool">
            <summary> This class is for modifying and using Simple Bore tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.ReamerTool.Commit">
            <summary> This method commits a Reamer tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.ReamerTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the ReamerTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.ReamerTool.#ctor">
            <summary> Initializes a new instance of the ReamerTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.ReamerTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the ReamerTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.ReamerTool">
            <summary> This class is for modifying and using Reamer tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.TapLHTool.Commit">
            <summary> This method commits a Left-Hand Tap tool to the Mastercam database .</summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                        occurs.
                                        </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.TapLHTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the TapLHTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.TapLHTool.#ctor">
            <summary> Initializes a new instance of the TapLHTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.TapLHTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the TapLHTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.TapLHTool">
            <summary> This class is for modifying and using Left-Hand Tap tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.TapRHTool.Commit">
            <summary> This method commits a Right-Hand Tap tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.TapRHTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the TapRHTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.TapRHTool.#ctor">
            <summary> Initializes a new instance of the TapRHTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.TapRHTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the TapRHTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.TapRHTool">
            <summary> This class is for modifying and using Right-Hand Tap tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.SpotDrillTool.Commit">
            <summary> This method commits a Spot Drill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.SpotDrillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the SpotDrillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.SpotDrillTool.#ctor">
            <summary> Initializes a new instance of the SpotDrillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.SpotDrillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the SpotDrillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.SpotDrillTool">
            <summary> This class is for modifying and using Spot Drill tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Tools.CenterDrillTool.Commit">
            <summary>This method commits a Center Drill tool to the Mastercam database.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.CenterDrillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the CenterDrillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.CenterDrillTool.#ctor">
            <summary> Initializes a new instance of the CenterDrillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.CenterDrillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the CenterDrillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.CenterDrillTool">
            <summary> This class is for modifying and using Center Drill tools in Mastercam. </summary>
        </member>
        <member name="M:store_ent_assoc(ent*,ASSOC_ENT_TYPE,System.Boolean*)">
            <summary> Store associative ents to db alive and blanked </summary>
            <param name="e">	      The pointer to the entity. </param>
            <param name="id">         TP_ID, OP_ID, TL_ID or M_ID </param>
            <param name="succf">	  true = Success; false = Failed. </param>
        </member>
        <member name="M:Mastercam.Database.ToolpathEntities.DeleteAssociativePoint(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,Mastercam.Database.AssociativePoint.LinkingPointType)">
            <summary> Removes the specified associated point. </summary>
            <param name="op">             The toolpath operation. </param>
            <param name="setIncremental"> true to set Incremental, else false to set to Absolute when associative point mode is cleared. </param>
            <param name="ptAssocType">    Type of the associated point to be removed. </param>
            <returns> true if an associative point of the requested type was deleted from the operation, false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.ToolpathEntities.GetAssociativePoint(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Mastercam.Database.AssociativePoint.LinkingPointType)">
            <summary> Searches for an associative point of the specified type. </summary>
            <param name="op">          The toolpath operation. </param>
            <param name="ptAssocType"> Type of the associated point to search for. </param>
            <returns> The data package for the associative point. </returns>
        </member>
        <member name="M:Mastercam.Database.ToolpathEntities.AddAssociativePoint(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Mastercam.Database.AssociativePoint,Mastercam.Database.AssociativePoint.LinkingPointType)">
            <summary> Adds an associated point to the linking parameters of an operation. </summary>
            <param name="op">             The toolpath operation. </param>
            <param name="assocPoint">	  The associative point. </param>
            <param name="assocPointType"> The type of the associated point. </param>
            <returns> true an associative point of the requested type was successfully add to the operation, false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.ToolpathEntities.AddAssociativePoint(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Mastercam.Database.Geometry,Mastercam.Database.AssociativePoint.PointEntryCode,Mastercam.Database.AssociativePoint.LinkingPointType)">
            <summary> Adds an associated point to the linking parameters of an operation. </summary>
            <param name="op">          The toolpath operation. </param>
            <param name="entity">      The entity to be associated. </param>
            <param name="pec">         The point option (see: Point Entry Codes). </param>
            <param name="ptAssocType"> Type of the associated point. </param>
            <returns> true an associative point of the requested type was successfully add to the operation, false if not. </returns>
        </member>
        <member name="T:Mastercam.Database.ToolpathEntities">
            <summary> The Toolpath Entities class is used for managing toolpath entities in Operations. </summary>
        </member>
        <member name="M:Mastercam.Support.UI.ModelessDialog.PostDialogResult(System.Windows.Forms.DialogResult)">
            <summary> Posts a DialogResult message to the event queue. </summary>
            <remarks> You can then capture this "command" message in your GetEvent loop,
          allowing you to detect when the modeless dialog is closing,
          so that you can (optionally) end the GetEvent loop.
           </remarks>
            <param name="result"> The type of DialogResult to be sent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.UI.ModelessDialog.DialogResultCancel">
            <summary> Posts a DialogResult.Cancel message to the event queue.
          <seealso cref="M:Mastercam.Support.Events.McUIEvent.GetEvent(System.String,Mastercam.Support.Events.UIEventData,Mastercam.Support.Events.UIEventType,Mastercam.Database.Types.GeometryMask,Mastercam.Database.Types.SelectionMask)" /> queue.
          </summary>
            <remarks> You can then capture this "command" message in your GetEvent loop,
          allowing you to detect when the modeless dialog is closing,
          so that you can (optionally) end the GetEvent loop.
           </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.UI.ModelessDialog.DialogResultOK">
            <summary> Posts a DialogResult.OK message to the event queue.
          <seealso cref="M:Mastercam.Support.Events.McUIEvent.GetEvent(System.String,Mastercam.Support.Events.UIEventData,Mastercam.Support.Events.UIEventType,Mastercam.Database.Types.GeometryMask,Mastercam.Database.Types.SelectionMask)" /> queue.
          </summary>
            <remarks> You can then capture this "command" message in your GetEvent loop,
          allowing you to detect when the modeless dialog is closing,
          so that you can (optionally) end the GetEvent loop.
           </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.UI.ModelessDialog.#ctor">
            <summary> Initializes a new instance of the ModelessDialog class. </summary>
            <remarks> You can derive your Form from this to 'automatically' setup the TabHandler. </remarks>
        </member>
        <member name="T:Mastercam.Support.UI.ModelessDialog">
            <summary> This class is used to manage the handling of Tab Keys in a Modeless Dialog. </summary>
        </member>
        <member name="F:Mastercam.Support.UI.ModelessDialogTabsHandler.modelessDialogTabs">
            <summary> The instance of the ModelessDialogTabs class. </summary>
            <remarks> ModelessDialogTabs is defined in the ModelessDialogTabHandler.dll </remarks>
        </member>
        <member name="M:Mastercam.Support.UI.ModelessDialogTabsHandler.#ctor(System.Windows.Forms.Control)">
            <summary> Initializes a new instance of the ModelessDialogTabsHandler class. </summary>
            <remarks> You pass your (Windows) Form to this constructor and
          it will enable the proper handling of the tab key navigation for the dialog.
          </remarks>
            <param name="dialog"> The Dialog (Form) to be have its tab navigation handled. </param>
        </member>
        <member name="T:Mastercam.Support.UI.ModelessDialogTabsHandler">
            <summary> This class is used to manage the handling of Tab Keys in a Modeless Dialog. </summary>
        </member>
        <member name="M:Mastercam.Support.Events.McUIEvent.MarshalEventToManaged(MCEvent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Mastercam.Support.Events.UIEventData)">
            <summary> Marshals the Event data package from native to managed format. </summary>
            <param name="source"> [in]  The native event data. </param>
            <param name="target"> [out] The managed event data. </param>
        </member>
        <member name="F:Mastercam.Support.Events.McUIEvent.nativeEventData">
            <summary> A pointer to the native Mastercam MCEvent. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.McUIEvent.eventData">
            <summary> The (managed) event data. </summary>
        </member>
        <member name="M:Mastercam.Support.Events.McUIEvent.CleanEvent">
            <summary> Cleans (resets) the data int the event. </summary>
        </member>
        <member name="M:Mastercam.Support.Events.McUIEvent.GetEvent(System.String,Mastercam.Support.Events.UIEventData,Mastercam.Support.Events.UIEventType,Mastercam.Database.Types.GeometryMask,Mastercam.Database.Types.SelectionMask)">
            <summary> Gets an event. </summary>
            <param name="prompt">        Prompt string to display while waiting for the event.
                             Pass an empty string ("") to not display the prompt window.
                             </param>
            <param name="eventData">     [out] The Event data passed back to the caller upon some sort of user input. </param>
            <param name="eventType">     A combination of event mode flags for limiting input types - (Select, Point, etc).
                             </param>
            <param name="entityMask">    A combination of geometry mask flag types for limiting selection. </param>
            <param name="selectionMask"> A combination of selection mask flag types for limiting selection. </param>
            <returns> An MCamReturn.NoErrors result if the event was successfully returned, else false... </returns>
        </member>
        <member name="M:Mastercam.Support.Events.McUIEvent.Dispose">
            <summary> Finalizes an instance of the McUIEvent class. </summary>
        </member>
        <member name="M:Mastercam.Support.Events.McUIEvent.#ctor">
            <summary> Initializes a new instance of the McUIEvent class. </summary>
        </member>
        <member name="T:Mastercam.Support.Events.McUIEvent">
            <summary> This class is used to manage the get_event process from Mastercam. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.WindowsCorners">
            <summary> Gets the window corner points (view coordinates). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.WindowsRect">
            <summary> Gets the window corner points (screen coordinates). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.SelectedEntsDbPointers">
            <summary> Gets the list of entity database pointers (DB_LIST_ENT_PTR) for the selected entities. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.Chains">
            <summary> Gets the list of Chains. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.psHitData">
            <summary> Gets the solid selection data. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.SolidPickMask">
            <summary> Gets the solid pick mask at time of the event. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.lparam">
            <summary> Gets the command lParam. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.wparam">
            <summary> Gets the command wParam. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.CommandID">
            <summary> Gets the command id of menu or button or 'other' type of command. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.ShiftKeyDown">
            <summary> Gets a value indicating the is a shift key down (all events). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.CtrlKeyDown">
            <summary> Gets a value indicating the is a control key down (all events). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.RightButtonDown">
            <summary> Gets a value indicating if this is a right button down. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.LeftButtonDown">
            <summary> Gets a value indicating if this is a left button down (drag events). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.State">
            <summary> Gets the state the event was executed in. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.Key">
            <summary> Gets the key code. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.PointProjectedView">
            <summary> Gets the point projected into cplane (view coordinates). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.PointProjectedWorld">
            <summary> Gets the point projected into cplane (world coordinates). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.PointView">
            <summary> Gets the point (in view coordinates). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.PointWorld">
            <summary> Gets the point (in world coordinates). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.SelectionOption">
            <summary> Gets the point selection method. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.aPointData">
            <summary> Gets the point (aPoint) data. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.CursorPosition">
            <summary> Gets the cursor position. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.SelectedPointPosition">
            <summary> Gets the selected point position. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.Selected_b4">
            <summary> Gets a value indicating if the selection was previously selected. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.SelectedEntDbPointer">
            <summary> Gets the selected entity's database pointer (DB_LIST_ENT_PTR). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.SelectPointT">
            <summary> Gets the 't' values of the selection point. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.UIEventData.Type">
            <summary> Gets the Event type (EM_Point, EM_Vector, etc). </summary>
        </member>
        <member name="M:Mastercam.Support.Events.UIEventData.Dispose">
            <summary> Finalizes an instance of the UIEventData class. </summary>
        </member>
        <member name="M:Mastercam.Support.Events.UIEventData.#ctor">
            <summary> Initializes a new instance of the UIEventData class. </summary>
        </member>
        <member name="T:Mastercam.Support.Events.UIEventData">
            <summary> UIEventData class.</summary>
            <remarks> A managed representation of Mastercam's 'MCEvent' data package. </remarks>
        </member>
        <member name="F:Mastercam.Support.Events.psHitData.m_eptr">
            <summary>The Mastercam entity pointer (DB_LIST_ENT_PTR) </summary>
        </member>
        <member name="F:Mastercam.Support.Events.psHitData.m_dist">
            <summary> The distance from selection point. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.psHitData.m_point">
            <summary> The selection point on entity. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.psHitData.m_body_pId">
            <summary> The Parasolid tag of owning body if it exists. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.psHitData.m_pId">
            <summary> The Parasolid tag of selected entity. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.psHitData.m_type">
            <summary> The type of entity; SLD_FACE, SLD_EDGE, SLD_BODY. </summary>
        </member>
        <member name="M:Mastercam.Support.Events.psHitData.#ctor(System.Int16,System.Int32,System.Int32,Mastercam.Math.Point3D,System.Double,System.IntPtr)">
            <summary> Initializes a new instance of the psHitData class. </summary>
            <param name="type">     Gets the type of the entity data (SLD_FACE=1, SLD_EDGE=2, SLD_BODY=4, SLD_LOOP=8). </param>
            <param name="psTagID">  The Parasolid tag of selected entity. </param>
            <param name="psBodyID"> The Parasolid tag of owning body (if it exists) </param>
            <param name="point">    The selection point (coordinates) on entity </param>
            <param name="dist">     The distance from selection point on entity. </param>
            <param name="eptr">     The Mastercam entity pointer (DB_LIST_ENT_PTR) of the entity. </param>
        </member>
        <member name="P:Mastercam.Support.Events.psHitData.eptr">
            <summary> Gets the Mastercam entity pointer (DB_LIST_ENT_PTR) of the entity. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.psHitData.dist">
            <summary> Gets the distance from selection point on entity. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.psHitData.point">
            <summary> Gets the selection point (coordinates) on entity. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.psHitData.body_pId">
            <summary> Gets the Parasolid tag of owning body (if it exists). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.psHitData.pId">
            <summary> Gets the Parasolid tag of selected entity. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.psHitData.type">
            <summary> Gets the type of the entity data (SLD_FACE, SLD_EDGE, SLD_BODY). </summary>
        </member>
        <member name="T:Mastercam.Support.Events.psHitData">
            <summary> psHitData class </summary>
            <remarks> A managed representation of Mastercam's 'psHit' structure. </remarks>
        </member>
        <member name="F:Mastercam.Support.Events.aPointData.m_xyz">
            <summary> Rectangular vector (view coordinates) </summary>
        </member>
        <member name="F:Mastercam.Support.Events.aPointData.m_refPt">
            <summary> Relative point (world coordinates) </summary>
        </member>
        <member name="F:Mastercam.Support.Events.aPointData.m_relative">
            <summary> Is it relative? </summary>
        </member>
        <member name="F:Mastercam.Support.Events.aPointData.m_ent2">
            <summary> The second entity. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.aPointData.m_ent1">
            <summary> Selected entities (2 for intersection) </summary>
        </member>
        <member name="F:Mastercam.Support.Events.aPointData.m_pt">
            <summary> Point in world coordinates. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.aPointData.m_id">
            <summary> Values, Center, Endpoint, ... </summary>
        </member>
        <member name="M:Mastercam.Support.Events.aPointData.#ctor(System.Char,Mastercam.Math.Point3D,Mastercam.Support.Events.entData,Mastercam.Support.Events.entData,System.Boolean,Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> Initializes a new instance of the aPointData class. </summary>
            <param name="id">       The identifier. </param>
            <param name="pt">       The point. </param>
            <param name="ent1">     The first entity. </param>
            <param name="ent2">     The second entity. </param>
            <param name="relative"> true if relative. </param>
            <param name="refPt">    The reference point. </param>
            <param name="xyz">      The xyz vector. </param>
        </member>
        <member name="P:Mastercam.Support.Events.aPointData.xyz">
            <summary> Gets a the Rectangular vector (view coordinates). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.aPointData.refPt">
            <summary> Gets the Relative point (world coordinates). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.aPointData.relative">
            <summary> Gets a value indicating if the Point is relative to point. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.aPointData.ent2">
            <summary> Gets the selected entity #2 (2 for intersection). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.aPointData.ent1">
            <summary> Gets the selected entity #1 (2 for intersection). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.aPointData.pt">
            <summary> Gets the Point (in world coordinates). </summary>
        </member>
        <member name="P:Mastercam.Support.Events.aPointData.id">
            <summary> Gets the identifier - Values, Center, Endpoint .... </summary>
        </member>
        <member name="T:Mastercam.Support.Events.aPointData">
            <summary> aPointData class. </summary>
            <remarks> A managed representation of Mastercam's 'aPoint' structure. </remarks>
        </member>
        <member name="F:Mastercam.Support.Events.entData.m_eptr">
            <summary> The selected entity's database pointer (DB_LIST_ENT_PTR). </summary>
        </member>
        <member name="M:Mastercam.Support.Events.entData.#ctor(System.IntPtr,System.Double,System.Double)">
            <summary> Initializes a new instance of the entData class. </summary>
            <param name="eptr"> The selected entity's database pointer. </param>
            <param name="t1">   The first 't' value. </param>
            <param name="t2">   The second 't' value. </param>
        </member>
        <member name="P:Mastercam.Support.Events.entData.t">
            <summary> Gets or sets the selected entity's 't' values. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.entData.eptr">
            <summary> Gets selected entity's database pointer (DB_LIST_ENT_PTR). </summary>
        </member>
        <member name="T:Mastercam.Support.Events.entData">
            <summary> entData class. </summary>
            <remarks> A managed representation of Mastercam's 'eSel' structure. </remarks>
        </member>
        <member name="M:Mastercam.Support.Events.sPoint.#ctor(System.Int16,System.Int16)">
            <summary> Initializes a new instance of the sPoint class. </summary>
            <param name="x"> The x coordinate. </param>
            <param name="y"> The y coordinate. </param>
        </member>
        <member name="P:Mastercam.Support.Events.sPoint.y">
            <summary> Gets or sets the y-coordinate of the point. </summary>
        </member>
        <member name="P:Mastercam.Support.Events.sPoint.x">
            <summary> Gets or sets the x-coordinate of the point. </summary>
        </member>
        <member name="T:Mastercam.Support.Events.sPoint">
            <summary> sPoint class. </summary>
            <remarks> A managed representation of Mastercam's 'ip' structure. </remarks>
        </member>
        <member name="T:Mastercam.Support.Events.UIEventType">
            <summary> Flags for specifying event options. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.NoACBar">
            <summary> An enum constant representing the 'disallow use of auto-cursor bar' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.KeyUp">
            <summary> An enum constant representing the 'allow key release (Shift and Ctrl only)' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.RButton">
            <summary> An enum constant representing the 'Allow right mouse button down/up events' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.LButton">
            <summary> An enum constant representing the 'allow left mouse button down/up events' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.DragLBD">
            <summary> An enum constant representing the 'allow dragging with left button down' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Notify">
            <summary> An enum constant representing the 'allow notify events' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.SldEdge">
            <summary> An enum constant representing the 'allow solid edge selection' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.SldFace">
            <summary> An enum constant representing the 'allow solid face selection' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.SldBody">
            <summary> An enum constant representing the 'allow solid body selection' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Dblclk">
            <summary> An enum constant representing the 'allow double click events' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Chain">
            <summary> An enum constant representing the 'allow chain events' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Command">
            <summary> An enum constant representing the 'allow command events' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Drag">
            <summary> An enum constant representing the 'allow drag (mouse move)' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Vector">
            <summary> An enum constant representing the 'allow window vector selection' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Polygon">
            <summary> An enum constant representing the 'allow window polygon selection' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Window">
            <summary> An enum constant representing the 'allow window selection' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Multi">
            <summary> An enum constant representing the 'allow multiple entities' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Key">
            <summary> An enum constant representing the 'allow keypress' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Sketch">
            <summary> An enum constant representing the 'allow sketched entry' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Select">
            <summary> An enum constant representing the 'allow entity selection' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.Point">
            <summary> An enum constant representing the 'allow point entity' option. </summary>
        </member>
        <member name="F:Mastercam.Support.Events.UIEventType.None">
            <summary> An enum constant representing the none option. </summary>
        </member>
        <member name="P:Mastercam.Database.MeshGeometry.RenderFlags">
            <summary> Gets or sets the special rendering properties for this Mesh. </summary>
        </member>
        <member name="P:Mastercam.Database.MeshGeometry.UseType">
            <summary> Gets a value indicating the "use type" of this mesh in an operation; (Comp, Drive, Check). </summary>
        </member>
        <member name="P:Mastercam.Database.MeshGeometry.MinMaxIsValid">
            <summary> Gets a value indicating if the Min/Max Points are valid, or not. </summary>
        </member>
        <member name="P:Mastercam.Database.MeshGeometry.MaxPt">
            <summary> Gets the maximum point of 3D extents (after any transformations). </summary>
        </member>
        <member name="P:Mastercam.Database.MeshGeometry.MinPt">
            <summary> Gets the minimum point of 3D extents (after any transformations). </summary>
        </member>
        <member name="P:Mastercam.Database.MeshGeometry.DataIndex">
            <summary> Gets the index in the polygonal_mesh database map (-1 = not valid). </summary>
        </member>
        <member name="P:Mastercam.Database.MeshGeometry.MeshType">
            <summary> Gets the type of the Mesh geometry. </summary>
        </member>
        <member name="M:Mastercam.Database.MeshGeometry.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given Mesh geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The geometry entity to use as defaults for this Mesh
                   geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Database.MeshGeometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a Mesh geometry entity to the Mastercam database. </summary>
            <param name="Ent"> The Mesh geometry entity to be committed. </param>
            <returns> True if the commit was successful, false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.MeshGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the MeshGeometry class. </summary>
            <remarks> ID Lookup Constructor. Attempts to retrieve a geometry entity with the given ID
          from the Mastercam database and use that to initialize this Mesh geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the geometry entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Database.MeshGeometry.LoadDefaults">
            <summary> Loads the default values for a given Mesh geometry object. </summary>
        </member>
        <member name="T:Mastercam.Database.MeshGeometry">
            <summary> This class handles the interaction between the NET-Hook and Mastercam for Mesh geometry objects. </summary>
            <remarks> Note that this type of entity is not user construct-able.
		  This is for interacting with Polygonal Mesh entities that already exist in Mastercam's database. </remarks>
        </member>
        <member name="P:Mastercam.Surfaces.FilletSurface.TangencyCurve2">
            <summary> Gets or sets the object representation of the second tangency curve. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.FilletSurface.TangencyCurve1">
            <summary> Gets or sets the object representation of the first tangency curve. </summary>
        </member>
        <member name="P:Mastercam.Surfaces.FilletSurface.CenterCurve">
            <summary> Gets or sets the center curve for this FilletSurface object. </summary>
        </member>
        <member name="M:Mastercam.Surfaces.FilletSurface.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given surface geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The surface geometry entity to use as defaults for this
                   surface geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Surfaces.FilletSurface.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a surface geometry entity to the Mastercam database. </summary>
            <param name="Ent"> [in,out] The surface geometry entity to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Surfaces.FilletSurface.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the FilletSurface class. </summary>
            <remarks> Attempts to retrieve a surface geometry entity with the given ID from the Mastercam
          database and use that to initialize this surface geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the surface geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="T:Mastercam.Surfaces.FilletSurface">
            <summary> This class is used for working with fillet surfaces within Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.SetMachineGroupComment(Mastercam.Support.Group,System.String)">
            <summary> Sets machine group comment. </summary>
            <param name="group"> The (machine) group. </param>
            <param name="comment"> The comment string. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.GetMachineGroupComment(Mastercam.Support.Group)">
            <summary> Gets the comment from a machine group properties (files page). </summary>
            <param name="group"> The (machine) group. </param>
            <returns> The comment string, else an empty string it is fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.GetToolpathOutputFolder(Mastercam.Support.Group)">
            <summary> Gets toolpath output folder for the specified Group. </summary>
            <remarks> If the supplied group is not a Machine Group (e.g. a Toolpath or Operation Group),
		   this method will attempt to retrieve the data from the Machine Group that contains
		   the supplied group. </remarks>
            <param name="group"> The group. </param>
            <returns> The toolpath output folder, else an empty string it is fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.SetToolpathOutputFolder(System.String)">
            <summary> Sets the "toolpath directory" path in all of the Machine Groups. </summary>
            <param name="path"> The path of the folder. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.SetToolpathOutputFolder(Mastercam.Support.Group,System.String)">
            <summary> Sets the "toolpath directory" path in a Machine Group. </summary>
            <param name="group"> The (machine) group. </param>
            <param name="path">  The path of the folder. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.GetCoolantLabelStrings(System.Collections.Generic.IList`1{System.String},System.Collections.Generic.IList`1{System.String},System.Collections.Generic.IList`1{System.String})">
            <summary> Gets the coolant label strings from the Machine Definition. </summary>
            <remarks> These strings are defined in the Machine Definition (Coolant commands tab page).
           This overload of GetCoolantLabelStrings retrieves from the "active" Machine Group.
           </remarks>
            <param name="baseText"> [out] A list of coolant "event" strings. </param>
            <param name="onText">   [out] A list of coolant "enable" strings. </param>
            <param name="offText">  [out] A list of coolant "off" strings. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.GetCoolantLabelStrings(Mastercam.Database.Operation,System.Collections.Generic.IList`1{System.String},System.Collections.Generic.IList`1{System.String},System.Collections.Generic.IList`1{System.String})">
            <summary> Gets the coolant label strings from the Machine Definition. </summary>
            <remarks> These strings are defined in the Machine Definition (Coolant commands tab page).
          This looks up the Machine for the specified Operation, unlike the other
          overload of GetCoolantLabelStrings which retrieves from the "active" Machine Group.
          </remarks>
            <param name="op">       The operation. </param>
            <param name="baseText"> [out] A list of coolant "event" strings. </param>
            <param name="onText">   [out] A list of coolant "on" strings. </param>
            <param name="offText">  [out] A list of coolant "off" strings. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.SetMachineDescription(Mastercam.Support.Group,System.String)">
            <summary> Gets the "description" in the Machine in the specified Machine Group. </summary>
            <param name="MachineGroup"> The group the machine belongs to. </param>
            <param name="Description"> The new description string (120 characters max). </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.SetMachineDescription(System.String)">
            <summary> Sets the "description" in the active Machine Definition. </summary>
            <param name="Description"> The new description string (120 characters max). </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.GetMachineDescription(Mastercam.Support.Group)">
            <summary> Gets the "description" in the Machine in the specified Machine Group. </summary>
            <param name="MachineGroup"> The group the machine belongs to. </param>
            <returns> The description string if successful, else an empty string if not. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.GetMachineDescription">
            <summary> Gets the "description" in the active Machine Definition. </summary>
            <returns> The description string if successful, else an empty string if not. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.GetMachineName(Mastercam.Support.Group)">
            <summary> Gets the name of Machine referenced in the supplied Machine Group. </summary>
            <param name="MachineGroup"> The group the machine belongs to. </param>
            <returns> empty string if it fails, else the name of the machine. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.GetCurrentMachineName">
            <summary> Gets the name of Machine referenced in the currently active Machine Group. </summary>
            <returns> empty string if it fails, else the name of the current machine. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.GetCurrentMachineType">
            <summary> This method is used for determining the product type of the currently active
          machine group.
          </summary>
            <returns> The product type of the currently active machine group. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.CreateRouterMachineGroup">
            <summary> This method creates a new default Router machine group. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.CreateLatheMachineGroup">
            <summary> This method creates a new default Lathe machine group. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.CreateWireMachineGroup">
            <summary> This method creates a new default Wire machine group. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.CreateMillMachineGroup">
            <summary> This method creates a new default Mill machine group. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.IsCurrentMachineGroupRouter">
            <summary> This method is used for determining whether the current machine group is a Router
          machine.
          </summary>
            <returns> True is the currently active machine is a Router machine, else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.IsCurrentMachineGroupLathe">
            <summary> This method is used for determining whether the current machine group is a Lathe
          machine.
          </summary>
            <returns> True is the currently active machine is a Lathe machine, else false if not.
       </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.IsCurrentMachineGroupWire">
            <summary> This method is used for determining whether the current machine group is a Wire
          machine.
          </summary>
            <returns> True is the currently active machine is a Wire machine, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.IsCurrentMachineGroupMill">
            <summary> This method is used for determining whether the current machine group is a Mill
          machine.
          </summary>
            <returns> True is the currently active machine is a Mill machine, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.CreateMachineGroup(Mastercam.Database.Types.ProductType,System.String)">
            <summary> This method creates a new machine group of the specified product type and
          using the specified Machine Definition.
          </summary>
            <param name="Product">     The type of machine group to create. </param>
            <param name="MachineName"> The full path the Machine Definition file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.CreateMachineGroup(Mastercam.Database.Types.ProductType)">
            <summary> This method creates a new machine group of the specified product type. </summary>
            <param name="Product"> The type of machine group to create. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.IsCurrentMachineGroup(Mastercam.Database.Types.ProductType)">
            <summary> This method is used for determining whether the current machine group is of a given
          type.
          </summary>
            <param name="Product"> The product type to check the currently active machine against.
                       </param>
            <returns> True is the currently active machine is of the specified product type, else false if
          not.
          </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.RetrieveCoolantStrings(CCNCMachine*,System.Collections.Generic.IList`1{System.String},System.Collections.Generic.IList`1{System.String},System.Collections.Generic.IList`1{System.String})">
            <summary> Retrieves the coolant label strings from a Machine Definition. </summary>
            <param name="machine">  A pointer to the Machine to retrieve the text strings from. </param>
            <param name="baseText"> [out] A list of coolant "event" strings. </param>
            <param name="onText">   [out] A list of coolant "enable" strings. </param>
            <param name="offText">  [out] A list of coolant "off" strings. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.MachineDefManager.#ctor">
            <summary> Initializes a new instance of the MachineDefManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.MachineDefManager">
            <summary> Manager for Machine Groups. </summary>
            <remarks> This class is used primarily for determining active machines and creating new machine
          groups - more specific groups functionality can be achieved by working through the
          <see cref="T:Mastercam.Support.GroupManager" /> class.
          </remarks>
        </member>
        <member name="M:Mastercam.Nesting.NestingFile.AddSheet(Mastercam.Nesting.NestingSheet)">
            <summary> This method adds a specified sheet object to the current file object. </summary>
            <param name="NewSheet"> The new nesting sheet object to add to the file. </param>
        </member>
        <member name="M:Mastercam.Nesting.NestingFile.AddPart(Mastercam.Nesting.NestingPart)">
            <summary> This method adds a specified part object to the current file object. </summary>
            <param name="NewPart"> The new nesting part object to add to the file. </param>
        </member>
        <member name="P:Mastercam.Nesting.NestingFile.PartArray">
            <summary> Gets or sets the array of nesting part objects associated with this file.
          </summary>
            <value> An Array of parts. </value>
        </member>
        <member name="P:Mastercam.Nesting.NestingFile.SheetArray">
            <summary> Gets or sets the array of nesting sheet objects associated with this file.
          </summary>
            <value> An Array of sheets. </value>
        </member>
        <member name="M:Mastercam.Nesting.NestingFile.Commit">
            <summary> This saves the current nesting file to the path and name specified by the FilePath
          member variable.
          </summary>
            <returns> True if the file was created and written successfully, else false if not. </returns>
            <exception cref="T:Mastercam.App.Exceptions.OutputFileNotSpecifiedException"> Thrown if this nesting file object
                                                   does not have a valid filename and
                                                   path when this commit attempt is made.
                                                   </exception>
        </member>
        <member name="M:Mastercam.Nesting.NestingFile.Commit(System.String)">
            <summary> This takes a new file name and path and saves the current nesting file to a file at
          that location and with that name.
          </summary>
            <param name="NewFilePath"> The file name and path of the new file to output these
                           nesting settings to.
                           </param>
            <returns> True if the file was created and written successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Nesting.NestingFile.#ctor">
            <summary> Initializes a new instance of the NestingFile class. </summary>
            <remarks>  This initializes a default nesting file with no parts or sheets,
           a null FilePath string, and a default set of nesting parameters.
          </remarks>
        </member>
        <member name="M:Mastercam.Nesting.NestingFile.#ctor(System.String)">
            <summary> Parameterized Constructor. Takes a path and file name of a nesting file and
          attempts to construct a NestingFile object based on that file's settings.
          </summary>
            <remarks> The construction process will add any parts or sheets read in from the specified as
          NestingPart and NestingSheet objects to their respective arrays.
          </remarks>
            <param name="FilePath"> The nesting file's full path and name with which to
                        construct this NestingFile object.
                        </param>
            <exception cref="T:Mastercam.App.Exceptions.TypeMismatchException"> Thrown if an data value is found in the nesting
                                         file that doesn't correspond to the appropriate
                                         type in it's internal nesting data entry.
                                         </exception>
        </member>
        <member name="F:Mastercam.Nesting.NestingFile.FilePath">
            <summary> Gets or sets the path and name of the nesting file object. </summary>
            <remarks> So long as this is a null string or represents an invalid path, trying to
          commit changes to the nesting file will result in exceptions.
          </remarks>
        </member>
        <member name="F:Mastercam.Nesting.NestingFile.Params">
            <summary> Gets or sets this file's list of nesting parameters. </summary>
        </member>
        <member name="M:Mastercam.Nesting.NestingFile.LoadDefaults">
            <summary> This method loads defaults for this object. </summary>
        </member>
        <member name="M:Mastercam.Nesting.NestingFile.ReadNestingFile(System.IO.StreamReader)">
            <summary> This method takes a file stream and reads in all of it's data, loading it into it's
          sections data.
          </summary>
            <param name="NestingReader"> The stream to read nesting section data from. </param>
            <returns> True if the nesting file was read successfully, false if not. </returns>
        </member>
        <member name="F:Mastercam.Nesting.NestingFile.ExcessStrings">
            <summary> The array holding all of the excess strings found out of either of those sections.
          </summary>
        </member>
        <member name="F:Mastercam.Nesting.NestingFile.Parts">
            <summary> The array holding all of the part section objects. </summary>
        </member>
        <member name="F:Mastercam.Nesting.NestingFile.Sheets">
            <summary> The array holding all of the sheet section objects. </summary>
        </member>
        <member name="T:Mastercam.Nesting.NestingFile">
            <summary> This class is used for working with Mastercam Nesting files. </summary>
        </member>
        <member name="M:Mastercam.Nesting.NestingSheet.#ctor">
            <summary> Initializes a new instance of the NestingSheet class. </summary>
            <remarks> This initializes all of the nesting item objects to their default values.
          </remarks>
        </member>
        <member name="M:Mastercam.Nesting.NestingSheet.Commit(System.IO.StreamWriter)">
            <summary> Commits the NestingSheet. </summary>
            <param name="Stream"> The initialized stream to output to. </param>
        </member>
        <member name="T:Mastercam.Nesting.NestingSheet">
            <summary> This class is used to work with sheet sections in a Mastercam nesting file. </summary>
        </member>
        <member name="M:Mastercam.Nesting.NestingPart.#ctor">
            <summary> Initializes a new instance of the NestingPart class. </summary>
            <remarks> This initializes all of the nesting item objects to their default values.
          </remarks>
        </member>
        <member name="M:Mastercam.Nesting.NestingPart.Commit(System.IO.StreamWriter)">
            <summary> Commits. </summary>
            <param name="Stream"> The initialized stream to output to. </param>
        </member>
        <member name="T:Mastercam.Nesting.NestingPart">
            <summary> This class is used to work with part sections in a Mastercam nesting file. </summary>
        </member>
        <member name="M:Mastercam.App.NetHook3App.ShutdownMastercam">
            <summary> Allows the NET-Hook to shutdown Mastercam, if... </summary>
            <returns> true if EnableSilentShutdownMode is enabled and it succeeds, else false. </returns>
        </member>
        <member name="M:Mastercam.App.NetHook3App.GetLastMouseClick">
            <summary> Retrieves the flag for the most recent mouse click. </summary>
            <remarks> See <see cref="T:Mastercam.App.Types.MCamMouseClickType" /></remarks>
            <returns> The last mouse click type; RightClick or LeftClick </returns>
            <example>
                <code>
// Test for this in the main 'Run' method of the NET-Hook.
bool rightClick = (NetHook3App.GetLastMouseClick() == MCamMouseClickType.RightClick);
if (rightClick) // Do something special if the user right-clicked on our toolbar icon...
{
    System.Diagnostics.Debug.WriteLine("My NET-Hook: RIGHT Mouse Button Clicked!");
}
</code>
            </example>
        </member>
        <member name="M:Mastercam.App.NetHook3App.Version(System.Int32)">
            <summary> Overrideable.
          This method should return the version of the NET-Hook library the app was targeted to.
          </summary>
            <param name="mc_version"> The Mastercam version#. </param>
            <returns> A MCamReturn return type code. </returns>
            <example>
                <code source="Examples\CS\HelloWorld.cs" region="Version Method" language="cs" />
                <code source="Examples\VB\HelloWorld.vb" region="Version Method" language="vbnet" />
            </example>
        </member>
        <member name="M:Mastercam.App.NetHook3App.MultiThreadOpStateNotify(System.Int32,Mastercam.App.Types.MCamMultiThreadOpState)">
            <summary> Overrideable.
		  This method handles any multi-thread operation state changes that took place in Mastercam's execution environment. </summary>
            <param name="opId">    The operation ID whose state has changed. </param>
            <param name="opState"> State of the operation. </param>
            <returns> A <see cref="T:Mastercam.App.Types.MCamReturn" /> return type code. </returns>
        </member>
        <member name="M:Mastercam.App.NetHook3App.Notify(Mastercam.App.Types.MCamEvent)">
            <summary> Overrideable.
         This method handles any notifications or event flags sent from the  main
         Mastercam application.
         </summary>
            <param name="event_flag"> The event value representing the event that took place in Mastercam's
                          execution environment. </param>
            <returns> A <see cref="T:Mastercam.App.Types.MCamReturn" /> return type code. </returns>
            <example>
                <code source="Examples\CS\HelloWorld.cs" region="Notify Method" language="cs" />
                <code source="Examples\VB\HelloWorld.vb" region="Notify Method" language="vbnet" />
            </example>
        </member>
        <member name="M:Mastercam.App.NetHook3App.Close(System.Int32)">
            <summary> Overrideable.
          This method is executed just before a NET-Hook add-on is to be unloaded,
          and can be used to perform app-specific cleanup.
          </summary>
            <param name="param"> The parameter (optional). </param>
            <returns> A MCamReturn return type code. </returns>
            <example>
                <code source="Examples\CS\HelloWorld.cs" region="Close Method" language="cs" />
                <code source="Examples\VB\HelloWorld.vb" region="Close Method" language="vbnet" />
            </example>
        </member>
        <member name="M:Mastercam.App.NetHook3App.Run(System.Int32)">
            <summary> Overrideable.
          This method is executed after a NET-Hook add-on has been loaded and
          serves as the main execution loop for NET-Hook apps.
          </summary>
            <param name="param"> The parameter (optional). </param>
            <returns> A MCamReturn return type code. </returns>
            <example>
                <code source="Examples\CS\HelloWorld.cs" region="Run Method" language="cs" />
                <code source="Examples\VB\HelloWorld.vb" region="Run Method" language="vbnet" />
            </example>
        </member>
        <member name="M:Mastercam.App.NetHook3App.Init(System.Int32)">
            <summary> Overrideable.
          This method is executed when a NET-Hook add-on is first loaded. </summary>
            <param name="param"> The parameter (optional) </param>
            <returns> A MCamReturn return type code. </returns>
            <example>
                <code source="Examples\CS\HelloWorld.cs" region="Init Method" language="cs" />
                <code source="Examples\VB\HelloWorld.vb" region="Init Method" language="vbnet" />
            </example>
        </member>
        <member name="M:Mastercam.App.NetHook3App.SetMastercamStyleNumericProcessing">
            <summary> Sets the number formating we'll be using in the add-on. </summary>
            <remarks> We need to have the decimal separator to be the '.', no matter what the culture setting. </remarks>
        </member>
        <member name="T:Mastercam.App.NetHook3App">
            <summary> The Mastercam .NET User Application default application class. </summary>
            <remarks> Creating an application class which derives from this class is one way of creating
          a valid NET-Hook add-on. There is a default implementation for each method that
          will work, overloading the Run method is required in order to get your
          NET-Hook add-on to be executable.
          </remarks>
        </member>
        <member name="M:Mastercam.App.INetHook3App.Version(System.Int32)">
            <summary> Provides a method to notify Mastercam of the NET-Hook version this add-on was
          compiled with.
          </summary>
            <remarks> This should always return a Mastercam.App.Types.MCamDefines.NetHookLibraryVersion
          version number.
          </remarks>
            <param name="mc_version"> The Mastercam version# (supplied by The Mastercam App). </param>
            <returns> The version#. </returns>
        </member>
        <member name="M:Mastercam.App.INetHook3App.MultiThreadOpStateNotify(System.Int32,Mastercam.App.Types.MCamMultiThreadOpState)">
            <summary> Used to notify the NET-Hook of any Mastercam multi-thread operation state changes during its execution. </summary>
            <param name="opId">    The operation ID whose state has changed. </param>
            <param name="opState"> State of the operation. </param>
            <returns> Always return the MCamReturn NoErrors code. </returns>
        </member>
        <member name="M:Mastercam.App.INetHook3App.Notify(Mastercam.App.Types.MCamEvent)">
            <summary> Used to notify the NET-Hook of any Mastercam events during its execution. </summary>
            <param name="event_flag"> The event value representing the event that took place in
                          Mastercam's execution environment. </param>
            <returns> Always return the MCamReturn NoErrors code. </returns>
        </member>
        <member name="M:Mastercam.App.INetHook3App.Close(System.Int32)">
            <summary> Used to cleanup any app-specific data before unloading a NET-Hook add-on. </summary>
            <param name="param"> The parameter (optional) </param>
            <returns> A MCamReturn return type code. </returns>
        </member>
        <member name="M:Mastercam.App.INetHook3App.Run(System.Int32)">
            <summary> Used as the main entry point for a running the NET-Hook add-on. </summary>
            <param name="param"> The parameter (optional) </param>
            <remarks> You can pass in an integer value to your Run method,
          when using a Function Table (.FT) file.</remarks>
            <returns> A MCamReturn return type code. </returns>
        </member>
        <member name="M:Mastercam.App.INetHook3App.Init(System.Int32)">
            <summary> Used to initialize data when the NET-Hook add-on is loaded. </summary>
            <param name="param"> The parameter (optional). </param>
            <returns> A MCamReturn return type code. </returns>
        </member>
        <member name="T:Mastercam.App.INetHook3App">
            <summary> The Mastercam .NET User Application interface definition. </summary>
            <remarks> Creating an application class which implements this interface is one way of creating a
          valid NET-Hook add-on.
          Providing definitions for all of the interface methods for the necessary
          framework to create and run NET-Hook add-ons successfully.
          </remarks>
        </member>
        <member name="T:Mastercam.App.Types.MCamMultiThreadOpState">
            <summary>Mastercam multi-threaded operation states. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamMultiThreadOpState.Stopped">
            <summary> Operation processing was stopped. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamMultiThreadOpState.Failed">
            <summary> Operation processing failed. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamMultiThreadOpState.Success">
            <summary> Operation processed successfully. </summary>
        </member>
        <member name="T:Mastercam.App.Types.MCamEvent">
            <summary>Mastercam App event codes and notifications. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.OperationSelectionsChanged">
            <summary> Called whenever the selection state of the operations has changed. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.DialogBarReAttached">
            <summary> Called when a dialog bar needs to be re-attached </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.DialogBarDetached">
            <summary> Called when a dialog bar needs to be detached </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.AfterPosting">
            <summary> Called immediately after posting a file </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.BeforePosting">
            <summary> Called immediately before posting a file </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.SelectAllMask">
            <summary> Called after SelectAllMask (Ctrl-A)  </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.WorkspaceAfterSave">
            <summary> Called after a workspace is saved  </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.WorkspaceBeforeSave">
            <summary> Called before a workspace is saved  </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.WorkspaceLoaded">
            <summary> Called after a workspace is loaded  </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.WorkspacePreLoaded">
            <summary>  Called before a workspace is loaded </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.LevelManagerGraphicsChanged">
            <summary>  Level Manager: Called when graphics changes </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.PlaneInfo">
            <summary>  Status Bar Item: Active plane info display relative to WCS yes/no </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Pre_File_Open">
            <summary> Called just before a part file is opened  (X7) </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.XFormEnd">
            <summary> Called just after xform has finished transforming all instance of all entities. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.XFormStart">
            <summary> Called just before xform starts transforming all instances of all entities. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.AppExit">
            <summary> Called prior to exiting from Mastercam </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.RunFunction">
            <summary>  Called prior to running any application function </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Post_File_Merge">
            <summary> Called after exiting config </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Pre_File_Merge">
            <summary> Called before entering config </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.DbInit">
            <summary>  Called before database init executes </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.CfgExit">
            <summary> Called after exiting config </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.CfgStart">
            <summary> Called before entering config </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.MinMax">
            <summary> Generating graphics min/max </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.RepaintBackBuffer">
            <summary> Screen repaint (back buffer) </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Repaint_BB">
            <summary> [DEPRECATED use RepaintBackBuffer] Screen repaint (back buffer) </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Sld_Selection">
            <summary> Solid History selection made </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.TPlane">
            <summary> Status Bar Item: tool plane </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.CPlane">
            <summary> Status Bar Item: construction plane </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.GView">
            <summary> Status Bar Item: graphics view </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.WCS">
            <summary> Status Bar Item: work coordinate system </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.LWidth">
            <summary> Status Bar Item: line width </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.LStyle">
            <summary> Status Bar Item: line style </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.PStyle">
            <summary> Status Bar Item: point style </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Group">
            <summary> Status Bar Item: group </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Attrib">
            <summary> Status Bar Item: attributes </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.ZDepth">
            <summary> Status Bar Item: construction depth </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Level">
            <summary> Status Bar Item: level </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Color">
            <summary> Status Bar Item: color </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.C2d3d">
            <summary> Status Bar Item: 2d/3d </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Undo">
            <summary> Undo </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Exit_Tool_Prefs">
            <summary> Exit tools preferences </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Enter_Tool_Prefs">
            <summary> Enter tools preferences </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.File_Open">
            <summary> File open </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Post_File_Save">
            <summary> File save </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Pre_File_Save">
            <summary> File save </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.File_New">
            <summary> File new </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Fit">
            <summary> Screen fit </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamEvent.Repaint">
            <summary> Screen repaint </summary>
        </member>
        <member name="T:Mastercam.App.Types.MCamReturn">
            <summary> Mastercam App function return codes. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamReturn.AppUnloaded">
            <summary> Request that the add-on be unloaded by Mastercam. </summary>
            <remarks> A NET-Hook is never really unloaded until Mastercam exits. </remarks>
        </member>
        <member name="F:Mastercam.App.Types.MCamReturn.ErrorOccurred">
            <summary> The function encountered an error and is no longer executing. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamReturn.FunctionExit">
            <summary> The function exited and is no longer executing. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamReturn.EscapeKeyHit">
            <summary> The function ended by the user hitting the escape key,
            therefore stopping the function's execution.
            </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamReturn.NoErrors">
            <summary> The function returned with no errors.
          This generally means that the function executed successfully.
          </summary>
        </member>
        <member name="T:Mastercam.App.Types.MCamMouseClickType">
            <summary> Mastercam App mouse click type codes. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamMouseClickType.RightClick">
            <summary> The code representing a right mouse click. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamMouseClickType.LeftClick">
            <summary> The code representing a left mouse click. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamMouseClickType.Null">
            <summary> A null / error value. </summary>
        </member>
        <member name="T:Mastercam.App.Types.MCamDefines">
            <summary> The Mastercam NET-Hook API library version numbers. </summary>
        </member>
        <member name="F:Mastercam.App.Types.MCamDefines.NetHookLibraryVersion">
            <summary> NET-Hook API library version number. </summary>
        </member>
        <member name="M:IdleRefreshReloadLevels">
            <summary> Refresh/reloads levels from OnIdle if necessary. </summary>
        </member>
        <member name="M:LoadLevelManagerImageOnControl(UIPNGButton*)">
            <summary> Load the Level Manager's image on a given button </summary>
            <param name="pButton"> pointer to the UIBitmapButton control </param>
        </member>
        <member name="M:FirstLoadLevelsList">
            <summary>	Do a fresh load of the level list after a file new/open. </summary>
        </member>
        <member name="M:LevelData.AddNodeToMapping(LevelNode)">
            <summary> Adds a node to the levels map. </summary>
            <remarks> This method should be the only place that calls "new LevelNode ()" </remarks>
            <param name="node"> The node. </param>
        </member>
        <member name="M:LevelData.DeleteLevels">
            <summary> Deletes all of the stored levels. </summary>
        </member>
        <member name="M:LevelData.GetNodeByName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;)">
            <summary> Gets node by name. </summary>
            <remarks> Avoid usage: O (n). </remarks>
            <param name="name"> The name. </param>
            <returns> null if it fails, else the node by name. </returns>
        </member>
        <member name="M:LevelData.GetNodeByLevel(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets existing LevelNode from map keyed by level number. </summary>
            <param name="level"> The level. </param>
            <returns> nullptr if it does not exist, else a pointer to the LevelNode. </returns>
        </member>
        <member name="M:LevelData.EnsureLevelInBitMap(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Ensures that a level has a bitmask position. </summary>
            <param name="level"> The level. </param>
        </member>
        <member name="M:LevelData.GetLevels(System.Boolean)">
            <summary> Gather level numbers into an unordered set. </summary>
            <param name="visibleOnly"> (Optional) true to only get visible levels. </param>
            <returns> The unordered set of level numbers. </returns>
        </member>
        <member name="M:LevelData.GetFIFOLevelNumbers(System.Boolean)">
            <summary> Gets first-in-first-out (creation-ordered) level numbers. </summary>
            <remarks> This method first sorts the levels by the order they were created in, so is slower
		  than GetSortedLevelNumbers (). </remarks>
            <param name="visibleOnly"> (Optional) true to only get visible levels. </param>
            <returns> A vector of levels. </returns>
        </member>
        <member name="M:LevelData.GetSortedLevelNumbers(System.Boolean)">
            <summary> Gets a sorted vector of level numbers as integers. </summary>
            <remarks> The levels are already sorted, so this is the fastest way to get a list of all level numbers. </remarks>
            <param name="visibleOnly"> (Optional) true to only get visible levels. </param>
            <returns> A vector of levels. </returns>
        </member>
        <member name="M:LevelData.FindHighestLevelNumber">
            <summary> Determines the maximum level number used. </summary>
            <returns> Max level number encountered or -1 for error. </returns>
        </member>
        <member name="M:LevelData.GetLevelBit(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a level's bit position in the bitmask. </summary>
            <param name="level"> The level. </param>
            <returns> Zero-based index of the bit or UT_LEVELIDX_NONE if level is non-positive or not found. </returns>
        </member>
        <member name="M:LevelData.resetEntityCount(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Resets the entity count of one or all levels. </summary>
            <param name="nLevel"> (optional) Negative number for all levels, otherwise which level to reset the count of. </param>
        </member>
        <member name="M:UIPNGButton.GetSavedWindowText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets saved window text. </summary>
            <param name="text"> The text. </param>
        </member>
        <member name="M:UIPNGButton.SetSavedWindowText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Sets saved window text. </summary>
            <param name="text">				 The text. </param>
            <param name="overwriteExisting"> (Optional) True to overwrite, false to preserve the existing. </param>
        </member>
        <member name="M:UIPNGButton.SetTooltipFromSavedWindowText(System.Boolean)">
            <summary> Sets tooltip from saved window text. </summary>
            <param name="mustHaveBar"> (Optional) True to must have bar. </param>
        </member>
        <member name="M:UIPNGButton.ParseText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the window text and tooltip text. </summary>
            <param name="text">    The text to parse. </param>
            <param name="wndText"> The window text. </param>
            <param name="tipText"> The tooltip text. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.GetAllGroups(System.Collections.Generic.List`1{Mastercam.Support.Group},System.Boolean)">
            <summary> Gets all groups in the active Operation Manager list. </summary>
            <param name="groups">            [out] The list of groups. </param>
            <param name="onlyMachineGroups"> true to only select Machine Groups. </param>
            <returns> The number of groups in the list (-1 = error). </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.CheckGroupName(System.String,System.Boolean)">
            <summary> Checks to see if the supplied name is valid for a Group. </summary>
            <remarks> All Machine and Toolpath groups must have a unique name. </remarks>
            <param name="GroupName"> The proposed name of the group. </param>
            <param name="WarnUser">  true to display an on-screen warning to the user. </param>
            <returns> true = name is OK to be used, false = an invalid name (empty or is already used). </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.GetCurrentGroupName">
            <summary> Gets the name of active group. </summary>
            <remarks> The active group contains the 'red arrow' insertion point marker. </remarks>
            <returns> empty string if it fails, else the name. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.FindGroupByID(System.Int32)">
            <summary> Searches for a Group "by ID". </summary>
            <param name="GroupID"> The group ID number to search for. </param>
            <returns> The found group, else null if it fails to find a match. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.FindGroupByName(System.String)">
            <summary> Searches for a Group "by name". </summary>
            <param name="GroupName"> The name of the to search for. </param>
            <returns> The found group, else null if it fails to find a match. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.MakeGroupCurrent(Mastercam.Support.Group)">
            <summary> Make the given Group object the currently active group in Mastercam. </summary>
            <param name="TargetGroup"> The Group object to make active in Mastercam. </param>
            <returns> True if the group was set as active successfully. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.GetMachineNameInGroup(Mastercam.Support.Group)">
            <summary> Retrieves the "name" of the Machine Definition referenced in a Machine Group. </summary>
            <param name="MachineGroup"> The Machine Group to be queried. </param>
            <returns> If the Group is valid and is a Machine Group,
          the "name" of the Machine Definition referenced in the Machine Group,
          else an empty string. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.GetMachineNameInActiveGroup">
            <summary> Retrieves the "name" of the Machine Definition referenced in the 'active' Machine Group. </summary>
            <returns> The "name" of the Machine Definition referenced in the Machine Group,
          else an empty string. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.GetActiveMachineGroup">
            <summary> Returns a group object representing the active, root machine group. </summary>
            <returns> A group object for the active machine group, else null if one does not exists </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.GetActiveGroup">
            <summary> Returns a group object representing the active group. </summary>
            <remarks> This could a a Machine or a Toolpath Group. </remarks>
            <returns> A group object for the active group, else null if one does not exists </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.DeleteGroup(Mastercam.Support.Group@)">
            <summary> Deletes a Mastercam group. </summary>
            <param name="GroupToDelete"> A reference to the group object being deleted.
                             It should get set to a null value if the deletion was successful.
                             </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.SetMachineInGroup(Mastercam.Support.Group,System.String)">
            <summary> Sets the Machine to be used in a Machine Group. </summary>
            <param name="MachineGroup"> The Machine Group to be altered. </param>
            <param name="MachineName">  The (full path) name of the machine definition to use. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.SetMachineInActiveGroup(System.String)">
            <summary> Sets the Machine to be used in the 'active' Machine Group. </summary>
            <param name="MachineName">  The (full path) name of the machine definition to use. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.NewGroup(System.String,Mastercam.Database.Types.ProductType,System.String)">
            <summary> This method creates and returns a newly created Group object within the currently
           active group in Mastercam. </summary>
            <remarks> This will create a Mill Machine Group using the default machine.
          Just as if you selected - Machine Type -&gt; Mill -&gt; Default in Mastercam.

          If NewGroupName is null or an empty string, Mastercam will auto generate a name for the group.
          If you specify a name that is already used, the creation will fail.
          <see cref="M:Mastercam.Support.GroupManager.CheckGroupName(System.String,System.Boolean)" /></remarks>
            <param name="NewGroupName"> The name of the new group being created. </param>
            <param name="Product">      The product type of the group to be created. </param>
            <param name="MachineName">  The (full path) name of the machine definition to use. </param>
            <remarks> If NewGroupName is null or an empty string, Mastercam will auto generate a name for the group.
          If you specify a name that is already used, the creation will fail.
          <see cref="M:Mastercam.Support.GroupManager.CheckGroupName(System.String,System.Boolean)" />
          If the specified Machine Definition file does not exist,
          the return will be a failure (a null return). </remarks>
            <returns> The newly created group object, else null if failed. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.NewGroup(Mastercam.Support.Group,System.String)">
            <summary> This method creates and returns a newly created Group object within the currently
          specified parent group.
          </summary>
            <remarks> If NewGroupName is null or an empty string, Mastercam will auto generate a name for the group.
           If you specify a name that is already used, the creation will fail.
           <see cref="M:Mastercam.Support.GroupManager.CheckGroupName(System.String,System.Boolean)" /></remarks>
            <param name="ParentGroup"> The parent group the new group belongs to. </param>
            <param name="NewGroupName"> The name of the new group being created. </param>
            <returns> The newly created group object, else null if failed. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.NewGroup(Mastercam.Support.Group)">
            <summary> This method creates and returns a newly created Group object within the currently
          specified parent group.
          </summary>
            <param name="ParentGroup"> The parent group the new group belongs to. </param>
            <returns> The newly created group object, else null if it failed. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.NewGroup(System.String,Mastercam.Database.Types.ProductType)">
            <summary> This method creates and returns a newly created Group object within the currently
          active group in Mastercam.
          </summary>
            <remarks> This will create a Mill Machine Group using the default machine.
          Just as if you selected - Machine Type -&gt; Mill -&gt; Default in Mastercam.

          If NewGroupName is null or an empty string, Mastercam will auto generate a name for the group.
          If you specify a name that is already used, the creation will fail.
          <see cref="M:Mastercam.Support.GroupManager.CheckGroupName(System.String,System.Boolean)" /></remarks>
            <param name="NewGroupName"> The name of the new group being created. </param>
            <param name="Product">      The product type of the group to be created. </param>
            <returns> The newly created group object, else null if failed. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.NewGroup(Mastercam.Database.Types.ProductType)">
            <summary> This method creates and returns a newly created Group object within the currently
          active group in Mastercam.
          </summary>
            <remarks> This will create a 'Product' Machine Group using the default machine.
          Just as if you selected - Machine Type -&gt; 'Product' -&gt; Default in Mastercam.
          </remarks>
            <param name="Product"> The product type of the group to be created. </param>
            <returns> The newly created group object, else null if it failed. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.NewGroup(System.String)">
            <summary> This method creates and returns a newly created Group object within the currently
          active group in Mastercam.
          </summary>
            <remarks> This will create a Mill Machine Group using the default machine.
          Just as if you selected - Machine Type -&gt; Mill -&gt; Default in Mastercam.

          If NewGroupName is null or an empty string, Mastercam will auto generate a name for the group.
          If you specify a name that is already used, the creation will fail. 
          <see cref="M:Mastercam.Support.GroupManager.CheckGroupName(System.String,System.Boolean)" /></remarks>
            <param name="NewGroupName"> The name of the new group being created. </param>
            <returns> The newly created group object, else null if it failed. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.NewGroup">
            <summary> This method creates and returns a newly created Group object within the currently
          active group in Mastercam.
          </summary>
            <remarks> This will create a Mill Machine Group using the default machine.
          Just as if in Mastercam you selected: Machine Type -&gt; Mill -&gt; Default.
          </remarks>
            <returns> The newly created group object, else null if it failed. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.GetGroupNode(System.String)">
            <summary> This method finds the group list pointer that corresponds to a given group name.
          </summary>
            <param name="GroupName"> The group name to search for. </param>
            <returns> The corresponding group list pointer if it was found, else NULL if not. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.GetGroupNode(System.Int32)">
            <summary> This method finds the group list pointer that corresponds to a given group number ID.
          </summary>
            <param name="GroupNumber"> The group number ID to search for. </param>
            <returns> The corresponding group list pointer if it was found, else NULL if not. </returns>
        </member>
        <member name="M:Mastercam.Support.GroupManager.#ctor">
            <summary> Initializes a new instance of the GroupManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.GroupManager">
            <summary> This class is used to work with and manage Mastercam groups and NET-Hook group objects.
          </summary>
            <summary>This class is used to work with and manage Mastercam groups and NET-Hook group objects.</summary>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.MoveOperation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,Mastercam.Operations.OperationsManager.MoveLocation,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Move operation. </summary>
            <param name="sourceOpId">  The identifier of the operation to be moved. </param>
            <param name="targetOpId">  The identifier of the operation to move target location. </param>
            <param name="location">    The (before/after) mode. </param>
            <param name="targetGrpId"> The identifier of the target toolpath group. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.SetOperationsSelectedState(Mastercam.Database.Operation[],System.Boolean,System.Boolean)">
            <summary> Selects or unselects the specified operations in the Toolpath Manager. </summary>
            <param name="OpsToSet">                    The array of operations to set the selection state on in the
                                             Toolpath Manager.
                                             </param>
            <param name="MarkNestingChildOps">           If true, then whenever a Nesting operation has
                                             been marked as selected/unselected, all of it's child
                                             operations will also be marked as selected/unselected.
                                             </param>
            <param name="state"> true to select, false to unselect the Operations. </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.SetAllOperationsSelectedState(System.Boolean)">
            <summary> All operations selection/un-selection. </summary>
            <param name="state"> true to select, false to unselect the Operations. </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.InitiatePosting(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary> This method actually initiates the posting process in Mastercam. </summary>
            <param name="NCDestinationPath"> The destination path of the NC output file.
                                 </param>
            <param name="EditNC">            Whether or not the editor should be opened to edit the NC
                                 file on completion.
                                 </param>
            <param name="AlsoCreateNCIFile"> Whether or not an NCI file should also be output. </param>
            <param name="EditNCI">           Whether or not the editor should be opened to edit the NCI
                                 file on completion.
                                 </param>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.PostName">
            <summary> Gets or sets the name of the post processor file being used in the current machine group.</summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.BlockDrillLibraryName">
            <summary> Gets or sets the name of the block drilling library file being used in the current
          machine group.
         </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ToolLibraryName">
            <summary> Get or sets the name of the tool library file being used in the current machine group. </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ActiveMachine">
            <summary> Gets or sets the name of the currently active machine. </summary>
[Deprecated("Please use the GroupManager.GetMachineNameInGroup and GroupManager.SetMachineInGroup methods.")]
</member>
        <member name="P:Mastercam.Operations.OperationsManager.JobSetupStockSize">
            <summary> Gets or sets the stock size in the current machine group. </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.JobSetupStockOrigin">
            <summary> Gets or sets the origin point of the stock for the current machine group. </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.OpManagerRefreshEnabled">
            <summary> Gets or sets a value indicating whether or not the Toolpath Manager can refresh
         itself at it's own discretion.
         </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.JobSetupMaterial">
            <summary> Gets or sets the name of the materials file being used in the current machine group.
        </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.NCCurrentFileNameMode">
            <summary> Gets or sets a value indicating the current NC file naming rules in the current
         Mastercam configuration.
         </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.NCPrompt">
            <summary> Gets or sets a value indicating whether or not the NC file path prompt is to be displayed.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.SetProgramName(System.String,System.Boolean)">
            <summary> Sets the program  name in the operations. </summary>
            <param name="name"> The name to assign to the operations. </param>
            <param name="all">  True to process all operations. False to process just the selected operations. </param>
            <returns> The number of operation that were altered. </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.GetProgramNames(System.Boolean)">
            <summary> Gets the program name in the operations. </summary>
            <param name="all">  True to process all operations. False to process just the selected operations. </param>
            <returns> A dictionary collection, the Key being the Operation ID# and the Value being the Program Name. </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.SetProgramNumber(System.Int32,System.Boolean)">
            <summary> Sets the program number in the operations. </summary>
            <param name="value"> The program number value to assign. </param>
            <param name="all">   True to process all operations. False to process just the selected operations. </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.CalcCycleTime(System.Boolean)">
            <summary> Calculates the cycle time of the selected operations. </summary>
            <remarks> Note that this assumes the operation is not in a 'dirty' state!
		 This does not regenerate the operation if it is 'dirty', and the time returned will be 0.0
		 The time (in seconds) that's returned in the "raw" time of the operations.
		 Any additional time (for tool changes, etc.) would need to be added to this if desired. 
		 You can use the functionality in the .NET Framework's TimeSpan to format the time as desired.	
		 See the related CalcCycleTime functionality in the Operation class. </remarks>
            <param name="all"> True to process all operations. False to process just the selected operations. </param>
            <returns> The calculated cycle time (in seconds). </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.ClearBufferedOps">
            <summary> This method clears the Toolpath Manager's deleted ops buffer. </summary>
            <remarks> Deleting an operation may not always completely clear that operation from the
          database, which can result in a file being marked as dirty and needing
          saving even though it may have already been saved. Clearing the deleted
          operations buffer can resolve this, but will also result in making the
          deletion of any operations non-undoable.
          </remarks>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.DoNesting(System.String,System.Boolean)">
            <summary> This begins the nesting process in the current file. </summary>
            <param name="NestingINIFilename"> The path and name of the nesting *.ini file to use in the
                                  nesting process.
                                  </param>
            <param name="HideNestingDialog">  This should be true if the nesting process is supposed to
                                  skip the displaying of the nesting dialog before it starts.
                                  </param>
            <returns> True if the nesting went successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.UpdateAllOperationsFromTool(Mastercam.Database.Tool)">
            <summary> This methods updates all of the operations using a given tool to reflect the tool's
          operation-specific settings.
          </summary>
            <param name="ToolToUpdateFrom"> The tool whose operations should be updated to
                                reflect the tool's operation settings.
                                </param>
            <returns> True if all of the tool's operations were updated successfully, else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostOperations(Mastercam.Database.Operation[],System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary> This method posts a subset of operations from the Operations Manager. </summary>
            <param name="OpsToPost">         The operations to post. </param>
            <param name="NCDestinationPath"> This should be specified if the NC file is to be output
                                    to a file path and name different than the default.
                                    </param>
            <param name="EditNCAfterwords">  This flag indicates whether the NC file is to be opened by
                                    the default editor after the posting process is complete.
                                    </param>
            <param name="AlsoCreateNCIFile"> This flag indicates whether or not an NCI file is created
                                    for the operations during the posting process.
                                    </param>
            <param name="EditNCIAfterwords"> This flag indicates whether the NCI file is to be opened by
                                    the default editor after the posting process is complete.
                                    </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostOperations(Mastercam.Database.Operation[],System.String,System.Boolean,System.Boolean)">
            <summary> This method posts a subset of operations from the Operations Manager. </summary>
            <remarks> Note that this method will disallow the editing of the NCI upon posting.
          </remarks>
            <param name="OpsToPost">         The operations to post. </param>
            <param name="NCDestinationPath"> This should be specified if the NC file is to be output
                                 to a file path and name different than the default.
                                 </param>
            <param name="EditNCAfterwords">  This flag indicates whether the NC file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
            <param name="AlsoCreateNCIFile"> This flag indicates whether or not an NCI file is created
                                 for the operations during the posting process.
                                 </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostOperations(Mastercam.Database.Operation[],System.String,System.Boolean)">
            <summary> This method posts a subset of operations from the Operations Manager. </summary>
            <remarks> Note that this method will not create an associated NCI file by default.
          </remarks>
            <param name="OpsToPost">         The operations to post. </param>
            <param name="NCDestinationPath"> This should be specified if the NC file is to be output
                                 to a file path and name different than the default.
                                 </param>
            <param name="EditNCAfterwords">  This flag indicates whether the NC file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostOperations(Mastercam.Database.Operation[],System.String)">
            <summary> This method posts a subset of operations from the Operations Manager. </summary>
            <remarks> Note that this method will post to the default posting directory, will not
          create an associated NCI file, and will disallow the editing of the
          subsequent NC file by default.
          </remarks>
            <param name="OpsToPost">         The operations to post. </param>
            <param name="NCDestinationPath"> This should be specified if the NC file is to be output
                                 to a file path and name different than the default.
                                 </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostOperations(Mastercam.Database.Operation[])">
            <summary> This method posts a subset of operations from the Operations Manager. </summary>
            <remarks> Note that this method will post to the default posting directory, will not
          create an associated NCI file, and will disallow the editing of the
          subsequent NC file by default.
          </remarks>
            <param name="OpsToPost"> The operations to post. </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostAllOperations(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary> This method posts all of the operations in the Toolpath Manager. </summary>
            <param name="NCDestinationPath"> This should be specified if the NC file is to be output
                                 to a file path and name different than the default.
                                 </param>
            <param name="EditNCAfterwords">  This flag indicates whether the NC file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
            <param name="AlsoCreateNCIFile"> This flag indicates whether or not an NCI file is created
                                 for the operations during the posting process.
                                 </param>
            <param name="EditNCIAfterwords"> This flag indicates whether the NCI file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostAllOperations(System.String,System.Boolean,System.Boolean)">
            <summary> This method posts all of the operations in the Toolpath Manager. </summary>
            <remarks> Note that this method will disallow the editing of the NCI upon posting.
          </remarks>
            <param name="NCDestinationPath"> This should be specified if the NC file is to be output
                                 to a file path and name different than the default.
                                 </param>
            <param name="EditNCAfterwords">  This flag indicates whether the NC file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
            <param name="AlsoCreateNCIFile"> This flag indicates whether or not an NCI file is created
                                 for the operations during the posting process.
                                 </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostAllOperations(System.String,System.Boolean)">
            <summary> This method posts all of the operations in the Toolpath Manager. </summary>
            <remarks> Note that this method will not create an associated NCI file by default.
         </remarks>
            <param name="NCDestinationPath"> This should be specified if the NC file is to be output
                                 to a file path and name different than the default.
                                 </param>
            <param name="EditNCAfterwords">  This flag indicates whether the NC file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostAllOperations(System.String)">
            <summary> This method posts all of the operations in the Toolpath Manager. </summary>
            <remarks> Note that this method will not create an associated NCI file and will disallow
          the editing of the subsequent NC file by default.
          </remarks>
            <param name="NCDestinationPath"> This should be specified if the NC file is to be
                                 output to a file path and name different than the default.
                                 </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.PostAllOperations">
            <summary> This method posts all of the operations in the Toolpath Manager. </summary>
            <remarks> Note that this method will post to the default posting directory, will not
          create an associated NCI file and will disallow the editing of the
          subsequent NC file by default.
          </remarks>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.SelectOperations(Mastercam.Database.Operation[],System.Boolean)">
            <summary> This method selects all of the specified operations in the Toolpath Manager.
             </summary>
            <param name="OpsToSelect">                 The array of operations to select in the
                                           Toolpath Manager.
                                           </param>
            <param name="MarkNestingChildOpsSelected"> If true, then whenever a Nesting operation has
                                           been marked as selected, all of it's child
                                           operations will also be marked as selected.
                                           </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.SelectOperations(Mastercam.Database.Operation[])">
            <summary> This method selects all of the specified operations in the Toolpath Manager.
          </summary>
            <remarks> Note that by default children operations of selected ops will not have their
          selection status altered.
          </remarks>
            <param name="OpsToSelect"> The array of operations to select in the Toolpath Manager.
                              </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.SelectAllOperations">
            <summary> This method selects all of the operations in the Toolpath Manager. </summary>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.UnSelectOperations(Mastercam.Database.Operation[],System.Boolean)">
            <summary> This method unselects the specified operations in the Toolpath Manager.
             </summary>
            <param name="OpsToUnSelect">                 The array of operations to unselect in the
                                             Toolpath Manager.
                                             </param>
            <param name="MarkNestingChildOpsUnSelected"> If true, then whenever a Nesting operation has
                                             been marked as unselected, all of it's child
                                             operations will also be marked as unselected.
                                             </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.UnSelectOperations(Mastercam.Database.Operation[])">
            <summary> This method unselects the specified operations in the Toolpath Manager.
          </summary>
            <remarks> Note that by default children operations of selected ops will not have their
          selection status altered.
          </remarks>
            <param name="OpsToUnSelect"> The array of operations to unselect in the Toolpath Manager.
                             </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.UnSelectAllOperations">
            <summary>This method unselects all of the operations in the Toolpath Manager.</summary>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.RunSetupSheet">
            <summary> This method generates a setup sheet from the selected operation(s). </summary>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.RefreshOperationsManager(System.Boolean)">
            <summary> This method forces the update the Toolpath Manager tree. </summary>
            <remarks> You usually will not need to force the toolpath tree to be rebuilt, unless you have programmatically
		  moved operations. </remarks>
            <param name="force"> True to force the rebuild of the toolpath operations tree. </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.RefreshOperationsManager">
            <summary> This method refreshes and updates the Toolpath Manager. </summary>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.ExportOperations(System.String,System.String,System.Int32[],System.Boolean,System.Boolean)">
            <summary> This method exports operations to file. </summary>
            <remarks> Use the GetOperationID() member method of your Operations(s) to get their IDs. </remarks>
            <param name="FilePath">					 The full pathname of the file. </param>
            <param name="GroupName">				 The name of the group. </param>
            <param name="OperationIDs">				 The list of operation IDs to be exported. </param>
            <param name="JustOp">					 true to just export the operations, no geometry. </param>
            <param name="DisableDuplicateToolCheck"> true to duplicate tool check (default = false). </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.ImportAllOperations(Mastercam.Operations.OperationsManager.ImportOptions)">
            <summary> This method imports ALL of the operations from an existing Mastercam file. </summary>
            <remarks> Since all of the operations are being imported, the OperationName and OperationID 
          "which operation to import indicators" items in the ImportOptions are not used. </remarks>
            <param name="importSettings"> The settings to be used for the import operation. </param>
            <returns> The list of operation IDs for the operations that were imported. </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.ImportOperation(Mastercam.Operations.OperationsManager.ImportOptions)">
            <summary> This method imports an operation from an existing Mastercam file. </summary>
            <param name="importSettings">  The settings to be used for the import operation. </param>
            <returns> A handle to the imported operation if successful, else a null if not. </returns>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ImportOptions.CaseSensitiveNameMatch">
            <summary> Gets a value indicating whether the name match on the Operation Name is case sensitive or not. </summary>
            <remarks> The name matching search is case sensitive by default. </remarks>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ImportOptions.CalcFeedsAndSpeed">
            <summary> Gets a value indicating whether the feeds and speed should be calculated. </summary>
            <remarks> This is equivalent to checking "calculate speeds and feeds" option on the Tools Setting page of the active Machine Group. </remarks>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ImportOptions.DisableDuplicateToolCheck">
            <summary> Gets or sets a value indicating whether or not to check to see if a "matching" tool already exists in the part file and if found use it. </summary>
            <remarks> When duplicate tool check is enabled (and it is by default) we do NOT check these items:
          Tool number, Tool Diameter Offset number and Tool Length Offset number. </remarks>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ImportOptions.ImportOperationGroups">
            <summary> Gets or sets a value indicating whether any associated operation (toolpath) groups will also be imported with the operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ImportOptions.ImportOperationGeometry">
            <summary> Gets or sets a value indicating whether any associated geometry will also be imported with the operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ImportOptions.SetOpViewsToCurrentSystemViews">
            <summary> Gets or sets a value indicating whether the imported operation will have its views reset to the current system view on import. </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ImportOptions.OperationID">
            <summary> Gets or sets the operation ID of the operation to import (if not importing "by name"). </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ImportOptions.OperationName">
            <summary> Gets or sets the name of the operation to import (if OperationID = 0). </summary>
        </member>
        <member name="P:Mastercam.Operations.OperationsManager.ImportOptions.FilePath">
            <summary> Gets or sets the full pathname of the file to import from. </summary>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.ImportOptions.#ctor(System.String,System.Int32)">
            <summary> Initializes a new instance of the ImportOptions class. </summary>
            <param name="FilePath">    The full pathname of the file to import from. </param>
            <param name="OperationID"> The identifier of the operation to be imported. </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.ImportOptions.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of the ImportOptions class. </summary>
            <param name="FilePath">      The full pathname of the file to import from. </param>
            <param name="OperationName"> The name of the operation to be imported. </param>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.ImportOptions.#ctor">
            <summary> Initializes a new instance of the ImportOptions class. </summary>
        </member>
        <member name="T:Mastercam.Operations.OperationsManager.ImportOptions">
            <summary> An package of settings used for Importing Operations from an external file. </summary>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.CopyOperationData(Mastercam.Database.Operation,Mastercam.Database.Operation,Mastercam.Operations.OperationsManager.CopyWhatData,System.Boolean)">
            <summary> Copies data from one operation to another operation. </summary>
            <param name="sourceOp"> The source operation. </param>
            <param name="targetOp"> The target operation. </param>
            <param name="copyWhat"> What data is to be copied? </param>
            <param name="replace">  If a 'geometry' mode is specified -
                        true to replace the geometry in the target operation,
                        else the geometry from the source will be added to the target. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.MoveOperation(Mastercam.Database.Operation,Mastercam.Support.Group)">
            <summary> Move an operation to another toolpath group. </summary>
            <remarks> You will need to call InitOperationsManagerTree() after this to
          update the toolpath tree on-screen display. 
          This does not support moving operations to a different Machine Group! </remarks>
            <param name="sourceOp">		 The source operation. </param>
            <param name="toolpathGroup"> The target toolpath group. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.MoveOperation(Mastercam.Database.Operation,Mastercam.Database.Operation,Mastercam.Operations.OperationsManager.MoveLocation)">
            <summary> Move an operation relative to another operation. </summary>
            <remarks> You will need to call InitOperationsManagerTree() after this to
          update the toolpath tree on-screen display. 
          This does not support copying operations to a different Machine Group! </remarks>
            <param name="sourceOp">		 The source operation. </param>
            <param name="targetOp">		 The target operation. </param>
            <param name="location">		 The move (before/after) location relative to the targetOp. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.CopyOperation(Mastercam.Database.Operation,Mastercam.Database.Operation,Mastercam.Operations.OperationsManager.CopyLocation)">
            <summary> Copy an operation relative to another operation. </summary>
            <remarks> You will need to call InitOperationsManagerTree() after this to
          update the toolpath tree on-screen display.
          This does not support copying operations to a different Machine Group! </remarks>
            <param name="sourceOp">		 The source operation. </param>
            <param name="targetOp">		 The target operation. </param>
            <param name="location">		 The copy (before/after) location relative to the targetOp. </param>
            <returns> The ID of the new operation copy (0 = error). </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.CopyOperation(Mastercam.Database.Operation,Mastercam.Support.Group)">
            <summary> Copy an operation to another toolpath group. </summary>
            <remarks> You will need to call InitOperationsManagerTree() after this to
          update the toolpath tree on-screen display. 
          This does not support copying operations to a different Machine Group! </remarks>
            <param name="sourceOp">		 The source operation. </param>
            <param name="toolpathGroup"> The toolpath group to copy the operation to. </param>
            <returns> The ID of the new operation copy (0 = error). </returns>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.InitOperationsManagerTree">
            <summary> Initializes the operations manager (toolpaths) tree. </summary>
            <remarks> To see the result of copy/ move operations "on screen",
          we need to reload the tree with the updated list of operations!
          Do this call after you've completed your copying/moving. </remarks>
        </member>
        <member name="T:Mastercam.Operations.OperationsManager.CopyWhatData">
            <summary> Values that represent what data is to be copied. </summary>
        </member>
        <member name="T:Mastercam.Operations.OperationsManager.MoveLocation">
            <summary> Values that represent move operation locations. </summary>
        </member>
        <member name="T:Mastercam.Operations.OperationsManager.CopyLocation">
            <summary> Values that represent copy operation locations. </summary>
        </member>
        <member name="M:Mastercam.Operations.OperationsManager.#ctor">
            <summary> Initializes a new instance of the OperationsManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Operations.OperationsManager">
            <summary> This class is used for working with toolpath operations in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.IO.DialogManager.EditCommonParameters(Mastercam.Database.Operation[])">
            <summary> This runs the edit common parameters dialog box on the operations passed
          in via the array parameter.
          </summary>
            <param name="OpsToEdit"> [in,out] This is the array of operations to edit via the
                         edit common parameters dialog.
                         </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.EditOperationGeometry(Mastercam.Database.Operation)">
            <summary> This displays either the edit drill points dialog box for drill operations,
          or the edit chains dialog box for chain-based operations.
          </summary>
            <param name="Op"> [in,out] This is the operation object to have it's geometry edited
                  by the user.
                  </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.EditOperation(Mastercam.Database.Operation)">
            <summary> This displays the edit operation dialog box for the operation object passed in.
          </summary>
            <param name="OpToEdit"> [in,out] This is the operation object to be edited by the user.
                        </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.EditTool(Mastercam.Database.Tool)">
            <summary> This displays the tool edit dialog box for the tool object passed in. </summary>
            <param name="ToolToEdit"> [in,out] This is the tool object to be edited by the user.
                          </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.RunToolManager">
            <summary> This launches the Mill tool manager dialog. </summary>
        </member>
        <member name="M:Mastercam.IO.DialogManager.AskForString(System.String,System.String@)">
            <summary> This displays a dialog box used to prompt the user for a string value. </summary>
            <remarks> The maximum length of the string to be passed back is the system's MAX_PATH value.
           </remarks>
            <param name="BoxText">      The prompt text to be displayed to the user.
                            </param>
            <param name="ReturnString"> [in,out] This is a string value, passed back (by reference),
                            of the text the user entered at the prompt.
                            </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.AskForColor(System.Int32@,System.Boolean)">
            <summary> This displays a dialog box used to prompt the user to choose a color. </summary>
            <param name="Color">					  [in,out] This is the color number value, passed back (by reference)
										  to the caller, that represents the color chosen by the user. </param>
            <param name="showBackgroundColorWarning"> True to show (if needed), false to hide the background color warning. </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.AskForColor(System.Int32@)">
            <summary> This displays a dialog box used to prompt the user to choose a color. </summary>
            <param name="Color">					  [in,out] This is the color number value, passed back (by reference)
										  to the caller, that represents the color chosen by the user. </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.AskForNumber(System.String,System.Double,System.Double,System.Double@)">
            <summary> This displays a dialog box used to prompt the user for a double value. </summary>
            <param name="BoxText">    The text to be displayed in the dialog.
                          </param>
            <param name="LowerBound"> This is a double value that serves as a lower bound for
                          whatever value the user chooses to enter as their number.
                          </param>
            <param name="UpperBound"> This is a double value that serves as an upper bound for
                          whatever value the user chooses to enter as
                          their number.
                          </param>
            <param name="Number">     [in,out] This is the double value passed back (by reference) to the caller.
                          </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.AskForNumber(System.String,System.Double@)">
            <summary> This displays a dialog box used to prompt the user for a double value. </summary>
            <param name="BoxText"> The text to be displayed in the dialog.
                       </param>
            <param name="Number">  [in,out] This is the double value passed back (by reference) to the caller.
                       </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.AskForNumber(System.String,System.Int16,System.Int16,System.Int16@)">
            <summary> This displays a dialog box used to prompt the user for a 16-bit integer. </summary>
            <param name="BoxText">    The text to be displayed in the dialog.
                          </param>
            <param name="LowerBound"> This is the integer value that serves as a lower bound for
                          whatever value the user chooses to enter as their number.
                          </param>
            <param name="UpperBound"> This is the integer value that serves as an upper bound for
                          whatever value the user chooses to enter as their number.
                          </param>
            <param name="Number">     [in,out] This is the integer value passed back (by reference) to the caller.
                          </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.AskForNumber(System.String,System.Int16@)">
            <summary> This displays a dialog box used to prompt the user for a 16-bit integer. </summary>
            <param name="BoxText"> The text to be displayed in the dialog.
                       </param>
            <param name="Number">  [in,out] This is the integer value passed back (by reference) to the caller.
                       </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.AskForAngle(System.String,System.Double@)">
            <summary> This displays a dialog box used to prompt the user for an angle value. </summary>
            <param name="BoxText"> The text to be displayed in the dialog.
                       </param>
            <param name="Angle">   [in,out] This is the angle value passed back (by reference) to the caller.
                       </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.Exception(Mastercam.App.Exceptions.MastercamException)">
            <summary> This displays a dialog box for exception handling purposes, containing the
          specified text, title, and an OK button.
          </summary>
            <param name="e"> The MastercamException object that was caught and
                 needs to be presented to the user.
                 </param>
        </member>
        <member name="M:Mastercam.IO.DialogManager.Error(System.String,System.String)">
            <summary> This displays a dialog box for error reporting purposes, containing the
          specified text, title, and an OK button.
          </summary>
            <param name="BoxText">   The text to be displayed in the dialog.
                         </param>
            <param name="TitleText"> The text to be displayed as the dialog's title.
                         </param>
        </member>
        <member name="M:Mastercam.IO.DialogManager.OK(System.String,System.String)">
            <summary> This displays a dialog box for message purposes, containing the specified text,
          title, and an OK button.
          </summary>
            <param name="BoxText">   The text to be displayed in the dialog.
                         </param>
            <param name="TitleText"> The text to be displayed as the dialog's title.
                         </param>
        </member>
        <member name="M:Mastercam.IO.DialogManager.YesNoCancel(System.String,System.String)">
            <summary> This displays a dialog box with specified text, a title, a Yes button,
          a No button and a Cancel button.
          </summary>
            <param name="BoxText">   The text to be displayed in the dialog.
                         </param>
            <param name="TitleText"> The text to be displayed as the dialog's title.
                         </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.YesNo(System.String,System.String)">
            <summary> This displays a dialog box with specified text, a title, a Yes button
          and a No button.
          </summary>
            <param name="BoxText">   The text to be displayed in the dialog.
                         </param>
            <param name="TitleText"> The text to be displayed as the dialog's title.
                         </param>
            <returns> The return type value corresponding to the button the user pushed. </returns>
        </member>
        <member name="M:Mastercam.IO.DialogManager.UnhandledException(System.String,System.String)">
            <summary> This displays an unhandled exception dialog box. </summary>
            <param name="BoxText">   The text to be displayed in the dialog.
                         </param>
            <param name="TitleText"> The text to be displayed as the dialog's title.
                         </param>
        </member>
        <member name="M:Mastercam.IO.DialogManager.#ctor">
            <summary> Initializes a new instance of the DialogManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.IO.DialogManager">
            <summary> This class handles common dialogs usable for NET-Hook to NET-Hook User interaction. </summary>
        </member>
        <member name="M:Mastercam.Surfaces.NURBSSurface.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given surface geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The surface geometry entity to use as defaults for this
                   surface geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Surfaces.NURBSSurface.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a surface geometry entity to the Mastercam database. </summary>
            <param name="Ent"> [in,out] The surface geometry entity to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Surfaces.NURBSSurface.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the NURBSSurface class. </summary>
            <remarks> Attempts to retrieve a surface geometry entity with the given ID from the Mastercam
          database and use that to initialize this surface geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the surface geometry entity to look up in the Mastercam database.
               </param>
        </member>
        <member name="T:Mastercam.Surfaces.NURBSSurface">
            <summary> This class is used for working with NURBS surfaces within Mastercam. </summary>
            <remarks> Due to the complex nature of working with NURBS surfaces, the internal data of a
          NURBS surface is unavailable in this version of the NET-Hook API.
          </remarks>
        </member>
        <member name="M:IsNetScriptingEnabled">
            <summary> Query if the .NET Scripting is enabled in Mastercam. </summary>
            <remarks> For this to be true...
		  The required scripting support files must exist in the \apps folder.
		  </remarks>
            <returns> true if a .NET Scripting is enabled, false if not. </returns>
        </member>
        <member name="M:RunNetScriptFile(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Executes the .NET script file. </summary>
            <param name="scriptFile"> The (full path) script file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IsNetScriptFile(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Query if a file is .NET script file. </summary>
            <remarks> This is a simple file extension check.
		  Is the file extension? .csx or .vbx </remarks>
            <param name="scriptFile"> The script file name. </param>
            <returns> true if it is, false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.ExternalAppsManager.RunSetupSheetNoDialog(System.Collections.Generic.List`1{System.String}@,System.Collections.Generic.List`1{System.String}@,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.List`1{System.String}@)">
            <summary> Run the setup sheet bypassing the usual dialog. </summary>
            <param name="dlgItems">   Strings to use instead of dialog items (Programmer, etc)
                          MUST be a list of 8 items! </param>
            <param name="rpxFiles">   [in/out] The list of rpx templates to be used. Count MUST equal the number
                          of Machine Groups in the file! </param>
            <param name="anyImages">  Generate automatic images (y/n). </param>
            <param name="opImages">   Generate automatic operation images (anyImages must be true). </param>
            <param name="colors">     Generate color images (anyImages or opImages must be true). </param>
            <param name="opViewMode"> 0=WCS, 1=TPLANE, 2=Isometric relative to WCS, 3=Isometric (WORLD). </param>
            <param name="useViewer">  Display results in viewer (y/n). </param>
            <param name="writePDF">   Write PDF files? (useViewer must be false). </param>
            <param name="xmlFiles">   [out] List of XML files that were written. </param>
            <returns> True if successful, false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.ExternalAppsManager.RunFTCommand(System.String)">
            <summary> This method executes a run_FT_command to the Mastercam application. </summary>
            <remarks> This allows for running many Mastercam commands via a Function Table command (string)
		  as if the user had selected it via the UI.
          <para>Execution of the NET-Hook Add-In is paused until the called function returns.</para><para>See the Mastercam.FT file for available commands.</para></remarks>
            <param name="CommandString"> The command to be run. </param>
        </member>
        <member name="M:Mastercam.Support.ExternalAppsManager.RunFTCommand(System.String,System.String)">
            <summary> This method executes a run_FT_command to the specified application. </summary>
            <remarks> This allows for running commands via a Function Table command (string)
		  as if the user had selected it via the UI.
          <para>Execution of the NET-Hook Add-In is paused until the called function returns.</para></remarks>
            <param name="AppName"> The name of the application to receive the command. </param>
            <param name="CommandString"> The command to be run. </param>
        </member>
        <member name="M:Mastercam.Support.ExternalAppsManager.PostFTCommand(System.String)">
            <summary> This method executes a post_FT_command to the Mastercam application. </summary>
            <remarks> This allows for running many Mastercam commands via a Function Table command (string) 
		  as if the user had selected it via the UI.
          <para>This is a "fire and forget", which means that the NET-Hook Add-In does 
		  <i>not</i> pause execution and wait for the called function to complete.</para><para>See the Mastercam.FT file for available commands.</para><para>Some example commands:</para><list type="bullet"><item><description>OnPlanesTop</description></item><item><description>OnPlanesFront</description></item><item><description>OnPlanesBack</description></item><item><description>OnPlanesBottom</description></item><item><description>OnPlanesEqualsWcs</description></item><item><description>And <i>many</i> more...</description></item></list></remarks>
            <param name="CommandString"> The command to be run. </param>
        </member>
        <member name="M:Mastercam.Support.ExternalAppsManager.PostFTCommand(System.String,System.String)">
            <summary> This method executes a post_FT_command to the specified application. </summary>
            <remarks> This allows for running commands via a Function Table command (string)
		  as if the user had selected it via the UI.
		  <para>This is a "fire and forget", which means that the NET-Hook Add-In does
          <i>not</i> pause execution and wait for the called function to complete.</para></remarks>
            <param name="AppName"> The name of the application to receive the command. </param>
            <param name="CommandString"> The Function Table command to be run. </param>
        </member>
        <member name="M:Mastercam.Support.ExternalAppsManager.RunShellCommand(System.String,System.Boolean)">
            <summary> This method runs an external command prompt command string. </summary>
            <param name="CommandString"> The command string to run in the command prompt. </param>
            <param name="WaitForReturn"> Whether to wait for the command prompt to return before continuing.
                             </param>
        </member>
        <member name="P:Mastercam.Support.ExternalAppsManager.CurrentVBScriptPath">
            <summary> Gets the full path of the VB Script path as configured in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Support.ExternalAppsManager.RunVBScript(System.String)">
            <summary> This method runs a VB Script. </summary>
            <param name="ScriptPathName"> The full path and file name of the VB Script to run. </param>
            <returns> False if the script file could not be found or executed, True otherwise. </returns>
        </member>
        <member name="M:Mastercam.Support.ExternalAppsManager.RunNetScript(System.String)">
            <summary> This method runs a .NET (.csx or .vbx) Script. </summary>
            <remarks> *NOTE* - This "preview" functionality is only available in Mastercam X8!
           The additional required .NET Scripting support DLLs are must be available.
           </remarks>
            <param name="ScriptPathName"> The full path and file name of the Script to run. </param>
            <returns> False if the script file could not be found or executed, True otherwise. </returns>
        </member>
        <member name="M:Mastercam.Support.ExternalAppsManager.#ctor">
            <summary> Initializes a new instance of the ExternalAppsManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.ExternalAppsManager">
            <summary> This class is used to manage the running and execution of external apps. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.StringUtilityFailedException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the StringUtilityFailedException class.
          </summary>
            <remarks> Initializes the exception instance with a specified error message and
       the inner exception that caused it.
       </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.StringUtilityFailedException.#ctor(System.String)">
            <summary> Initializes a new instance of the StringUtilityFailedException class.
          </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.StringUtilityFailedException.#ctor">
            <summary> Initializes a new instance of the StringUtilityFailedException class.
          </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.StringUtilityFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the StringUtilityFailedException class.
          </summary>
            <param name="info">    If non-null, the serailization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.StringUtilityFailedException">
            <summary> This exception class was created to be thrown if a string conversion utility failed.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.LibraryFreeFailedException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the LibraryFreeFailedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
       </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.LibraryFreeFailedException.#ctor(System.String)">
            <summary> Initializes a new instance of the LibraryFreeFailedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.LibraryFreeFailedException.#ctor">
            <summary> Initializes a new instance of the LibraryFreeFailedException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.LibraryFreeFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the LibraryFreeFailedException class. </summary>
            <param name="info">    If non-null, the serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.LibraryFreeFailedException">
            <summary> This exception class was created to be thrown if an attempt to free a library failed.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.Contour3DSubtypeException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the Contour3DSubtypeException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
       </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.Contour3DSubtypeException.#ctor(System.String)">
            <summary> Initializes a new instance of the Contour3DSubtypeException class. </summary>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.Contour3DSubtypeException.#ctor">
            <summary> Initializes a new instance of the Contour3DSubtypeException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.Contour3DSubtypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the Contour3DSubtypeException class. </summary>
            <param name="info">    If non-null, the serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.Contour3DSubtypeException">
            <summary> This exception class was created to be thrown if an app attempts to use 2D chain geometry
       in a 3D Contour operation.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.Contour2DSubtypeException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the Contour2DSubtypeException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and the inner
          the inner exception that caused it.
       </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.Contour2DSubtypeException.#ctor(System.String)">
            <summary> Initializes a new instance of the Contour2DSubtypeException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.Contour2DSubtypeException.#ctor">
            <summary> Initializes a new instance of the Contour2DSubtypeException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.Contour2DSubtypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the Contour2DSubtypeException class. </summary>
            <param name="info">    If non-null, the serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.Contour2DSubtypeException">
            <summary> This exception class was created to be thrown if an application attempts to use
          3D chain geometry in a 2D Contour operation.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidArrayIndexException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the InvalidArrayIndexException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
       the inner exception that caused it.
       </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidArrayIndexException.#ctor(System.String)">
            <summary> Initializes a new instance of the InvalidArrayIndexException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidArrayIndexException.#ctor">
            <summary> Initializes a new instance of the InvalidArrayIndexException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidArrayIndexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the InvalidArrayIndexException class. </summary>
            <param name="info">    If non-null, the serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.InvalidArrayIndexException">
            <summary> This exception class was created to be thrown if an attempt was made to access an array
          item with an invalid index.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.NullParameterEditingDialogException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the NullParameterEditingDialogException class.
          </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
       </remarks>
            <param name="Message">        The message. </param>
            <param name="InnerException"> The inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.NullParameterEditingDialogException.#ctor(System.String)">
            <summary> Initializes a new instance of the NullParameterEditingDialogException class.
          </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> The message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.NullParameterEditingDialogException.#ctor">
            <summary> Initializes a new instance of the NullParameterEditingDialogException class.
          </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.NullParameterEditingDialogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the NullParameterEditingDialogException class.
          </summary>
            <param name="info">    If non-null, the serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.NullParameterEditingDialogException">
            <summary> This exception class was created to be thrown if an attempt was made to launch an
          editing dialog with a null parameter object. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.SolidsNotAllowedException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the SolidsNotAllowedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
       </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.SolidsNotAllowedException.#ctor(System.String)">
            <summary> Initializes a new instance of the SolidsNotAllowedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.SolidsNotAllowedException.#ctor">
            <summary> Initializes a new instance of the SolidsNotAllowedException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.SolidsNotAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the SolidsNotAllowedException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.SolidsNotAllowedException">
            <summary> This exception class was created to be thrown if solids manipulation and creation is not
          allowed on the current user's system.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidGroupException.#ctor(System.String,System.Exception)">
            <summary> Initializes the exception instance with a specified error message and
          the inner exception that caused it. </summary>
            <param name="Message">        The message. </param>
            <param name="InnerException"> The inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidGroupException.#ctor(System.String)">
            <summary> Initializes the exception instance with a specified error message. </summary>
            <param name="Message"> The message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidGroupException.#ctor">
            <summary> Initializes the exception instance with a default error message .</summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidGroupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the InvalidGroupException class. </summary>
            <param name="info">    The serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.InvalidGroupException">
            <summary> This exception class was created to be thrown if there is no Machine/Toolpath groups and one is required. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidGroupIDException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the InvalidGroupIDException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        The message. </param>
            <param name="InnerException"> The inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidGroupIDException.#ctor(System.String)">
            <summary> Initializes a new instance of the InvalidGroupIDException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> The message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidGroupIDException.#ctor">
            <summary> Initializes a new instance of the InvalidGroupIDException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.InvalidGroupIDException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the InvalidGroupIDException class. </summary>
            <param name="info">    The serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.InvalidGroupIDException">
            <summary> This exception class was created to be thrown if an invalid group ID was referenced. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.OutputFileNotSpecifiedException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the OutputFileNotSpecifiedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and the inner
       the inner exception that caused it.
       </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.OutputFileNotSpecifiedException.#ctor(System.String)">
            <summary> Initializes a new instance of the OutputFileNotSpecifiedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.OutputFileNotSpecifiedException.#ctor">
            <summary> Initializes a new instance of the OutputFileNotSpecifiedException class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.OutputFileNotSpecifiedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the OutputFileNotSpecifiedException class. </summary>
            <param name="info">    If non-null, the serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.OutputFileNotSpecifiedException">
            <summary> This exception class was created to be thrown if an attempt was made to write to a nesting
          file without first specifying a filename and path.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.TypeMismatchException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the TypeMismatchException class. </summary>
            <remarks> Initializes the exception instance with a specified error message
          and the inner exception that caused it.
          </remarks>
            <param name="Message">        [in,out] If non-null, the message. </param>
            <param name="InnerException"> [in,out] If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.TypeMismatchException.#ctor(System.String)">
            <summary> Initializes a new instance of the TypeMismatchException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> [in,out] If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.TypeMismatchException.#ctor">
            <summary> Initializes a new instance of the TypeMismatchException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.TypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the TypeMismatchException class. </summary>
            <param name="info">    If non-null, the serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.TypeMismatchException">
            <summary> This exception class was created to be thrown if there was a type mismatch between
          a NET-Hook entity object and the entity in the Mastercam database.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityReadFailedException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the EntityReadFailedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message
          and the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityReadFailedException.#ctor(System.String)">
            <summary> Initializes a new instance of the EntityReadFailedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityReadFailedException.#ctor">
            <summary> Initializes a new instance of the EntityReadFailedException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityReadFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the EntityReadFailedException class. </summary>
            <param name="info">    If non-null, the serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.EntityReadFailedException">
            <summary>This exception class was created to be thrown if an attempt to read an entity from the Mastercam database failed for some reason.</summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityWriteFailedException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the EntityWriteFailedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message
          and the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityWriteFailedException.#ctor(System.String)">
            <summary> Initializes a new instance of the EntityWriteFailedException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityWriteFailedException.#ctor">
            <summary> Initializes a new instance of the EntityWriteFailedException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityWriteFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the EntityWriteFailedException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.EntityWriteFailedException">
            <summary> This exception class was created to be thrown if an attempt to write an entity to the
          Mastercam database failed for some reason.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityInvalidException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the EntityInvalidException class. </summary>
            <remarks> Initializes the exception instance with a specified error message
          and the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityInvalidException.#ctor(System.String)">
            <summary> Initializes a new instance of the EntityInvalidException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> [in,out] If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityInvalidException.#ctor">
            <summary> Initializes a new instance of the EntityInvalidException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.EntityInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the EntityInvalidException class. </summary>
            <param name="info">    If non-null, the serialization information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.EntityInvalidException">
            <summary> This exception class was created to be thrown if an entity database operation is attempted
          on an invalid entity that needs to be valid.
          (ie. deleting an entity that is invalid to begin with for example).
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.IDNotFoundException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the IDNotFoundException class. </summary>
            <remarks> Initializes the exception instance with a specified error
          message and the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.IDNotFoundException.#ctor(System.String)">
            <summary> Initializes a new instance of the IDNotFoundException class. </summary>
            <remarks> Initializes the exception instance with a specified error message.</remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.IDNotFoundException.#ctor">
            <summary> Initializes a new instance of the IDNotFoundException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.IDNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the IDNotFoundException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.IDNotFoundException">
            <summary> This exception class was created to be thrown if an entity is supposed to be valid
       (ie. it exists in the Mastercam database) but the ID cannot be found.
          </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamSystemException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the MastercamSystemException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamSystemException.#ctor(System.String)">
            <summary> Initializes a new instance of the MastercamSystemException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamSystemException.#ctor">
            <summary> Initializes a new instance of the MastercamSystemException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the MastercamSystemException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.MastercamSystemException">
            <summary> This is the base Mastercam solids geometry exception class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.OperationException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the OperationException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.OperationException.#ctor(System.String)">
            <summary> Initializes a new instance of the OperationException class. </summary>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.OperationException.#ctor">
            <summary> Initializes a new instance of the OperationException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.OperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the OperationException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.OperationException">
            <summary> This is the base Mastercam solids geometry exception class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.MathException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the MathException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.MathException.#ctor(System.String)">
            <summary> Initializes a new instance of the MathException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.MathException.#ctor">
            <remarks> Initializes the exception instance with a default error message.</remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.MathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the MathException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.MathException">
            <summary> This is the base Mastercam Math exception class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamIOException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the MastercamIOException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamIOException.#ctor(System.String)">
            <summary> Initializes a new instance of the MastercamIOException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamIOException.#ctor">
            <summary> Initializes a new instance of the MastercamIOException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamIOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the MastercamIOException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.MastercamIOException">
            <summary> This is the base Mastercam I/O exception class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.SolidException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the SolidException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.SolidException.#ctor(System.String)">
            <summary> Initializes a new instance of the SolidException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.SolidException.#ctor">
            <summary> Initializes a new instance of the SolidException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.SolidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the SolidException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.SolidException">
            <summary> This is the base Mastercam solids geometry exception class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.GroupException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the GroupException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.GroupException.#ctor(System.String)">
            <summary> Initializes a new instance of the GroupException class. </summary>
            <remarks> . Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.GroupException.#ctor">
            <summary> Initializes a new instance of the GroupException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.GroupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the GroupException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.GroupException">
            <summary> This is the base Mastercam groups exception class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.NestingException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the NestingException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.NestingException.#ctor(System.String)">
            <summary> Initializes a new instance of the NestingException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.NestingException.#ctor">
            <summary> Initializes a new instance of the NestingException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.NestingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the NestingException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.NestingException">
            <summary> This is the base Mastercam nesting exception class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.GeometryException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the GeometryException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.GeometryException.#ctor(System.String)">
            <summary> Initializes a new instance of the GeometryException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.GeometryException.#ctor">
            <summary> Initializes a new instance of the GeometryException class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.GeometryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the GeometryException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.GeometryException">
            <summary> This is the base Mastercam geometry exception class. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.TypeCasterException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the TypeCasterException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.TypeCasterException.#ctor(System.String)">
            <summary> Initializes a new instance of the TypeCasterException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.TypeCasterException.#ctor">
            <summary> Initializes a new instance of the TypeCasterException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.TypeCasterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the TypeCasterException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.TypeCasterException">
            <summary> This is the base Mastercam type casting exception class. </summary>
            <remarks> This exception is generally thrown if the NET-Hook encounters a Mastercam database type that
          it doesn't understand and it can't cast to a NET-Hook type.
          </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.DatabaseException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the DatabaseException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.DatabaseException.#ctor(System.String)">
            <summary> Initializes a new instance of the DatabaseException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.DatabaseException.#ctor">
            <summary> Initializes a new instance of the DatabaseException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.DatabaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the DatabaseException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.DatabaseException">
            <summary> This is the base Mastercam database exception class. </summary>
        </member>
        <member name="P:Mastercam.App.Exceptions.MastercamException.Name">
            <summary> Gets or sets the name of the specified exception. </summary>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamException.#ctor(System.String,System.Exception)">
            <summary> Initializes a new instance of the MastercamException class. </summary>
            <remarks> Initializes the exception instance with a specified error message and
          the inner exception that caused it.
          </remarks>
            <param name="Message">        If non-null, the message. </param>
            <param name="InnerException"> If non-null, the inner exception. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamException.#ctor(System.String)">
            <summary> Initializes a new instance of the MastercamException class. </summary>
            <remarks> Initializes the exception instance with a specified error message. </remarks>
            <param name="Message"> If non-null, the message. </param>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamException.#ctor">
            <summary> Initializes a new instance of the MastercamException class. </summary>
            <remarks> Initializes the exception instance with a default error message. </remarks>
        </member>
        <member name="M:Mastercam.App.Exceptions.MastercamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of the MastercamException class. </summary>
            <param name="info">    If non-null, the information. </param>
            <param name="context"> The context. </param>
        </member>
        <member name="T:Mastercam.App.Exceptions.MastercamException">
            <summary> This is the base Mastercam exception class. </summary>
        </member>
        <member name="M:Mastercam.NETHook.ResourceStrings.ApplicationStrings.GetString(System.String)">
            <summary> Gets a string from the managed resources. </summary>
            <param name="resourceName"> The name of the resource to retrieve. </param>
            <returns> The string. </returns>
        </member>
        <member name="P:Mastercam.NETHook.ResourceStrings.ApplicationStrings.Culture">
            <summary> Gets or sets the current thread's CurrentUICulture property for all
          resource lookups using this strongly typed resource class.
          </summary>
        </member>
        <member name="P:Mastercam.NETHook.ResourceStrings.ApplicationStrings.ResourceManager">
            <summary> Gets the cached ResourceManager instance used by this application. </summary>
        </member>
        <member name="T:Mastercam.NETHook.ResourceStrings.ApplicationStrings">
            <summary> The application strings class. </summary>
        </member>
        <member name="M:Cnc.XformOffsetChains.OffsetChains(CHAIN*,Cnc.XformOffsetChains.OffsetChainsParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes an Offset Chains operation. </summary>
            <param name="pChains">	   The chains. </param>
            <param name="params">	   The offset parameters. </param>
            <param name="resultEptrs"> The list of the database eptrs of the result geometry. </param>
            <returns> true if it succeeds, else false if not. </returns>
        </member>
        <member name="M:Cnc.XformOffsetChains.OffsetChainsParams.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.XformOffsetChains.OffsetChainsParams">
            <summary> Offset Chains parameters. </summary>
        </member>
        <member name="T:Cnc.XformOffsetChains.FilletCornerStyle">
            <summary> Values that represent method of fillet modification. </summary>
        </member>
        <member name="T:Cnc.XformOffsetChains.TranslateDirection">
            <summary> Values that represent direction of translation. </summary>
        </member>
        <member name="T:Cnc.XformOffsetChains.DepthMethod">
            <summary> Values that represent method of calculating depth. </summary>
        </member>
        <member name="T:Cnc.XformOffsetChains.ResultMethod">
            <summary> Values that represent method of translating. </summary>
        </member>
        <member name="M:Cnc.WFBreakManyPieces.BreakManyPieces(CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.WFBreakManyPieces.BreakManyPiecesParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes a Break Many Pieces operation. </summary>
            <param name="selEptrs"> The list of selected eptrs to break into many pieces. </param>
            <param name="params">   The break many pieces parameters. </param>
            <param name="newEptrs"> The list of the new database eptrs created by this operation. </param>
            <param name="errEptrs"> The list eptrs that the operation had errors breaking into many pieces. </param>
            <returns> true if it succeeds, else false if not. </returns>
        </member>
        <member name="M:Cnc.WFBreakManyPieces.BreakManyPiecesParams.#ctor(System.Boolean,System.Double)">
            <summary> Constructor. </summary>
            <param name="metric"> Metric flag. </param>
            <param name="tol">    The tolerance. </param>
        </member>
        <member name="T:Cnc.WFBreakManyPieces.BreakManyPiecesParams">
            <summary> Parameters class. </summary>
        </member>
        <member name="T:Cnc.WFBreakManyPieces.PostBreakAction">
            <summary> Values that represent the action to take on the selected curves after they are broken. </summary>
        </member>
        <member name="T:Cnc.WFBreakManyPieces.SegmentationMethod">
            <summary> Values that represent method for segments. </summary>
        </member>
        <member name="M:bnci_world_points(nci_bin*,System.Int16,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*)">
 @par Purpose:
			extract pts in world coordinates from any nci line

 @param[in]		n		 ptr to nci line
 @param[in]		view_n	 current tool view #
 @param[in]		torg	 current tool origin pt (view coords)
 @param[out]		wep1	 nci point in world coords
 @param[out]		wcpt	 nci arc center in world coords
 @param[out]		n_pts	 number of pts found

</member>
        <member name="M:bnci_update(operation*,operation*,System.Boolean)">
 @par Purpose:
			for a few selected fields we can update the binary nci directly without requiring
			a regeneration of the operation.  Test for these minimal changes and update if we can.

 @return	return true if nci updated and a regen is not required
 @param[in]		old_op				operation before edit
 @param[in]		new_op				operation after edit
 @param[in]		called_from_opmgr	true = called from OpMgr

</member>
        <member name="M:GetGuiSelStretching">

 @par Purpose:
			this method gets the internal stretching flag.

 @return			value of internal stretching flag


</member>
        <member name="M:SetGuiSelStretching(System.Boolean)">

 @par Purpose:
			this method sets the internal stretching flag.

 @param[in]		value			desired setting for internal stretching flag


</member>
        <member name="M:XformMoveToOrigin(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Do the "transform - move to origin" action. </summary>
            <param name="fromPoint">   The "from point" (world coordiantes). </param>
            <param name="allEntities"> (optional) True to move all entities, false to move only currently selected entitites. </param>
            <returns> MC_NOERROR or MC_ERROR return code. </returns>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateOldFromNew(Cnc.Tool.TlToolThreading!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update old from new operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolThreading*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateOldFromNew(Cnc.Tool.TlToolReamer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update old from new operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolReamer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input">	   	The input. </param>
            <param name="output">	   	The output. </param>
            <param name="originalInfo">	Information describing the original. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolCenterDrill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input">	   	The input. </param>
            <param name="output">	   	The output. </param>
            <param name="originalInfo">	Information describing the original. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateOldFromNew(Cnc.Tool.TlToolBoring!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update old from new operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolBoring*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateOldFromNew(Cnc.Tool.TlToolDrill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update old from new operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolDrill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolSlotMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input">	   	The input. </param>
            <param name="output">	   	The output. </param>
            <param name="originalInfo">	Information describing the original. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateOldFromNew(Cnc.Tool.TlToolEndmill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update old from new operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolEndmill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateOldFromNew(Cnc.Tool.TlToolFeedMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update old from new operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolFeedMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateOldFromNew(Cnc.Tool.TlToolBarrelMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update old from new operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolBarrelMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.UpdateOldHolemakingOpParamsFromNew(Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the old holemaking operation parameters from new. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.UpdateNewHolemakingOpParamsFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the new holemaking operation parameters from old. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.UpdateOldMillingOpParamsFromNew(Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the old milling operation parameters from new. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.UpdateNewMillingOpParamsFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the new milling operation parameters from old. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.UpdateOldOpParamsFromNew(Cnc.Tool.TlOpParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the old operation parameters from new. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.UpdateNewOpParamsFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlOpParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the new operation parameters from old. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateOldFromNew(Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update old from new operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateOldFromNew(Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update old from new operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.DoUpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlTool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the update new from old operation. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.UpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the new tool data from the old tool data. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.UpdateNewFromOld(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlTool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the new tool data from the old tool data. </summary>
            <param name="input"> 	The input. </param>
            <param name="output">	The output. </param>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.ToOld(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Converts a new tool into an old tool. </summary>
            <param name="input">	The input. </param>
            <returns>	The given data converted to an old. </returns>
        </member>
        <member name="M:Cnc.Tool.TpToolConverter.ToOld(Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Converts a new tool into an old tool. </summary>
            <param name="input">	The input. </param>
            <returns>	The given data converted to an old. </returns>
        </member>
        <member name="T:Cnc.Tool.TpToolConverter">
            <summary>
Static class providing functionality to create legacy tp_tools from tl class tools and update tl class data from
legacy tool data.
</summary>
        </member>
        <member name="M:Cnc.Tool.InitToolProfileImporterTypes">
            <summary> Initializes importer types for the tool profile importer system. </summary>
        </member>
        <member name="M:Cnc.Tool.GetInternalToolSystem">
            <summary> Gets a pointer to the internal tool system. </summary>
            <returns> The internal tool system. </returns>
        </member>
        <member name="M:Cnc.Tool.FinalizeToolServices">
            <summary> Finalizes the tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.InitializeToolServices">
            <summary> Initializes the tool system services. </summary>
        </member>
        <member name="D:Cnc.Tool.IInternalToolSystemUPtr">
            <summary> Defines an alias representing zero-based index of the internal tool system pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.BackfillTools">
            <summary>
Backfills tools as needed. To be used when loading a part file and the database tool list is inconsistent with
the database TlMgr.
</summary>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.IsAssemblyUsedByMultiThreadedOps(System.Int32)">
            <summary> Query if 'assemblySlot' is assembly used by multi threaded ops. </summary>
            <param name="assemblySlot"> The assembly slot. </param>
            <returns> true if assembly used by multi threaded ops, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Validate(System.Boolean)">
            <summary> Searches existing tool storage bins for corrupted slots. </summary>
            <param name="warnOnSuccess"> (optional) [in] If true, a message will be displayed regardless of search outcome. </param>
            <returns> True if the tool storage mechanisms are corruption-free </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.AssignToOperation(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>	Assigns the specified lathe tool to the provided operation. </summary>
            <param name="input">			The lathe tool to be assigned. </param>
            <param name="result">			The operation to have tool information assigned to it. </param>
            <param name="setOffsets">   	Flag specifying how to initialize the operation tool offsets. 0 - from the tool,
								1 - from the configuration. </param>
            <param name="setStation">   	true to initialize the operation tool station. </param>
            <param name="setSteps">			true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								material, 1 - From the tool, 2 - From defaults. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.AssignToOperation(Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>	Assigns the specified lathe tool to the provided operation. </summary>
            <param name="input">			The 3D tool to be assigned. </param>
            <param name="result">			The operation to have tool information assigned to it. </param>
            <param name="setOffsets">   	Flag specifying how to initialize the operation tool offsets. 0 - from the tool,
								1 - from the configuration. </param>
            <param name="setStation">   	true to initialize the operation tool station. </param>
            <param name="setSteps">			true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								material, 1 - From the tool, 2 - From defaults. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Assigns the specified holder to the provided operation. </summary>
            <param name="spInput">			   The tool holder to be assigned. </param>
            <param name="result">			   The operation to have tool holder information assigned to it. </param>
            <param name="assemblySlotChanged"> true if assembly slot changed. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.WarnOnModfiyToolUsedInMultiThreadOps(CWnd*)">
            <summary> Warning on modfiy tool used in multi thread ops. </summary>
            <param name="pParent"> (Optional) The parent. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.WarnOnDuplicateLatheToolNumbers(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Warning on duplicate mill tool numbers. </summary>
            <param name="toolNumber"> The tool number. </param>
            <param name="slot">		  The slot. </param>
            <param name="checkMill">  true to check mill. </param>
            <param name="groupIdn">   The group idn. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.WarnOnDuplicateMillToolNumbers(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Warning on duplicate mill tool numbers. </summary>
            <param name="toolNumber"> The tool number. </param>
            <param name="slot">		  The slot. </param>
            <param name="groupIdn">   The group idn. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.SelectFromLibraryByMachine(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,CWnd*)">
            <summary> Prompts the user to select a tool assembly from the tools in the tool library referenced by the provided
		  machine definition. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pMachine"> If non-null, the machine containing the library to select a tool from. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.SelectFromPartByMachine(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,CWnd*)">
            <summary> Prompts the user to select a tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pMachine"> If non-null, the machine to select a tool from. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly&gt;,System.Boolean,System.Boolean,System.Boolean,CWnd*)">
            <summary>	Edits the given tool within the tool designer . </summary>
            <param name="spAssemblyToEdit">	The 3d tool assembly to edit. </param>
            <param name="updatePart">	   	True to update part. </param>
            <param name="fromOpDialog">	   	True to from operation dialog. </param>
            <param name="hideParent">	   	True to hide the parent window (if not null) before launching the tool designer. </param>
            <param name="pParent">		   	(Optional) If non-null, (Optional) the parent. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Edit3DTool(Cnc.Tool.TlConfiguredToolAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary>
Launches the tool designer to allow users to edit the given 3D tool. The result of the tool designer, if
successful, will be placed in the input parameter "toolToEdit".
</summary>
            <param name="toolToEdit">	The 3D tool assembly to edit. </param>
            <param name="hideParent">	True to hide the parent window before launching the tool designer. </param>
            <param name="pParent">   	(Optional) If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Create3DTools(std.function&lt;(Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary>
Launches the tool designer panel to allow users to create a new 3D tool assembly. The function passed in should
handle a completed 3D tool and do with it whatever the client prefers. This workflow supports OK/New from the
tool designer, so a series of 3D tools can be created without exiting the tool designer.
</summary>
            <param name="commitFunc">	The commit function to use when if/when the user selects OK/New in the tool designer. </param>
            <param name="hideParent">	True to hide the parent window before launching the tool designer. </param>
            <param name="pParent">   	(Optional) If non-null, the parent. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Create3DTool(std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary>
Launches the tool designer panel to allow users to create a new 3D tool assembly. The result of the tool designer,
if successful, will be placed in the input parameter "spResult".
</summary>
            <param name="spResult">  	The result. </param>
            <param name="hideParent">	True to hide the parent window before launching the tool designer. </param>
            <param name="pParent">   	(Optional) If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.EditHolder(Cnc.Tool.TlTurnHolder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>
Launches the holder designer to allow users to edit the given holder. The result of the holder designer, if
successful, will be placed in the input parameter "holderToEdit".
</summary>
            <param name="holderToEdit">	The holder to edit. </param>
            <param name="pParent">	   	(Optional) If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.CreateHolders(std.function&lt;(Cnc.Tool.TlTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.TlTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>
Launches the holder designer panel to allow users to create a new holder. The function passed in should handle a
completed 3D tool and do with it whatever the client prefers. This workflow supports OK/New from the holder
designer, so a series of holders can be created without exiting the holder designer.
</summary>
            <param name="commitFunc">	The commit function to use when if/when the user selects OK/New in the holder
							designer. </param>
            <param name="pParent">   	(Optional) If non-null, the parent. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.CreateHolder(std.shared_ptr&lt;Cnc.Tool.TlTurnHolder&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>
Launches the holder designer panel to allow users to create a new holder. The result of the holder designer, if
successful, will be placed in the input parameter "spResult".
</summary>
            <param name="spResult">	The result. </param>
            <param name="pParent"> 	(Optional) If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.EditInsert(std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>
Launches the insert designer to allow users to edit the given insert. The result of the insert designer, if
successful, will be placed in the input parameter "insertToEdit".
</summary>
            <param name="spInsertToEdit">	The insert to edit. </param>
            <param name="pParent">		 	(Optional) If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.CreateInserts(std.function&lt;(Cnc.Tool.TlInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.TlInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>
Launches the insert designer panel to allow users to create a new insert. The function passed in should handle a
completed insert and do with it whatever the client prefers. This workflow supports OK/New from the insert
designer, so a series of inserts can be created without exiting the insert designer.
</summary>
            <param name="commitFunc">	The commit function to use when if/when the user selects OK/New in the insert
							designer. </param>
            <param name="pParent">   	(Optional) If non-null, the parent. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.CreateInsert(std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>
Launches the insert designer panel to allow users to create a new insert. The result of the insert designer, if
successful, will be placed in the input parameter "spResult".
</summary>
            <param name="spResult">	The result. </param>
            <param name="pParent"> 	(Optional) If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.EditLiveCenter(std.shared_ptr&lt;Cnc.Tool.TlToolLatheCustom&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Launches the edit live center wizard to allow users to create their desired live centers. The result of
		  the edit live center wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.CreateLiveCenter(std.shared_ptr&lt;Cnc.Tool.TlToolLatheCustom&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Launches the create new live center wizard to allow users to create their desired live centers. The
		  result of the create new live center wizard, if successful, will be placed in the input parameter
		  "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,CCNCMachine*,CWnd*)">
            <summary>
Launches the edit lathe tool dialog to edit the assembly provided at the input parameter "spResult". If the lathe
tool is successfully edited, and the input parameter "updatePart" is set to true, the lathe tool will be updated
in the Mastercam part tool list. This function can be used as a means to just commit changes to a tool and update
operations that use it.  This is currently only used after "Setup Tool" has been called from outside the tool
definition dialog.
</summary>
            <param name="spResult">		 	The result. </param>
            <param name="spOriginalTool">	the original tool from before modifications were made.  Sending a value in with
								this parameter will commit the changes and update operations, but not provide an
								interface to edit the tool. </param>
            <param name="updatePart">	 	true to update part, false to just edit the tool. </param>
            <param name="opDialog">		 	true if called from the operation dialog. </param>
            <param name="machineGroupId">	Identifier for the machine group. </param>
            <param name="pMachine">		 	(Optional) If non-null, the machine. </param>
            <param name="pParent">		 	(Optional) If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.OpenToolNumberUsedTools(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte)">
            <summary> Retrieves the next available tool number among all used tools within the specified machine group. </summary>
            <param name="tlno">			  I/O: The tool number. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="opExcludeId">    Identifier for the operation exclude. </param>
            <param name="activeTurret">   (Optional) the active turret. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.OpenToolNumber(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Retrieves the next available tool number among all tools within the specified machine group. </summary>
            <param name="tlno">			  I/O: The tool number. </param>
            <param name="machineGroupID"> (Optional) identifier for the machine group. </param>
            <param name="opExcludeId">    (Optional) identifier for the operation exclude. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.OpenSlot(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves the next available tool slot number among all tools within the current Mastercam part tool
		  list. </summary>
            <param name="slot">   The slot. </param>
            <param name="inMill"> (Optional) true to in mill. </param>
            <param name="usedSlots"> (Optional) Additional used slots to consider. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.DeleteByMachineGroup(System.Int32)">
            <summary> Deletes all tools that exist within the specified machine group number. </summary>
            <param name="machineGroupNumber"> The machine group number. </param>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.CopyTo(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces the contents of "destination" with all tool data from the current Mastercam part tool list. </summary>
            <param name="destination"> Destination for the tool data from the current Mastercam part tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.CopyFrom(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces the tool data in the current Mastercam part tool list with all tool data existing within the
		  input parameter "source". </summary>
            <param name="source"> Tool data to be used to replace the data within the current Mastercam part tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.CreateCopy(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a copy of the tool assembly at the specified slot number and puts it into the specified machine
		  group. If "checkForExisting" is passed a value of "true", the user will be prompted to decide on
		  whether to add the tool anyways if a similar tool assembly has been located. </summary>
            <param name="sourceSlot">		 Source slot. </param>
            <param name="slotIsMill">		 true if slot is mill. </param>
            <param name="checkForExisting">  true to check for existing. </param>
            <param name="newMachineGroupID"> Identifier for the new machine group. </param>
            <param name="useExisting">		 The use existing. </param>
            <returns> The new copy. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.CreateCopy(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a copy of the tool assembly at the specified slot number.  If "checkForExisting" is passed a
		  value of "true", the user will be prompted to decide on whether to add the tool anyways if a similar
		  tool assembly has been located. </summary>
            <param name="sourceSlot">	    Source slot. </param>
            <param name="slotIsMill">	    true if slot is mill. </param>
            <param name="checkForExisting"> true to check for existing. </param>
            <param name="useExisting">	    The use existing. </param>
            <returns> The new copy. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.DeleteAll(System.Boolean)">
            <summary> Deletes all lathe tools and mill assemblies from the main part tool list. </summary>
            <remarks> Input parameter allows control over whether or not to delete entities from Mastercam database as well as
		  Part tool list. Doing so will put the two lists out of sync and should only be attempted if that
		  action is intended. If not, call the parameterless version. </remarks>
            <param name="deleteFromDatabaseToo"> true to delete from the Mastercam database too. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Update(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the tool assembly referenced by the slot information stored within the input entity. </summary>
            <param name="input"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Update(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the tool assembly referenced by the slot information stored within the input LATHETOOL. </summary>
            <param name="input"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Update(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the tool assembly referenced by the slot information stored wtihin the input tp_tool. </summary>
            <param name="input"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Update(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the tool assembly referenced by the slot information stored within the input tool. </summary>
            <param name="spInput"> The sp input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Update(std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the tool assembly referenced by the slot information stored within the input tool. </summary>
            <param name="spInput"> The sp input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.GetConfiguredToolAssemblyIDs">
            <summary> Retrieves a set of all 3D tool assembly IDs from the current Mastercam part list. </summary>
            <returns> The 3D tool assembly IDs. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.GetLatheToolIDs">
            <summary> Retrieves a set of all lathe tool assembly IDs from the current Mastercam part list. </summary>
            <returns> The lathe tool assembly IDs. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.GetAssemblyIDs">
            <summary> Retrieves a set of all mill tool assembly IDs from the current Mastercam part list. </summary>
            <returns> The assembly IDs. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.FindIdFromSlot(System.Int32,System.Boolean)">
            <summary> Searches for the Tool ID corresponding to the slot specified by the input parameter "slot". </summary>
            <param name="slot">		  The slot. </param>
            <param name="slotIsMill"> (Optional) true if slot is mill. </param>
            <returns> The found identifier from slot. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.ItemExists(std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Queries if an item exists within the Mastercam part tool list matching the provided set of search
		  parameters. </summary>
            <param name="spSearchTool">	   	The search tool. </param>
            <param name="warnIfFound">	   	true to issue a warning to the user if an item is found. </param>
            <param name="ignoreToolNumber">	true to ignore tool numbers when searching. </param>
            <param name="machineGroupId">  	Identifier for the machine group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.ItemExists(std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Queries if an item exists within the Mastercam part tool list matching the provided set of search
		  parameters. </summary>
            <param name="spSearchTool">	   	The search tool. </param>
            <param name="warnIfFound">	   	true to issue a warning to the user if an item is found. </param>
            <param name="ignoreToolNumber">	true to ignore tool numbers when searching. </param>
            <param name="machineGroupId">  	Identifier for the machine group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.ItemExists(DUPTOOL_CHK!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Queries if an item exists within the Mastercam part tool list matching the provided set of search
		  parameters. </summary>
            <param name="searchSettings"> The search settings. </param>
            <param name="searchParams">   Options for controlling the search. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.ItemExists(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Queries if an item exists within the Mastercam part tool list matching the provided set of search
		  parameters. </summary>
            <param name="searchParams">   Options for controlling the search. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.ItemExists(Cnc.Tool.TpToolSearchParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Queries if an item exists within the Mastercam part tool list matching the provided set of search
		  parameters. </summary>
            <param name="searchParams"> Options for controlling the search. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.ItemExists(System.Int32,System.Boolean,System.Boolean)">
            <summary>	Queries if an item exists within the Mastercam part tool list at the specified slot number. </summary>
            <param name="slot">		 	The slot. </param>
            <param name="slotIsMill">	true if slot is mill. </param>
            <param name="checkDb">   	(Optional) True to check the database in addition to checking the tool list. </param>
            <returns>	true if an item exists, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.ItemExists(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Queries if an item exists within the Mastercam part tool list at the specified ID. </summary>
            <param name="id"> The identifier. </param>
            <returns> true if an item exists, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.GetConfiguredToolAssemblies">
            <summary>
Constructs a list of all items of type TlConfiguredToolAssembly from the main part tool list.  The result list is
composed of non-modifiable smart pointers that directly point to the items from the internal tool list. If
changes are desired to any individual item in the result set, the "Clone" method should be called on the item to
create a deep copy to work with.
</summary>
            <returns>	A set of all items in the main part tool list of type TlConfiguredToolAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.FindAll(std.function&lt;(Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches for matching 3d tools in the tool manager. The predicate parameter will be executed on all 3d tools.
Items that result in a value of 'true' when passed into the predicate will be added to the result set.
</summary>
            <param name="pred">	A function predicate used to select all matching 3d tools from the Mastercam part tool list. </param>
            <returns>	The result set. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.FindAll(std.function&lt;(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches for matching mill tools in the tool manager. The predicate parameter will be executed on all mill tools.
Items that result in a value of 'true' when passed into the predicate will be added to the result set.
</summary>
            <param name="pred">	A function predicate used to select all matching mill tools from the Mastercam part tool
					list. </param>
            <returns>	The result set. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.FindAll(std.function&lt;(Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches for matching lathe tools in the tool manager. The predicate parameter will be executed on all lathe
tools. Items that result in a value of 'true' when passed into the predicate will be added to the result set.
</summary>
            <param name="pred">	A function predicate used to select all matching lathe tools from the Mastercam part tool
					list. </param>
            <returns>	The result set. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.FindIf(std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches for the first item for which predicate 'pred' returns true. If an item is found, it will be assigned to
the parameter 'spResult'.
</summary>
            <param name="spResult">	The result. </param>
            <param name="pred">	   	A function predicate used to select the appropriate tool from the Mastercam part tool
						list. This function parameter will be executed on each tool in the list until a value of
						"true" is returned. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.FindIf(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches for the first item for which predicate 'pred' returns true. If an item is found, it will be assigned to
the parameter 'spResult'.
</summary>
            <param name="spResult">	The result. </param>
            <param name="pred">	   	A function predicate used to select the appropriate tool from the Mastercam part tool
						list. This function parameter will be executed on each tool in the list until a value of
						"true" is returned. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.FindIf(std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches for the first item for which predicate 'pred' returns true. If an item is found, it will be assigned to
the parameter 'spResult'.
</summary>
            <param name="spResult">	The result. </param>
            <param name="pred">	   	A function predicate used to select the appropriate tool from the Mastercam part tool
						list. This function parameter will be executed on each tool in the list until a value of
						"true" is returned. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item.  This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(DUPTOOL_CHK!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a tool assembly matching the provided set of search parameters. This version of 'Find'
		  returns (by reference parameter) a shared pointer to a const version of the actual item in storage. </summary>
            <param name="searchSettings"> The search settings. </param>
            <param name="searchParams">   Options for controlling the search. </param>
            <param name="spResult">		  The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a tool assembly matching the provided set of search parameters. This version of 'Find'
		  returns (by reference parameter) a shared pointer to a const version of the actual item in storage. </summary>
            <param name="searchParams">   Options for controlling the search. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="spResult">		  The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(Cnc.Tool.TpToolSearchParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a tool assembly matching the provided set of search parameters. This version of 'Find'
		  returns (by reference parameter) a shared pointer to a const version of the actual item in storage. </summary>
            <param name="searchParams"> Options for controlling the search. </param>
            <param name="spResult">	    The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Attempts to locate a lathe tool assembly in the part tool list matching the the given lathe tool. </summary>
            <param name="searchTool">	   	The tool to search for. </param>
            <param name="warning">		   	true to display a duplicate tool warning message. </param>
            <param name="machineGroupId"> 	Identifier for the machine group. </param>
            <param name="ignoreToolNumber">	true to ignore tool number when checking to see if the tool exists. </param>
            <param name="spResult">	   		The result tool. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <param name="spResult">		    The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(System.Int32,System.Boolean,std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Attempts to locate a 3D tool corresponding to the slot number specified at input parameter "slot".  Because 3D
tools live in both the mill and lathe tool lists, input parameter "slotIsMill" is used to determine whether to
look for the tool from the lathe slot list or the mill slot list.
</summary>
            <param name="slot">		 	The slot. </param>
            <param name="slotIsMill">	True if the slot is a mill tool list slot. </param>
            <param name="spResult">  	The result. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(System.Int32,Cnc.Tool.LATHETOOL*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Attempts to locate a legacy lathe tool corresponding to the slot number specified at input parameter "slot".
</summary>
            <param name="slot">  	The slot. </param>
            <param name="result">	The result. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(System.Int32,System.Boolean,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the Mastercam database entity corresponding to the slot number specified at input
		  parameter "slot". Depending on the parameter "slotIsMill", only mill or lathe entities will be
		  considered. </summary>
            <param name="slot">		  The slot. </param>
            <param name="slotIsMill"> true if slot is mill. </param>
            <param name="result">	  The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Attempts to locate a lathe tool assembly in the part tool list matching the the given lathe tool. </summary>
            <param name="spSearchTool">	   	The tool to search for. </param>
            <param name="warning">		   	true to display a duplicate tool warning message. </param>
            <param name="machineGroupId"> 	Identifier for the machine group. </param>
            <param name="ignoreToolNumber">	true to ignore tool number when checking to see if the tool exists. </param>
            <param name="spResult">	   		The result tool. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <param name="spResult">		    The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Find(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a similar assembly to the input parameter "similarAssembly". This version of 'Find'
		  returns (by reference parameter) a shared pointer to a const version of the actual item in storage. </summary>
            <param name="similarAssembly"> The similar assembly. </param>
            <param name="machineGroupId">  Identifier for the machine group. </param>
            <param name="spResult">		   The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds the provided item to the current part's main tool list.  Configured tool assemblies are not accessible via
slot number, and so no slot number will be assigned to the input parameter.
</summary>
            <param name="spInput">	The item to add to the current part's main tool list. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlConfiguredToolAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean)">
            <summary>	Adds the given 3D tool to the machine group at the given ID. </summary>
            <param name="spTool">						The tool to add. </param>
            <param name="slot">							The slot. Input value greater than 0 - slot requested, input value
											equal to 0
											- next open slot. Parameter is assigned the slot assigned to the tool. </param>
            <param name="machineGroupIdn">				The machine group idn used to search for duplicates or NULL_ID to
											ignore groups. </param>
            <param name="addToMgrOnly">					(Optional) true to add to the TlMgr list only. BE WARNED - Only send
											true in with this parameter if it is fully understood that this will NOT
											add the tool to the Mastercam database. </param>
            <param name="suppressToolNumberWarning">	(Optional) true to suppress tool number warning. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean)">
            <summary>	Adds the given lathe tool to the machine group at the given ID. </summary>
            <param name="spTool">						The tool to add. </param>
            <param name="slot">							The slot. Input value greater than 0 - slot requested, input value
											equal to 0
											- next open slot. Parameter is assigned the slot assigned to the tool. </param>
            <param name="machineGroupIdn">				The machine group idn used to search for duplicates or NULL_ID to
											ignore groups. </param>
            <param name="addToMgrOnly">					(Optional) true to add to the TlMgr list only. BE WARNED - Only send
											true in with this parameter if it is fully understood that this will NOT
											add the tool to the Mastercam database. </param>
            <param name="suppressToolNumberWarning">	(Optional) true to suppress tool number warning. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Add(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a 'dummy' tool based on parameters contained within the provided operation structure. </summary>
            <param name="input"> The input to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Add(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds the provided item to the current part's main tool list.  An open slot number will be determined and assigned
to the item as it is added to the part tool list. If the add is successful, the input parameter's slot number
will be updated to reflect how it was stored.  This slot number can be used to access and/or update the item from
the main tool list.
</summary>
            <param name="input">	The item to add to the current part's main tool list. The entity should be defined with
						the assoc_id indicating whether the tool is mill, lathe, or 3D. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Add(Cnc.Tool.LATHETOOL*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="input"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.Add(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="input"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.InitTlMgr">
            <summary> Initializes the Mastercam part tool manager's tool container. </summary>
            <remarks> This function is only called during Mastercam database initialization and should not be called otherwise.
		  This only initializes the TlMgr container and will potentially corrupt the tool system if called
		  otherwise. </remarks>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.GetTlMgr">
            <summary> Retrieves a const instance of the part tool manager's TlMgr container. </summary>
            <returns> The const TlMgr to be used for direct queries. </returns>
        </member>
        <member name="M:Cnc.Tool.IInternalToolSystem.LoadTlMgr(DB_LIST_ENT*!System.Runtime.CompilerServices.IsConst)">
            <summary> Loads the part tool manager data from the Mastercam database entity specified. </summary>
            <remarks> This function is called when the Mastercam database is spun up with an existing file.  Do not call this
		  unless you know what you are doing. </remarks>
            <param name="eptr"> The Mastercam database entity pointer. </param>
        </member>
        <member name="T:Cnc.Tool.IInternalToolSystem">
            <summary> Internal Interface for managing the tools stored within the current part.
          Functions defined in this interface perform all necessary operations to
          maintain the set of tools contained within the internal TlMgr as well as
          the set of tools contained within the Mastercam database. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCuttingConfigurationGrooving">
            <summary>	Declares the TlCuttingConfigurationGrooving type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCuttingConfigurationThreading">
            <summary>	Declares the TlCuttingConfigurationThreading type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCuttingConfigurationTurningBoring">
            <summary>	Declares the TlCuttingConfigurationTurningBoring type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCuttingConfiguration">
            <summary>	Declares the TlCuttingConfiguration type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCompConfigurationStationary">
            <summary>	Declares the TlCompConfigurationStationary type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCompConfiguration">
            <summary>	Declares the TlCompConfiguration type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlSetupConfiguration">
            <summary>	Declares the TlSetupConfiguration type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyConfiguration">
            <summary>	Declares the TlAssemblyConfiguration type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyComponentTree">
            <summary>	Declares the TlAssemblyComponentTree type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyComponent">
            <summary>	Declares the TlAssemblyComponent type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlConfiguredToolAssembly">
            <summary>	Declares the TlConfiguredToolAssembly type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Declares the TlConfiguredToolAssembly type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolAssembly">
            <summary>	Declares the TlToolAssembly type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="M:Cnc.Tool.GetTlMgr">
            <summary> Gets tl manager. </summary>
            <returns> The tl manager. </returns>
        </member>
        <member name="M:Cnc.Tool.GetToolDataImporterManager">
            <summary> Gets a pointer to the tool data importer manager. </summary>
            <returns> The tool data importer manager. </returns>
        </member>
        <member name="M:Cnc.Tool.GetTlAssemblyFactory">
            <summary> Gets a pointer to the assembly factory. </summary>
            <returns> The tool assembly factory. </returns>
        </member>
        <member name="M:Cnc.Tool.GetTlAssemblyItemFactory">
            <summary> Gets a pointer to the assembly item factory. </summary>
            <returns> The tool assembly item factory. </returns>
        </member>
        <member name="M:Cnc.Tool.GetToolSystem">
            <summary> Gets a pointer to the global tool system. </summary>
            <returns> The tool system. </returns>
        </member>
        <member name="D:Cnc.Tool.IToolDataImporterManagerUPtr">
            <summary> Defines an alias representing zero-based index of the tool data importer manager pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.ImportSilently(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Import tool data using the importer at the specified identifier.  All user interfaces will be suppressed
		  and the provided path will be given to the importer to allow for silent execution. </summary>
            <param name="importerIndex">  Identifier of the importer to use for this operation. </param>
            <param name="resultMgr">	  Manager that result data should be injected into. </param>
            <param name="importFilePath"> Full pathname of the file to import from. </param>
            <param name="logPath">		  Full pathname of the file to log results to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.Import(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Import tool data. Any user interface will be provided by the importer at the specified index should it
		  supply one. If it does not supply a user interface, a Mastercam interface will be used instead. </summary>
            <param name="importerId"> Identifier of the importer to use for this operation. </param>
            <param name="resultMgr">  Manager that result data should be injected into. </param>
            <param name="pParent">    (Optional) handle of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.GetImporterNames">
            <summary> Retrieves names of the current set of available importers. </summary>
            <returns> The names and identifiers of the available importers. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.GetImporterCount">
            <summary> Gets a count of the importers stored within this importer manager. </summary>
            <returns> The importer count. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.RemoveImporter(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Removes the importer described by the indentifier from the current set of available importers. </summary>
            <param name="importerId"> The identifier. </param>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.AddImporter(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.IToolDataImporter!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds an importer identified by 'importerId' to the list of importers. </summary>
            <param name="importerId">	Identifier for the importer. </param>
            <param name="spImporter">  	The importer. </param>
            <returns>	true if the importer was added, false if it was not. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporterManager.AddImporter(std.shared_ptr&lt;Cnc.Tool.IToolDataImporter!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds an importer to the list of importers. </summary>
            <param name="importer"> The importer. </param>
            <returns> The index of the newly added importer to be used for future access. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolDataImporterManager">
            <summary> Manager for tool data importers. </summary>
        </member>
        <member name="D:Cnc.Tool.IToolDataImporterCPtr">
            <summary> Defines an alias representing a constant zero-based index of the tool data importer pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.Import(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.IToolDataImportLogger&gt;,System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,CWnd*)">
            <summary> Imports tool data into the provided TlMgr. </summary>
            <param name="mgr">	    The storage container to put all imported data. </param>
            <param name="spLogger"> The logger service to log any result messages. </param>
            <param name="path">	    (Optional) Full pathname of the file. </param>
            <param name="silent">   (Optional) false to warn the user on warnings/errors during the import process. </param>
            <param name="pParent">  (Optional) If non-null, the parent window. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.ProvidesUI">
            <summary> Queries the importer on whether or not it will provide a interface for the user.  If an interface is not
		  provided, and an interface is desired, a value of 'false' should be returned. Mastercam will supply
		  an interface in this case when one is supported. </summary>
            <returns> True to put the responsibility for any user interaction within this importer. False to let Mastercam
		  handle the user interface responsibility. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.GetImportFileTypes">
            <summary> Retrieves a set of possible file types that can be imported by this importer. </summary>
            <returns> The import file types. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.GetName">
            <summary> Retrieves the localized name of this tool data importer. </summary>
            <returns> The name. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolDataImporter">
            <summary> The IToolDataImporter interface. </summary>
        </member>
        <member name="D:Cnc.Tool.IToolDataImportLoggerPtr">
            <summary> Defines an alias representing zero-based index of the tool data import logger pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.GetMessages">
            <summary> Gets the messages. </summary>
            <returns> The messages. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.SaveLogToDisk(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves the log to disk. </summary>
            <param name="path"> I/O Full pathname of the file. </param>
            <returns> True if the log was successfully saved to disk. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.Log(System.UInt32,HINSTANCE__*,Cnc.Tool.MessageType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Logs a message. </summary>
            <param name="resourceId">	  The Resource Identifier of the message to log. </param>
            <param name="resourceHandle"> Handle of the resource. </param>
            <param name="messageType">    (Optional) type of the message. </param>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.Log(System.Char!System.Runtime.CompilerServices.IsConst*,Cnc.Tool.MessageType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Logs a message. </summary>
            <param name="message">	   The message. </param>
            <param name="messageType"> (Optional) type of the message. </param>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.ClearAllMessages">
            <summary> Clears all messages. </summary>
        </member>
        <member name="T:Cnc.Tool.IToolDataImportLogger">
            <summary> A tool data import logger. </summary>
        </member>
        <member name="T:Cnc.Tool.MessageType">
            <summary> Values that represent the type of message. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateITlAssemblyItemFactory">
            <summary>	Creates a new new instance of the ITlAssemblyItemFactory interface. </summary>
            <returns>	The new ITlAssemblyItemFactory instance. </returns>
        </member>
        <member name="D:Cnc.Tool.ITlAssemblyItemFactoryUPtr">
            <summary> Defines an alias representing zero-based index of the tl assembly item factory pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateTurnHolder(System.Boolean)">
            <summary>	Creates a turn holder. </summary>
            <param name="metric">	True if metric. </param>
            <returns>	The new turn holder. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateThreadingInsert(System.Int32,System.Int32,System.Boolean)">
            <summary>	Creates threading insert. </summary>
            <param name="insertStyle">	The insert style. </param>
            <param name="threadType"> 	Type of the thread. </param>
            <param name="metric">	  	True for the created insert to have metric values. </param>
            <returns>	The new threading insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateGroovingInsert(System.Char,System.Boolean)">
            <summary>	Creates a grooving insert using the passed in style and metric flag. </summary>
            <param name="style"> 	The style. </param>
            <param name="metric">	True for the created insert to have metric values. </param>
            <returns>	The new grooving insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateTurnInsert(System.Char,System.Boolean)">
            <summary>	Creates a turning boring insert using the passed in shape code and metric flag. </summary>
            <param name="shapeCode">	The shape code. </param>
            <param name="metric">   	True for the created insert to have metric values. </param>
            <returns>	The new turn insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateLatheTool(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a lathe tool using the values from the legacy tool. </summary>
            <param name="oldTool"> The old tool. </param>
            <returns> The new lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateMillHolder(System.Boolean)">
            <summary> Creates a mill holder based on the input metric flag. </summary>
            <param name="metric"> True for the created holder to have metric values. </param>
            <returns> The new mill holder. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateMillTool(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a mill tool using the values from the legacy tool. </summary>
            <param name="oldTool"> The old tool. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateMillTool(MCToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Creates a mill tool using the passed in type and metric flag. </summary>
            <param name="type">   The type. </param>
            <param name="metric"> true for the created mill tool to have metric values. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="T:Cnc.Tool.ITlAssemblyItemFactory">
            <summary> Factory service class providing functionality for creating instances of the classes TlToolMill, TlHolder,
		  and TlToolLathe. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateITlAssemblyFactory">
            <summary>	Creates a new new instance of the ITlAssemblyFactory interface. </summary>
            <returns>	The new ITlAssemblyFactory instance. </returns>
        </member>
        <member name="D:Cnc.Tool.ITlAssemblyFactoryUPtr">
            <summary> Defines an alias representing zero-based index of the tl assembly factory pointer. </summary>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new TlAssemblyPtr from the parameters in the specified operation. </summary>
            <param name="op"> The operation. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new TlAssemblyPtr from the old tool. </summary>
            <param name="oldTool"> The old tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new TlAssemblyPtr from the given tool. </summary>
            <param name="spTool"> The tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(MCToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Creates a new TlAssemblyPtr based on the tool type and metric flag. </summary>
            <param name="toolType"> Type of the tool. </param>
            <param name="isMetric"> true if this object is metric. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="T:Cnc.Tool.ITlAssemblyFactory">
            <summary> Factory service class providing functionality for creating instances of class TlAssembly. </summary>
        </member>
        <member name="D:Cnc.Tool.IToolSystemUPtr">
            <summary> Defines an alias representing zero-based index of the tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.IsEmpty">
            <summary> Query if the main part tool list is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary> Assigns the specified lathe tool to the provided operation. </summary>
            <param name="spInput">		 The lathe tool to be assigned. </param>
            <param name="result">		 The operation to have tool information assigned to it. </param>
            <param name="setOffsets">    Flag specifying how to initialize the operation tool offsets. 0 - from the tool, 1 -
							 from the configuration. </param>
            <param name="setStation">    true to initialize the operation tool station. </param>
            <param name="setSteps">		 true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed"> Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece material,
							 1 - From the tool, 2 - From defaults. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assigns the specified tool holder to the provided operation. </summary>
            <param name="spInput"> The tool holder to be assigned. </param>
            <param name="result">  The operation to have tool holder information assigned to it. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool to the provided operation. </summary>
            <param name="spInput">			   The tool to be assigned. </param>
            <param name="result">			   The operation to have tool assembly information assigned to it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool assembly to the provided operation. </summary>
            <param name="spInput">			   The tool assembly to be assigned. </param>
            <param name="result">			   The operation to have tool assembly information assigned to it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.LaunchManager(System.Boolean,CWnd*)">
            <summary> Launches the Classic Tool Manager Dialog. </summary>
            <param name="launchLathe"> True to launch the lathe tool manager.  False to launch the mill tool manager. </param>
            <param name="pParent">     (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromLibrary(std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Double,CWnd*)">
            <summary> Prompts the user to select a cutting parameter from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. IsoGroup and
		  ToolDiameter parameters exist to provide initial filtering functionality. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="isoGroup"> ISO group that the current workpiece material belongs to. </param>
            <param name="toolDia">  The diameter of the current tool being used. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a cutting parameter was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromLibrary(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a lathe tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromLibrary(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromPart(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a lathe tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromPart(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssemblyProjections(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the GAF Projection editing feature to edit the projections of the assembly provided at the input parameter "spResult".
		  If the assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="pParent">    (Optional) If non-null, the parent dialog to suspend. </param>
            <returns> true if the assembly has changed, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssemblyHolder(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32,CWnd*)">
            <summary> Launches the holder wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the holder is successfully edited, and the input parameter "updatePart" is set to true, the holder
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		  The result. </param>
            <param name="updatePart">	  true to update part. </param>
            <param name="compositeIndex"> (Optional) If the holder is a composite holder, the index of the holder to edit. </param>
            <param name="pParent">		  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssemblyTool(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,CWnd*)">
            <summary> Launches the tool wizard to edit the tool of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		   The result. </param>
            <param name="updatePart">	   true to update part. </param>
            <param name="startOnLastPage"> (Optional) true to start on the last page (properties page) of the wizard. </param>
            <param name="readOnly">        (Optional) true to present the editor in read-only mode. </param>
            <param name="pParent">		   (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the edit assembly dialog to edit the assembly provided at the input parameter "spResult". If the
		  assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="pParent">    (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the edit lathe tool dialog to edit the assembly provided at the input parameter "spResult". If
		  the lathe tool is successfully edited, and the input parameter "updatePart" is set to true, the lathe
		  tool will be updated in the Mastercam part tool list. </summary>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="pParent">    (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the edit holder wizard to allow users to modify existing holders. The result of the edit holder
		  wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="readOnly"> (Optional) true to present the editor in read-only mode. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,CWnd*)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		   The result. </param>
            <param name="startOnLastPage"> (Optional) true to start on the last page (properites page) of the wizard. </param>
            <param name="readOnly">		   (Optional) true to present the editor in read-only mode. </param>
            <param name="pParent">		   (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,CWnd*)">
            <summary> Launches the create lathe tool dialog to allow users to create their desired tools. The result of the
		  create lathe tool dialog, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		  The result. </param>
            <param name="machineGroupId"> Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <param name="pParent">		  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create(std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Launches the create new holder wizard to allow users to create their desired holders. The result of the
		  create new holder wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,CWnd*)">
            <summary> Launches the create new tool wizard to allow users to create their desired tools. The result of the
		  create new tool wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">    The result. </param>
            <param name="initialType"> (Optional) The initial tool type. </param>
            <param name="pParent">	   (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.DeleteAll">
            <summary> Deletes all lathe tools and mill assemblies from the main part tool list. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.DeleteLathe(System.Int32)">
            <summary> Deletes a lathe tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot"> The slot number of the tool to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.DeleteMill(System.Int32,System.Boolean,System.Boolean,CWnd*)">
            <summary> Deletes a mill tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot">         The slot number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="pParent">      (Optional) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Delete(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,CWnd*)">
            <summary> Deletes an item from the main part tool list with identification information matching the input parameter
          "id". </summary>
            <param name="id">           The identification number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="pParent">      (Optional) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Update(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Update(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.GetLatheTools">
            <summary> Constructs a list of all items of type TlToolLathe from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolLathe. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.GetAssemblies">
            <summary> Constructs a list of all items of type TlAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(System.Int32,std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(System.Int32,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item.  This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AddToMachineGroup(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AddToMachineGroup(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolSystem">
            <summary> Interface into the main Mastercam tool system. </summary>
        </member>
        <member name="M:GetWorkSheetControl">
            <summary> Allows external areas of the application to quickly and easily get a pointer to the current
		  viewsheet tab control. </summary>
            <returns> A pointer to the viewsheet tab control. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.MakeWorkspaceKey">
            <summary> Make a workspace key for viewsheets. </summary>
            <returns> The name of the workspace key. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.GetNumSheetsDirect">
            <summary> Gets number of viewsheets. </summary>
            <returns> The number viewsheets. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.GetViewsheetNames">
            <summary> Gets a set of all currently used viewsheet names. </summary>
            <returns> Set of all currently used viewsheet names. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.SaveCurrentViewSheetValues(ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Saves a current viewsheet values. </summary>
            <param name="data">			   The viewsheet data to save. </param>
            <param name="checkForChanged"> (Optional) true if check for changed, false does not flag a database change. </param>
        </member>
        <member name="M:CWorkSheetTabControl.UpdateGraphicsByLevels(std.set&lt;System.Int32,std.less&lt;System.Int32&gt;,std.allocator&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32,std.less&lt;System.Int32&gt;,std.allocator&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the graphics by levels. </summary>
            <param name="oldLevels"> The old levels. </param>
            <param name="newLevels"> The new levels. </param>
        </member>
        <member name="M:CWorkSheetTabControl.DoLevelListsMatch(std.set&lt;System.Int32,std.less&lt;System.Int32&gt;,std.allocator&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32,std.less&lt;System.Int32&gt;,std.allocator&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Verify the list of Levels match. </summary>
            <param name="levelList1"> The first level list. </param>
            <param name="levelList2"> The second level list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.OnLButtonUp(System.UInt32,CPoint)">
            <summary> Button up message handler for the left-mouse button. </summary>
            <param name="nFlags"> Left mouse button click flags. </param>
            <param name="point">  The screen coordinates of where the original mouse click took place. </param>
        </member>
        <member name="M:CWorkSheetTabControl.OnLButtonDown(System.UInt32,CPoint)">
            <summary> Button down message handler for the left-mouse button. </summary>
            <param name="nFlags"> Left mouse button click flags. </param>
            <param name="point">  The screen coordinates of where the original mouse click took place. </param>
        </member>
        <member name="M:CWorkSheetTabControl.OnLButtonDblClk(System.UInt32,CPoint)">
            <summary> This double-click message handler for the left-mouse button is used to to restore a bookmark. </summary>
            <param name="nFlags"> Left mouse button click flags. </param>
            <param name="point">  The screen coordinates of where the original mouse click took place. </param>
        </member>
        <member name="M:CWorkSheetTabControl.OnCreate(tagCREATESTRUCTW*)">
            <summary> This is an overridden virtual method that we use to do our viewsheet tab control
		  initialization stuff in. </summary>
            <param name="lpCreateStruct"> The input structure containing all of the class creation info. </param>
        </member>
        <member name="M:CWorkSheetTabControl.OnContextMenu(CWnd*,CPoint)">
            <summary> Message handler used to enable or disable some options on the right-mouse menu depending on which
		  items in the control were clicked on and whether or not those viewsheets have bookmark data
		  associated with them yet. </summary>
            <param name="pWnd">  Pointer to the control that's displaying the context menu (in this case, this tab control). </param>
            <param name="point"> The screen coordinates of where the right click menu will be originating from (and where
					 the right-click took place). </param>
        </member>
        <member name="M:CWorkSheetTabControl.OnCommand(System.UInt64,System.Int64)">
            <summary> Message handler used to hook our right-mouse menu options. </summary>
            <remarks> We catch each of the commands that can be sent out of that menu and run the appropriate member
		  function as a result. </remarks>
            <param name="wParam"> The low order word of this value contains the resource ID of the menu option that was chosen. </param>
            <param name="lParam"> Unused. </param>
            <returns> Whatever the base class method returns after we've handled our own right-click mouse menu options. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.RestoreActiveWorkSheet(System.Int32)">
            <summary> Restore active viewsheet for TempDB. </summary>
            <param name="currentPage"> The sheet to make active. </param>
        </member>
        <member name="M:CWorkSheetTabControl.SaveActiveWorkSheet">
            <summary> Saves the active viewsheet for TempDB. </summary>
            <returns> An the active viewsheet. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.GetTabHeight">
            <summary> Calculate the window's tab height. </summary>
            <returns> The tab height. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.IsWorkSheetInRenameMode">
            <summary> Is The View Sheet in renaming Mode. </summary>
            <returns> True if renaming. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.FireChangingActiveTab(System.Int32)">
            <summary> This is an overridden function to trap when the active tab is about to change. </summary>
            <remarks> This notification is important because the current viewsheet, the one that's about to be deactivated,
		  needs to save off a snapshot of the current view settings for use the next time it's selected.</remarks>
            <param name="nNewTab"> The new tab to activate. </param>
            <returns> TRUE if it succeeds, FALSE if it fails. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.FireChangeActiveTab(System.Int32)">
            <summary> This is an overridden function to trap when the active tab has changed. </summary>
            <remarks> When this message comes in, we know that the tab selection has changed on the control and the screen
		  settings need to be updated. </remarks>
            <param name="nNewTab"> The newly activated tab. </param>
        </member>
        <member name="M:CWorkSheetTabControl.SaveNewInfoOldFile">
            <summary> Save new viewsheet entry for pre-X4 files. </summary>
            <remarks> This function should only be called from the one place it is called from now.  Included for compatibility
		  with pre X4 files. </remarks>
        </member>
        <member name="M:CWorkSheetTabControl.DoesSheetHaveBookmark(System.Int32)">
            <summary> This is a testing method to determine if the specified sheet, identified by it's tab index in
		  the tab control, has any bookmark data associated with it yet. </summary>
            <param name="sheet"> The index of the viewsheet to query. </param>
            <returns> True if the specified sheet has a bookmark saved for it, and false if it doesn't. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.RestoreBookmark(System.Int32,System.Boolean)">
            <summary> Restores a viewsheet's view settings to a previously saved bookmark of view settings. </summary>
            <remarks> If it's the currenttly active viewsheet then it also updates the view.

		  Setting "forceViewUpdate" to true causes the graphics to be regenerated if the
		  "in_file_get" global is false. </remarks>
            <param name="sheet">           The index of the viewsheet to restore a bookmark on. </param>
            <param name="forceViewUpdate"> (Optional) true to force view update. </param>
        </member>
        <member name="M:CWorkSheetTabControl.DeleteBookmark(System.Int32)">
            <summary> Deletes the bookmark for the specified viewsheet. </summary>
            <param name="sheet"> The index of the viewsheet to delete a bookmark on. </param>
        </member>
        <member name="M:CWorkSheetTabControl.SaveBookmark(System.Int32)">
            <summary> This method saves a view 'bookmark' for a specified viewsheet. </summary>
            <remarks> This allows the user to save off a copy of the the view settings at a given point, change the view,
		  and then reload the old view settings from the bookmark. </remarks>
            <param name="sheet"> The index of the viewsheet to save a bookmark on. </param>
        </member>
        <member name="M:CWorkSheetTabControl.DeleteAllSheets">
            <summary> Deletes all viewsheets. </summary>
            <remarks> This method deletes all of the viewsheet entry items from the internal array, empties the array,
		  and then removes all of the tabs from the tab control. This REALLY needs to be followed up with
		  a call to CreateNewSheet (), as this will leave the viewsheet control and array completely empty,
		  and it's never supposed to be completely empty. </remarks>
        </member>
        <member name="M:CWorkSheetTabControl.DeleteSheet(System.Int32,System.Boolean)">
            <summary> Deletes a viewsheet. </summary>
            <remarks> If it's the currently active tab, it then sets the first tab in the control as the currently
		  active one and updates the view. </remarks>
            <param name="sheet">       The index of the viewsheet to delete. </param>
            <param name="isTempSheet"> (Optional) True if deleting a temporary sheet. </param>
        </member>
        <member name="M:CWorkSheetTabControl.UpdateView(System.Int32,System.Boolean)">
            <summary> Updates the view. </summary>
            <remarks> This is where the magic happens!  This member function takes a sheet's index, finds its
		  entry in the viewsheet entries array, and updates the view with the appropriate settings.
		  It also either repaints or rebuilds the graphics screen completely based on whether or not
		  there have been any changes to the level information as a result of updating the view.

		  Note that setting "forceViewUpdate" to true causes the graphics to be regenerated if the
		  "in_file_get" global is false. </remarks>
            <param name="sheet">		   The index of the sheet to update. </param>
            <param name="forceViewUpdate"> (Optional) True to force view update. </param>
        </member>
        <member name="M:CWorkSheetTabControl.UpdateWorkSheets(System.Boolean)">
            <summary> This method updates the view, etc. depending on the state of the viewsheet tab control. </summary>
            <remarks> If it's supposed to force a view update, then the view will be updated no matter what.  If not,
		  it will run some checks to determine if it thinks the view needs to be updated or not and act
		  accordingly.

		  Setting "forceViewUpdate" to true causes the graphics to be regenerated if the
		  "in_file_get" global is false. </remarks>
            <param name="forceViewUpdate"> True to force viewsheet update. </param>
        </member>
        <member name="M:CWorkSheetTabControl.UpdateWorkSheets">
            <summary> This method updates the view, etc. depending on the state of the viewsheet tab control. </summary>
            <remarks> It doesn't force a view update if it doesn't need to - for example, if the selected tab hasn't
		  changed since the last view update then it won't update the view again. (Sort of like a repaint
		  instead of a regen). </remarks>
        </member>
        <member name="M:CWorkSheetTabControl.SaveCurrentSheetSettings(System.Boolean)">
            <summary> This method takes a snapshot of the current view settings and stores all of the information
		  to the currently active viewsheet. </summary>
            <param name="checkForChanged"> (Optional) true if check for changed. </param>
        </member>
        <member name="M:CWorkSheetTabControl.Initialize">
            <summary> Initializes the viewsheet control and internal array. </summary>
            <remarks> This is to be used when a new file is created or on startup, for example. </remarks>
        </member>
        <member name="M:CWorkSheetTabControl.CalcRectEdit(CRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the tab's inplace rename rectangle. </summary>
            <param name="rectEdit"> The rectangle edit on the viewsheet tab. </param>
        </member>
        <member name="M:CWorkSheetTabControl.EnableInPlaceEdit(System.Int32)">
            <summary> Enables the in place edit for the viewsheet name. </summary>
            <param name="bEnable"> true to enable, false to disable. </param>
        </member>
        <member name="M:CWorkSheetTabControl.GetSheetByName(System.Char*)">
            <summary> Gets a viewsheet. </summary>
            <param name="wsName"> The viewsheet name. </param>
            <returns> null if it fails, else the viewsheet of the name passed in. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.GetSheet(System.Int32)">
            <summary> Gets a viewsheet. </summary>
            <param name="sheet"> The viewsheet number. </param>
            <returns> null if it fails, else the viewsheet of the number passed in. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.GetNumSheets">
            <summary> Gets number of viewsheets. </summary>
            <returns> The number viewsheets. </returns>
            <summary> Gets number of viewsheets. </summary>
            <returns> The number viewsheets. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.GetSheetName(System.Int64)">
            <summary> Gets sheet name. </summary>
            <param name="sheetNo"> The sheet number. </param>
            <returns> The sheet name for the sheet number. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.OnRenameTab(System.Int32,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the rename tab action. </summary>
            <param name="iTab">    Zero-based index of the tab to rename. </param>
            <param name="strName"> The new name. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.RenameSheet(System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Rename sheet. </summary>
            <param name="sheet">   The index of the sheet to rename. </param>
            <param name="newName"> Name of the new viewsheet. </param>
        </member>
        <member name="M:CWorkSheetTabControl.RenameSheet(System.Int32)">
            <summary> Rename sheet. </summary>
            <param name="sheet"> The index of the sheet to rename. </param>
        </member>
        <member name="M:CWorkSheetTabControl.CreateCopySheet(System.Int32,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;)">
            <summary> Copies the current and names viewsheet. </summary>
            <param name="originalSheet"> The sheet to copy. </param>
            <param name="name">			 The new name. </param>
            <returns> The new copied sheet with the name. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.CreateCopySheet(System.Int32)">
            <summary> Creates copy of a viewsheet. </summary>
            <param name="originalSheet"> The index of the sheet to copy. </param>
            <returns> The new copied sheet. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.CreateNewSheet(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Creates new viewsheet. </summary>
            <param name="name">		    The name for the new sheet. </param>
            <param name="saveBookmark"> (Optional) true to save bookmark on the new sheet. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.CreateNewSheet(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32,matrix_33,System.Int32,System.Int32*)">
            <summary> Creates a new viewsheet with basic graphic info and multiple levels. </summary>
            <param name="pName">     The name. </param>
            <param name="planeID">   Identifier for the plane. </param>
            <param name="mmat">      The matrix. </param>
            <param name="numLevels"> Number of levels. </param>
            <param name="pLevels">   Array of levels. </param>
        </member>
        <member name="M:CWorkSheetTabControl.CreateNewSheet(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32,matrix_33,System.Int32)">
            <summary> Creates a new viewsheet. </summary>
            <param name="pName">   The name. </param>
            <param name="planeID"> Identifier for the plane. </param>
            <param name="mmat">    The matrix. </param>
            <param name="levNo">   The level number. </param>
        </member>
        <member name="M:CWorkSheetTabControl.CreateNewSheet(worksheet_type*)">
            <summary> Creates new viewsheet based on the settings found in a database viewsheet entity. </summary>
            <param name="pWorksheetInfo"> Pointer to a viewsheet database entity to create a new viewsheet entry from. </param>
            <returns> the tab index of the sheet just created. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.CreateNewSheet(System.Boolean)">
            <summary> Creates a new viewsheet based off of the currently selected one. </summary>
            <param name="doRename"> (Optional) True to start the rename process. </param>
        </member>
        <member name="M:CWorkSheetTabControl.NewPageSelection(System.Int32)">
            <summary> This function is called when a new tab has been selected. </summary>
            <remarks> It checks to make sure it's not the currently selected tab on the control already, makes
		  sure it's a valid index, and then updates the view accordingly. </remarks>
            <param name="sheet"> The index of the selected sheet. </param>
        </member>
        <member name="M:CWorkSheetTabControl.ShowSheetSettings">
            <summary> Shows the viewsheet settings dialog. </summary>
        </member>
        <member name="M:CWorkSheetTabControl.SetEnabled(System.Boolean)">
            <summary> Enables or disables the use of multiple viewsheets. </summary>
            <param name="enabled"> True to enable multiple viewsheets, and false to disable. </param>
        </member>
        <member name="M:CWorkSheetTabControl.GetEnabled">
            <summary> Gets a value indicating whether the use of multiple viewsheets is enabled. </summary>
            <returns> True if viewsheets are currently enabled. </returns>
        </member>
        <member name="M:CWorkSheetTabControl.Dispose">
            <summary> Destructor. </summary>
            <remarks> The destructor frees all of the dynamically allocated viewsheet entries from the array
		  and empties the array. </remarks>
        </member>
        <member name="M:CWorkSheetTabControl.#ctor">
            <summary> Default constructor. </summary>
            <remarks> The default constructor initializes the viewsheet array, initializes default values
		  for member variables, and loads all the strings it uses so that it doesn't run into
		  resource problems later. </remarks>
        </member>
        <member name="M:CreateViewSheet(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Creates a new ViewSheet. </summary>
            <param name="name">		    [in/out] The name used for the new ViewSheet. </param>
            <param name="saveBookmark"> true to save bookmark on the new ViewSheet. </param>
            <remarks> ViewSheet names must be unique, so the name you get make may be different than you supplied. </remarks>
            <returns> The index# of the new sheet (tab) if it succeeds, 0 if it fails. </returns>
        </member>
        <member name="M:UITabCtrl.SetSharedScroll(System.Int32)">
            <summary> Sets the shared scroll flag. </summary>
            <param name="sharedScroll"> True to enable shared scroll, false otherwise. </param>
        </member>
        <member name="M:UITabCtrl.SetScroll(System.Int32)">
            <summary> Set the scroll flag. </summary>
            <param name="scroll"> True to enable scroll, false otherwise. </param>
        </member>
        <member name="M:UITabCtrl.OnRenameTab(System.Int32,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Rename the Tab. </summary>
            <param name="iTab"> Tab Number. </param>
            <param name="strName"> Tab Name. </param>
            <returns> True if Rename Allowed. </returns>
        </member>
        <member name="M:UITabCtrl.PreSubclassWindow">
            <summary> Pre subclass window. </summary>
        </member>
        <member name="M:UITabCtrl.OnSetFont(System.UInt64,System.Int64)">
            <summary> Executes the set font action. </summary>
            <param name="wParam"> The wParam field of the message. </param>
            <param name="lParam"> The lParam field of the message. </param>
            <returns> A LRESULT. </returns>
        </member>
        <member name="M:UITabCtrl.OnCreate(tagCREATESTRUCTW*)">
            <summary> Called when this window is created. </summary>
            <param name="lpCreateStruct"> The create structure. </param>
            <returns> An int. </returns>
        </member>
        <member name="M:UITabCtrl.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:UITabCtrl.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:UITabCtrl">
            <summary> User interface tab control. </summary>
        </member>
        <member name="M:WorkSheetEntry.ViewsheetDataFromEnt(ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,worksheet_type*,System.Boolean)">
            <summary> Fill in viewsheet data from an ent. </summary>
            <param name="sheetData">  The viewsheet data to populate (Data or Bookmark). </param>
            <param name="pDbEnt">	  The database ent to copy from . </param>
            <param name="isBookmark"> true if we are populating a bookmark, otherwise false. </param>
        </member>
        <member name="M:WorkSheetEntry.ViewsheetToDisplayedPlanes">
            <summary> Use the viewsheet data to update which planes have the 'displayed' property set in the global planes list. </summary>
        </member>
        <member name="M:WorkSheetEntry.DisplayedPlanesToViewsheet(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update the viewsheet data with plane IDs of displayed planes. </summary>
            <param name="planesInSheet"> The list of plane IDs to populate. </param>
            <returns> true if displayed planes have changed, otherwise false. </returns>
        </member>
        <member name="M:WorkSheetEntry.SetTailStock(System.Boolean,System.Boolean)">
            <summary> Set or clear the worksheet's "tailstock" parameter. </summary>
            <param name="on">			true to set, false to clear. </param>
            <param name="inBookmark">	(Optional) true to set value in bookmark data, false to set viewsheet data. </param>
            <returns> the prior value. </returns>
        </member>
        <member name="M:WorkSheetEntry.SetStockShow(System.Boolean,System.Boolean)">
            <summary> Set or clear the worksheet's "stock show" parameter. </summary>
            <param name="on">			true to set, false to clear. </param>
            <param name="inBookmark">	(Optional) true to set value in bookmark data, false to set viewsheet data. </param>
            <returns> the prior value. </returns>
        </member>
        <member name="M:WorkSheetEntry.AddLevel(System.Int32)">
            <summary> Add a level to a worksheet entry. </summary>
            <param name="levelNumber"> Level number to add to the Worksheet </param>
        </member>
        <member name="M:WorkSheetEntry.CheckPlanes(worksheet_type*)">
            <summary> Validate planes for worksheet entry. </summary>
            <param name="DBEntity"> If non-null, the database entity. </param>
        </member>
        <member name="M:WorkSheetEntry.SetWorkSheetPlane(PlaneType)">
            <summary> Sets the work sheet plane for this worksheet entry. </summary>
            <param name="whichPlane"> Which plane type to set. </param>
            <returns> The plane ID. </returns>
        </member>
        <member name="M:WorkSheetEntry.ViewsheetToStockDisplay">
            <summary> Use the viewsheet data to update the global stock display settings. </summary>
        </member>
        <member name="M:WorkSheetEntry.StockDisplayToViewsheet(ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update the viewsheet data with stock display settings. </summary>
            <param name="pageData"> The viewsheet data to update. </param>
            <returns> true if values have changed, otherwise false. </returns>
        </member>
        <member name="M:WorkSheetEntry.ViewsheetToSectionView">
            <summary> Use the viewsheet data to update the global section view display settings. </summary>
        </member>
        <member name="M:WorkSheetEntry.SectionViewToViewsheet(ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update the viewsheet data with section view display settings. </summary>
            <param name="pageData"> The viewsheet data to update. </param>
            <returns> true if values have changed, otherwise false. </returns>
        </member>
        <member name="M:WorkSheetEntry.ViewsheetToAdvDisplay">
            <summary> Use the viewsheet data to update the global advanced toolpath display settings. </summary>
        </member>
        <member name="M:WorkSheetEntry.AdvDisplayToViewsheet(ViewSheetData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update the viewsheet data with advanced toolpath display settings. </summary>
            <param name="pageData"> The viewsheet data to update. </param>
            <returns> true if values have changed, otherwise false. </returns>
        </member>
        <member name="M:WorkSheetEntry.ViewsheetToSelectedPlanes">
            <summary> Use the viewsheet data to update which planes are selected in the global planes list. </summary>
        </member>
        <member name="M:WorkSheetEntry.SelectedPlanesToViewsheet(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update the viewsheet data with plane IDs of selected planes. </summary>
            <param name="selectedPlanes"> The list of plane IDs to populate. </param>
            <returns> true if selected planes have changed, otherwise false. </returns>
        </member>
        <member name="M:WorkSheetEntry.ViewsheetToSectionPlanes">
            <summary> Use the viewsheet data to update which planes are section view planes in the global planes list. </summary>
        </member>
        <member name="M:WorkSheetEntry.SectionPlanesToViewsheet(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update the viewsheet data with plane IDs of planes marked as section-views. </summary>
            <param name="planesInSheet"> The list of plane IDs to populate. </param>
            <returns> true if section view planes have changed, otherwise false. </returns>
        </member>
        <member name="M:WorkSheetEntry.SaveBookmarkInfo(worksheet_type*)">
            <summary> Saves bookmark information on this worksheet entry. </summary>
            <param name="DBEntity"> If non-null, the database entity. </param>
        </member>
        <member name="M:WorkSheetEntry.SetVisibleLevelInformation">
            <summary> Sets visible level information. </summary>
        </member>
        <member name="M:WorkSheetEntry.SaveVisibleLevels(std.set&lt;System.Int32,std.less&lt;System.Int32&gt;,std.allocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves visible levels to the worksheet data. </summary>
            <param name="visibleLevels"> The visible levels list. </param>
            <returns> true if the visible levels have changed, false if not. </returns>
        </member>
        <member name="M:WorkSheetEntry.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:WorkSheetEntry.#ctor(worksheet_type*)">
            <summary> Constructor. </summary>
            <param name="DBEntity"> If non-null, the database entity. </param>
        </member>
        <member name="M:WorkSheetEntry.#ctor(WorkSheetEntry*)">
            <summary> Copy constructor. </summary>
            <param name="Source"> If non-null, source work sheet entry. </param>
        </member>
        <member name="M:WorkSheetEntry.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:PsRegenAllHilights">
            <summary> Called when the display mode changes to regenerate all selected and highlighted tags. </summary>
        </member>
        <member name="M:PsEdgeType(System.Int32)">
            <summary> Gets the type of the specified edge. </summary>
            <param name="tag"> Edge tag to check. </param>
            <returns> L_ID, A_ID, NB_ID or 0 if error. </returns>
        </member>
        <member name="M:PsTagType(System.Int32)">
            <summary> Gets the type of the specified tag. </summary>
            <param name="tag"> Tag to check. </param>
            <returns> Tag type: SLD_BODY, SLD_FACE, SLD_EDGE, SLD_LOOP, or SLD_NONE if error. </returns>
        </member>
        <member name="M:PsRemoveAllHilightEdges">
            <summary> Removes all highlight edges from the display list. </summary>
        </member>
        <member name="M:PsRemoveHilightEdges(System.Int32,System.Boolean)">
            <summary> Removes highlight edges from the display list. </summary>
            <param name="tag">    Tag of edge(s). </param>
            <param name="select"> If true, edge is selected; if false, highlighted. </param>
        </member>
        <member name="M:PsAddHilightEdges(System.Int32,SldEdgeType,System.Boolean)">
            <summary> Adds highlight edges to the display list. </summary>
            <param name="tag">    Tag of edge(s). </param>
            <param name="type">   Type of edge. </param>
            <param name="select"> If true, edge is selected; if false, highlighted. </param>
        </member>
        <member name="T:SldEdgeType">
Edge type
</member>
        <member name="M:matchPtToPKFace(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32*,System.Boolean,System.Double*)">
            <summary> returns the PK Face tag which matches the midpoints. </summary>
            <param name="mPt">	mid point. </param>
            <param name="nBaseFaces">  Number of face tags to search. </param>
            <param name="baseFaces"> List of face tags to search. </param>
            <param name="noWarnings"> Any warnings if no success? </param>
            <param name="params"> Optional returned UV location on Face's surface. </param>
        </member>
        <member name="M:matchPtsToPKEdge(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32*,System.Boolean*)">
            <summary> returns the PK Edge tag which matches the input start, end, and midpoints. </summary>
            <remarks> If an edge/color map is specified, the color is changed for any edge tag found in the map. </remarks>
            <param name="sPt">	start point. </param>
            <param name="mPt">	mid point. </param>
            <param name="ePt">	end point. </param>
            <param name="nBaseEdges">  Number of edge tags to search. </param>
            <param name="baseEdges"> List of edge tags to search. </param>
            <param name="isRev"> is the edge the reverse of the 3 points. </param>
        </member>
        <member name="M:ps_render_tags(CncGaf.UtArray&lt;System.Int32,System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,std.unordered_map&lt;System.Int32,System.Int32,std.hash&lt;System.Int32&gt;,std.equal_to&lt;System.Int32&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Renders a set of Parasolid tags using the specified render type. </summary>
            <remarks> If an edge/color map is specified, the color is changed for any edge tag found in the map. </remarks>
            <param name="tags">		   The tag IDs. </param>
            <param name="renderType">  Render type. </param>
            <param name="pEdgeColors"> Optional pointer to edge tags to color map. </param>
        </member>
        <member name="M:ps_solid_ask_faces(DB_LIST_ENT*)">
 @par Purpose:  Find the Parasolid Kernel Face tags associated with a solid entity

 @return			number of faces on solid body

 @param[in]		solid		db pointer of solid entity

</member>
        <member name="M:ps_solid_free(System.Int32*)">
 @par Purpose:  Free up memory allocated by Parasolid kernel

 @param[in]		ptr			memory location allocated but ps_solid_ask_edges() or ps_solid_ask_faces()


</member>
        <member name="M:ps_face_ask_edges(System.Int32,System.Int32**)">
 @par Purpose:  Find the Parasolid Kernel Edge tags associated with a face, given the face tag

 @return			number of edges on face

 @param[in]		face		Parasolid face tag
 @param[in,out]   edges		pointer to memory to hold edge tags. This function will allocate that
					memory. Use ps_solid_free() to free up the memory when finished with it.
					This pointer call also be NULL, or not used. In that case only
					the number of edges will be returned.

</member>
        <member name="M:ps_body_ask_faces(System.Int32,System.Int32**)">
 @par Purpose:  Find the Parasolid Kernel Face tags associated with a solid body, given the body tag

 @return			number of faces on solid body

 @param[in]		body		Parasolid body tag
 @param[in,out]   faces		pointer to memory to hold face tags. This function will allocate that
					memory. Use ps_solid_free() to free up the memory when finished with it.
					This pointer call also be NULL, or not used. In that case only
					the number of faces will be returned.

</member>
        <member name="M:SetPsSelectNoPickTags(CncGaf.UtArray&lt;System.Int32,System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces tags in the select no pick tag array with the ones provided. </summary>
            <param name="tags"> Array of tags to use as select no pick tags. </param>
        </member>
        <member name="M:ClearPsSelectNoPickTags">
            <summary> Removes all entries from the select no pick tag array. </summary>
        </member>
        <member name="M:SetPsSelectOnlyPickTagsFromSolid(DB_LIST_ENT*!System.Runtime.CompilerServices.IsConst)">
            <summary> Replaces tags in the select only pick tag array with the ones provided. </summary>
            <param name="sldDisplayEptr"> Eptr of solid whoes faces are to be added to the select only pick tag array. </param>
        </member>
        <member name="M:ClearPsSelectOnlyPickTags">
            <summary> Removes all entries from the select only pick tag array. </summary>
        </member>
        <member name="M:PsMinDistToSolid(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the minimum distance between a point and a solid body</summary>
            <param name="point">point in world coordinates</param>
            <param name="solidBodyTag">Parasolid tag of a solid body</param>
            <param name="dist">minimum distance between the two if successful</param>
            <returns>returns true if minimum distance was found</returns>
        </member>
        <member name="M:PsEdgeFindTangents(System.Int32,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> This function will take the edgeTag and adds this tag along with all tangent edges to the tangents array
		  if they do not already exist in the array. </summary>
            <param name="edgeTag">		  The edge tag. </param>
            <param name="tangents">		  The array of tangent edges. </param>
            <param name="angleTolerance"> (Optional) The angle tolerance in radians. </param>
        </member>
        <member name="M:ps_chains_to_wire_bodies(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,CHAIN**,System.Boolean,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;*)">
            <summary> Chains to wire bodies. </summary>
            <param name="opIndex">		 Zero-based index of the operation within the operation file. </param>
            <param name="wireBody">		 If non-null, the wire body. </param>
            <param name="numBodyChains"> Number of body chains. </param>
            <param name="pBodyChains">   If non-null, the body chains. </param>
            <param name="orientToChain"> True to orient the Parasolid curves in the direction of the chain. </param>
            <param name="pWireEdges">    (Optional) If non-null, (Optional) returns the wire edges. </param>
            <returns> TRUE if successful, FALSE if not. </returns>
        </member>
        <member name="M:ps_highlight_status_all(CncGaf.UtArray&lt;System.Int32,System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the currently selected and highlghted solid items. </summary>
            <param name="selected">    The selected tags. </param>
            <param name="highlighted"> The highlighted tags. </param>
        </member>
        <member name="M:ps_get_body_tag(System.Int32)">
            <summary> Gets the parent body tag. </summary>
            <param name="tag"> The tag. </param>
            <returns> The body tag. </returns>
        </member>
        <member name="M:PsSelect(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int16,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,std.vector&lt;psHit,std.allocator&lt;psHit&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Calls Parasolids to check for bodies, faces, and/or edges at the specified screen position. </summary>
            <param name="screenPos"> Screen position at which to look for hits. </param>
            <param name="fromBack">  Search from back (reverse direction). </param>
            <param name="type">      Type of hits to search for SLD_EDGE, SLD_FACE, SLD_BODY. </param>
            <param name="partList">  Array of solid bodies to be searched. </param>
            <param name="maxHits">   Maximum number of hits to return. </param>
            <param name="hits">      Returned hit data. </param>
            <param name="customChk"> (Optional) If true, do custom masking check. </param>
            <param name="colorChk">  (Optional) If true, do color check if masking on color. </param>
            <returns> The number of returned hits. </returns>
        </member>
        <member name="D:PatternTools">
            <summary> Defines an alias representing the solid pattern tool data. </summary>
        </member>
        <member name="T:SLD_PATTERN_TOOL_DATA">
            <summary> Solid pattern tool data. </summary>
        </member>
        <member name="D:ManualPatternTransforms">
            <summary> Defines an alias representing the sld pattern manual transaction vector. </summary>
        </member>
        <member name="T:SLD_PATTERN_MANUAL_TRANS">
            <summary> Solid Pattern operation parameters. </summary>
        </member>
        <member name="T:SLD_POINT_INP">
            <summary> A solid point input based on a positionon a solid edge. </summary>
        </member>
        <member name="T:SLD_TORUS_PARAMS_VX">
Primitive solid torus operation parameters
</member>
        <member name="T:SLD_SPHERE_PARAMS_VX">
Primitive solid shpere operation parameters
</member>
        <member name="T:SLD_CYL_PARAMS_VX">
Primitive solid cylinder operation parameters
</member>
        <member name="T:SLD_CONE_PARAMS_VX">
Primitive solid cone operation parameters
</member>
        <member name="T:SLD_BLOCK_PARAMS_VX">
Primitive solid block operation parameters
</member>
        <member name="T:SLD_PRIMITIVE_PARAMS_X1">
Primitive solid operation parameters
</member>
        <member name="T:SLD_TORUS_PARAMS_X1">
Primitive solid torus operation parameters
</member>
        <member name="T:SLD_SPHERE_PARAMS_X1">
Primitive solid shpere operation parameters
</member>
        <member name="T:SLD_CYL_PARAMS_X1">
Primitive solid cylinder operation parameters
</member>
        <member name="T:SLD_CONE_PARAMS_X1">
Primitive solid cone operation parameters
</member>
        <member name="T:SLD_BLOCK_PARAMS_X1">
Primitive solid block operation parameters
</member>
        <member name="D:SldExtChainDataVector">
            <summary> Typedef for vector of SLD_EXT_CHAIN_DATA. </summary>
        </member>
        <member name="D:SldChgAtPtVector">
            <summary> Defines an alias representing a solid change at point vector. </summary>
        </member>
        <member name="D:SldChgAtPtPtr">
            <summary> Defines an alias representing a solid change at point pointer. </summary>
        </member>
        <member name="T:SelSolidEntType">
            <summary> The selected solid entity type used in SldAssocOneSel. </summary>
        </member>
        <member name="T:SldOnePickType">
            <summary> Solid one pick association type. </summary>
        </member>
        <member name="T:SldBlendConvexity">
            <summary> Solid blend convexity </summary>
        </member>
        <member name="T:SldHoleStyle">
            <summary> Solid Hole styles </summary>
        </member>
        <member name="T:BaseMessages">
TBD KJC: We will need to move this back to SolidsDialogBase.h once the asynchronous preview in the solids applications is corrected.
<summary> Defines for Mastercam event loop message processing </summary></member>
        <member name="M:SetPostDebugger(System.Boolean)">
            <summary>	Enables or disables the Post debugger button. </summary>
            <param name="value">	new value for the setting </param>
            <returns>				previous value of the setting </returns>
        </member>
        <member name="M:GetPostDebugger">
            <summary>	True if the Post debugger button is enabled, otherwise false. </summary>
            <returns>				current value of the setting </returns>
        </member>
        <member name="M:SetOnlyMainVisible(System.Boolean)">
            <summary>	Sets config variable OnlyMainVisible. </summary>
            <param name="value">	new value for the setting </param>
            <returns>				previous value of the setting </returns>
        </member>
        <member name="M:GetOnlyMainVisible">
            <summary>	True if only the main level should be visible, otherwise false. </summary>
            <returns>				current value of the setting </returns>
        </member>
        <member name="D:c_type">
@}
</member>
        <member name="M:ps_get_edge_vertices(System.Int32,System.Int32*,System.Int32*)">
 @par Purpose:  Get the vertices which are on either end of an edge, given the edge tag

 @param[in]		edge		Parasolid edge tag
 @param[out]		vertex0		Parasolid vertex tag at one end of the edge
 @param[out]		vertex1		Parasolid vertex tag at the other end of the edge


</member>
        <member name="M:ps_get_edge_faces(System.Int32,System.Int32*,System.Int32*)">
 @par Purpose:  Get the faces which are on either side of an edge, given the edge tag

 @param[in]		edge		Parasolid edge tag
 @param[out]		face0		Parasolid face tag on one side of the edge
 @param[out]		face1		Parasolid face tag on other side of the edge


</member>
        <member name="M:ps_get_vertex_point(System.Int32,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:  Get the XYZ position at a Parasolid vertex, given the vertex tag

 @param[in]		tag			vertex tag
 @param[out]		pt			XYZ location (world coordinates) of the vertex


</member>
        <member name="M:ps_tag_to_mc_ents(System.Int32,DB_LIST_ENT***)">
 @par Purpose:  Create Mastercam entities from a Parasolid body, face, or edge tag

 @return			number of entities created

 @param[in]		tag			Parasolid body, face, or edge tag
 @param[out]		eptrs		pointer to memory to hold Mastercam entity pointres. 
					This function will allocate that memory. Use free() to free up the 
					memory when finished with it.
					This pointer call also be NULL, or not used. In that case only
					the number of entities which would be created is returned.


</member>
        <member name="M:PSFaceAskEdges(System.Int32)">
            <summary> Find the number edge tags for the given face. </summary>
            <param name="face"> The face tag. </param>
            <returns> The number of edge tags. </returns>
        </member>
        <member name="M:PSFaceAskEdges(System.Int32,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the number edge tags for the given face. </summary>
            <param name="face">  The face tag. </param>
            <param name="sldEdges"> Array to which edge tags are added. </param>
            <returns> The number of edge tags added to the array. </returns>
        </member>
        <member name="M:PSBodyAskEdges(System.Int32)">
            <summary> Find the number of edge tags for the given solid body. </summary>
            <param name="body">	    The solid body tag. </param>
            <returns> The number of edge tags. </returns>
        </member>
        <member name="M:PSBodyAskEdges(System.Int32,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the edge tags for the given solid body. </summary>
            <param name="body">	    The solid body tag. </param>
            <param name="sldEdges"> Array to which edge tags are added. </param>
            <returns> The number of edge tags added to the array. </returns>
        </member>
        <member name="M:PSSolidAskEdges(DB_LIST_ENT*)">
            <summary> Find the number of edge tags for the given solid entity. </summary>
            <param name="solid">    The solid db pointer. </param>
            <returns> The number of edge tags. </returns>
        </member>
        <member name="M:PSSolidAskEdges(DB_LIST_ENT*,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the edge tags for the given solid entity. </summary>
            <param name="solid">    The solid db pointer. </param>
            <param name="sldEdges"> Array to which edge tags are added. </param>
            <returns> The number of edge tags added to the array. </returns>
        </member>
        <member name="M:PSBodyAskFaces(System.Int32)">
            <summary> Find the number of face tags for the given solid body. </summary>
            <param name="body">	    The solid body tag. </param>
            <returns> The number of face tags. </returns>
        </member>
        <member name="M:PSBodyAskFaces(System.Int32,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the face tags for the given solid body. </summary>
            <param name="body">	    The solid body tag. </param>
            <param name="sldFaces"> Array to which face tags are added. </param>
            <returns> The number of face tags added to the array. </returns>
        </member>
        <member name="M:PSSolidAskFaces(DB_LIST_ENT*)">
            <summary> Find the number of face tags for the given solid entity. </summary>
            <param name="solid">    The solid db pointer. </param>
            <returns> The number of face tags. </returns>
        </member>
        <member name="M:PSSolidAskFaces(DB_LIST_ENT*,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the face tags for the given solid entity. </summary>
            <param name="solid">    The solid db pointer. </param>
            <param name="sldFaces"> Array to which face tags are added. </param>
            <returns> The number of face tags added to the array. </returns>
        </member>
        <member name="M:ps_get_eptr(System.Int32)">
 @par Purpose:  Find the db pointer associated with the Parasolid tag on a solid body

 @return			db pointer of solid entity or null_eptr if not found

 @param[in]		body		Parasolid tag belonging to a solid body

</member>
        <member name="M:ps_is_vertex(System.Int32)">
 @par Purpose:  Query to ask if a Parasolid tag is a vertex

 @return			true if the tag is a vertex, false otherwise

 @param[in]		tag			Parasolid tag 

</member>
        <member name="M:ps_is_face(System.Int32)">
 @par Purpose:  Query to ask if a Parasolid tag is a face

 @return			true if the tag is a face, false otherwise

 @param[in]		tag			Parasolid tag 

</member>
        <member name="M:ps_is_edge(System.Int32)">
 @par Purpose:  Query to ask if a Parasolid tag is an edge

 @return			true if the tag is an edge, false otherwise

 @param[in]		tag			Parasolid tag 

</member>
        <member name="M:ps_is_body(System.Int32)">
 @par Purpose:  Query to ask if a Parasolid tag is a solid body

 @return			true if the tag is a body, false otherwise

 @param[in]		tag			Parasolid tag 

</member>
        <member name="M:make_nurbs_from_chains(CHAIN*,System.Double,System.Int16,System.Int32,System.Byte,System.Int32,System.Boolean*,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
MALLOC Definition
CALLOC Definition
REALLOC Definition
FREE Definition
@par Purpose:	Make NURB Spline(s) from chains
@param[in]		chains		Chains to make NURB spline(s) from
@param[in]		max_error	Tolerance (only applies to higher than cubic curves)
@param[in]		disp_orig	Keep(0), Blank(1), Delete originals(2), or Move to a new level
@param[in]		disp_level	New level if disp_orig == 3
@param[in]		color		Color of new NURB spline(s)
@param[in]		level		Level of new NURB spline(s)
@param[out]		succf		true indicates successful creation
@param[out]		newEptrArray	The array of new eptrs created
@param[in]		squash			(optional) true to squash to Cplane

</member>
        <member name="M:list_mmalloc">
@par Purpose:
	This method displays the memory allocation dialog.

</member>
        <member name="M:m_free(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Void*)">
	@par Purpose:
		This method frees the allocated memory.  In the process, it removes the entry from the array that tracks memory.
 @param[in]		module_name		module name
 @param[in]		line_n			line number
 @param[in]		ptr				pointer to free

</member>
        <member name="M:m_realloc(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Void*,System.UInt64,System.Int32)">
	@par Purpose:
		This method re-allocates memory using realloc.	In the process it tracks the memory allocation using the Memory Manager.
 @param[in]		module_name		module name
 @param[in]		line_n			line number
 @param[in]		ptr				old pointer
 @param[in]		size			new size
 @param[out]		cmtID			resource ID for allocation comment.

</member>
        <member name="M:m_calloc(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt64,System.UInt64,System.Int32)">
	@par Purpose:
		This method allocates memory using calloc.	In the process it tracks the memory allocation using the Memory Manager.

 @return			pointer value or NULL (failure)
 @param[in]		module_name		module name
 @param[in]		line_n			line number
 @param[in]		nelem			number of elements
 @param[in]		size			size of each element
 @param[out]		cmtID			resource ID for allocation comment.

</member>
        <member name="M:m_malloc(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt64,System.Int32)">
	@par Purpose:
		This method allocates memory using malloc.	In the process it tracks the memory allocation using the Memory Manager.

 @return			pointer value or NULL (failure)
 @param[in]		module_name		module name
 @param[in]		line_n			line number
 @param[in]		size			requested data size
 @param[out]		cmtID			resource ID for allocation comment.

</member>
        <member name="M:CMastercamInterface.IsManagedUIInitialized">
            <summary> Query if ManagedUI has been Initialized. </summary>
            <remarks> NOTE: CAN BLOCK as required due to the std::async. </remarks>
            <returns> true if initialized, false if not. </returns>
        </member>
        <member name="M:CMastercamInterface.GetMastercamProcessCount">
            <summary> Gets the count of the Mastercam processes running. </summary>
            <returns> The count of running executables. </returns>
        </member>
        <member name="M:CMastercamInterface.SetWorkspaceFileName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Allows setting of workspace file name from outside of Mastercam.exe. </summary>
            <param name="workspaceFileName"> Filename of the workspace file. </param>
        </member>
        <member name="M:CMastercamInterface.UpdateAppDirectories(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the application directories described by userDirectory and the AppDirID enumeration. </summary>
            <param name="userDirectory"> Pathname of the user directory. </param>
        </member>
        <member name="T:CMastercamInterface">
            <summary> This interface provides access to application-level data and functions for Mastercam. </summary>
        </member>
        <member name="M:SldClearFaceColor(System.Int32)">
            <summary> Clear the face color from as solid face. </summary>
            <param name="faceTag"> The Parasolid ID of the solid face. </param>
            <returns> true if successful. </returns>
        </member>
        <member name="M:SldSetFaceColor(System.Int32,System.Byte)">
            <summary> Sets the color of solid face. </summary>
            <param name="faceTag">	The Parasolid ID of the solid face. </param>
            <param name="color">	The color to set the face to. </param>
            <returns> true if successful. </returns>
        </member>
        <member name="M:SldGetFaceColor(System.Int32,System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns color of solid face. </summary>
            <param name="faceTag">	The Parasolid ID of the solid face. </param>
            <param name="color">	The color of the solid face. </param>
            <returns> Whether the face color was found and if so what it is based upon. </returns>
        </member>
        <member name="T:SldGetFaceColorResult">
            <summary> Return values for SldGetFaceColor </summary>
        </member>
        <member name="M:sld_refresh_solid_tree_item(DB_LIST_ENT*)">
 @par Purpose:
		Refresh the History Tree item for a solid

 @return			true if successful

 @param[in]		solid			solid's database entity pointer

</member>
        <member name="M:sld_select_a_solid_body_face_or_edge(System.Int16,System.Char*,DB_LIST_ENT**,System.Int32*,System.Boolean*)">
 @par Purpose:
		Select a solid body, face or tag.
		If only selecting bodies, and there is only one body to choose from, 
		it will be grabbed automatically

 @return			parasolid Tag of selected element

 @param[in]		type_mask		combination of SLD_BODY, SLD_FACE, and SLD_EDGE
 @param[in]		msg				prompt string
 @param[out]		solid_eptr		database pointer of solid entity which owns that element
 @param[out]		opIndex			operation index of solid feature which owns that element?
 @param[out]		escHit			did the user hit 'Escape'?

</member>
        <member name="M:sld_convert_tags_to_mc_ents(System.Int32,System.Int32*,System.Double,System.Boolean,System.Boolean,System.Boolean)">
 @par Purpose:
		Convert solid tags to solid, curves, or surfs.

 @param[in]		nTags			# of input tags
 @param[in]	   xtTags			input tags
 @param[in]	   scfac			scale
 @param[in]	   make_solids		generate solids?
 @param[in]	   make_surfaces	generate surfaces?
 @param[in]	   make_curves		generate curves?

</member>
        <member name="M:sld_import_add_mc(System.Int32!System.Runtime.CompilerServices.IsConst,DB_LIST_ENT**)">
 @par Purpose:
		Add the solid to mastercam

 @return			true if successful

 @param[in]		body			the new body's tag
 @param[out]		sldEptr			returns the imported solid's database entity pointer (optional parameter)

</member>
        <member name="M:sld_new_primitive(SLD_PRIMITIVE_PARAMS*,System.Char*)">

 @par Purpose: Create a new solid primitive

 @return			The db pointer to the new solid (null_eptr on failure)

 @param[in]		params			solid primitive paramters
 @param[in]		descriptor		descriptor or name


</member>
        <member name="M:sld_sel_all_solid_surfs">

 @par Purpose: Select all visible solid bodies as input to a surface toolpath operation

 @return			Not currently used (always returns true)


</member>
        <member name="M:sld_get_description(DB_LIST_ENT*)">
 @par Purpose:  Get the description field (name) of a solid

 @return			The string containing the description (name)

 @param[in]		solid	  The db pointer to a Mastercam solid

</member>
        <member name="M:sld_set_description(DB_LIST_ENT*,System.Char*)">
 @par Purpose:  Set the description field (name) of a solid

 @return			true = solid was updated successfully

 @param[in]		solid	  The db pointer to a Mastercam solid
 @param[in]		desc	  The description (name) to be used

</member>
        <member name="M:sld_select_one_solid(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*,System.Int32*)">

 @par Purpose: Have user select a single solid body (get both ent, and tag)

 @return			The Parasolid tag belonging to the Mastercam solid body (NULTAG if failed)

 @param[in]		csmsg	  Prompt to be displayed
 @param[out]		entity	  Mastercam solid entity
 @param[out]		retVal	  Return value (NULL gets ignored)

</member>
        <member name="M:sld_select_one_solid(System.Char*,ent*)">
 @par Purpose: Runs a solid entity selection, getting both the entity and the tag.
	Created as a non-MFC alternative to the original function.

 @return		The parasolid tag belonging to the Mastercam solid body (NULTAG if failed).

 @param[in]	pCharMsg	The message prompt to be displayed during selection. (NULL forces a default)
 @param[out]	entity		The pointer to the selected solids entity.

</member>
        <member name="M:sld_get_tag_from_solid(DB_LIST_ENT*)">
 @par Purpose:  Find the Parasolid tag for a given Mastercam solid

 @return			The Parasolid tag belonging to the Mastercam solid body

 @param[in]		solid	  The db pointer to a Mastercam solid

</member>
        <member name="M:sld_solid_from_tag(System.Int32,System.Boolean)">
 @par Purpose:  Create a Mastercam solid entity from a Parasolid solid entity

 @return			The db pointer of the newly added solid

 @param[in]		tag		The Parasolid ID of the solid body to be added to the Mastercam database
 @param[in]		blank	The blank flag

</member>
        <member name="M:sld_solids_import_ok">
 @par Purpose: See if solid import are allowed

 @return			true = solid import functions are allowed (not DRAFT and not ENTRY)

</member>
        <member name="M:sld_solids_ok(System.Boolean)">
 @par Purpose: See if solid operations are allowed by the current SIM

 @return			true = solid functions are allowed

 @param[in]		warn_user	  true = Display a warning message if solids functions are not allowed

</member>
        <member name="M:sld_get_num_solids_all">
 @par Purpose: Find the number of solids in the database

 @return			The number of solids


</member>
        <member name="M:sld_get_num_solids_visible">
 @par Purpose: Find the number of visible solids (on a visible level, not blanked, etc.)

 @return			The number of visible solids


</member>
        <member name="M:sld_regen_solids(System.Boolean)">
 @par Purpose:  Regenerate all solids

 @param[in]		force_regen		true = Regenerate even when solid is not marked as dirty or invalid

</member>
        <member name="M:sld_regen_solid(DB_LIST_ENT*,System.Boolean)">
 @par Purpose:  Regenerate a solid's operations

 @param[in]		solid			db pointer to the solid
 @param[in]		force_regen		true = Regenerate even when solid is not marked as dirty or invalid

</member>
        <member name="M:sld_solid_extents_3d(mc_solid_ent*,System.Double*,System.Double*,System.Double*,System.Double*,System.Double*,System.Double*)">
 @par Purpose:  Adjust the minimum and maximum cooridinates to include the specified solid

 @param[in]		s	  Mastercam solid ent structure of the solid
 @param[in,out]	minx  minimum value of x in world view
 @param[in,out]	maxx  maximum value of x in world view
 @param[in,out]	miny  minimum value of y in world view
 @param[in,out]	maxy  maximum value of y in world view
 @param[in,out]	minz  minimum value of z in world view
 @param[in,out]	maxz  maximum value of z in world view

</member>
        <member name="M:sld_solid_extents(mc_solid_ent*,System.Double*,System.Double*,System.Double*,System.Double*)">
 @par Purpose:  Adjust the minimum and maximum X, and Y components to include the specified solid

 @param[in]		s	  Mastercam solid ent structure of the solid
 @param[in,out]	minx  minimum value of x in current graphics view
 @param[in,out]	maxx  maximum value of x in current graphics view
 @param[in,out]	miny  minimum value of y in current graphics view
 @param[in,out]	maxy  maximum value of y in current graphics view

</member>
        <member name="M:sld_delete(ent*,System.Boolean)">
 @par Purpose:  Delete the solid associated with this Mastercam solid entity

 @param[in,out]	entity	given entity
 @param[in]		noDb	true = do not update psID of entity in databse once deleted

</member>
        <member name="M:postOps(post_dlg_settings*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char*,System.Boolean,System.Boolean)">
@defgroup viewport_configurations Viewport Configurations
 * @{
@}
@defgroup line_styles Line Styles
 * @{
@}
@defgroup point_styles Point Styles
 *@{
@}
@defgroup entry_codes Point Entry Code Characters
 * @{
@}
@defgroup eevec Entry/Exit Vector Defines
 * @{
@defgroup eevec_types Entry/Exit Vector Types
	 * @{
@}
@defgroup eevec_format Entry/Exit Vector Formats
	 * @{
@}
@}
@defgroup langauge language
 *@{
@}

 @par Purpose:
			posts operations

 @param[in]		p				ptr to post settings, NULL to call post dialog
 @param[in]		pst_name		new post name
 @param[in]		dest_name		destination NC directory
 @param[in]		call_dialog		true = display dialog
 @param[in]		disable_post_pb turns off the post pushbutton


</member>
        <member name="M:MCPropertySheet.DestroyWindow">
@}
@}
</member>
        <member name="M:MCPropertySheet.LaunchHelp(System.UInt32)">
@}
@defgroup propsht_9 Mastercam Help Methods
@{
		 *
		 * @par Purpose:
 *			This method launches a help dialog for the specified property sheet
		 *
		 * @param[in]	CtrlId			the resource id of the page making the call to the help dialogs
		 *

</member>
        <member name="F:MCPropertySheet.m_derivedID">
@defgroup propsht_7 Mastercam Help
@{
@defgroup propsht_8 Mastercam Help Variables
@{
</member>
        <member name="M:MCPropertySheet.InitializeAutoTips">

 @par Purpose:
			This method initializes the automatic tool tips


</member>
        <member name="M:MCPropertySheet.Dispose">

 @par Purpose:
			Standard destructor


</member>
        <member name="M:MCPropertySheet.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,CWnd*,System.UInt32)">

 @par Purpose:
			Standard string pointer constructor

 @param[in]		pszCaption			the pointer of the string to use as the window caption
 @param[in]		pParent				the CWnd pointer to the parent dialog that this dialog was called from
 @param[in]		iSelectPage			specifies the initial page to be selected (default = 0)


</member>
        <member name="M:MCPropertySheet.#ctor(System.UInt32,CWnd*,System.UInt32)">

 @par Purpose:
			Standard resource string constructor

 @param[in]		nIDCaption			the resource id of the string to use as the window caption
 @param[in]		pParent				the CWnd pointer to the parent dialog that this dialog was called from
 @param[in]		iSelectPage			specifies the initial page to be selected (default = 0)


</member>
        <member name="M:OpMgrDisable.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:OpMgrDisable.#ctor(COpMgrTree*)">
            <summary> Constructor. </summary>
            <param name="pOpMgr"> (Optional) pointer to Operation Manager, nullptr for global. </param>
        </member>
        <member name="T:OpMgrDisable">
            <summary> disable upon instantiation, enable upon destruction. </summary>
        </member>
        <member name="M:UIPropertySheet.IsMastercamDefaultButton(System.UInt32,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'ctrlId' is a default button. </summary>
            <param name="ctrlId">  Identifier for the control. </param>
            <param name="toolTip"> The control's tool tip. </param>
            <returns> True if default button, false if not. </returns>
        </member>
        <member name="F:CBCGPBaseTabWnd.m_bReadyToDetach">
detachable bars support
</member>
        <member name="F:CBCGPDockingControlBar.m_sizeDragSencitivity">
how far the mouse is moved after NcLBtnDown before the bar becomes floating
</member>
        <member name="T:CBCGPCommandManager">
This class is responsible for:
- knowledge about all commands
- images for all commands
- command categories
- default toolbars

</member>
        <member name="M:MCPropertyPage.DestroyWindow">
@} 
</member>
        <member name="F:MCPropertyPage.m_derivedID">
@defgroup mcproppage_help MCPropPage Help 
@{ 
</member>
        <member name="M:MCPropertyPage.InitializeAutoTips">
 @par Purpose:
			Initializes automatic tool tips for the page.

</member>
        <member name="M:MCPropertyPage.Dispose">
 @par Purpose:
			Class destructor.

</member>
        <member name="M:MCPropertyPage.#ctor(System.UInt32,System.UInt32,System.Int16)">
 @par Purpose:
			Class constructor.

 @param[in]		nIDTemplate		Dialog resource ID
 @param[in]		nIDCaption		Caption resource ID
 @param[in]		helpID			Mastercam Help ID

</member>
        <member name="M:UIPropertyPage.IsMastercamDefaultButton(System.UInt32,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'ctrlId' is a default button. </summary>
            <param name="ctrlId">  Identifier for the control. </param>
            <param name="toolTip"> The control's tool tip. </param>
            <returns> True if default button, false if not. </returns>
        </member>
        <member name="M:UIDialog.SetUICtrlDefaultButtonTooltips(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets user interface control strings. </summary>
            <param name="ok">	  Tooltip of default OK button. </param>
            <param name="cancel"> Tooltip of default Cancel button. </param>
            <param name="apply">  Tooltip of default Apply button. </param>
            <param name="help">   Tooltip of default Help button. </param>
        </member>
        <member name="M:UIDialog.ShowDlgWindow(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Show or hide a dialog control. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <param name="nCmdShow">   The 'show' command.  See the CWnd version of this call for details. </param>
            <returns> TRUE if it succeeds, otherwise FALSE. </returns>
        </member>
        <member name="M:UIDialog.SetDlgWindowPos(System.Int32!System.Runtime.CompilerServices.IsConst,CWnd!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets a dialog control's position. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <param name="pWndInsertAfter"> The window insert after. </param>
            <param name="x">			   The new x coordinate. </param>
            <param name="y">			   The new y coordinate. </param>
            <param name="cx">			   The new width. </param>
            <param name="cy">			   The new height. </param>
            <param name="nFlags">		   Window flags. See the CWnd version of this call.</param>
            <returns> TRUE if position is set, otherwise FALSE. </returns>
        </member>
        <member name="M:UIDialog.GetWindowPositionsRegKeyName">
            <summary> Gets the registry key name for the window positions. </summary>
            <returns> The registry key name for window positions. </returns>
        </member>
        <member name="M:UIDialog.InfoEnumProc(HMONITOR__*,HDC__*,tagRECT*,System.Int64)">
            <summary> Callback used by EnumDisplayMonitors to enumerate each monitor. </summary>
            <param name="lprcMonitor"> Monitor rectangle. </param>
            <returns> TRUE = Continue enumerating monitors, FALSE = Cancel enumerating monitors. </returns>
        </member>
        <member name="M:UIDialog.SetDlgWindowText(System.Int32!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the text of a dialog control. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <param name="lpszString"> The string to set the text to. </param>
        </member>
        <member name="M:UIDialog.IsDlgWindowVisible(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Check if a dialog control is visible. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <returns> TRUE if the control is visible, otherwise FALSE. </returns>
        </member>
        <member name="M:UIDialog.IsDlgWindowEnabled(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Check if a dialog control is enabled. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <returns> TRUE if the control is enabled, otherwise FALSE. </returns>
        </member>
        <member name="M:UIDialog.GetDlgWindowTextLength(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Gets the dialog control's text length. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <returns> The window text length. </returns>
        </member>
        <member name="M:UIDialog.GetDlgWindowText(System.Int32!System.Runtime.CompilerServices.IsConst,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the dialog control's text. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <param name="rString">    The string to copy the window text to. </param>
        </member>
        <member name="M:UIDialog.GetDlgWindowText(System.Int32!System.Runtime.CompilerServices.IsConst,System.Char*,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Gets the dialog control's text. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <param name="lpszStringBuf"> Buffer for string data. </param>
            <param name="nMaxCount">	 Number of characters the buffer can hold. </param>
            <returns> The number of characters copied. </returns>
        </member>
        <member name="M:UIDialog.GetDlgWindowRect(System.Int32!System.Runtime.CompilerServices.IsConst,tagRECT*)">
            <summary> Get the dialog control's rectangle. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <param name="lpRect"> pointer to the rectangle structure to receive the values. </param>
        </member>
        <member name="M:UIDialog.EnableDlgWindow(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Enables or disables the dialog control window. </summary>
            <param name="nIDDlgItem"> The dialog item ID. </param>
            <param name="enable">    (Optional) TRUE to enable, FALSE to disable. </param>
        </member>
        <member name="M:UIDialog.IsMastercamDefaultButton(System.UInt32,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'ctrlId' is a default button. </summary>
            <param name="ctrlId">  Identifier for the control. </param>
            <param name="toolTip"> The control's tool tip. </param>
            <returns> True if default button, false if not. </returns>
        </member>
        <member name="M:CBCGPDialog.EnableLayout(System.Int32,CRuntimeClass*,System.Int32)">
            <summary>
Call this method to enable or disable layout management for a dialog box.
If you specify a custom layout manager (pRTC), it must be derived from CBCGPControlsLayout or one of its descendants.</summary>
            <param name="bEnable">TRUE - enable layout management, FALSE - disable layout management.</param>
            <param name="pRTC">A pointer to a runtime class information of custom layout manager.</param>
            <param name="bResizeBox">TRUE - display resize box; FALSE - don't display resize box.</param>
        </member>
        <member name="M:CBCGPDialog.HasAeroMargins">
            <summary />
        </member>
        <member name="M:CBCGPDialog.GetAeroMargins(_BCGPMARGINS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="margins" />
        </member>
        <member name="M:CBCGPDialog.EnableAero(_BCGPMARGINS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This method has effect only under Windows Vista with the Aero theme enabled.
Call EnableAero to display "Aero Glass" either on the whole dialog, or on some edges. 
To enable glass for the whole dialog, just set _BCGPMARGINS::cyTopHeight to the height of the client area.See the SkinnedDialog sample for more info.</summary>
            <param name="margins">Specifies the margins for the "glass" areas.</param>
        </member>
        <member name="M:CBCGPDialog.EnableVisualManagerStyle(System.Int32,System.Int32,CList&lt;System.UInt32,System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Automatically subclasses all hosted controls in order to take advantage of Visual Manager themes and the "Aero Glass" technology.</summary>
            <param name="bEnable">TRUE - enables Visual Manager theme support for hosted controls. FALSE - disables Visual Manager theme support for hosted controls.</param>
            <param name="bNCArea">If TRUE, the non-client area of dialog will be displayed using the current Visual Style</param>
            <param name="plstNonSubclassedItems">List of controls that shouldn't be subclassed.</param>
            <remarks>
Call this function with bEnable TRUE to automatically subclass all hosted controls in order to take advantage of Visual Manager themes and the "Aero Glass" technology.</remarks>
        </member>
        <member name="M:CBCGPDialog.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,CWnd*)">
            <summary>
Constructs the object</summary>
            <param name="lpszTemplateName">Specifies a dialog template resource name .</param>
            <param name="pParentWnd">A pointer to the parent window</param>
        </member>
        <member name="M:CBCGPDialog.#ctor(System.UInt32,CWnd*)">
            <summary>
Constructs the object</summary>
            <param name="nIDTemplate">Specifies the dialog template resource ID.</param>
            <param name="pParentWnd">A pointer to the parent window</param>
        </member>
        <member name="M:CBCGPDialog.#ctor">
            <summary>
Constructs the object</summary>
        </member>
        <member name="T:CBCGPDialog">
            <summary>
The CBCGPDialog class extends the functionality of the CDialog class. It allows to define a background image or color for the dialog box window and handles all the palette an transparency issues.
To take advantage of CBCGPDialog features you just need to derive your dialog class from the CBCGPDialog class instead of CDialog class.
When you call SetBackgroundImage method and pass HBITMAP as the image handle, the CBCGPDialog object will take ownership over the image and delete it only if the m_bAutoDestroyBmp flag is TRUE. The current background image will be deleted if you call the SetBackgroundImage again or by OnDestroy message handler. Images loaded from the resource file  are always destroyed automatically.</summary>
            <remarks />
        </member>
        <member name="M:UIRollupButton.CalcFrameLength">
            <summary> Calculate the frame length based on current children. </summary>
        </member>
        <member name="M:UIRollupButton.OnClicked">
            <summary> Handle BN_CLICKED message. </summary>
            <returns> true if handled, false otherwise. </returns>
        </member>
        <member name="M:UIRollupButton.IsChild(System.UInt32)">
            <summary> Is control a child of this rollup button. </summary>
            <param name="controlId"> Child control ID. </param>
            <returns> True if child, false otherwise </returns>
        </member>
        <member name="M:UIRollupButton.AddChild(System.UInt32)">
            <summary> Add a child control to this rollup button. </summary>
            <param name="controlId"> Child control ID. </param>
        </member>
        <member name="M:UIRollupButton.CalcFrame(CRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate frame rectangle (if expanded). </summary>
            <param name="frameRect"> Frame rectangle to draw in client coord of parent dialog. </param>
            <returns> True if successful, false otherwise </returns>
        </member>
        <member name="M:UIRollupButton.InvalidateChildren">
            <summary> Force children to be painted. </summary>
        </member>
        <member name="M:UIRollupButton.GetLength">
            <summary> Get length of frame for this button. </summary>
            <returns> Length of frame for this button. </returns>
        </member>
        <member name="M:UIRollupButton.IsExpanded">
            <summary> Get expanded state of button. </summary>
        </member>
        <member name="M:UIRollupButton.SetExpanded(System.Boolean)">
            <summary> Set expanded state of button. </summary>
            <param name="expanded"> True to expand, false otherwise.</param>
        </member>
        <member name="M:UIRollupButton.Dispose">
            <summary> Rollup button destructor. </summary>
        </member>
        <member name="M:UIRollupButton.#ctor">
            <summary> Rollup button constructor. </summary>
        </member>
        <member name="M:UIBitmapButton.GetSavedWindowText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets saved window text. </summary>
            <param name="text"> The text. </param>
        </member>
        <member name="M:UIBitmapButton.SetSavedWindowText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Sets saved window text. </summary>
            <param name="text">				 The text. </param>
            <param name="overwriteExisting"> (Optional) True to overwrite, false to preserve the existing. </param>
        </member>
        <member name="M:UIBitmapButton.SetTooltipFromSavedWindowText(System.Boolean)">
            <summary> Sets tooltip from saved window text. </summary>
            <param name="mustHaveBar"> (Optional) True to must have bar. </param>
        </member>
        <member name="M:UIBitmapButton.ParseText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the window text and tooltip text. </summary>
            <param name="text">    The text to parse. </param>
            <param name="wndText"> The window text. </param>
            <param name="tipText"> The tooltip text. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:UIBitmapButton.SetupWindowTooltipText">
            <summary> Sets up the window's tooltip text. </summary>
        </member>
        <member name="M:UIButton.OnDraw(CDC*,CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary> Overrides the default BCG OnDraw function. </summary>
            <param name="pDC"> If non-null, the device-context. </param>
            <param name="rect"> The rectangle. </param>
            <param name="uiState"> The state. </param>
        </member>
        <member name="M:UIFont.RegistryReadFont(CBCGPRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,tagLOGFONTW*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Read standard UI Font information from the Registry. </summary>
            <param name="reg">	    The active Registry object for reading. </param>
            <param name="pFontKey"> The font Registry key. </param>
            <param name="logFont">  A reference to a LOGFONTW structure. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:get_dialog_help(System.Char*,System.Int32)">
 @par Purpose:
		Calls Mastercam help for the given dialog or control.
 @param[in]	helpFileName	The Mastercam help system component file to open
 @param[in]	hlpID			The control or dialog ID that help is being called from

</member>
        <member name="M:get_dialog_help(System.Int32,System.Int32)">
@defgroup helpvals Mastercam help system components 
@{ 
@} 
 @par Purpose:
		Calls Mastercam help for the given dialog or control.
 @param[in]	exe_dll_index	The index of the Mastercam help system component file to open
 @param[in]	hlpID			The control or dialog ID that help is being called from

</member>
        <member name="M:NewDocument(System.Boolean)">

 @par Purpose:
			Creates a new, empty document

 @return			true if document successfully created, otherwise false

 @param[in]		silently		if true, issue no prompts


</member>
        <member name="M:SetIsFilePreviousVersion(System.Boolean)">

 @par Purpose:
			Show or clear a previous version file warning message for the current document (Mastercam only).

 @param[in]		value		true to have the message displayed, false to have it removed (if it's there)


</member>
        <member name="M:SetMergeState(System.Boolean)">

 @par Purpose:
			Sets the document's "merge" flag.

 @param[in]		isMerge		true to set the flag, which will trigger 'Save As' dialog upon 'Save' operation.


</member>
        <member name="M:GetMergeState">

 @par Purpose:
			Gets the document's "merge" flag.

 @return			true if the user merged into the current file (and hasn't saved yet), otherwise false.


</member>
        <member name="M:IsCleanDocument">

 @par Purpose:
			Checks the current document for changes

 @return			false if the document was dirty and the user canceled the save/don't save message, otherwise true.


</member>
        <member name="M:PrintFileDirect">

 @par Purpose:
			Post ID_FILE_PRINT_DIRECT message to initiate printing

 @return			false if there is no mainframe or view, otherwise true


</member>
        <member name="M:LaunchFilePrint">

 @par Purpose:
			Call OnFilePrint() to print current document


</member>
        <member name="M:UpdateCurrentPartName">

 @par Purpose:
			Update the document's file name to the geo_filename global value


</member>
        <member name="M:ensureMCX(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*)">

 @par Purpose:
			Set the extension of the given file name to .mcam or .emcam

 @param[in]		cs		pointer to a CString object containing the name to update


</member>
        <member name="M:IsRouterOpSupported(System.Int16,System.Int16)">

 @par Purpose:
			Check with the SIM to make sure the product level is high enough to run the given operation

 @return				true if Router is supported at the given product level; false if not

 @param[in]			min_prod_level			specifies the Router SIM level to compare against (NULL checks against the highest level the SIM allows)
 @param[in]			opcode					specifies a specific operation opcode to check for compatability with (NULL checks against current op)


</member>
        <member name="M:IsWireOpSupported(System.Int16,System.Int16)">

 @par Purpose:
			Check with the SIM to make sure the product level is high enough to run the given operation

 @return				true if Wire is supported at the given product level; false if not

 @param[in]			min_prod_level			specifies the Wire SIM level to compare against (NULL checks against the highest level the SIM allows)
 @param[in]			opcode					specifies a specific operation opcode to check for compatability with (NULL checks against current op)


</member>
        <member name="M:IsLatheOpSupported(System.Int16,System.Int16)">

 @par Purpose:
			Check with the SIM to make sure the product level is high enough to run the given operation

 @return				true if Lathe is supported at the given product level; false if not

 @param[in]			min_prod_level			specifies the Lathe SIM level to compare against (NULL checks against the highest level the SIM allows)
 @param[in]			opcode					specifies a specific operation opcode to check for compatability with (NULL checks against current op)


</member>
        <member name="M:IsMillOpSupported(System.Int16,System.Int16)">

 @par Purpose:
			Check with the SIM to make sure the product level is high enough to run the given operation

 @return				true if Mill is supported at the given product level; false if not

 @param[in]			min_prod_level			specifies the Mill SIM level to compare against (NULL checks against the highest level the SIM allows)
 @param[in]			opcode					specifies a specific operation opcode to check for compatability with (NULL checks against current op)


</member>
        <member name="M:IsMultiaxOpSupported(System.Int16,System.Int16)">

 @par Purpose:
			Check with the SIM to make sure the product level is high enough to run the given operation

 @return				true if Multiax is supported at the given product level; false if not

 @param[in]			min_prod_level			specifies the Multiax SIM level to compare against (NULL checks against the highest level the SIM allows)
 @param[in]			opcode					specifies a specific operation opcode to check for compatability with (NULL checks against current op)


</member>
        <member name="M:StoreMachineEnt(ent*,DB_LIST_ENT**,ASSOC_ENT_TYPE)">

 @par Purpose:
			Store a machine definition entity to the database

 @param[in]			pEnt			entity to store
 @param[out]			dbPtr			database to entity
 @param[in]			assoc_id		associative id


</member>
        <member name="M:CurMachineIsOfType(System.Int32)">

 @par Purpose:
			Store a machine definition entity to the database

 @return				true if the current machine matches the given type; false if not

 @param[in]			type			eMachineTypes type to compare the current machine to


</member>
        <member name="M:is_turret_top(System.Byte)">
 @par Purpose:
			return true if active turret is a top turret

 @param[in]		active_turret	active turret to test

</member>
        <member name="M:get_ent_assoc(DB_LIST_ENT**,DB_LIST_ENT**,ent*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean*)">
 @par Purpose:
			get associative ents only from db

 @param[out]		d_ptr	database pointer
 @param[out]		e_ptr	entity pointer
 @param[out]		e		entity
 @param[in]		id		NULL_ID, TP_ID, OP_ID, TL_ID or M_ID
 @param[out]		succf	true = successful

</member>
        <member name="M:assoc_sizeof">
@par Purpose:
 *			for v7.0 development only! 
</member>
        <member name="M:assoc_dump(System.Char*)">
 @par Purpose:
			returns true if successful, false if duplicate entity #'s are found

 @param[in]		fname	filepath for the dump file	

</member>
        <member name="M:assoc_dump">
@par Purpose:
 *			write ent id #, type and eptr to a file 
</member>
        <member name="M:store_ent_assoc(ent*,DB_LIST_ENT**,ASSOC_ENT_TYPE,System.Boolean*)">
 @par Purpose:
			store associative ents to db alive and blanked

 @param[in]		e		entity to store
 @param[out]		d_ptr	database pointer
 @param[in]		id		TP_ID, OP_ID, TL_ID or M_ID
 @param[out]		succf	true = successful

</member>
        <member name="M:rewrite_ent_assoc(ent*,System.Boolean)">
 @par Purpose:
			rewrite associative ents to db, update current operation and tool lists

 @param[in]		e			 entity to write - calls rewrite_ent()
 @param[in]		time_stamp	 true - re-stamp entity creation date

</member>
        <member name="M:tp_get_all(System.Int32!System.Runtime.CompilerServices.IsLong,ent*,ent_tp**,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Boolean*,System.Boolean)">
 * @par Purpose:
 *			get an operation entity and all related toolpath entities
			Note: the calling function must free the allocated list
 * @param[in]		op_idn		operation number to get
 * @param[out]		op_ent		operation entity
 * @param[out]		tp_ents		ptr to alloced list of toolpath ents
 * @param[out]		n_tp_ents	number of toolpath entities found
 * @param[out]		succf		true = successful
 * @param[in]		update_op_ent_count  true	 if toolpath entity count is mismatched, fix the op to match what was found

</member>
        <member name="M:GetAllTpEntities(System.Int32!System.Runtime.CompilerServices.IsLong,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Gets all TP entities associated with an operation. </summary>
            <param name="operationIdn">			The operation entity Idn. </param>
            <param name="opEntStruct">			The operation ent struct to fill. </param>
            <param name="updateOpEntCount">		(optional = true) true = if toolpath entity count is mismatched, fix the op to match what was found. </param>
            <returns>	Vector of ent_tp structs representing the associated toolpath entities. </returns>
        </member>
        <member name="M:SetLevelSetName(System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			Sets the LevelSet "name" of the specified level#
          Does NOT affect or alter any Level "name"!
          Note: If the level# does not exist, it will be created.

 @param[in]	levelSetName - the new LevelSet name 

 @return		false if the name was truncated to fit 

</member>
        <member name="M:SetLevelName(System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			Sets the Level "name" of the specified level#
          Does NOT affect or alter any LevelSet "name"!
          Note: If the level# does not exist, it will be created.

 @param[in]	levelSetName - the new LevelSet name

 @return		false if the name was truncated to fit 

</member>
        <member name="M:GetLevelSetName(System.Int32)">

 @par Purpose:
			Retrieve just the LevelSet "name" of a level

 @param[in]	levelNumber - the Level number

 @return		the LevelSet "name"

</member>
        <member name="M:GetLevelName(System.Int32)">

 @par Purpose:
			Retrieve just the Level "name" of a level (without any LevelSet name)

 @param[in]	levelNumber - the Level number

 @return		the Level "name"

</member>
        <member name="M:GetLevelNumbersByName(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,std.vector&lt;System.Int32,std.allocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the number of the level with the specified name
		    Since there is no restriction on Level "names" and LevelSet "names"
		    being unique, there can be multiple matches!

 @param[in]	levelName	- the Level "name" of the level to find (Can be "blank")
 @param[in]	levelName	- the LevelSet "name" of the level to find (Can be "blank")
				*If both are "blank" the return will be false!

 @param[out]	levelNumbers - the (std::vector) list of matching level#'s

 @return		True/False - Were there any matches?

</member>
        <member name="M:GetLevelNumbersByName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,System.Int32*,System.Int32*)">

 @par Purpose:
			Gets the number of the level with the specified name
		    Since there is no restriction on Level "names" and LevelSet "names"
		    being unique, there can be multiple matches!

 "Old School" interaction using int*
 If you need the list of matching Level#'s you'll need to call this function TWICE.
 1st time with 'levelNumbers = NULL' to get the # of levels.
 2nd time with 'levelNumbers' properly allocated to retrieve the list of Level#'s
 *See the GetLevelNumbersByName overload that uses a std::vecotor for "New School". ;)

 @param[in]	levelName	- the Level "name" of the level to find (Can be "blank")
 @param[in]	levelName	- the LevelSet "name" of the level to find (Can be "blank")
				*If both are "blank" the return will be false!

 @param[out]	nLevels      - the # of matches found
 @param[out]	levelNumbers - the list of matching level#'s
              *If the supplied levelNumbers is null, 
				 we just load nLevels with the # of matches.

 @return		True/False - Where there any matches?

</member>
        <member name="M:get_level_number_from_name(System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			Gets the number of the level with the specified name

 @param[in]	levelName		the name of the level

 @return		The number of the level.  -1 if the specified name is not found

</member>
        <member name="M:get_active_levels(System.Int32*,System.Int32*)">

 @par Purpose:
			Finds out how many levels are currently active

 @param[in]	n_active	   the number of active levels
 @param[in]	active_list    if a valid int[] is passed in, it will be loaded with the active level values


</member>
        <member name="M:get_visible_levels(System.Int32*,System.Int32*)">

 @par Purpose:
			Finds out how many levels are currently visible

 @param[in]	n_visible		the number of visible levels
 @param[in]	vis_list		if a valid int[] is passed in, it will be loaded with the visible level values


</member>
        <member name="M:set_level_visible(System.Int32,System.Boolean)">

 @par Purpose:
			Sets a given level's visibility

 @param[in]	level			the level to set visibility for
 @param[in]	visible			true to make the level visible; false to make in invisible


</member>
        <member name="M:is_level_visible(System.Int32)">
@}
@}
<summary> A macro that defines maximum level number allowed. </summary>

 @par Purpose:
			Determines whether a given level is currently visible

 @return		true if a the given level is visible; false if not

 @param[in]	level			the level to check visibility against


</member>
        <member name="M:SetUseGradientBkgnd(System.Boolean)">
            <summary>	Sets config UseGradientBkgnd. </summary>
            <param name="value">	new value for the setting </param>
            <returns>				previous value of the setting </returns>
        </member>
        <member name="M:UseGradientBkgnd">
            <summary>	True if we are configured for a gradient background, otherwise false. </summary>
            <returns>	current value of the setting </returns>
        </member>
        <member name="F:gr_back_color">
@}
@defgroup gr_grp8 Graphics View Settings
@{
@defgroup gr_grp9 Graphics Background Gradient Defines
@{
@}
</member>
        <member name="F:curve_chord_dev">
@}
@defgroup gr_grp7 Curve Chordal Settings
@{
</member>
        <member name="F:n_places_an">
@}
@defgroup gr_grp6 Graphics Precision Settings
@{
</member>
        <member name="M:SetSurfDensity(System.Int16)">

 @par Purpose:
			Sets the density of drawn surfaces.

 @param[in]		density		Surface density.

 @return		The previous surface density.


</member>
        <member name="M:GetSurfDensity">
@}

 @par Purpose:
			Gets the density of drawn surfaces.

 @return		Surface density.


</member>
        <member name="M:SetSurfBackDraw(System.Boolean)">

 @par Purpose:
			Sets whether or not surfaces are to be drawn using the backface color.

 @param[in]		backDraw	If true, draw the backface color.


 @return		The previous draw backface color state.

</member>
        <member name="M:GetSurfBackDraw">

 @par Purpose:
			Checks if surfaces are being drawn using the backface color.

 @return		If true, the backface color is drawn.


</member>
        <member name="M:SetSurfBackColor(System.Byte)">

 @par Purpose:
			Set the color used to draw the backface of a surface.

 @param[in]		color		Backface color.

 @return		The previous backface color.


</member>
        <member name="M:GetSurfBackColor">
@}
@defgroup gr_grp4 Surface Settings
@{
@defgroup gr_grp5 Surface Backface Settings
@{

 @par Purpose:
			Get the color used to draw the backface of a surface.

 @return		Backface color.


</member>
        <member name="F:buffer_on">
@}
@defgroup gr_grp3 Graphics Buffering Settings
@{
</member>
        <member name="F:group_color">
@}
@defgroup gr_grp1 Color Defines and Variables
@{
@defgroup gr_grp2 Color Defines
@{
@}
</member>
        <member name="T:GraphicsMode">
@defgroup gr_grp0 Graphics Variables
@{
</member>
        <member name="M:GetFunctionFromKeymap(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Get function name from keymap

 @return			Function name for given keymap

 @param[in]		keymap	Keymap

</member>
        <member name="M:GetKeymapFromFunction(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Get keymap from function name

 @return			Keymap for given function name

 @param[in]		function	Function name

</member>
        <member name="M:get_FT_right_click_flag">
 @par Purpose:
		Get right click flag for the last FT function executed

 @return			true = Right clicked

 @note Works with RIGHT_MOUSE FT flag


</member>
        <member name="M:is_FT_item_inline(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;)">
 @par Purpose:
		Determine if a FT function is inline

 @return			true = Inline?

 @param[in]		appName		Application name
 @param[in]		entryName	Entry point (command) name

</member>
        <member name="M:set_FT_item_checked(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,System.Boolean)">
 @par Purpose:
		Set a FT function checked state

 @return			true = Set okay

 @param[in]		appName		Application name
 @param[in]		entryName	Entry point (command) name
 @param[in]		checked		function table entry checked?

</member>
        <member name="M:get_FT_item_checked(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Determine if a FT function is checked

 @return			true = Retrieved okay

 @param[in]		appName		Application name
 @param[in]		entryName	Entry point (command) name
 @param[out]		checked		function table entry checked?

</member>
        <member name="M:set_FT_item_enabled(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,System.Boolean)">
 @par Purpose:
		Set a FT function is enabled or disabled

 @return			true = Set okay

 @param[in]		appName		Application name
 @param[in]		entryName	Entry point (command) name
 @param[in]	   enabled	   function table entry enabled?

</member>
        <member name="M:get_FT_item_enabled(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Determine if a FT function is enabled

 @return			true = Retrieved okay

 @param[in]		appName		Application name
 @param[in]		entryName	Entry point (command) name
 @param[out]		enabled		function table entry enabled?

</member>
        <member name="M:set_FT_item_param(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,System.Int32)">
 @par Purpose:
		Set the parameter value passed to a FT function

 @return			true = Retrieved okay

 @param[in]		appName		Application name
 @param[in]		entryName	Entry point (command) name
 @param[in]		param		New parameter value

</member>
        <member name="M:post_FT_command(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;)">
 @par Purpose:
		Run a FT function

 @return			true = Command Posted

 @param[in]		appName		Application name
 @param[in]		entryName	Entry point (command) name

</member>
        <member name="M:get_FT_command(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
		Get the Function Table index of the specified function

 @return			Index of command in function table (-1 if not found)

 @param[in]		appName		Application name
 @param[in]		entryName	Entry point (command) name

</member>
        <member name="M:GetSpeedFeedMenuItems">
            <summary> Gets speed feed menu items. </summary>
            <returns> The speed feed menu items. </returns>
        </member>
        <member name="D:SpeedFeedMenuItemTuple">
@}
</member>
        <member name="D:cpp_XFASSOC_UPDATE">
@defgroup Function Table command ID range
@{
@}
@defgroup CPP_ent_sigs CPP entry signatures
@{
</member>
        <member name="M:RunCHookFunction(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Boolean,System.Int32*)">
            <summary> Executes the specified function in a C-Hook. </summary>
            <param name="fname">	    Filename of the C-hook. 
							chook_prefix assumed if path not specified.
							Extension forced to "dll". </param>
            <param name="func_name">    Name of the function. </param>
            <param name="param">	    (Optional) The parameter to pass to the function. </param>
            <param name="report_error"> (Optional) true to report error.</param>
            <param name="ret">		    (Optional) If non-null, the MC_RETURN code from the C-Hook. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:RunCHook(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Int32*)">
            <summary> Executes the m_main function in a C-Hook. </summary>
            <param name="fname">	    Filename of the C-hook. 
							chook_prefix assumed if path not specified. 
							Extension forced to "dll". </param>
            <param name="report_error"> (Optional) true to report error. </param>
            <param name="ret">		    (Optional) If non-null, the MC_RETURN code from the C-Hook. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:AddFileToMRU(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Adds the (full path) file name to the Recent Open File MRU. </summary>
            <param name="filePath"> Full pathname of the file. </param>
        </member>
        <member name="M:ClearFileListInMRU">
            <summary> Clears the list of file names in Recent Open File MRU. </summary>
        </member>
        <member name="M:GetFileNamesInMRU">
            <summary> Gets the list of file names in Recent Open File MRU. </summary>
            <returns> The file names in the MRU. </returns>
        </member>
        <member name="M:ChangeApplicationEnableBits(System.Int32!System.Runtime.CompilerServices.IsLong)">
 @par Purpose:
			Allow changing the mode (application enable bits) from a DLL.

 @param[in]		newMode		The new mode (AEB_DESIGN, AEB_MILL, AEB_LATHE, etc.).

</member>
        <member name="M:EnableSilentShutdownMode">
 @par Purpose:
			This method enables silent exit mode for the life of the current
	Mastercam instance.

</member>
        <member name="M:isWindows8">

 @par Purpose:
			This method returns whether or not the current operating system 
			is Windows 8

 @return			true if Win8, false if otherwise


</member>
        <member name="M:isWindows7">

 @par Purpose:
			This method returns whether or not the current operating system 
			is Windows 7

 @return			true if Win7, false if otherwise


</member>
        <member name="M:isWindowsVista">

 @par Purpose:
			This method returns whether or not the current operating system 
			is Windows Vista

 @return			true if Vista, false if otherwise


</member>
        <member name="M:isWindowsXP">

 @par Purpose:
			This method returns whether or not the current operating system 
			is Windows XP

 @return			true if WinXP, false if otherwise


</member>
        <member name="M:UpdateStatusBarText(System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			Write text to the Status bar

 @return			none

 @param[in]		statustxt		message to display


</member>
        <member name="M:InsertThirdPartyRibbonTabs(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Inserts 3rd Party Ribbon Tabs described by pRibbonXml. </summary>
            <param name="pRibbonXml"> The Ribbon XML as a string. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:InsertThirdPartyMenu(CStringArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Insert chook menu before help menu

 @return			true if inserted successfully

 @param[in]		menuArray		Array of menu specifiers


</member>
        <member name="M:GetDialogBar(MCDialogBarType,System.UInt32)">
@}

 @par Purpose:
			Get a pointer to the MCDialogBar that corresponds to the given parameters.

 @return			Pointer to MCDialogBar that corresponds to given parameters, NULL if not found.

 @param[in]		dialogBarType	MCDialogBarType enum
 @param[in]		dialogBarId		ID of dialog bar to retrieve.
									Only used if dialogBarType is MC_EXTERNALBAR.


</member>
        <member name="T:MCDialogBarType">
@defgroup enum_parameters UI dialog bar enum types
 * @{
</member>
        <member name="M:RemoveDialogBar(System.UInt32)">

 @par Purpose:
			Remove the given dialog bar from Mastercam.

 @return	True if successful, false otherwise.

 @param[in]		dialogBarId		ID of MCDialogBar to remove.


</member>
        <member name="M:RemoveDialogBar(MCDialogBar*)">

 @par Purpose:
			Remove the given dialog bar from Mastercam.

 @return	True if successful, false otherwise.

 @param[in]		pDialogBar	Pointer to MCDialogBar to remove.


</member>
        <member name="M:AddDialogBar(MCDialogBar*)">

 @par Purpose:
			Add the given dialog bar to Mastercam.

 @return			ID of the dialog bar added to Mastercam if successful, -1 if failure.

 @param[in]		pDialogBar	Pointer to MCDialogBar to add.


</member>
        <member name="M:OurShellExecute(System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;)">

 @par Purpose:
			Open the specified file.

 @return			true if open successfully

 @param[in]		wait				Wait for the new process to terminate before returning?
 @param[in]		filen				Name of file to open.
 @param[in]		params				String that contains the application parameters.
 @param[in]		dirname				String that specifies the name of the working directory.


</member>
        <member name="M:set_NextGraphicsView(CView*)">

 @par Purpose:
			Sets as active (including rendering contex) the next graphics view, returning its
			pointer.  If NULL is passed, the first view is activated.  If a view pointer is
			passed, the next view is activated.  If the view pointer is invalid, the active
			view is not changed and NULL is returned.

 @param[in]		pView			 Iterative view pointer.


</member>
        <member name="M:get_next_GraphicsView(CView*)">

 @par Purpose:
			Returns the pointer to the next graphics view.

 @param[in]		view			 Iterative view pointer.


</member>
        <member name="M:set_CurrentGraphicsView(CView*)">

 @par Purpose:
			Sets the pointer to the current (active) graphics view and sets its rendering context.

 @param[in]		pView			 View pointer.


</member>
        <member name="M:get_CurrentGraphicsView">

 @par Purpose:
			Returns the pointer to the current (active) graphics view.


</member>
        <member name="M:get_NumGraphicsViews">

 @par Purpose:
			Returns the number of graphics views.


</member>
        <member name="M:DestroyInFunctionPnl">

 @par Purpose:
			calls the function to close a universal MCDialog
			in the function panel


</member>
        <member name="M:CreateInFunctionPnl(MCDialog*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			calls the function to open a universal MCDialog
			in the function panel


</member>
        <member name="M:get_FunctionPanel">

 @par Purpose:
			return the pointer to the FunctionPanel, for use in setting the
			parent of modal and modeless dialogs


</member>
        <member name="M:get_MainFrame">

 @par Purpose:
			return the pointer to the Mastercam CWnd, for use in setting the
			parent of modal and modeless dialogs


</member>
        <member name="M:UpdateChMinMax(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">

 @par Purpose:
			Updates the bounding box for CHook generated graphics.	This function should be
			called in response to an MCEVENT_MINMAX event.
			Note: Since an event is generated for each graphics repaint, a caller to this
			function should maintain their min/max values so they need not be recalculated
			for each event.  Failure to do this may cause serious degredation in the graphics
			performance.

 @param[in]		minX				Minimum X value.
 @param[in]		minY				Minimum Y value.
 @param[in]		minZ				Minimum Z value.
 @param[in]		maxX				Maximum X value.
 @param[in]		maxY				Maximum Y value.
 @param[in]		maxZ				Maximum Z value.


</member>
        <member name="M:ResetEA(System.Boolean)">

 @par Purpose:
			Resets the current entity attribute settings to the previous attribute settings.

 @param[in]		in_converter		true if this call is coming from a converter; false otherwise


</member>
        <member name="M:RestoreEA(System.Boolean)">

 @par Purpose:
			Restores the old entity attribute settings.

 @param[in]		in_converter		true if this call is coming from a converter; false otherwise


</member>
        <member name="M:DisableEA(System.Boolean)">

 @par Purpose:
			Disables the current entity attribute settings.

 @param[in]		in_converter		true if this call is coming from a converter; false otherwise


</member>
        <member name="M:ea_adjustment(ent*,ea_type*)">

 @par Purpose:
			Modifies the data of a given entity.

 @return			true if the data modification was succesful; false otherwise

 @param[in]		entity				pointer to the entity to modify
 @param[in]		data				pointer to an ea_type variable which holds adjustment data


</member>
        <member name="M:RunPump(System.Int32,System.UInt32*,System.UInt64*,System.Int64*)">
@}
@defgroup mask_types Message mask types
 * @{
@}

 @par Purpose:
			Returns Windows messages of a specific type depending on the given mode.
	Best when used in a loop of some sort which can parse all of the messages of a given type
	until no longer needed.

 @return			type of message being passed back

 @param[in]		mode				specifies the mask applied to the messages which get returned
 @param[out]		ms					fills the user-created UINT with the message to be returned
 @param[out]		wp					fills the user-created WPARAM with the wparam of the message being returned
 @param[out]		lp					fills the user-created LPARAM with the lparam of the message being returned


</member>
        <member name="T:MC_RETURN">
@defgroup return_codes UI return codes
 *
 * @note If you do not post the MC_EXTENSION_CMD_MSG message you don't have to worry about handling MC_EXTENSION_CMD.
 *
 * @{
</member>
        <member name="M:KeyPress(System.Int16)">

 @par Purpose:
			Checks for keyboard to see if the specified key has been pressed.

 @return			whether the key hit is in the message queue

 @param[in]		key				 the key code



</member>
        <member name="M:get_gr_view_n">

 @par Purpose:
			Gets the current graphics view #

 @return			the current graphics view #



</member>
        <member name="M:get_levname(System.Int32,System.Int16,System.Char*)">

 @par Purpose:
			This method gets the global variable: levname.

 @return			true if it returns a valid level name; false if not

 @param[in]		leveln				level number
 @param[in]		maxLen				maximum length of the ptr char array being passed in
 @param[out]		ptr					array to hold the level name


</member>
        <member name="M:constr_view_3d">

 @par Purpose:
			Return the state of the on screen 2d/3d option

 @return			true = 3d, false = 2d


</member>
        <member name="M:chain_in_view(CHAIN*,System.Int16,System.Double*,System.Boolean)">

 @par Purpose:
			Checks to see if a chain is in a given view

 @return			0 if successful, 1 if there was a depth-related error with the entities, -1 if there was some other error

 @param[in]		chain					chain to look at (entities must be flat)
 @param[in]		view					view number of the view we're checking against
 @param[out]		depth					Z coordinate of entities relative to "view"
 @param[in]		showWarningIfNotFlat	Show user a warning message if the Chain is not flat?

</member>
        <member name="M:get_view_from_chain(CHAIN*,System.Int16*,System.Double*,System.Boolean)">

 @par Purpose:
			Gets the view number of the view all of the chained entities are in.

 @note	entities in parallel view are allowed.

 @return			true if a valid view number has been returned; false if not

 @param[in]		chain					chain of entities to look at (entities must be flat)
 @param[out]		view					view number of the view all entities are in
 @param[out]		depth					Z coordinate of entities relative to "view"
 @param[in]		showWarningIfNotFlat	Show user a warning message if the Chain is not flat?

</member>
        <member name="M:gl_fulltime_toggle">

 @par Purpose:
			Toggles OpenGL fulltime mode. If it's on, this method will turn it off and vice versa.


</member>
        <member name="M:set_parms(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">

 @par Purpose:
			This method computes the lower left and upper right corner
			and the clipping and select parameters.

 @param[in]		center				center point
 @param[in]		height				height


</member>
        <member name="M:RemoveLatheToolGraphics">

 @par Purpose:
			Remove lathe tool graphics from the display list.

</member>
        <member name="M:draw_tool_5ax(tp_ent*,System.Int16,System.Double,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Double,System.Boolean,System.Boolean)">

 @par Purpose:
			Draws a tool in 5-axis orientation,
			rotating about the normal vector axis

 @param[in]		t_ents				array of tool entities to draw
 @param[in]		n_t_ents			number of tool entities in the t_ents array
 @param[in]		spin_ang			turn angle, in radians, for turning the tool
 @param[in]		draw_pt				point to draw the tool center on
 @param[in]		off_pt				point on a normal vector to determine tool orientation
 @param[in]		comp_to_tl_tip		flag indicating whether to compensate for the tool tip or not
 @param[in]		corner_r			tool corner radius
 @param[in]		animate				flag indicating whether or not animation is on (true = draw in xor mode, false = replacement mode)
 @param[in]		save_it				flag indicating whether to save the tool in the database or not


</member>
        <member name="M:draw_tool_3ax(tp_ent*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Double,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Boolean,System.Double,System.Boolean,System.Boolean)">

 @par Purpose:
			Draw a tool in tool plane axis orientation,
			rotating about the tool plane axis - the tool only rotates

 @param[in]		t_ents				array of tool entities to draw
 @param[in]		n_t_ents			number of tool entities in the t_ents array
 @param[in]		spin_ang			angle of rotation around the tool plane axis, in radians
 @param[in]		draw_pt				point to draw the tool tip on
 @param[in]		view_n				tool plane view number
 @param[in]		comp_to_tl_tip		flag indicating whether to compensate for the tool tip or not
 @param[in]		corner_r			tool corner radius
 @param[in]		animate				flag indicating whether or not animation is on (true = draw in xor mode, false = replacement mode)
 @param[in]		save_it				flag indicating whether to save the tool in the database or not


</member>
        <member name="M:draw_txt_on_screen_erase(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char*)">
            <summary> Chokepoint for gr_back_color. </summary>
            <param name="pt">	   A 3D point structure. </param>
            <param name="textout"> Character string of text to be drawn. </param>
            <summary> Chokepoint for gr_back_color. </summary>
            <param name="pt">	   The point at which to draw the text. </param>
            <param name="textout"> The text to be drawn. </param>
        </member>
        <member name="M:draw_txt_on_screen(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char*,System.Byte)">

 @par Purpose:
			Draws the specified characters to the screen.

 @param[in]		pt					the point at which to draw the text
 @param[in]		textout				the text to be drawn
 @param[in]		color				the color the text is to be drawn in




 @par Purpose:
			Draws the specified characters to the screen.

 @param[in]		pt					the point at which to draw the text
 @param[in]		textout				the text to be drawn
 @param[in]		color				the color the text is to be drawn in


</member>
        <member name="M:get_level(System.Boolean,System.Int32*)">

 @par Purpose:
			Non-MFC version for NETHooks.  Prompts for a level number

 @return			true if a level has been selected; false if not

 @param[in]		allow_zero			flag indicating if the user is to be allowed to input a level of zero
 @param[in,out]	level				initial selection dialog level value; new level value on return


</member>
        <member name="M:get_level(CWnd*,System.Boolean,System.Int32*)">

 @par Purpose:
			Prompts for a level number

 @return			true if a level has been selected; false if not

 @param[in]		pParent				pointer to parent window
 @param[in]		allow_zero			flag indicating if the user is to be allowed to input a level of zero
 @param[in,out]	level				initial selection dialog level value; new level value on return


</member>
        <member name="M:sel_level_dialog(CWnd*,System.Boolean,System.Boolean,System.Int32*)">

 @par Purpose:
			This method runs the select level dialog.

 @return			true if a level has been selected; false if not

 @param[in]		pParent				pointer to parent window
 @param[in]		allow_zero			true = allow input of level zero
 @param[in]		select_off			true = disable select button
 @param[out]		*level				selected level


</member>
        <member name="M:set_gl_shading(System.Boolean)">

 @par Purpose:
			This method sets the OpenGL shading.

 @param[in]		initXform			Optional flag to prevent the transform from being set.


</member>
        <member name="M:ConfigPlaneSet(System.Boolean)">
            <summary>	Indicate if the plane specified in config has been set yet. </summary>
            <param name="set">	true to indicate the plane has been set, otherwise false. </param>
        </member>
        <member name="M:DeleteGLList(System.Int32)">
            <summary> Deletes an opengl display list. </summary>
        </member>
        <member name="M:ResetStandardDepthFunction">
            <summary> Resets depth buffer writes to the default. </summary>
        </member>
        <member name="M:SetWireframeDepthFunction">
            <summary> Restricts depth buffer writes such that objects drawn at the same depth appear "on top" of those already drawn. </summary>
        </member>
        <member name="M:SetShadedDepthFunction">
            <summary> Restricts depth buffer writes such that objects drawn at the same depth appear "behind" of those already drawn. </summary>
        </member>
        <member name="M:SetDepthOffsetScale(System.Double)">
            <summary> Sets the scale to be applied to the depth offsets. </summary>
            <param name="scale"> The scale to be applied. </param>
        </member>
        <member name="M:GetSpaceBallAttraction">
            <summary> Get the spaceball view snapping attraction value. </summary>
            <returns> Returns the value.</returns>
        </member>
        <member name="M:GetSnapAngleTolerance">
            <summary> Get the view snap angle tolerance. </summary>
            <returns> Returns the value.</returns>
        </member>
        <member name="M:SetAllowViewAnimation(System.Boolean)">
            <summary> Set whether view transitions are allowed to be animated. </summary>
            <returns> Returns the previous value.</returns>
        </member>
        <member name="M:GetAllowViewSnapping">
            <summary> Reports whether view snapping is allowed.</summary>
            <returns> Returns true if allowed.</returns>
        </member>
        <member name="M:GetAllowViewAnimation">
            <summary> Reports whether view transitions are allowed to be animated.</summary>
            <returns> Returns true if allowed.</returns>
        </member>
        <member name="M:SetAllowFitAnimation(System.Boolean)">
            <summary> Set whether zoom / fit is allowed to be animated. </summary>
            <returns> Returns the previous value.</returns>
        </member>
        <member name="M:GetAllowFitAnimation">
            <summary> Reports whether zoom / fit is allowed to be animated.</summary>
            <returns> Returns true if allowed.</returns>
        </member>
        <member name="M:GetAnimationDelay">
            <summary> Get the view-to-view and zoom / fit animation delay value.</summary>
            <returns> Returns current value of the animation delay, 0 for off.</returns>
        </member>
        <member name="M:SetAnimationDelay(System.UInt32)">
            <summary> Set the view-to-view and zoom / fit animation delay value.</summary>
        </member>
        <member name="M:SetDashedModeActive(System.Boolean)">
            <summary> Set the state of the "draw hidden wireframe as dashed" flag. </summary>
            <param name="setDashed"> True to set, false to unset. </param>
        </member>
        <member name="M:GetDashedModeActive">
            <summary> Get the state of the "draw hidden wireframe as dashed" flag. </summary>
            <returns> True if set, false otherwise. </returns>
        </member>
        <member name="M:getLightSceneCount">
            <summary> Get the number of preset lighting environments.</summary>
            <returns> Returns the number of available light scenes.</returns>
        </member>
        <member name="M:getLightSceneMode">
            <summary> Get which OpenGL light scene mode is in use.</summary>
            <returns>Returns the current light mode index.</returns>
        </member>
        <member name="M:requestLightSceneMode(System.Int32,System.Boolean)">
            <summary> Set which OpenGL light scene mode to use. Out of range requests are ignored.</summary>
            <param name="mode">The requested mode index.</param>
            <param name="inStartup">Prevents updating graphics before startup tasks are complete.</param>
        </member>
        <member name="M:toggleSurfaceBacksideShading">
            <summary> Toggle the surface backside shading on/off and udpate the graphics.</summary>
        </member>
        <member name="M:gl_Set_Light">

 @par Purpose:
			This method sets the OpenGL light properties.


</member>
        <member name="M:rewind_dl_db(System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,DL_DB_POS*,System.Boolean)">

 @par Purpose:
			This method sets the entity position to the start of the display
 list or database.

 @param[in]		sel_mask			.sel mask (to define matching entities for get_dl_db_ent).
 @param[in]		ent_mask			entity mask (to definematcing entities for get_dl_db_ent).
 @param[out]		pos					position in the list
 @param[in]		force_db			force function to use database, not display list.


</member>
        <member name="M:get_dl_db_ent(DL_DB_POS*,ent*)">

 @par Purpose:
			This method gets the next entity from the display list or database
			and updates the position marker.

 @return			true, if more, else false when done with display list.

 @param[in]		pos					ptr to postion of current entity in display list or database
 @param[out]		e					entity read from display list or database


</member>
        <member name="M:set_clr_sel_bits_all(System.Int16,System.Int16,System.Int16,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean)">

 @par Purpose:
			This method sets the select bits corresponding to the select bits that are
			set in set_pattern. Clear the select bits corresponding to the select bits
			that are set in clr_patter. Select the entities that match sel_mask and ent_mask.
			NOTE: this version uses the data base instead of the display list.

 @param[in]		set_pattern			bits to set in .sel of	matching entities.
 @param[in]		clr_pattern			bits to clear in .sel of matching entities.
 @param[in]		clr_ptn_unmatched	bits to clear in .sel of non-matching entities.
 @param[in]		sel_mask			.sel field defining matching entities
 @param[in]		ent_mask			matches .id fields of entities to process
 @param[in]		draw				true = draw entities after chaning .sel
 @param[in]		add_undo			flag indicating whether this database op should be added to the undo stack


</member>
        <member name="M:set_clr_sel_bits(System.Int16,System.Int16,System.Int16,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean)">

 @par Purpose:
			This method sets the select bits according to set_pattern. It clears the
			select bits that are set in clr_pattern. It selects the entities that
			match sel_mask, and ent_mask

 @param[in]		set_pattern			bits to set in .sel of matching entities
 @param[in]		clr_pattern			bits to clear in .sel of matching entities
 @param[in]		clr_ptn_unmatched	bits to clear in .sel of non-matching entities.
 @param[in]		sel_mask			.sel field defining matching entities
 @param[in]		ent_mask			matches .id fields of entities to process
 @param[in]		draw				draw entities after changing .sel bits
 @param[in]		add_undo			flag indicating whether this database op should be added to the undo stack


</member>
        <member name="M:show_dialog(CWnd*,System.Boolean)">

 @par Purpose:
			This method shows/hides a child dialog within a child/parent relationship

 @return			unused

 @param[in]		dialogCWnd			the dialog CWnd ptr
 @param[in]		show				true to show the dialog; false to hide it


</member>
        <member name="M:draw_ent_forced(ent*,System.Byte,System.Boolean)">

 @par Purpose:
			This method draws an entity in a "forced" color.

 @param[in]		entity				the entity
 @param[in]		color				the "forced" color.
 @param[in]		highlight			optional flag to indicate highlight draw.


</member>
        <member name="M:map_cursor_to_3d(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Double,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 @par Purpose:
			This method maps a 2d cursor point to a 3d point.

 @return			true if the point was mapped successfully; false if not

 @param[in]		pt_2d				the 2d point to be mapped
 @param[in]		sketch_view			the view number
 @param[in]		sketch_depth		the sketch depth
 @param[out]		world_pnt			3d value of the newly mapped point
 @param[in]		disp_err			flag indicating whether or not to display error messages (default = true)


</member>
        <member name="M:sel_color_dialog(System.Byte*,System.Boolean)">

 @par Purpose:
			Non-MFC wrapper for color selection dialog.

 @return			true if a new color was selected; false if not

 @param[in,out]	color				       sets dialog to this color on construction; returns selected color on destruction
 @param[in]		showBackgroundColorWarning flag allowing or denying the display of the color equals background color warning (default = show)


</member>
        <member name="M:sel_color_dialog(CWnd*,System.Byte*,System.Boolean,System.Boolean)">

 @par Purpose:
			Wrapper for color selection dialog.

 @return			true if a new color was selected; false if not

 @param[in]		pParent				       pointer to the CWnd parent of this dialog
 @param[in,out]	color				       sets dialog to this color on construction; returns selected color on destruction
 @param[in]		select_enabled		       flag for the use of the selection button on the color dialog (default = true)
 @param[in]		showBackgroundColorWarning flag allowing or denying the display of the color equals background color warning (default = show)


</member>
        <member name="M:ch_fit_add_extents(System.Double,System.Double,System.Double,System.Double)">

 @par Purpose:
			chook callback to add extents to the current fit.

 @param[in]		min_x			  min x of added extents
 @param[in]		min_y			  min y of added extents
 @param[in]		max_x			  max x of added extents
 @param[in]		max_y			  max y of added extents


</member>
        <member name="M:fit">

 @par Purpose:
			This method reverses the effects of the zoom function.
			It will perform n-i nterations times.


</member>
        <member name="M:set_gl_wireframe(System.Boolean)">

 @par Purpose:
			This method sets the OpenGL wire frame.

 @param[in]		initXform			Optional flag to prevent the transform from being set.


</member>
        <member name="M:erase_arrows">

 @par Purpose:
			This method erases any and all drawn arrows.


</member>
        <member name="M:disp_arrow(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Double,System.Char)">

 @par Purpose:
			This method displays an arrow in the arrow auto-color.

 @param[in]		arrow_base				base point of arrow to be drawn
 @param[in]		arrow_dir				directional point of arrow
 @param[in]		reverse					specifies whether or not you want the direction of the arrow to be reversed from what was already specified
 @param[in]		ht_ratio				ratio of the desired arrow length to the height of the view (arrow length = screen height * ht_ratio * projection)
 @param[in]		letter					letter to be displayed near the arrowhead (' ' for none)


</member>
        <member name="M:disp_arrow_c(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Byte,System.Char)">

 @par Purpose:
			This method displays an arrow with a given color.

 @param[in]		arrow_base				base point of arrow to be drawn
 @param[in]		arrow_dir				directional point of arrow
 @param[in]		ht_ratio				ratio of the desired arrow length to the height of the view (arrow length = screen height * ht_ratio * projection)
 @param[in]		color					color of arrow to be drawn
 @param[in]		letter					letter to be displayed near the arrowhead (' ' for none)


</member>
        <member name="M:set_disp_mult_arrows(System.Boolean)">

 @par Purpose:
			This method sets the flag controlling whether or not multiple arrows can be displayed at once

 @param[in]		on					true: allow drawing of multiple arrows; false: allow drawing of only one arrow at a time


</member>
        <member name="M:Pump">
            <summary>	No-op called by Tool Manager. </summary>
            <remarks>	Restore lost ability for Mastercam to get a time slice while Tool Manager runs. </remarks>
        </member>
        <member name="M:l_dos_cmd(System.Char*,System.Boolean,System.Boolean,System.Boolean)">

 @par Purpose:
			This method executes a DOS command.

 @param[in]		cmdstr			the command string
 @param[in]		echo			true, if command should echo, else, false.
 @param[in]		wait			true, if Mastercam should wait until command has completed.
 @param[in]		unused


</member>
        <member name="M:unsel_ent(DB_LIST_ENT*)">

 @par Purpose:
			Marks an entity as unselected.

 @param[in]		eptr			the eptr of the entity to mark as unselected


</member>
        <member name="M:UnSelectEptr(DB_LIST_ENT*)">

 @par Purpose:
			Marks an entity as unselected.

 @param[in]		eptr			the eptr of the entity to mark as unselected


</member>
        <member name="M:clean_pt(System.Char,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Repaints and cleans a given point.

 @param[in]		ch				-- unused --
 @param[in]		pnt				point to be cleaned


</member>
        <member name="M:draw_ent_erase(ent*,System.Boolean,System.Boolean)">
            <summary> Chokepoint for gr_back_color. </summary>
            <param name="entity">	   Pointer to ent structure. </param>
            <param name="highlight">   True for highlight. </param>
            <param name="inBatchDraw"> True for in batch draw. </param>
        </member>
        <member name="M:draw_ent(ent*,System.Byte,System.Boolean,System.Boolean)">

 @par Purpose:
			This method draws any entity in the database.

 @param[in]		entity			pointer to the entity structure
 @param[in]		color			drawing color
 @param[in]		highlight		flag to indicate highlight draw.
 @param[in]		inBatchDraw		true to prevent immediate flushing of OpenGL data.


</member>
        <member name="M:draw_ent_erase(ent*,System.Boolean)">
            <summary> Chokepoint for gr_back_color. </summary>
            <param name="entity">    Pointer to ent structure. </param>
            <param name="highlight"> (Optional) true to highlight. </param>
        </member>
        <member name="M:draw_ent(ent*,System.Byte,System.Boolean)">

 @par Purpose:
			This method draws any entity in the database.

 @param[in]		entity			pointer to the entity structure
 @param[in]		color			drawing color
 @param[in]		highlight		optional flag to indicate highlight draw.


</member>
        <member name="M:draw_ent_sel(ent*)">

 @par Purpose:
			This method draws any entity in the selection color.

 @param[in]		entity			the entity to draw


</member>
        <member name="M:clrgscreen">

 @par Purpose:
			This method clears the graphics screen.


</member>
        <member name="M:rebuild_graphics">

 @par Purpose:
			This method forces a repaint of the active graphics view by rebuilding the geometry entities


</member>
        <member name="M:repaint_graphics">

 @par Purpose:
			This method forces a repaint of all graphics views


</member>
        <member name="M:uu_to_scrn(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*)">

 @par Purpose:
			This method converts user units (inches or mm) to screen units (pixels).

 @param[in]		pt			a 2d point in user units
 @param[out]		scrn_pt		a point in screen units


</member>
        <member name="M:scrn_to_uu(System.Int16!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method converts screen units (pixels) to user units (inches or mm).

 @param[in]		scrn_pt			screen point in pixels
 @param[out]		pt				point in user units


</member>
        <member name="M:gl_real_flush">

 @par Purpose:
			This method forces a flush of the GL pipeline


</member>
        <member name="M:drw_3d_line(l_3d*,System.Byte)">

 @par Purpose:
			This method projects a 3d line onto x_iso and y_iso_axis and draws it

 @param[in]		line			the 3d coordinates of the line.
 @param[in]		color			the drawing color


</member>
        <member name="M:drw_3d_arc(a_3d*,System.Byte,System.Int16)">

 @par Purpose:
			This method draws an arc for an isometric view.

 @param[in]		arc			pointer to the 3D arc
 @param[in]		color		color to use when drawing the arc
 @param[in]		style		style to use when drawing the arc


</member>
        <member name="M:delete_opengl_fontlists">

 @par Purpose:
			This method deletes the OpenGL text font display lists that are used to draw
			text on the graphics screen. Use this if GL Lists get messed up


</member>
        <member name="M:remove_opengl_list(System.Int32!System.Runtime.CompilerServices.IsLong)">

 @par Purpose:
			This method removes an OpenGL display list.

 @param[in]		idn			id number of the list to remove


</member>
        <member name="M:free_opengl_lists">

 @par Purpose:
			This method removes and frees the previous group of OpenGL display lists.
			including the OpenGL text font display lists


</member>
        <member name="M:flush_lines">

 @par Purpose:
			This method flushes lines that have been buffered


</member>
        <member name="M:EnqueueViewSetup(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary>	Enqueue a future view setup. </summary>
            <remarks>	Calls "update_graphics" immediately after, so view will be presented as soon as possible. </remarks>
            <param name="matrix">	The view matrix. </param>
            <param name="center">	The view center. </param>
            <param name="height">	The view height. </param>
        </member>
        <member name="M:GetCurrentViewSetup(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets current view setup. </summary>
            <param name="matrix">	[out] The view matrix. </param>
            <param name="center">	[out] The view center. </param>
            <param name="height">	[out] The view height. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:put_wk_width(System.Double)">
            <summary> Puts the width of the viewport. </summary>
            <param name="newVal"> The new value. </param>
        </member>
        <member name="M:put_wk_height(System.Double)">
            <summary> Puts the height of the viewport. </summary>
            <param name="newVal"> The new value. </param>
        </member>
        <member name="M:put_wk_center(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Puts the work center. </summary>
            <param name="wkcenter"> A 2D point specifying the work center of the viewport. </param>
        </member>
        <member name="M:get_wk_width">
            <summary> Gets the width of the viewport. </summary>
            <returns> The current width. </returns>
        </member>
        <member name="M:get_wk_height">
            <summary> Get the height of the viewport. </summary>
            <returns> The current height. </returns>
        </member>
        <member name="M:get_wk_center(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the work center. </summary>
            <param name="wkcenter"> A 2D point specifying the work center of the viewport. </param>
        </member>
        <member name="M:get_vp_config">

 @par Purpose:
			Returns the current viewport configuration

 @return			Refer to Viewport Configurations defines


</member>
        <member name="M:world_to_view(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> World to view. </summary>
            <param name="wPoint"> The point in world. </param>
            <param name="m33">    The view. </param>
            <param name="vPoint"> The point in view. </param>
        </member>
        <member name="M:world_to_view(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method maps world coordinates to view coordinates. Assumes that the
			view coordinate axes are mutually orthogonal.

 @param[in]		pt_world	a 3d point in world coordinates to be mapped
 @param[in]		view		the view number of the view to map to
 @param[out]		pt_view		the resulting 3d point in view coordinates


</member>
        <member name="M:view_to_world(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> View to world. </summary>
            <param name="vPoint"> The point in view. </param>
            <param name="m33">    The view. </param>
            <param name="wPoint"> The point in world. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:view_to_world(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method maps view coordinates to world coordinates
			Return true if successful

 @param[in]		pt_view		a 3d point in view coordinates to be mapped
 @param[in]		view		the view number of the view to map to
 @param[out]		pt_world	the resulting 3d point in world coordinates


</member>
        <member name="M:map_arc_to_parallel_view(ent*,System.Int16)">

 @par Purpose:
			this method, map an arc into a parallel view (change start angle and view number)

 @param[out]		*e				arc to map to a new view
 @param[in]		new_view_n		view number of the new view to change to


</member>
        <member name="M:get_view_matrix(System.Int16,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			this method, given a view number, return the view matrix
			(returns false if v_no &gt; n_views)

 @return			true if succesful; false if the v_no requested is greater than the number of views

 @param[in]		v_no		the view number to look up
 @param[in]		v_mat		the view matrix corresponding to the given view number


</member>
        <member name="M:arc_ep_3d(a_3d!System.Runtime.CompilerServices.IsConst*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method computes the endpoints of a 3d arc

 @param[in]		arc			the arc to analyze
 @param[out]		ep1			the endpoint corresponding to sa (first endpoint)
 @param[out]		ep2			the endpoint corresponding to sa_sw (second endpoint)


</member>
        <member name="M:view_xm_to_world(x_matrix*,x_matrix*)">

 @par Purpose:
			This method translates a translation matrix from view coordinates to world coordinates

 @param[in]		x_m_v		matrix in view coordinates to transform
 @param[out]		*x_m		transformed matrix in world coordinates


</member>
        <member name="M:find_view_true_k(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*,System.Boolean*)">

 @par Purpose:
			This method finds a view whose k vector matches the given vector

 @param[in]		v				the p_3d to match to a view
 @param[out]		*view_n			the view number of the view matching the given p_3d
 @param[out]		*succf			loads user-created bool with the result of the function; true if it was successful, false if not


</member>
        <member name="M:find_view_k(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*,System.Boolean,System.Boolean*)">

 @par Purpose:
			This method finds a view whose k vector is parallel to the given vector

 @param[in]		v				the p_3d to match to a view
 @param[out]		*view_n			the view number of the view matching the given p_3d
 @param[in]		make_new_view	a flag indicating whether a new view should be made in case a matching one isn't found
 @param[out]		*succf			loads user-created bool with the result of the function; true if it was successful, false if not


</member>
        <member name="M:find_view_m(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*,System.Boolean,System.Boolean*)">

 @par Purpose:
			This method finds a view that matches a given 3x3 matrix.
			If the view is not found, and make_new_view is true, make a new view

 @param[in]		v_m				the matrix to match to a view
 @param[out]		*view_n			the view number of the view matching the given matrix
 @param[in]		make_new_view	a flag indicating whether a new view should be made in case a matching one isn't found
 @param[out]		*succf			loads user-created bool with the result of the function; true if it was successful, false if not


</member>
        <member name="M:restore_cursor">

 @par Purpose:
			This method restores the cursor to what it was before the most recent
			call to set_new_cursor


</member>
        <member name="M:hourglass_cursor">

 @par Purpose:
			This method converts the cursor to an hourglass to let the user know
			that processing is (however slowly) actually being done and that the
			computer isn't locked up.


</member>
        <member name="M:draw_3d_point(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method draws a 3d point with an isometric view given its data record

 @param[in]		pt			a 3d point
 @param[in]		color		the pt color


</member>
        <member name="M:Init_GL_Surf_Box">

 @par Purpose:
			This method makes a global surface box that contains all the
			surfaces. All light sources and the camera positions are located
			relative to the box.  The box is also used for calculating
			the near and far z clipping plane.

 @return			true if creation was successful; false if not


</member>
        <member name="M:gl_Init_Lights_E">

 @par Purpose:
			This function initializes GL lighting


</member>
        <member name="M:EditGroupPropertiesDlg(System.Int32)">
Edit the given group properties.
@param[in]		not_used   Not used

</member>
        <member name="M:OMchangeGroupName(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
		This function changes the name of an operation or machine group, both in the operations manager and the database

 @param[in]	grp_idn			The ID of the group whose name is to be updated
 @param[in]	newGroupName	The new name of the group

 @return		True if the name was changed successfully; false if not

</member>
        <member name="M:OMgetActiveMachineGroupProduct">
            <summary>	Gets the product code of the active machine group. </summary>
            <returns>	Product code (PRODUCT_NONE if fails to get group). </returns>
        </member>
        <member name="M:OMgetActiveMachineGroup(System.Boolean)">

 @par Purpose:
		This function gets and returns a group list pointer for the currently active machine group

 @param[in]	create_one		true if you want this call to create an active machine group if there currently isn't one (default = true)

 @return		A group list pointer to the currently active machine group

</member>
        <member name="F:spPlanesFollowRules">
            <summary> Pointer to the Planes follow rules (Cplane follows WCS, etc). </summary>
        </member>
        <member name="F:Planes">
            <summary> The one and only all powerful Planes global. </summary>
        </member>
        <member name="M:GetPlanesMgrBar">
            <summary> Return pointer to plane manager bar. </summary>
            <returns> Return pointer to plane manager bar, nullptr if error. </returns>
        </member>
        <member name="M:RunningDebug">
            <summary> Return true if running debug version. </summary>
            <returns> Return true if running debug version. </returns>
        </member>
        <member name="M:Running32bit">
            <summary> Return true if running 32 bit version. </summary>
            <returns> Return true if running 32 bit version. </returns>
        </member>
        <member name="M:RunningMcamDll">
            <summary> Return true if running mcam DLL. </summary>
            <returns> Return true if running mcam DLL. </returns>
        </member>
        <member name="T:PlanesFollowRules.FollowRulesMask">
            <summary> Values that represent follow rules masks. </summary>
        </member>
        <member name="M:PlanesFollowRules.CplaneWasChanged(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Apply follow rules after Cplane changes. </summary>
            <param name="prevPlane"> The previous Cplane before it was changed. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlanesFollowRules.SaveRegistry">
            <summary> Saves follow rules to the registry. </summary>
        </member>
        <member name="M:PlanesFollowRules.ReadRegistry">
            <summary> Reads the follow rules from the workspace. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlanesFollowRules.GetDisplayStatusRelToWcs">
            <summary> Get value of 'Display Status Relative to WCS'. </summary>
            <returns> return true if enabled, false if disabled. </returns>
        </member>
        <member name="M:PlanesFollowRules.SetDisplayStatusRelToWcs(System.Boolean)">
            <summary> Enable or disable 'Set Display Status Relative to WCS' rule. </summary>
            <param name="on"> true - enable, false - disable. </param>
            <returns> returns previous setting. </returns>
        </member>
        <member name="M:PlanesFollowRules.GetTplaneFollowsCplane">
            <summary> Get value of 'Tplane follow Cplane'. </summary>
            <returns> return true if enabled, false if disabled. </returns>
        </member>
        <member name="M:PlanesFollowRules.SetTplaneFollowsCplane(System.Boolean)">
            <summary> Enable or disable 'Set Tplane follow Cplane' rule. </summary>
            <param name="on"> true - enable, false - disable. </param>
            <returns> returns previous setting. </returns>
        </member>
        <member name="M:PlanesFollowRules.GetCplaneFollowsWcs">
            <summary> Get value of 'Cplane follow WCS'. </summary>
            <returns> return true if enabled, false if disabled. </returns>
        </member>
        <member name="M:PlanesFollowRules.SetCplaneFollowsWcs(System.Boolean)">
            <summary> Enable or disable 'Set Gplane follow WCS' rule. </summary>
            <param name="on"> true - enable, false - disable. </param>
            <returns> returns previous setting. </returns>
        </member>
        <member name="M:PlanesFollowRules.GetGplaneFollowsWcs">
            <summary> Get value of 'Set Gplane follow WCS'. </summary>
            <returns> return true if enabled, false if disabled. </returns>
        </member>
        <member name="M:PlanesFollowRules.SetGplaneFollowsWcs(System.Boolean)">
            <summary> Enable or disable 'Set Gplane follow WCS' rule. </summary>
            <param name="on"> true - enable, false - disable. </param>
            <returns> returns previous setting. </returns>
        </member>
        <member name="M:PlanesFollowRules.GetCplaneTopWhenGplaneIso">
            <summary> Get value of 'Set Cplane to TOP when Gplane is set to ISO rule'. </summary>
            <returns> return true if enabled, false if disabled. </returns>
        </member>
        <member name="M:PlanesFollowRules.SetCplaneTopWhenGplaneIso(System.Boolean)">
            <summary> Enable or disable 'Set Cplane to TOP when Gplane is set to ISO rule'. </summary>
            <param name="on"> true - enable, false - disable. </param>
            <returns> returns previous setting. </returns>
        </member>
        <member name="M:PlanesFollowRules.GetCplaneFollowsGplane">
            <summary> Get value of 'Cplane follow Gplane rule'. </summary>
            <returns> return true if enabled, false if disabled. </returns>
        </member>
        <member name="M:PlanesFollowRules.SetCplaneFollowsGplane(System.Boolean)">
            <summary> Enable or disable 'Cplane follow Gplane rule'. </summary>
            <param name="on"> true - enable, false - disable. </param>
            <returns> returns previous setting. </returns>
        </member>
        <member name="M:PlanesFollowRules.Apply(PlaneType,Plane!System.Runtime.CompilerServices.IsConst*)">
            <summary> Applies the follow rules to the active plane type after the plane has changed. </summary>
            <param name="planeType">  Type of the plane . </param>
            <param name="pPrevPlane"> (Optional) the previous plane to detect changes. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlanesFollowRules.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:PlanesFollowRules.#ctor(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="refPlanes"> A reference to a MastecamPlanes object. </param>
        </member>
        <member name="T:PlanesFollowRules">
            <summary> PlanesFollowRules enforces the 'Cplane follows Gview' type rules. </summary>
        </member>
        <member name="M:SelectPlaneGeometry.UnselectAll">
            <summary> unselect all the geometry collected m_EptrArray. </summary>
            <returns> return # of entities unselected. </returns>
        </member>
        <member name="M:SelectPlaneGeometry.SelectEntity(System.UInt32,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> select a geometry entity for plane creation. </summary>
            <param name="resID">    the resource ID of the message to display. </param>
            <param name="theEnt">   geometry entity to fill in with the selection. </param>
            <param name="geomMask"> (Optional) geometry selection mask. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:SelectPlaneGeometry.SelectEntity(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> select a geometry entity for plane creation. </summary>
            <param name="msg">	    the message to display. </param>
            <param name="theEnt">   geometry entity to fill in with the selection. </param>
            <param name="geomMask"> (Optional) geometry selection mask. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:SelectPlaneGeometry.GetTval(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy the geometry selection t valuesinto tVal. </summary>
            <param name="tVal"> the p_2d type to copy the values into. </param>
        </member>
        <member name="M:SelectPlaneGeometry.GetSelPt(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy the geometry selection point values into selPt. </summary>
            <param name="selPt"> the p_3d type to copy the values into. </param>
        </member>
        <member name="M:SelectPlaneGeometry.Init">
            <summary> Initialize the SelectPlaneGeometry class. </summary>
        </member>
        <member name="M:SelectPlaneGeometry.Dispose">
            <summary> standard destructor. </summary>
        </member>
        <member name="M:SelectPlaneGeometry.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:SelectPlaneGeometry">
            <summary> Class to select geometry for Plane construction and unselect geometry on destruction. </summary>
        </member>
        <member name="D:PlaneByGeometryPtr">
            <summary> Defines an alias representing the plane by geometry pointer. </summary>
        </member>
        <member name="M:PlaneByGeometry.SelectMatrixChoice(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32,CWnd*)">
            <summary> display the 8 options, select one and update the given plane's matrix and transform info. </summary>
            <param name="thePlane">	    the Plane to update. </param>
            <param name="addTransform"> true to add transform info to thePlane.m_Transform, false = don't. </param>
            <param name="matrixChoice"> The pre-selected matrix choice (0-7) other wise matrix chooser dialog will be presented. </param>
            <param name="pParent">	    Dialog's parent window. </param>
            <returns> return 0-7 for valid selection, -1 on cancel. </returns>
        </member>
        <member name="M:PlaneByGeometry.CallRotateDynamic(DynamicPlaneAppData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Call the rotate dynamic function. </summary>
            <param name="data"> the rotate dynamic data. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlaneByGeometry.RotatePlanes(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,PlaneType,CWnd*)">
            <summary> Rotate the given plane from the Rotate dialog results. </summary>
            <param name="selList">    List of selected Plane IDs. </param>
            <param name="refPlanes">  MastercamPlanes object to which it will or does belong. </param>
            <param name="doUpdate">   true = update refPlanes, false = just edit thePlane. </param>
            <param name="whichPlane"> plane type (CPLANE, TPLANE, GPLANE or WCSPLANE) </param>
            <param name="pParent">    Parent window </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlaneByGeometry.RotatePlane(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,PlaneType,CWnd*)">
            <summary> Rotate the given plane from the Rotate dialog results. </summary>
            <param name="thePlane">   the Plane to rotate. </param>
            <param name="refPlanes">  MastercamPlanes object to which it will or does belong. </param>
            <param name="doUpdate">   true = update refPlanes, false = just edit thePlane. </param>
            <param name="whichPlane"> plane type (CPLANE, TPLANE, GPLANE or WCSPLANE) </param>
            <param name="pParent">    Parent window </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlaneByGeometry.RotateDynamic(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DynamicPlaneAppData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,PlaneType)">
            <summary> Create or edit a plane from the Dynamic dialog results. </summary>
            <param name="thePlane">   the defined Plane if successful. </param>
            <param name="refPlanes">  MastercamPlanes object to which it will belong. </param>
            <param name="dynData">    App data to init and fill in with dialog results. </param>
            <param name="doUpdate">   true = update refPlanes, false = just edit thePlane. </param>
            <param name="whichPlane"> plane type (CPLANE, TPLANE, GPLANE or WCSPLANE) </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlaneByGeometry.SelectNormal(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32,CWnd*,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Create a plane from the Select Normal dialog results. </summary>
            <param name="thePlane">		   the defined Plane if successful. </param>
            <param name="refPlanes">	   MastercamPlanes object to which it will belong. </param>
            <param name="whichPlane">	   plane type (CPLANE, TPLANE, GPLANE or WCSPLANE) </param>
            <param name="matrixChoice">    The pre-selected matrix choice (0-7) other wise matrix chooser dialog will be presented. </param>
            <param name="pParent">		   Dialog's parent window. </param>
            <param name="grRotateInc">	   graphics plane 'rotate incremental' value from the Select Normal results. </param>
            <param name="grRotateAng">	   graphics plane 'rotate angle' value from the Select Normal results. </param>
            <param name="loadSketcherBar"> (Optional) true = diaply sketcher bar. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlaneByGeometry.SelectSolidFace(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32,CWnd*)">
            <summary> Select a face on a solid to define a Plane. </summary>
            <param name="thePlane">	    the defined Plane if successful. </param>
            <param name="refPlanes">    MastercamPlanes object to which it will belong. </param>
            <param name="whichPlane">   plane type (CPLANE, TPLANE, GPLANE or WCSPLANE) </param>
            <param name="matrixChoice"> The pre-selected matrix choice (0-7) other wise matrix chooser dialog will be presented. </param>
            <param name="pParent">	    Dialog's parent window. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlaneByGeometry.SelectGeometry(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32,CWnd*)">
            <summary> Select geometry to define a Plane. </summary>
            <param name="thePlane">	    the defined Plane if successful. </param>
            <param name="whichPlane">   plane type (CPLANE, TPLANE, GPLANE or WCSPLANE) </param>
            <param name="matrixChoice"> The pre-selected matrix choice (0-7) other wise matrix chooser dialog will be presented. </param>
            <param name="pParent">	    Dialog's parent window. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlaneByGeometry.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:PlaneByGeometry.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:PlaneByGeometry">
            <summary>Class to define a Plane by geometry selection</summary>
        </member>
        <member name="M:ChooseMatrix.SelectDialog(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Load up a CNormalVwDlg with the default 8 matrices based on the given matrix at the given origin and
		  select one. </summary>
            <param name="base33">  3x3 matrix used as the basis of the default 8 Planes. </param>
            <param name="wOrigin"> P3D in world coordinates used as the origin of the default 8 Planes. </param>
            <param name="pParent"> Dialog's parent window. </param>
            <returns> return array index of selection, -1 for error. </returns>
        </member>
        <member name="M:ChooseMatrix.SelectDialog(std.vector&lt;Plane,std.allocator&lt;Plane&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Load up a CNormalVwDlg with the given array of Planes and select one. </summary>
            <param name="planesArray">   Array of Planes to load and select from. </param>
            <param name="selectedPlane"> reference to Plane to fill in with selection. </param>
            <param name="pParent">		 Dialog's parent window. </param>
            <returns> return array index of selection, -1 for error. </returns>
        </member>
        <member name="M:ChooseMatrix.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:ChooseMatrix.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:ChooseMatrix.ChoiceInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ChooseMatrix.ChoiceInfo">
            <summary> Information about the choice made. </summary>
        </member>
        <member name="T:ChooseMatrix">
            <summary> Class to display matrix selection.  
		  
		  The "default 8" Planes:
		  Plane[0] = "base" Plane
		  Plane[1] = base Plane rotated 90 degrees about Z
		  Plane[2] = base Plane rotated 180 degrees about Z
		  Plane[3] = base Plane rotated 270 degrees about Z
		  Plane[4] = "flipped" base Plane rotated 180 degrees about Y axis (base plane flipped Z direction)
		  Plane[5] = "flipped" base Plane rotated 90 degrees about Z
		  Plane[6] = "flipped" base Plane rotated	180 degrees about Z
		  Plane[7] = "flipped" base Plane rotated	270 degrees about Z</summary>
        </member>
        <member name="M:SWActivePlaneSaveRestoreAll.Restore">
            <summary> restore all active system planes. </summary>
        </member>
        <member name="M:SWActivePlaneSaveRestoreAll.Dispose">
            <summary> standard destructor - restore all active system planes. </summary>
        </member>
        <member name="M:SWActivePlaneSaveRestoreAll.#ctor(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor - save current and restore all active system planes. </summary>
            <param name="refPlanes"> reference to Planes object. </param>
        </member>
        <member name="T:SWActivePlaneSaveRestoreAll">
            <summary> SWActivePlaneSaveRestoreAll class used when temporarily changing all 4 system views and will restore it
		  on its destruction or when you call SWActivePlaneSaveRestoreAll.Restore () </summary>
        </member>
        <member name="M:DebugPlaneStr(System.Char!System.Runtime.CompilerServices.IsConst*,MastercamPlanes.DebugLevel,CWnd*)">
            <summary> Debug string level - 0 = no debug messages, 1 = show dialog, 2 = Mastercam event log. </summary>
            <param name="msg">				  The message. </param>
            <param name="debugLevelOverride"> Temporarily override m_DebugLevel. </param>
            <param name="pParentWnd">		  [in,out] (Optional) If non-null, the parent window. </param>
        </member>
        <member name="M:MastercamPlanes.IgnoreThisPlaneInMCforSW(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Check plane, return true if running Solid Works if we should skip. </summary>
            <param name="pPlane"> The plane to check. </param>
            <returns> True if we should ignore in search. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckCoordinateDisplayInPlane(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check coordinate display in plane so that the standard mill planes (Top thru Trimetric) 
		  can never be set to Lathe D or Lathe X, and any standard lathe plane can never be set to mill. </summary>
            <param name="thePlane"> The plane to check. </param>
            <returns> true if was corrected, false if not. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildQuickFindSystemMatrixMap(System.Boolean)">
            <summary> Builds the quick find system matrix map m_QuickFindSystemMatrixMap. </summary>
            <param name="warn"> (Optional) True to display warning. </param>
        </member>
        <member name="M:MastercamPlanes.MergeNonEnglishNamedReservedPlane(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> When reading in files with non-English languages the reserved planes often have names
		  that do no jive with the reserved names in an English resource file.
		  Compare the given plane against our reserved planes and update the name if it's found
		  to have this condition and return a true if the plane has been updated.</summary>
            <param name="thePlane"> the plane to check. </param>
            <returns> true if it was changed, false if no change. </returns>
        </member>
        <member name="M:MastercamPlanes.ForceProperCaseNameInReservedPlane(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Force proper case names if old uppercase names are found in reserved planes. </summary>
            <param name="thePlane"> the plane to check. </param>
            <returns> true if name was updated, false if not. </returns>
        </member>
        <member name="M:MastercamPlanes.EnforceLatheCPlaneRules(PlaneType,CoordinateDisplayType,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Some lathe planes are reserved for Cplane use only.  
		  Make sure the lathe plane we need does not violate this rule. </summary>
            <param name="whichPlane">		 The plane type it will be used for (CPLANE, WCSPLANE, etc) </param>
            <param name="coordinateDisplay"> The coordinate display mode. </param>
            <param name="planeID">			 Identifier for the plane. </param>
            <returns> Pointer to plane to use as lathe plane. </returns>
        </member>
        <member name="M:MastercamPlanes.SearchNonReservedLathePlanePtr(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*,PlaneType,CoordinateDisplayType,System.Boolean)">
            <summary> Searches for the first reserved plane pointer. </summary>
            <param name="m33">						 The matrix to match. </param>
            <param name="pOriginInWorldCoordinates"> The origin world coordinates, nullptr if you don't care. </param>
            <param name="whichPlane">				 The active plane we plane on using it for (Tplane's and WCS's have special rules). </param>
            <param name="coordinateDisplay">		 The coordinate display mode. </param>
            <param name="createIfNeeded">			 true = create and add if needed. </param>
            <returns> Return const pointer to reserved plane that matches matrix and coordinate display. </returns>
        </member>
        <member name="M:MastercamPlanes.UpdateCGraphicsViewMemberVariable">
            <summary>
Updated ONLY the m_Gplane and m_GviewNo member variables in
CGraphicsView to the current graphics view from in here.
</summary>
        </member>
        <member name="M:MastercamPlanes.BadCGraphicsView(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Display message that CGraphicsView.cpp::m_Gplane != the Gplane info in this. </summary>
            <param name="warning"> The warning. </param>
        </member>
        <member name="M:MastercamPlanes.CopyActivePlanes(SystemPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy the active planes into this. </summary>
            <param name="activePlanes"> The active planes. </param>
        </member>
        <member name="M:MastercamPlanes.BuildWorkOffsetMap(WorkOffsetUtil*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Build a work offset map. </summary>
            <param name="woffUtil">    object containing work offset map. </param>
            <param name="excludeOpID"> toolpath operation ID to exclude from map. </param>
            <returns> return size of work offset map built inside of woffUtil. </returns>
        </member>
        <member name="M:MastercamPlanes.TogglePlaneLock(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> lock the Plane (no edits allowed) with this ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> Return planes update code PlanesUpdated::Updated if successfully unlocked or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.CompareForPlaneManagerDialogRefresh(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare changes in a plane to determing whether the Plane Manager should be refreshed. </summary>
            <param name="oldPlane"> The old plane. </param>
            <param name="newPlane"> The new plane. </param>
            <returns> A PlanesUpdated type if a plane manager update is warranted, PlanesUpdated::NotUpdated if no refresh of
		  the Plane Manager is needed. </returns>
        </member>
        <member name="M:MastercamPlanes.SetDebugLevel(MastercamPlanes.DebugLevel)">
            <summary> Sets debug level. </summary>
            <param name="debugLevel"> The debug level (0 = no debug messages, 1 = show dialog, 2 = Mastercam event log). </param>
            <returns> Previous value if set successfully, -1 on error. </returns>
        </member>
        <member name="M:MastercamPlanes.GetDebugLevel">
            <summary> Gets value of m_DebugLevel. </summary>
            <returns> Value of m_DebugLevel. </returns>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActiveSet(PlaneType,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Saves the given active plane and restores then upon destruction. </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="planeID">    The plane ID to set the active plane to. </param>
            <returns> A std::unique_ptr to a SaveRestoreActivePlanes class,. </returns>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActiveSet(PlaneType,Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves the given active plane and restores then upon destruction. </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="thePlane">   The plane to set the active plane to. </param>
            <returns> A std::unique_ptr to a SaveRestoreActivePlanes class,. </returns>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActiveSet(PlaneType,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*,CoordinateDisplayType!System.Runtime.CompilerServices.IsConst*)">
            <summary> Saves the given active planes and restores then upon destruction. </summary>
            <param name="whichPlane">    CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="m33">			 The matrix to set. </param>
            <param name="pWorldOrigin">  The originn in world coordinates to set. </param>
            <param name="pCoordDisplay"> Mill, LatheX or LatheD. </param>
            <returns> A std::unique_ptr to a SaveRestoreActivePlanes class,. </returns>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActive(PlaneType)">
            <summary> Saves the given active planes and restores then upon destruction. </summary>
            <param name="whichPlane"> (Optional) CPLANE, TPLANE, WCS or GPLANE.  UNDEFPLANE == all 4. </param>
            <returns> A std::unique_ptr to a SaveRestoreActivePlanes class, </returns>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActivePlanes.Save(PlaneType)">
            <summary> Saves the currently active planes before setting any new ones. </summary>
            <param name="whichPlane"> (Optional) CPLANE, TPLANE, WCS or GPLANE.  UNDEFPLANE == all 4.</param>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActivePlanes.DisablePlaneManagerUpdateOnDestruction">
            <summary> Disables the update of the plane manager when this goes out of scope. </summary>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActivePlanes.DisableRestore">
            <summary> Disables the restoration of the saved active planes. </summary>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActivePlanes.Restore(std.set&lt;PlaneType,std.less&lt;PlaneType&gt;,std.allocator&lt;PlaneType&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Restores the active planes by type. </summary>
            <param name="pWhichPlanes"> (Optional) Pointer to active plane types, null for all contained in m_RestoreThese. </param>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActivePlanes.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActivePlanes.#ctor(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="refPlanes">  A MastercamPlanes reference. </param>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="thePlane">   The plane to set the active plane with. </param>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActivePlanes.#ctor(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*,CoordinateDisplayType!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="refPlanes">	 A MastercamPlanes reference. </param>
            <param name="whichPlane">    CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="m33">			 The matrix to set. </param>
            <param name="pWorldOrigin">  (Optional) The origin in world coordinates to set, nullptr = use current. </param>
            <param name="pCoordDisplay"> (Optional) Mill, LatheX or LatheD, nullptr = use current. </param>
        </member>
        <member name="M:MastercamPlanes.SaveRestoreActivePlanes.#ctor(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> Constructor. </summary>
            <param name="refPlanes">  A MastercamPlanes reference. </param>
            <param name="whichPlane"> (Optional) CPLANE, TPLANE, WCS or GPLANE.  UNDEFPLANE == all 4.</param>
        </member>
        <member name="M:MastercamPlanes.SetSelectedPlanesInPlaneManagerBar(std.set&lt;PlaneID,std.less&lt;PlaneID&gt;,std.allocator&lt;PlaneID&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Select a plane in the planes manager that's hooked to this. </summary>
            <param name="planeIDs"> Identifiers for the planes to select. </param>
        </member>
        <member name="M:MastercamPlanes.GetSelectedPlaneInPlaneManagerBar">
            <summary> Returns const plane ptr to what's selected in the plane manager that's hooked to this. </summary>
            <returns> const plane ptr to what's selected in the plane manager that's hooked to this. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanesMgrBarPtr">
            <summary> Gets planes manager bar pointer. </summary>
            <returns> Null if it fails, else the planes manager bar pointer. </returns>
        </member>
        <member name="M:MastercamPlanes.SetPlanesMgrBarPtr(PlanesMgrBar*)">
            <summary> Sets the internal planes manager bar pointer m_pPlanesMgrBar. </summary>
            <param name="pPlanesMgrBar"> If non-null, the planes manager bar. </param>
            <returns> previous value of m_pPlanesMgrBar. </returns>
        </member>
        <member name="M:MastercamPlanes.UpdatePlanesMgrBar(PlanesUpdated,std.set&lt;PlaneID,std.less&lt;PlaneID&gt;,std.allocator&lt;PlaneID&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the plane manager dialog. </summary>
            <param name="planesUpdated"> The planes update code. </param>
            <param name="planeIDs">		 The plane IDs to update, empty set = reload list control. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MastercamPlanes.UpdatePlanesMgrBar(PlanesUpdated)">
            <summary> Updates the plane manager dialog. </summary>
            <param name="planesUpdated"> The planes update code. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MastercamPlanes.EnablePlanesMgrBar(System.Boolean)">
            <summary>
Enables the updating of the list control in the plane manager. Value will be restored upon the
destruction of the PlanesMgrBarUpdate object.
</summary>
            <param name="updateOnDestruction"> (Optional) true to update/refresh Plane Manager on destruction. </param>
            <returns> A shared ptr to a PlanesMgrBarUpdate object. </returns>
        </member>
        <member name="M:MastercamPlanes.DisablePlanesMgrBar(System.Boolean)">
            <summary> Disables the updating of the list control in the plane manager. Value will be restored upon the
		  destruction of the PlanesMgrBarUpdate object. </summary>
            <param name="updateOnDestruction"> (Optional) true to update/refresh Plane Manager on destruction. </param>
            <returns> A shared ptr to a PlanesMgrBarUpdate object. </returns>
        </member>
        <member name="M:MastercamPlanes.PlanesMgrBarUpdate.SetUpdateOnDestruction(System.Boolean)">
            <summary> Sets the value of m_UpdateOnDestruction. </summary>
            <param name="on"> True to enable, false to disable. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MastercamPlanes.PlanesMgrBarUpdate.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:MastercamPlanes.PlanesMgrBarUpdate.#ctor(PlanesMgrBar*,System.Boolean,MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Constructor. </summary>
            <param name="pPlanesMgrBar">	   [in,out] ptr tp the global planes manager bar. </param>
            <param name="on">				   true = enable update, false = disable update. </param>
            <param name="refPlanes">		   const reference to a MastercamPlanes object to copy it's named planes into m_PlanesOnEntry. </param>
            <param name="updateOnDestruction"> True to reload list control on destruction. </param>
        </member>
        <member name="M:MastercamPlanes.RemoveMatrixNoise(PlaneBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Removes the matrix noise in m33. </summary>
            <param name="thePlane"> [in,out] The plane containing the matrix to clean. </param>
            <returns> true if it changed, false if not. </returns>
        </member>
        <member name="M:MastercamPlanes.MapFromArray(std.vector&lt;Plane!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;Plane!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy the contenst of planesPtrArray into planeMap. </summary>
            <param name="planesPtrArray"> Array of plane pointers to copy. </param>
            <returns> Return plane map. </returns>
        </member>
        <member name="M:MastercamPlanes.MapFromArray(std.vector&lt;Plane,std.allocator&lt;Plane&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy the contenst of planesArray into planeMap. </summary>
            <param name="planesArray"> Vector of planes to copy. </param>
            <returns> Return plane map. </returns>
        </member>
        <member name="M:MastercamPlanes.MapRemove(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Remove a plane from the map by its ID. </summary>
            <param name="planeID"> ID of the plane to remove. </param>
            <returns> Return true if plane found and removed. </returns>
        </member>
        <member name="M:MastercamPlanes.MapSet(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update a Plane in the map. </summary>
            <param name="thePlane"> the Plane to update. </param>
            <returns> Return true if plane found and updated. </returns>
        </member>
        <member name="M:MastercamPlanes.MapAddSystemMatrix(PlaneBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Add a Plane to the map. </summary>
            <param name="thePlane"> the Plane to add. </param>
            <returns> Return true if plane added. </returns>
        </member>
        <member name="M:MastercamPlanes.MapAdd(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Add a Plane to the map. </summary>
            <param name="thePlane"> the Plane to add. </param>
            <returns> Return true if plane added. </returns>
        </member>
        <member name="M:MastercamPlanes.MapCopy(std.map&lt;PlaneID,std.shared_ptr&lt;PlaneBase&gt;,std.less&lt;PlaneID&gt;,std.allocator&lt;std.pair&lt;PlaneID!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;PlaneBase&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy map into m_Planes. </summary>
            <param name="mapToCopy"> The map to copy. </param>
            <returns> Size of m_Planes as an INT_PTR. </returns>
        </member>
        <member name="M:MastercamPlanes.GetMap">
            <summary> Gets the map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:MastercamPlanes.SetScratchView(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets scratch view. </summary>
            <param name="target"> the scratch plane to set. </param>
            <param name="source"> The source plane to set it to. </param>
            <returns> The previous value. </returns>
        </member>
        <member name="M:MastercamPlanes.SetScratchView(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets scratch view. </summary>
            <param name="scratchViewNo"> the scratch plane to set. </param>
            <param name="m33">			 The matrix to set it to. </param>
            <returns> The previous value. </returns>
        </member>
        <member name="M:MastercamPlanes.SetScratchView(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets scratch view. </summary>
            <param name="scratchViewNo"> the scratch plane to set. </param>
            <param name="thePlane">		 The plane containing the matrix to set it to. </param>
            <returns> The previous value. </returns>
        </member>
        <member name="M:MastercamPlanes.SetScratchView(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets scratch view. </summary>
            <param name="scratchViewNo"> the scratch plane to set. </param>
            <param name="viewNo">		 The plane containing the matrix to set it to. </param>
            <returns> The previous value. </returns>
        </member>
        <member name="M:MastercamPlanes.GetShortScratchViewNo(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets scratch view no. </summary>
            <param name="scratchViewNo"> The scratch view number. </param>
            <param name="createNew">	 (Optional) true to create new if an existing matrix not found. </param>
            <returns> The scratch view no. </returns>
        </member>
        <member name="M:MastercamPlanes.GetScratchViewNo(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets scratch view no. </summary>
            <param name="scratchViewNo"> The scratch view number. </param>
            <param name="createNew">	 (Optional) true to create new if an existing matrix not found. </param>
            <returns> The scratch view no. </returns>
        </member>
        <member name="M:MastercamPlanes.GetScratchView(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets scratch matrix by view #. </summary>
            <param name="scratchViewNo"> The scratch view number. </param>
            <param name="createNew">	 (Optional) true to create new if an existing matrix not found. </param>
            <returns> The scratch view. </returns>
        </member>
        <member name="M:MastercamPlanes.GetScratchViewPtr(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets scratch view by view #. </summary>
            <param name="scratchViewNo"> The scratch view number. </param>
            <returns> The scratch view. </returns>
        </member>
        <member name="M:MastercamPlanes.SetMouseView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets m_MouseView. </summary>
            <param name="m33"> The matrix to set. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:MastercamPlanes.SetMouseView(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets m_MouseView. </summary>
            <param name="viewNo"> The matrix to set. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:MastercamPlanes.GetMouseViewNo">
            <summary> Gets mouse view no. </summary>
            <returns> The mouse view no. </returns>
        </member>
        <member name="M:MastercamPlanes.GetMouseView">
            <summary> Gets mouse view matrix. </summary>
            <returns> Shared pointer to the mouse view. </returns>
        </member>
        <member name="M:MastercamPlanes.GetMouseViewPtr">
            <summary> Gets ptr to mouse view. </summary>
            <returns> const pointer to the mouse view. </returns>
        </member>
        <member name="M:MastercamPlanes.Rotate(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,System.Double)">
            <summary> Rotates an existing non-reserved, non-locked plane. </summary>
            <param name="planeID">	   Identifier for the named plane. </param>
            <param name="axis">		   The axis to rotate about (X=0, Y=1, Z=2). </param>
            <param name="rotAngleDeg"> The rotation angle in degrees. </param>
            <returns> Return planes update code. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneToWorld(PlaneType,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in plane coordinates to world coordinates (map from plane's view, add the plane origin). </summary>
            <param name="planeType"> the plane. </param>
            <param name="planePt">   The point in plane coordinates. </param>
            <returns> P3D in world coordinates. </returns>
        </member>
        <member name="M:MastercamPlanes.WorldToPlane(PlaneType,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in world coordinates to active plane coordinates (map to plane's view, subtract the plane origin). </summary>
            <param name="planeType"> WCSPLANE, TPLANE, CPLANE or GPLANE. </param>
            <param name="worldPt">   The point in world coordinates. </param>
            <returns> P3D of world point relative to the active plane's view and origin. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneToWorld(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in plane coordinates to world coordinates (map from plane's view, add the plane origin). </summary>
            <param name="thePlane"> the plane. </param>
            <param name="planePt">  The point in plane coordinates. </param>
            <returns> P3D of world point relative to the plane's view and origin. </returns>
        </member>
        <member name="M:MastercamPlanes.WorldToPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in world coordinates to plane coordinates (map to plane's view, subtract the plane origin). </summary>
            <param name="thePlane"> the plane. </param>
            <param name="worldPt">  The point in world coordinates. </param>
            <returns> P3D of world point relative to the plane's view and origin. </returns>
        </member>
        <member name="M:MastercamPlanes.GetShortViewNo(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Returns the SystemMatrix ID as a short that matches the matrix m33. </summary>
            <param name="thePlane">  The plane containing matrix to match. </param>
            <param name="createNew"> (Optional) true to create new SystemMatrix plane if no match found. </param>
            <returns> The view no. </returns>
        </member>
        <member name="M:MastercamPlanes.GetShortViewNo(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Returns the SystemMatrix ID as a short that matches the matrix m33. </summary>
            <param name="m33">		 The matrix to match. </param>
            <param name="createNew"> (Optional) true to create new SystemMatrix plane if no match found. </param>
            <returns> The view no. </returns>
        </member>
        <member name="M:MastercamPlanes.GetViewNo(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Returns the SystemMatrix ID that matches the matrix m33. </summary>
            <param name="thePlane">  The plane containing matrix to match. </param>
            <param name="createNew"> (Optional) true to create new SystemMatrix plane if no match found. </param>
            <returns> The view no. </returns>
        </member>
        <member name="M:MastercamPlanes.GetViewPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Returns a const pointer to an existing system matrix with the given ID. </summary>
            <param name="viewNo"> The view ID. </param>
            <returns> const pointer to an existing system matrix, nullptr if none found. </returns>
        </member>
        <member name="M:MastercamPlanes.GetViewNo(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Returns the SystemMatrix ID that matches the matrix m33. </summary>
            <param name="m33">		 The matrix to match. </param>
            <param name="createNew"> (Optional) true to create new SystemMatrix plane if no match found. </param>
            <returns> The view no. </returns>
        </member>
        <member name="M:MastercamPlanes.GetViewNo(ReservedPlanes.TypeID)">
            <summary> Gets the view number of a reserved matrix type. </summary>
            <param name="typeID"> reserved matrix type. </param>
            <returns> The view matrix. </returns>
        </member>
        <member name="M:MastercamPlanes.GetTopMatrix">
            <summary> Get the matrix defined as ReservedPlanes::TypeID::Top. </summary>
            <returns> The view matrix. </returns>
        </member>
        <member name="M:MastercamPlanes.GetViewMatrix(ReservedPlanes.TypeID)">
            <summary> Gets the view matrix of a reserved matrix type. </summary>
            <returns> The top view matrix. </returns>
        </member>
        <member name="M:MastercamPlanes.GetViewMatrix(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets view matrix from a SystemMatrix by its ID (viewNo). </summary>
            <param name="viewNo"> The view no. </param>
            <param name="warn">   (Optional) true for debug warning if view not found. </param>
            <returns> the matrix_33 found with the given view number. </returns>
        </member>
        <member name="M:MastercamPlanes.GetTemporary">
            <summary> Gets the value of mTemporary. </summary>
            <returns> the value of mTemporary. </returns>
        </member>
        <member name="M:MastercamPlanes.SetTemporary(System.Boolean)">
            <summary> Sets m_Temporary so all added planes from this point on will be marked
		  as temporary and removed on a file/save. </summary>
            <param name="on"> true for on. </param>
            <returns> previous value of m_Temporary. </returns>
        </member>
        <member name="M:MastercamPlanes.GetVersion">
            <summary> Gets the version. </summary>
            <returns> The version. </returns>
        </member>
        <member name="M:MastercamPlanes.SearchSkipLatheCplanes(PlaneType)">
            <summary> Check to see if we should skip matching on lathe Cplanes because of plane type and coordinate display. </summary>
            <param name="whichPlane"> The plane type (PlaneType::CPLANE, etc). </param>
            <returns> true if we should skip, false if not. </returns>
        </member>
        <member name="M:MastercamPlanes.SetCGraphicsView(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Call CGraphicsView.cpp::SetPlane() ONLY from DbFile.cpp::get_db() </summary>
            <param name="thePlane"> the plane. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MastercamPlanes.GetDbState">
            <summary> Returns const reference to m_DbState. </summary>
            <returns> const reference to m_DbState. </returns>
        </member>
        <member name="M:MastercamPlanes.SetDbState(MastercamPlanes.DbState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Relying on the global in_file_get is unreliable, so set our own m_InGetDb. </summary>
            <param name="dbState"> State of the database. </param>
            <returns> previous value of m_DbState. </returns>
        </member>
        <member name="M:MastercamPlanes.SortPlanesByName(std.vector&lt;Plane,std.allocator&lt;Plane&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Sort given array of planes by name. </summary>
            <param name="planesArray"> [in,out] Array to sort. </param>
            <param name="ascending">   True = sort ascending, false = descending. </param>
            <returns> # of planes in planesArray. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanePtrsSortedByCoordinateDisplay(CoordinateDisplayType)">
            <summary> Collect all the planes in this and sort by m_CoordinateDisplay. </summary>
            <param name="coordinateDisplay"> The coordinate display (MILL_COORD_X, LATHE_COORD_X, LATHE_COORD_D). </param>
            <returns> # of planes found and copied into planesArray. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanesSortedByName(System.Boolean)">
            <summary> Collect all the planes in this and sort by name. </summary>
            <param name="ascending"> true = sort ascending, false = descending. </param>
            <returns> # of planes found and copied into planesArray. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanePtrs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Collect all the planes in this that match the given IDs in planeIDs. </summary>
            <param name="planeIDs">				  Array of plane ID's to match. </param>
            <param name="includeTemporaryPlanes"> True to include, false to exclude the temporary planes. </param>
            <returns> # of planes found and copyied into planesArray. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanePtrs(PlaneClass,System.Boolean)">
            <summary> Collect pointers to all the planes in this. </summary>
            <param name="planeClass">			  The plane class. </param>
            <param name="includeTemporaryPlanes"> True to include, false to exclude the temporary planes. </param>
            <returns> # of planes found and copyied into planesArray. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanePtrs(System.Boolean)">
            <summary> Collect pointers to all the planes in this. </summary>
            <param name="includeTemporaryPlanes"> True to include, false to exclude the temporary planes. </param>
            <returns> vector of const Plane pointers. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanes(System.Boolean)">
            <summary> Collect and return copies of all the named planes in this. </summary>
            <param name="includeTemporaryPlanes"> True to include temporary planes, false to exclude. </param>
            <returns> # of planes found and copyied into planesArray. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanePtrsByGeometryIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect all the planes referencing geometry ID's. </summary>
            <param name="entIDs"> Array of entity ID's. </param>
            <returns> vector of planes that reference given geometry IDs in entIDs. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckAndFixMatrixInPlane(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Check and fix invalid matrix in this. </summary>
            <param name="thePlane">		   the plane to check. </param>
            <param name="setToTopOnError"> true = set matrix to TOP if found invalid. </param>
            <param name="warn">			   (Optional) true = debug warning. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckViewSheetPlanes(System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> Validate all view sheets plane info, create new Planes and assign as needed. </summary>
            <param name="createIfNeeded"> (Optional) true = create a new Plane if needed. </param>
            <param name="useMatching">    (Optional) true = check for matching Plane first before creating a new one. </param>
            <param name="pChangeFlag">    (Optional) pointer to change flag; will be set to type of change
							  that occured (PLANES_COMPARE_SAME, PLANES_COMPARE_CHANGED, PLANES_COMPARE_REMOVED, PLANES_COMPARE_MATCH_SUPPLIED) </param>
            <returns> return # of operation whose Plane assignments were changed. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckViewEnt(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DbViewMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> Validate an view_ent, create new Plane and assign to view_ent if needed. </summary>
            <param name="viewEnt">		  The op_view to validate. </param>
            <param name="dbViewMap">	  The database view map. </param>
            <param name="createIfNeeded"> (Optional) true = create a new Plane if needed. </param>
            <param name="useMatching">    (Optional) true = check for matching Plane first before creating a new one. </param>
            <param name="pChangeFlag">    (Optional) pointer to change flag; will be set to type of change that occured
							  (PLANES_COMPARE_SAME, PLANES_COMPARE_CHANGED, PLANES_COMPARE_REMOVED,
							  PLANES_COMPARE_MATCH_SUPPLIED) </param>
            <returns> return Plane assigned to view_ent. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckOperationPlanes(MastercamPlanes.AssignmentPriority,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> Validate all 3 op_view's in all operations, create new Planes and assign as needed. </summary>
            <param name="assignmentPriority"> Plane ID or matrix/origin pair has priority. </param>
            <param name="pChangeFlag">		  [in,out] (Optional) pointer to change flag; will be set to type of change that
								  occured (PLANES_COMPARE_SAME, PLANES_COMPARE_CHANGED, PLANES_COMPARE_REMOVED,
								  PLANES_COMPARE_MATCH_SUPPLIED) </param>
            <returns> return # of operation whose Plane assignments were changed. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckOperationPlanes(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes.AssignmentPriority,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> Validate all 3 op_view's in the operation, create new Planes and assign as needed. </summary>
            <param name="theOp">			  [in,out] The operation to validate its WCS, Tplane and Cplane op_view's. </param>
            <param name="assignmentPriority"> Plane ID or matrix/origin pair has priority. </param>
            <param name="pChangeFlag">		  [in,out] (Optional) pointer to change flag; will be set to type of change that
								  occured (PLANES_COMPARE_SAME, PLANES_COMPARE_CHANGED, PLANES_COMPARE_REMOVED,
								  PLANES_COMPARE_MATCH_SUPPLIED) </param>
            <returns> return # of operations updated. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckOperationPlane(MastercamPlanes.AssignmentPriority,op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> Validate an op_view, create new Plane and assign to op_view if needed. </summary>
            <param name="assignmentPriority"> Plane ID or matrix/origin pair has priority. </param>
            <param name="opView">			  The op_view to validate. </param>
            <param name="whichPlane">		  the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="createIfNeeded">	  (Optional) true = create a new Plane if needed. </param>
            <param name="useMatching">		  (Optional) true = check for matching Plane first before creating a new one. </param>
            <param name="pChangeFlag">		  (Optional) pointer to change flag; will be set to type of change that occured
								  (PLANES_COMPARE_SAME, PLANES_COMPARE_CHANGED, PLANES_COMPARE_REMOVED,
								  PLANES_COMPARE_MATCH_SUPPLIED) </param>
            <returns> return Plane assigned to op_view. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckGroupPlanes(MastercamPlanes.AssignmentPriority)">
            <summary> Validate planes stored in groups, create new Planes and assign as needed. </summary>
            <param name="assignmentPriority"> Plane ID or matrix/origin pair has priority. </param>
            <returns> return # of groups updated. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckGroupPlane(MastercamPlanes.AssignmentPriority,group_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> Validate an grpView, create new Plane and assign to grpView if needed. </summary>
            <param name="assignmentPriority"> Plane ID or matrix/origin pair has priority. </param>
            <param name="grpView">			  The grpView to validate. </param>
            <param name="createIfNeeded">	  (Optional) true = create a new Plane if needed. </param>
            <param name="pChangeFlag">		  (Optional) pointer to change flag; will be set to type of change that occured
								  (PLANES_COMPARE_SAME, PLANES_COMPARE_CHANGED, PLANES_COMPARE_REMOVED,
								  PLANES_COMPARE_MATCH_SUPPLIED) </param>
            <returns> return Plane assigned to grpView. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckReservedPlane(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> Check reserved plane info, create new if instructed. </summary>
            <param name="thePlane">		  The plane to check. </param>
            <param name="createIfNeeded"> (Optional) true = create a new Plane if needed. </param>
            <param name="pChangeFlag">    (Optional) pointer to change flag; will be set to type of change
							  that occured (PLANES_COMPARE_SAME, PLANES_COMPARE_CHANGED, PLANES_COMPARE_REMOVED, PLANES_COMPARE_MATCH_SUPPLIED) </param>
            <returns> return true if plane is a reserved plane with all valid data. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckPlane(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> Check a plane's matrix and origin, find matching or create new if instructed. </summary>
            <param name="thePlane">		  The plane to check. </param>
            <param name="checkID">		  (Optional) true = set ID to 0 if plane with the same ID does not exist. </param>
            <param name="checkReserved">  (Optional) if plane is reserved, validiate data for current db. </param>
            <param name="createIfNeeded"> (Optional) true = create a new Plane if needed. </param>
            <param name="useMatching">    (Optional) true = check for matching Plane first before creating a new one. </param>
            <param name="useParallel">    (Optional) true = check for parallel Plane first before creating a new one. </param>
            <param name="pChangeFlag">    (Optional) pointer to change flag; will be set to type of change that occured
							  (PLANES_COMPARE_SAME, PLANES_COMPARE_CHANGED, PLANES_COMPARE_REMOVED,
							  PLANES_COMPARE_MATCH_SUPPLIED) </param>
            <returns> return true if valid plane. </returns>
        </member>
        <member name="M:MastercamPlanes.AddStandardMatrices">
            <summary> Adds standard matrices to this if they don't already exist. </summary>
        </member>
        <member name="M:MastercamPlanes.GetStandardMatrices">
            <summary> Gets const reference to the standard 20 matrices. </summary>
            <returns> The standard matrices. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildReservedPlane(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build a named plane by a reserved name, return array index if it already exists. </summary>
            <param name="theName">  the name to check/build. </param>
            <param name="thePlane"> the Plane to build. </param>
            <returns> return 1 if it already exists, 0 if not, -1 for error. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildReservedPlane(ReservedPlanes.TypeID,Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build a named plane by a reserved ID, return array index if it already exists. </summary>
            <param name="typeID">   the ID to check/build. </param>
            <param name="thePlane"> [in,out] the Plane to build. </param>
            <returns> return 1 if it already exists, 0 if not, -1 for error. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildReservedPlane(ReservedPlanes.ResInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build a named plane by a reserved plane class, return array index if it already exists. </summary>
            <param name="resInfo">  Reserved plane info. </param>
            <param name="thePlane"> [in,out] the Plane to build. </param>
            <returns> return 1 if it already exists, 0 if not, -1 for error. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildReservedPlane(ReservedPlanes.ResInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build a system matrix by a reserved plane class, return array index if it already exists. </summary>
            <param name="resInfo">  reserved plane info. </param>
            <param name="thePlane"> the PlaneBase class to build. </param>
            <returns> return 1 if it already exists, 0 if not, -1 for error. </returns>
        </member>
        <member name="T:MastercamPlanes.ResPlaneCode">
            <summary> Return code for BuildReservedPlane() </summary>
        </member>
        <member name="M:MastercamPlanes.RemoveReservedPlanes(System.Boolean)">
            <summary> Remove all reserved planes from this. </summary>
            <param name="checkUsage"> true = first check if any reserved planes are used before deleting them. </param>
            <returns> Return planes update code PlanesUpdated::Updated or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.GetReservedID(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return ID of reserved plane with the given name. </summary>
            <param name="theName"> the Plane name to check. </param>
            <returns> Return reserved ID of reserved plane with the given name. </returns>
        </member>
        <member name="M:MastercamPlanes.GetLatheNames">
            <summary> Gets lathe tplane names map. </summary>
            <returns> The lathe tplane names map. </returns>
        </member>
        <member name="M:MastercamPlanes.UpdateReservedNames(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the reserved names of this to the contents of obj. </summary>
            <param name="obj"> the planes to copy reserved names from. </param>
        </member>
        <member name="M:MastercamPlanes.GetReservedName(ReservedPlanes.TypeID)">
            <summary> Return name of reserved plane with the given ID. </summary>
            <param name="typeID">	  Reserved ID of plane. </param>
            <returns> Return name of reserved plane with the given ID. </returns>
        </member>
        <member name="M:MastercamPlanes.GetReservedNames(CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneClass)">
            <summary> Collect all the reserved Plane names into the given CStringArray. </summary>
            <param name="nameArray">  [in,out] Array to copy plane names into. </param>
            <param name="planeClass"> The plane class. </param>
            <returns> Return # of names collected into array. </returns>
        </member>
        <member name="M:MastercamPlanes.IsReservedName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true if the plane name is a default one. </summary>
            <param name="theName">	    the Plane name to check. </param>
            <param name="caseMismatch"> true = same name, but upper/lower case mismatch. </param>
            <returns> return true if the plane name is a default one. </returns>
        </member>
        <member name="M:MastercamPlanes.IsReservedID(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true if the plane ID is a default one. </summary>
            <param name="planeID"> the Plane ID to check. </param>
            <returns> return true if the plane ID is a default one. </returns>
        </member>
        <member name="M:MastercamPlanes.IsReservedID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return true if the plane ID is a default one. </summary>
            <param name="typeID"> the Plane ID to check. </param>
            <returns> return true if the plane ID is a default one. </returns>
        </member>
        <member name="M:MastercamPlanes.ClearReservedPlane(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> remove any the 3 attributes (Plane.m_ID, Plane.m_Name or Plane.m_Reserved) that define a plane as 'reserved'. </summary>
            <param name="thePlane"> the Plane to check. </param>
            <returns> return members cleared (RESERVED_FLAG, RESERVED_ID or RESERVED_NAME) </returns>
        </member>
        <member name="M:MastercamPlanes.IsReservedPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
return true if the plane contains a reserved ID, a reserved name or
has its m_Reserved member variable set.
</summary>
            <param name="thePlane"> the Plane to check. </param>
            <returns> return true if the plane is a default one. </returns>
        </member>
        <member name="M:MastercamPlanes.IsReservedPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
return true if the plane contains a reserved ID, a reserved name or
has its m_Reserved member variable set.
</summary>
            <param name="thePlane">		   the Plane to check. </param>
            <param name="reservedMembers"> which data members are considered reserved (RESERVED_FLAG, RESERVED_ID, RESERVED_NAME) </param>
            <param name="immediate">	   (Optional) true = return on the first violation instead of testing all 3. </param>
            <returns> return true if the plane is a default one. </returns>
        </member>
        <member name="M:MastercamPlanes.ValidateReservedPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true if the reserved plane's ID and name are set correctly. </summary>
            <param name="thePlane">	    the Plane to check. </param>
            <param name="undefMembers"> The undef members. </param>
            <returns> return true if the reserved plane's ID matches the reserved name. </returns>
        </member>
        <member name="M:MastercamPlanes.GetReservedLimit">
            <summary> return the number of default planes that were built for this. </summary>
            <returns> The reserved limit. </returns>
        </member>
        <member name="M:MastercamPlanes.GetReservedViewNumber(ReservedPlanes.TypeID)">
            <summary> Return ID of reserved plane. </summary>
            <param name="typeID"> Lathe_Z_Equals_World_Z, etc. </param>
            <returns> return view number, 0 if error. </returns>
        </member>
        <member name="M:MastercamPlanes.GetReservedViewNumber(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return ID of reserved plane. </summary>
            <param name="theName"> the plane name. </param>
            <returns> return view number, 0 if error. </returns>
        </member>
        <member name="M:MastercamPlanes.FindReservedPlaneInfo(Matrix33!System.Runtime.CompilerServices.IsConst*,CoordinateDisplayType!System.Runtime.CompilerServices.IsConst*,System.Boolean*)">
            <summary> Collect all reserved plane info that matches the given parameters. </summary>
            <param name="pMatrix33">		  A pointer to a 3x3, nullptr = all. </param>
            <param name="pCoordinateDisplay"> A pointer to the coordinate display type, nullptr = all. </param>
            <param name="pVTL">				  [in,out] (Optional) A pointer to a bool, true = VTL only, false = non-VTL,
								  nullptr = all. </param>
            <returns> std::vector matching reserved plane info. </returns>
        </member>
        <member name="M:MastercamPlanes.GetReservedPlaneInfo(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get copy of reserved Plane by name. </summary>
            <param name="theName">    the plane name. </param>
            <param name="existingID"> the plane ID if it already has been added and exists. </param>
            <returns> return copy of reserved plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetReservedPlaneInfo(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get copy of reserved Plane by long ID. </summary>
            <param name="typeID">	  ReservedPlanes::TypeID::Front, RESERVED_ID_CAXIS_UPPER_LEFT, etc. </param>
            <param name="existingID"> [in,out] the plane to fill in if it already has been added and exists. </param>
            <returns> return copy of reserved plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetLathePlaneInfo(ReservedPlanes.TypeID,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get copy of special lathe Tplane info by ID. </summary>
            <param name="typeID">	  ReservedPlanes::TypeID::Front, RESERVED_ID_CAXIS_UPPER_LEFT, etc. </param>
            <param name="existingID"> [in,out] the plane to fill in if it already has been added and exists. </param>
            <returns> return copy of reserved plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetReservedPlaneInfo(ReservedPlanes.TypeID,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get copy of reserved Plane by ID. </summary>
            <param name="typeID">	  ReservedPlanes::TypeID::Front, RESERVED_ID_CAXIS_UPPER_LEFT, etc. </param>
            <param name="existingID"> [in,out] the plane to fill in if it already has been added and exists. </param>
            <returns> return copy of reserved plane. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildReservedPlanes(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> build a list of the first 7 (or 11 for lathe) plane names. </summary>
            <param name="productMask">		   AEB_MILL, AEB_LATHE, AEB_MT or a combination of all. </param>
            <param name="saveNonReservedData"> true = save work offset, color and comment from existing. </param>
            <param name="onlyIfEmpty">		   The rebuild mode. </param>
            <param name="updateStatusBar">	   Update coordinate mode in graphics area. </param>
            <param name="initReservedNames">   (Optional) List of names of the init reserved. </param>
            <param name="checkUsage">		   (Optional) true = make sure they're not used before deleting old ones. </param>
            <returns> return # of names in m_ReservedNames. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildReservedPlanes(CoordinateDisplayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> build a list of the first 7 (or 11 for lathe) plane names. </summary>
            <param name="coordinateDisplay">   CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or
								   CoordinateDisplayType::LatheD. </param>
            <param name="saveNonReservedData"> true = save work offset, color and comment from existing. </param>
            <param name="onlyIfEmpty">		   The rebuild mode. </param>
            <param name="updateStatusBar">	   Update coordinate mode in graphics area. </param>
            <param name="initReservedNames">   (Optional) List of names of the init reserved. </param>
            <param name="checkUsage">		   (Optional) true = make sure they're not used before deleting old ones. </param>
            <returns> return # of names in m_ReservedNames. </returns>
        </member>
        <member name="M:MastercamPlanes.CountWorkOffsetNo(System.Int32!System.Runtime.CompilerServices.IsLong,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Count the number of matching work offsets. </summary>
            <param name="woffNo">    Work offset value to look for. </param>
            <param name="m33">		 The 3x3 matrix to match. </param>
            <param name="wOriginPt"> The origin pt in world coordinates to match. </param>
            <returns> # of matching work offsets found. </returns>
        </member>
        <member name="M:MastercamPlanes.GetWorkOffsetNodes(std.vector&lt;WorkOffsetNode,std.allocator&lt;WorkOffsetNode&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect all the work offset info nodes. </summary>
            <param name="wNodeArray"> Array to copy work offset info nodes into. </param>
            <returns> Size of wNodeArray. </returns>
        </member>
        <member name="M:MastercamPlanes.GetWorkOffsetNodes(System.Int32!System.Runtime.CompilerServices.IsLong,std.vector&lt;WorkOffsetNode,std.allocator&lt;WorkOffsetNode&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Collect all the work offset info nodes used with the given work offset value. </summary>
            <param name="woffNo">	   Work offset value to look for. </param>
            <param name="wNodeArray">  Array to copy work offset info nodes into. </param>
            <param name="excludeOpID"> (Optional) Exclude the operation with this ID from the search. </param>
            <returns> Size of wNodeArray. </returns>
        </member>
        <member name="M:MastercamPlanes.WorkOffsetInUse(System.Int32!System.Runtime.CompilerServices.IsLong,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Return true if work offset value is already being used with a matrix and origin other than the given ones. </summary>
            <param name="woffNo">	   Work offset value to look for. </param>
            <param name="m33">		   The 3x3 matrix to match. </param>
            <param name="wOriginPt">   The origin pt in world coordinates to match. </param>
            <param name="excludeOpID"> (Optional) Exclude the operation with this ID from the search. </param>
            <returns> true if work offset value is already being used with a matrix and origin other than the given ones. </returns>
        </member>
        <member name="M:MastercamPlanes.GetWorkOffset(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Get the matching work offset or calculate the next unused work offset value if a matching one is not found. </summary>
            <param name="m33">		 The 3x3 matrix to match. </param>
            <param name="wOriginPt"> The origin pt in world coordinates to match. </param>
            <param name="startVal">  (Optional) First valid work offset value. </param>
            <param name="incVal">    (Optional) number to increment work offset value until an unused value is found. </param>
            <returns> return matching or new unique work offset value. </returns>
        </member>
        <member name="M:MastercamPlanes.GetNextWorkOffset(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Calculate the next unused work offset value. </summary>
            <param name="startVal"> (Optional) First valid work offset value. </param>
            <param name="incVal">   (Optional) number to increment work offset value until an unused value is found. </param>
            <returns> return matching work offset value, -1 (WOFF_OFF) if none found. </returns>
        </member>
        <member name="M:MastercamPlanes.GetMatchingWorkOffset(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Return work offset value stored in Planes, operations or binary NCI that matches given matrix and origin. </summary>
            <param name="m33">		   The 3x3 matrix to match. </param>
            <param name="wOriginPt">   The origin pt in world coordinates to match. </param>
            <param name="excludeOpID"> (Optional) Exclude the operation with this ID from the search. </param>
            <returns> return matching work offset value, -1 (WOFF_OFF) if none found. </returns>
        </member>
        <member name="M:MastercamPlanes.GetMatchingWorkOffset(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Return work offset value stored in Planes, operations or binary NCI that matches matrix and origin in the given plane. </summary>
            <param name="thePlane">    The plane to match. </param>
            <param name="excludeOpID"> (Optional) Exclude the operation with this ID from the search. </param>
            <returns> return matching work offset value, -1 (WOFF_OFF) if none found. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckOperationTviewLathe(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validate tool plane assigned to the operation. </summary>
            <param name="theOp"> the operation containing the toolplane to check. </param>
            <returns> return true if validation completed successfully. </returns>
        </member>
        <member name="M:MastercamPlanes.GetNextLatheToolViewName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Create a unique plane name when build lathe specific planes. </summary>
            <param name="toolViewName"> The base name. </param>
            <param name="nextViewName"> The next unique name. </param>
            <returns> Return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.CanLatheToolViewBeDeleted(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check to see if tool plane is not used anywhere other than the given operation and can be deleted. </summary>
            <param name="theOp">    operation that contains the tool plane to check. </param>
            <param name="deleteOK"> set to true if tool plane can be deleted. </param>
            <returns> return false for error, true if plane found. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckLatheToolViewChanged(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare parameters within the operation's views, return true if any have changed. </summary>
            <param name="theOp"> the operation to check its WCS plane, tool plane and construction plane. </param>
            <param name="m33">   The matrix. </param>
            <returns> Return true if any has changed from what's store in this. </returns>
        </member>
        <member name="M:MastercamPlanes.GetMatchingLatheTplane(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find a lathe tplane named view that matches what is needed. </summary>
            <param name="theName">    name substring filter to match. </param>
            <param name="opView">	  op_view containing matrix and origin to match. </param>
            <returns> matching Plane on success, zero plane (plane with an ID of 0) if no match found. </returns>
        </member>
        <member name="M:MastercamPlanes.ViewNumberToVTLViewNumber(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Given a view number get the vtl view number, it might be different. </summary>
            <param name="viewNumber"> View number. </param>
            <returns> Vtl view number. </returns>
        </member>
        <member name="M:MastercamPlanes.VTLViewNumberToViewNumber(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Given a vtl view number get the view number, it might be different. </summary>
            <param name="vtlViewNumber"> Potential vtl view number. </param>
            <returns> View number. </returns>
        </member>
        <member name="M:MastercamPlanes.CalculateDependentPlane(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> recalculate a relative Plane. </summary>
            <param name="thePlane"> the Plane's to recalculate. </param>
            <returns> return true if Plane recalculated successfully. </returns>
        </member>
        <member name="M:MastercamPlanes.Replace(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CInterrogateMastercamFile*)">
            <summary> overwrite a Plane in the array. </summary>
            <param name="thePlane"> the Plane's to overwrite with (ID's must match) </param>
            <param name="pInFile">  (Optional) if !nullptr, mark all dependent toolpath operations dirty. </param>
            <returns> Return planes update code PlanesUpdated::Updated or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.GetParent(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Get const Plane's parent reference. </summary>
            <param name="planeID"> the Plane's ID. </param>
            <returns> const Plane reference. </returns>
        </member>
        <member name="M:MastercamPlanes.DirtyWarning(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> temporary for debug only. </summary>
            <param name="thePlane"> the plane. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MastercamPlanes.MakePlaneNameForListControl(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Makes plane name for list control (may include parent plane name). </summary>
            <param name="pPlane"> The plane to build a list control name for. </param>
            <returns> A CString of what to display in the list control. </returns>
        </member>
        <member name="M:MastercamPlanes.GetLinkablePlaneIDs(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a set of linkable plane IDs from the given plane ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> The linkable plane IDs. </returns>
        </member>
        <member name="M:MastercamPlanes.UnlinkPlane(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Remove link from dependent plane. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:MastercamPlanes.LinkPlane(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Makes one plane dependent on another. </summary>
            <param name="parentID">    Identifier for the parent plane. </param>
            <param name="dependentID"> Identifier for the dependent plane. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MastercamPlanes.GetRegenerationOrder">
            <summary> Gets the regeneration order for all the named planes. </summary>
            <returns> List of named plane ID's in the regeneration order. </returns>
        </member>
        <member name="M:MastercamPlanes.GetDependentPlaneIDs(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> collect the array locations of all the planes that use the given ID as a parent. </summary>
            <param name="planeID"> A valid plane ID. </param>
            <returns> vector of dependent plane IDs. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneEditAllowed(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> return true if the plane can be edited (not reserved, etc) </summary>
            <param name="thePlane">  the Plane to check. </param>
            <param name="checkLock"> check locked state, if locked do not allow editing. </param>
            <returns> true if the plane can be edited. </returns>
        </member>
        <member name="M:MastercamPlanes.ValidatePlanes(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,CWnd*)">
            <summary> Validate/regenerate all the Planes. </summary>
            <param name="regenMode">  regeneration mode (REGEN_NATURAL, etc) </param>
            <param name="justDirty">  regenenerate just the dirty Planes. </param>
            <param name="pParentWnd"> (Optional) pointer to parent window to display report dialog, nullptr if you don't want to display report. </param>
            <returns> Return # of Planes that were not successful in regenerating. </returns>
        </member>
        <member name="M:MastercamPlanes.ValidatePlanes(System.Int32!System.Runtime.CompilerServices.IsLong,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Validate/regenerate all the Planes with ID's that are found in planeIDs. </summary>
            <param name="regenMode">  regeneration mode (REGEN_NATURAL, etc) </param>
            <param name="planeIDs">   array of Plane ID's to regenerate, empty array to regenenerate all Planes. </param>
            <param name="pParentWnd"> (Optional) pointer to parent window to display report dialog, nullptr if you don't want to display report. </param>
            <returns> Return # of Planes that were not successful in regenerating. </returns>
        </member>
        <member name="M:MastercamPlanes.ValidatePlane(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,EntityEptrMap!System.Runtime.CompilerServices.IsConst*)">
            <summary> validate all the given Plane and the ID's data. </summary>
            <param name="planeID">		 the Plane's to check. </param>
            <param name="regenMode">	 regeneration mode (REGEN_NATURAL, etc) </param>
            <param name="doDepdendents"> True to do also validate any depdendent planes. </param>
            <param name="pGeomMap">		 Pointer to geometry entities eptr/ID map, nullptr will create one if regenerate is
							 set to true. </param>
            <returns> return list of plane ID's validated (the requested one an any dependents). </returns>
        </member>
        <member name="M:MastercamPlanes.ValidatePlane(System.Boolean,Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,EntityEptrMap!System.Runtime.CompilerServices.IsConst*)">
            <summary> validate all the given Plane's data. </summary>
            <param name="checkID">		 true = check for valid ID. </param>
            <param name="thePlane">		 [in,out] the Plane's to check. </param>
            <param name="regenMode">	 regeneration mode (REGEN_NATURAL, etc) </param>
            <param name="doDepdendents"> True to do also validate any depdendent planes. </param>
            <param name="pGeomMap">		 Pointer to geometry entities eptr/ID map, nullptr will create one if regenerate is set to true. </param>
            <returns> return list of plane ID's validated (the requested one an any dependents). </returns>
        </member>
        <member name="M:MastercamPlanes.GetActivePlaneDescriptions(System.Int32,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the descriptions of all the active Planes. </summary>
            <param name="nPlaces">			Display accuracy for origin coordinates. </param>
            <param name="shortDescription">	CString to populate with truncated plane descriptions. </param>
            <returns> return Plane descriptions. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActivePlaneDescriptions(System.Int32)">
            <summary> get the descriptions of all the active Planes. </summary>
            <param name="nPlaces">		  (Optional) display accuracy for origin coordinates. </param>
            <returns> return Plane descriptions. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlaneDescription(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,Plane!System.Runtime.CompilerServices.IsConst*)">
            <summary> get the plane with the given ID's description. </summary>
            <param name="planeID">			 ID of plane to get. </param>
            <param name="nPlaces">			 display accuracy for origin coordinates. </param>
            <param name="originID">			 (Optional) ID if origin to get. </param>
            <param name="includeOriginMode"> (Optional) type of origin description (-1=origin in view coords, 0=no origin,
								 1=origin in world coords) </param>
            <param name="pRelativeToWcs">    (Optional) make description relative to pRelativeToWcs. </param>
            <returns> return Plane description. </returns>
        </member>
        <member name="M:MastercamPlanes.GetCoordinateDisplayDescription(CoordinateDisplayType)">
            <summary> get the active coordinate display description. </summary>
            <param name="coordinateDisplay"> (Optional) CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> return description. </returns>
        </member>
        <member name="M:MastercamPlanes.GetRelativeToWcs(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return a copy of plane with the given name relative to the active WCS (WCS is subtracted) </summary>
            <param name="name"> Name of the Plane to subtract the WCS from. </param>
            <returns> return copy of the plane relative to the active WCS. </returns>
        </member>
        <member name="M:MastercamPlanes.GetRelativeToWcs(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return a copy of plane with the given ID relative to the active WCS (WCS is subtracted) </summary>
            <param name="planeID"> ID of the Plane to subtract the WCS from. </param>
            <returns> return copy of the plane relative to the active WCS. </returns>
        </member>
        <member name="M:MastercamPlanes.GetRelativeToWcs(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return a copy of the given plane relative to the active WCS (WCS is subtracted) </summary>
            <param name="thePlane"> the Plane to subtract the WCS from. </param>
            <returns> return copy of the plane relative to the active WCS. </returns>
        </member>
        <member name="M:MastercamPlanes.ActivePlaneIsReserved(PlaneType)">
            <summary> Return true if active Plane is a reserved Plane. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> Return true if active Plane is a reserved Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.ActiveOriginIsReserved(PlaneType)">
            <summary> Return true if active origin is from a reserved Plane. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> Return true if active origin is from a reserved Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.ActiveOriginIsOn(PlaneType)">
            <summary> Return true if active origin is on (other than 0,0,0) </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> return true if origin for plane type is something other than X0 Y0 Z0. </returns>
        </member>
        <member name="M:MastercamPlanes.ActiveOriginIsOn(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Return true if active origin is on (other than 0,0,0) </summary>
            <param name="whichPlane">  the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="point">	   p_3d to fill in with origin info. </param>
            <param name="testTol">	   (Optional) tolerance to determine if on, else uses P3DS.GetTol () </param>
            <param name="scaleFactor"> (Optional) scale factor to determine if on, else uses 1.0. </param>
            <returns> return true if origin for plane type is something other than X0 Y0 Z0. </returns>
        </member>
        <member name="M:MastercamPlanes.ActiveOriginIsOn(PlaneType,P3DS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Return true if active origin is on (other than 0,0,0) </summary>
            <param name="whichPlane">  the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="thePoint">    P3DS to fill in with origin info. </param>
            <param name="testTol">	   (Optional) tolerance to determine if on, else uses P3DS.GetTol () </param>
            <param name="scaleFactor"> (Optional) scale factor to determine if on, else uses 1.0. </param>
            <returns> return true if origin for plane type is something other than X0 Y0 Z0. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveName(PlaneType)">
            <summary> Get the plane name of an active plane. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> return plane name. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveMatrix(PlaneType,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Get copy of the 3x3 matrix used in active plane. </summary>
            <param name="whichPlane">    the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="m33">			 matrix_33 to fill in. </param>
            <param name="relativeToWcs"> (Optional) return in world coordinates relative to the active WCS. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveMatrix(PlaneType,System.Boolean)">
            <summary> Get copy of the 3x3 matrix used in active plane. </summary>
            <param name="whichPlane">    the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="relativeToWcs"> return in world coordinates relative to the active WCS. </param>
            <returns> return copy of the 3x3 matrix used in active plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveMatrix(PlaneType)">
            <summary> Get copy of the 3x3 matrix used in active plane. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> return copy of the 3x3 matrix used in active plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveOrigin_p_3d(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Get copy of point in p_3d format in world coordinates used in active origin. </summary>
            <param name="whichPlane">    the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="p3d">			 p_3d to fill in. </param>
            <param name="relativeToWcs"> (Optional) return in world coordinates relative to the active WCS. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveOrigin(PlaneType,System.Boolean)">
            <summary> get copy of active origin in world coordinates relative to the active WCS. </summary>
            <param name="whichPlane">    the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="relativeToWcs"> (Optional) true = return in world coordinates relative to the active WCS, false = in world coordinates. </param>
            <returns> return a copy of the active system origin. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveOriginInViewCoordinates(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> get copy of active origin in world or view coordinates. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="p3d">		  p_3d to fill in. </param>
            <param name="viewNo">	  (Optional) the view # the coordinates should be in, -1 for whichPlane's view #. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveOriginInViewCoordinates(PlaneType,System.Int32)">
            <summary> get copy of active origin in view coordinates. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="viewNo">	  (Optional) the view # the coordinates should be in, -1 for whichPlane's view #. </param>
            <returns> return copy of active origin in world or view coordinates. </returns>
        </member>
        <member name="M:MastercamPlanes.SubtractActiveOriginInViewCoordinates(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> subtract the active origin from the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="ptIN">		  p_3d to subtract the origin from. </param>
            <param name="ptOUT">	  p_3d to output new values to. </param>
            <param name="viewNo">	  the view # the coordinates should be in, -1 for whichPlane's view #. </param>
        </member>
        <member name="M:MastercamPlanes.SubtractActiveOriginInViewCoordinates(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> subtract the active origin from the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="pt">		  p_3d to subtract the origin from. Replaced with result </param>
            <param name="viewNo">	  the view # the coordinates should be in, -1 for whichPlane's view #. </param>
        </member>
        <member name="M:MastercamPlanes.SubtractActiveOriginInViewCoordinates(PlaneType,p_3d*,p_3d*,System.Int32)">
            <summary> subtract the active origin from the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="pIN">		  p_3d to subtract the origin from. </param>
            <param name="pOUT">		  (Optional) p_3d to output new values to; if nullptr, output to pIN. </param>
            <param name="viewNo">	  (Optional) the view # the coordinates should be in, -1 for whichPlane's view #. </param>
        </member>
        <member name="M:MastercamPlanes.AddActiveOriginInViewCoordinates(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> add the active origin to the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="ptIN">		  p_3d to add the origin to. </param>
            <param name="ptOUT">	  p_3d to output new values to. </param>
            <param name="viewNo">	  the view # the coordinates should be in, -1 for whichPlane's view #. </param>
        </member>
        <member name="M:MastercamPlanes.AddActiveOriginInViewCoordinates(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> add the active origin to the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="pt">		  p_3d to add the origin to. Replaced with result. </param>
            <param name="viewNo">	  the view # the coordinates should be in, -1 for whichPlane's view #. </param>
        </member>
        <member name="M:MastercamPlanes.AddActiveOriginInViewCoordinates(PlaneType,p_3d*,p_3d*,System.Int32)">
            <summary> add the active origin to the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="pIN">		  p_3d to add the origin to. </param>
            <param name="pOUT">		  (Optional) p_3d to output new values to; if nullptr, output to pIN. </param>
            <param name="viewNo">	  (Optional) the view # the coordinates should be in, -1 for whichPlane's view #. </param>
        </member>
        <member name="M:MastercamPlanes.SubtractActiveOrigin(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtract the active origin from the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="ptIN">		  p_3d to subtract the origin from. </param>
            <param name="ptOUT">	  p_3d to output new values to. </param>
        </member>
        <member name="M:MastercamPlanes.SubtractActiveOrigin(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtract the active origin from the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="pt">		  p_3d to subtract the origin from. Replaced with result. </param>
        </member>
        <member name="M:MastercamPlanes.SubtractActiveOrigin(PlaneType,p_3d*,p_3d*)">
            <summary> subtract the active origin from the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="pIN">		  p_3d to subtract the origin from. </param>
            <param name="pOUT">		  (Optional) p_3d to output new values to; if nullptr, output to pIN. </param>
        </member>
        <member name="M:MastercamPlanes.AddActiveOrigin(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> add the active origin to the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="ptIN">		  p_3d to add the origin to. </param>
            <param name="ptOUT">	  p_3d to output new values to. </param>
        </member>
        <member name="M:MastercamPlanes.AddActiveOrigin(PlaneType,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> add the active origin to the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="pt">		  p_3d to add the origin to. Replaced with result. </param>
        </member>
        <member name="M:MastercamPlanes.AddActiveOrigin(PlaneType,p_3d*,p_3d*)">
            <summary> add the active origin to the given p_3d. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="pIN">		  p_3d to add the origin to. </param>
            <param name="pOUT">		  (Optional) p_3d to output new values to; if nullptr, output to pIN. </param>
        </member>
        <member name="M:MastercamPlanes.GetActiveOriginID(PlaneType)">
            <summary> Get ID of Plane used in active origin. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> ID Plane used in active origin. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveOriginPtr(PlaneType)">
            <summary> Get pointer to Plane used in active origin. </summary>
            <param name="whichPlane"> the active origin you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> pointer to Plane used in active origin. </returns>
        </member>
        <member name="M:MastercamPlanes.ActiveOriginLocked(PlaneType,System.Boolean)">
            <summary> return true if the active Plane's origin is locked. </summary>
            <param name="whichPlane"> the active plane to check (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="warn">		  (Optional) true = display locked warning. </param>
            <returns> return true if the active Plane's origin is locked. </returns>
        </member>
        <member name="M:MastercamPlanes.ActiveMatrixLocked(PlaneType,System.Boolean)">
            <summary> return true if the active Plane's matrix is locked. </summary>
            <param name="whichPlane"> the active plane to check (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="warn">		  (Optional) true = display locked warning. </param>
            <returns> return true if the active Plane's matrix is locked. </returns>
        </member>
        <member name="M:MastercamPlanes.UnlockActiveMatrix(PlaneType)">
            <summary> Unlock the WPLANE, TPLANE, CPLANE or GPLANE matrix. </summary>
            <param name="whichPlane"> the active origin to set (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.LockActiveMatrix(PlaneType)">
            <summary> Lock the WPLANE, TPLANE, CPLANE or GPLANE matrix. </summary>
            <param name="whichPlane"> the active origin to set (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.UnlockActiveOrigin(PlaneType)">
            <summary> Unlock the WPLANE, TPLANE or CPLANE origin. </summary>
            <param name="whichPlane"> the active origin to set (CPLANE, TPLANE, WCSPLANE) </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.LockActiveOrigin(PlaneType)">
            <summary> Lock the WPLANE, TPLANE or CPLANE origin. </summary>
            <param name="whichPlane"> the active origin to set (CPLANE, TPLANE, WCSPLANE) </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.SetActiveLock(PlaneType,System.Int32,System.Int32)">
            <summary> Set the given active plane and/or origin's lock state. </summary>
            <param name="whichPlane"> the active Plane type to set (CPLANE, TPLANE, WCSPLANE or GPLANE) </param>
            <param name="lockMatrix"> -1 to unlock, 1 to lock, 0 to skip. </param>
            <param name="lockOrigin"> -1 to unlock, 1 to lock, 0 to skip. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveLock(PlaneType)">
            <summary> Get the given active plane and/or origin's lock state. </summary>
            <param name="whichPlane"> the active Plane type to set (CPLANE, TPLANE, WCSPLANE or GPLANE) </param>
            <returns> returns the lock state (SystemPlanes::LOCK_ORIGIN_ON, etc) </returns>
        </member>
        <member name="M:MastercamPlanes.CheckActivePlaneAssignments">
            <summary> Check the active plane assignments. Create planes if necessary.</summary>
            <returns> # of planes added. </returns>
        </member>
        <member name="M:MastercamPlanes.RemoveNoUsageCheck(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes the a plane from the map without any usage check. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> Returns true if succesfully removed. Used only in SaveRestoreActivePlanes::Restore() </returns>
        </member>
        <member name="M:MastercamPlanes.SetPreviousOrigin(PlaneType,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set the previous active plane. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="pt">		  The point. </param>
        </member>
        <member name="M:MastercamPlanes.SetPreviousMatrix(PlaneType,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set the previous active plane. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="m33">		  The third m 3. </param>
        </member>
        <member name="M:MastercamPlanes.QuickCplaneConflictResolution(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Checks if given planeID is the Quick Cplane ID since the Quick Cplane cannot be used as the Tplane or WCS
		  in active planes or assigned to toolpath operations.  If it is, a plane with a matching matrix/origin
		  will be searched for but if not found a new plane will be created with the same matrix/origin as the
		  Quick Cplane. </summary>
            <param name="planeID"> Identifier for the plane (or a newly created one). </param>
            <returns> Pointer to the plane at planeID. </returns>
        </member>
        <member name="M:MastercamPlanes.RemoveQuickCplane">
            <summary> Removes the Quick Cplane. </summary>
        </member>
        <member name="M:MastercamPlanes.SetQuickCplaneID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the value of m_QuickCplaneID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> Previous value of m_QuickCplaneID. </returns>
        </member>
        <member name="M:MastercamPlanes.GetQuickCplaneID">
            <summary> Gets the value of m_QuickCplaneID. </summary>
            <returns> the value of m_QuickCplaneID. </returns>
        </member>
        <member name="M:MastercamPlanes.SetNotifyUserApp(System.Boolean)">
            <summary> Sets m_ActivePlanes.m_NotifyUserApp to send messages when active matrix or origin changes. </summary>
            <param name="on"> true to notify, false to not. </param>
            <returns> Previous value of m_ActivePlanes.m_NotifyUserApp. </returns>
        </member>
        <member name="M:MastercamPlanes.SelectPlaneGnomon(CWnd*,MastercamPlanes.FindFromPlaneType)">
            <summary> Select a Plane gnomon from the graphics screen. </summary>
            <param name="pSuspendWindow"> (Optional) CWnd * to a window to hide and then restore. </param>
            <param name="findType">		  (Optional) the planes to select from (all, (the default) displayed, or selected) </param>
            <returns> Plane ID of selected icon. </returns>
        </member>
        <member name="T:MastercamPlanes.FindFromPlaneType">
            <summary> Values that represent the planes to select a plane from.  Choices are
		  all planes, planes currently selected in the planes manager, or planes with 
		  their 'display' property set. </summary>
        </member>
        <member name="M:MastercamPlanes.IsStatusBarPlaneLabel(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'name' is status bar plane label found in m_StatusBarPlaneLabels. </summary>
            <param name="name"> The name. </param>
            <returns> true if status bar plane label, false if not. </returns>
        </member>
        <member name="M:MastercamPlanes.IsGviewSpinning">
            <summary> Return true if we're spinning the gview.  m_CurrentDB must == true. </summary>
            <returns> true if gview spinning, false if not. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActivePlanePtr(PlaneType)">
            <summary> Get constant ptr to active plane. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <returns> constant ptr to active plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPreviousViewNo(PlaneType)">
            <summary> return view # of previously active plane type. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <returns> return view # of previously active plane. </returns>
        </member>
        <member name="M:MastercamPlanes.SetPreviousPlane(PlaneType,Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ViewportInfo!System.Runtime.CompilerServices.IsConst*)">
            <summary> Set the previous active plane. </summary>
            <param name="whichPlane">    the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="thePlane">		 The plane to set. </param>
            <param name="pViewportInfo"> (Optional) pointer to graphics viewport info. </param>
        </member>
        <member name="M:MastercamPlanes.GetPreviousOrigin(PlaneType)">
            <summary> Get copy of the previously active origin. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <returns> copy of the previously active origin. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPreviousMatrix(PlaneType)">
            <summary> Get copy of the previously active matrix. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <returns> copy of the previously active matrix. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPreviousPlane(PlaneType,ViewportInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the previous active plane. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="vpInfo">	  graphics viewport info. </param>
            <returns> copy of the previously active Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPreviousPlane(PlaneType)">
            <summary> Get copy of the previously active matrix and origin. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <returns> copy of the previously active Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveDepth(PlaneType,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the depth of the given point relative to the requested active plane origin. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="wPoint">	  The point. </param>
            <returns> the depth of the given point in the active plane relative to the active origin. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActivePlaneID(PlaneType)">
            <summary> Get the ID of the active plane. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <returns> the ID of the active plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActivePlaneName(PlaneType,System.Boolean)">
            <summary> Gets active plane name. </summary>
            <param name="whichPlane">    the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="relativeToWcs"> make matrix and origin relative to the active WCS, search for matching plane
							 and return "UNDEFINED" if no match found. </param>
            <returns> The active plane name or the matching one if relativeToWcs == true. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActivePlane(PlaneType,System.Boolean)">
            <summary> return a copy of the active system Plane. </summary>
            <param name="whichPlane">    the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="relativeToWcs"> (Optional) make matrix and origin relative to the active WCS. </param>
            <returns> return a copy of the active system Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveViewNoRelativeToWcs(PlaneType)">
            <summary> Get the active view number per system plane type. </summary>
            <param name="whichPlane"> which system plane you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> the active view number per system plane type. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveUnitVector(PlaneType,System.Int32)">
            <summary> Get the active view number per system plane type. </summary>
            <param name="whichPlane">  which system plane you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="whichVector"> which unit vector (X, Y or Z) </param>
            <returns> the active unit vector per system plane type. </returns>
        </member>
        <member name="M:MastercamPlanes.GetActiveViewNo(PlaneType)">
            <summary> Get the active view number per system plane type. </summary>
            <param name="whichPlane"> which system plane you want (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <returns> the active view number per system plane type. </returns>
        </member>
        <member name="M:MastercamPlanes.SetActive(SystemPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set active system planes object with another. </summary>
            <param name="activePlanes"> another SystemPlanes to set this active to. </param>
        </member>
        <member name="M:MastercamPlanes.GetActive">
            <summary> Get a copy of the system plans object. </summary>
            <returns> copy of the system plans object. </returns>
        </member>
        <member name="M:MastercamPlanes.SetActivePlane(PlaneType,Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set active Plane and origin from given plane. </summary>
            <param name="whichPlane"> the active Plane type (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="thePlane">   Plane to set the active plane to. </param>
            <returns> return Plane ID set (&gt;0 = valid Plane ID, 0 = unnamed plane, -1 = error) </returns>
        </member>
        <member name="M:MastercamPlanes.SetActivePlane(PlaneType,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set active Plane and origin from plane ID. </summary>
            <param name="whichPlane"> the active Plane type (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="planeID">    valid Plane ID to set the active plane to. </param>
            <returns> return Plane ID set (&gt;0 = valid Plane ID, 0 = unnamed plane, -1 = error) </returns>
        </member>
        <member name="M:MastercamPlanes.SetActivePlane(PlaneType,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set active Plane and origin with matrix and current active origin. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="m33">		  3x3 matrix to set. </param>
            <returns> return Plane ID set (&gt;0 = valid Plane ID, 0 = unnamed plane, -1 = error) </returns>
        </member>
        <member name="M:MastercamPlanes.SetActivePlane(PlaneType,ReservedPlanes.TypeID)">
            <summary> set active Plane with reserved plane ID and origin mode. </summary>
            <param name="whichPlane"> the active Plane type (CPLANE, TPLANE, GPLANE, WCSPLANE) </param>
            <param name="typeID">	  valid reserved plane type to set the active plane to. </param>
            <returns> return Plane ID set (&gt;0 = valid Plane ID, 0 = unnamed plane, -1 = error) </returns>
        </member>
        <member name="M:MastercamPlanes.SetActivePlane(PlaneType,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set active Plane with matrix and origin with point. </summary>
            <param name="whichPlane"> the Plane type (CPLANE, TPLANE, WCSPLANE, GPLANE) </param>
            <param name="m33">		  3x3 matrix to set. </param>
            <param name="wOriginPt">  origin point in world coordinates to set. </param>
            <returns> return Plane ID set (&gt;0 = valid Plane ID, 0 = unnamed plane, -1 = error) </returns>
        </member>
        <member name="M:MastercamPlanes.SetActivePlane(PlaneType,PlaneType)">
            <summary> set active Plane to another active plane. </summary>
            <param name="whichPlane"> which active plane to set (CPLANE, TPLANE, GPLANE or WCSPLANE) </param>
            <param name="fromPlane">  which active plane to set from (CPLANE, TPLANE, GPLANE or WCSPLANE) </param>
            <returns> return plane ID used to set system plane. </returns>
        </member>
        <member name="M:MastercamPlanes.SetActivePlane(PlaneType,group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set active Plane with a group's group_view. </summary>
            <param name="whichPlane"> which active plane to set (CPLANE, TPLANE or WCSPLANE) </param>
            <param name="grpView">    the group view containing the assigned Plane info. </param>
            <returns> return plane ID used to set system plane. </returns>
        </member>
        <member name="M:MastercamPlanes.SetActivePlane(PlaneType,op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set active Plane with a toolpath operation's op_view. </summary>
            <param name="whichPlane"> which active plane to set (CPLANE, TPLANE or WCSPLANE) </param>
            <param name="opView">	  the operation view containing the assigned Plane info. </param>
            <returns> return plane ID used to set system plane. </returns>
        </member>
        <member name="M:MastercamPlanes.SetActivePlanes(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set 3 active Planes with a toolpath operation (CPLANE, TPLANE and WCSPLANE. </summary>
            <param name="theOp"> toolpath operation that contains WCS, tplane &amp; cplane. </param>
            <returns> return # of system planes set. </returns>
        </member>
        <member name="M:MastercamPlanes.IsActive(System.Int32!System.Runtime.CompilerServices.IsLong,PlaneType*)">
            <summary> check if a plane is active. </summary>
            <param name="planeID">	   the ID of the plane to check. </param>
            <param name="whichPlanes"> array to set plane types is active. </param>
            <returns> return # of planes plane is active in. </returns>
        </member>
        <member name="M:MastercamPlanes.IsActive(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> check if a plane is active in any of the 4 system planes (CPLANE, TPLANE, GPLANE or WCSPLANE) </summary>
            <param name="planeID"> the ID of the plane to check. </param>
            <returns> return true if active. </returns>
        </member>
        <member name="M:MastercamPlanes.IsActive(System.Int32!System.Runtime.CompilerServices.IsLong,PlaneType)">
            <summary> check if a plane is active as a view or origin. </summary>
            <param name="planeID">    the ID of the plane to check. </param>
            <param name="whichPlane"> the active plane type to check (CPLANE, TPLANE, GPLANE or WCSPLANE) </param>
            <returns> return true if active. </returns>
        </member>
        <member name="M:MastercamPlanes.InitActivePlanesToTop">
            <summary> set all active views and origins to TOP if none are set. </summary>
        </member>
        <member name="M:MastercamPlanes.RepaintActivePlaneInfo">
            <summary> repaint the active plane info on the status bar. </summary>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.GetViewportArrayIndex(System.Void!System.Runtime.CompilerServices.IsConst*)">
            <summary> return viewport # (0-3) from graphic ptr. </summary>
            <param name="pGraphicsView"> graphics ptr. </param>
            <returns> return viewport # (0-3) ptr references, -1 if not found. </returns>
        </member>
        <member name="M:MastercamPlanes.InitBnciCache">
            <summary> Init the global NciCache when the global Planes is initialized. </summary>
        </member>
        <member name="M:MastercamPlanes.GetBnciCache">
            <summary> Gets ref to underlying cache of NCI. </summary>
            <returns> reference to m_BnciCache. </returns>
        </member>
        <member name="M:MastercamPlanes.UsageStringArrayToFile(std.vector&lt;std.tuple&lt;System.Boolean,PlaneID,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;,std.allocator&lt;std.tuple&lt;System.Boolean,PlaneID,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Convert a UsageStringArray to a CStringArray, write to file and display in editor. </summary>
            <param name="strArray"> The string array to write and display. </param>
            <param name="editFile"> True to edit file. </param>
            <returns> A CString with the output file name. </returns>
        </member>
        <member name="M:MastercamPlanes.FixSeparatorInUsageStrings(std.vector&lt;std.tuple&lt;System.Boolean,PlaneID,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;,std.allocator&lt;std.tuple&lt;System.Boolean,PlaneID,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Fix separator strings in usage strings. </summary>
            <param name="strArray">  The array that contains separator strings. </param>
            <param name="separator"> The separator string that replace the separator markers. </param>
        </member>
        <member name="M:MastercamPlanes.GetSystemMatrixUsageStrings(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.tuple&lt;System.Boolean,PlaneID,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;,std.allocator&lt;std.tuple&lt;System.Boolean,PlaneID,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImp">
            <summary> Builds a string array of matrix usage. </summary>
            <param name="matrixIDs"> Matrix IDs to collect. </param>
            <param name="strArray">  The string array to fill in. </param>
            <param name="separator"> The separator character to fill a string with between each view description. </param>
            <returns> The size of strArray. </returns>
        </member>
        <member name="M:MastercamPlanes.GetEntityDescription(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the entity description. </summary>
            <param name="theEnt"> the ent. </param>
            <returns> The entity description. </returns>
        </member>
        <member name="M:MastercamPlanes.RemoveSystemMatrix(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes.MatrixUsage!System.Runtime.CompilerServices.IsConst*)">
            <summary> Removes an unused system matrix by its ID. </summary>
            <param name="planeID">	    Identifier for the matrix. </param>
            <param name="pMatrixUsage"> (Optional) The matrix map. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MastercamPlanes.RemoveUnusedSystemMatrices">
            <summary> Removes all unused system matrices. </summary>
            <returns> std::set of the system matrix IDs removed. </returns>
        </member>
        <member name="M:MastercamPlanes.RemoveUnusedNamedPlanes">
            <summary> Removes all unused Named Planes. </summary>
            <returns> std::set of the named Plane IDs removed. </returns>
        </member>
        <member name="M:MastercamPlanes.MatrixUsage.BuildMap(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Builds m_MatrixMap. </summary>
            <param name="refPlanes"> Reference to a MastercamPlanes object. </param>
            <param name="justUsed">  True = just the used matrices, false = all matrices. </param>
            <returns> reference to m_Map. </returns>
        </member>
        <member name="D:MastercamPlanes.MatrixUsage.MatrixMap">
            <summary> Defines an alias representing the matrix map. </summary>
        </member>
        <member name="M:MastercamPlanes.MatrixUsage.UsageInfo.#ctor(MastercamPlanes.MatrixUsage.UsageInfo.InfoSource,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT*,System.UInt64,System.UInt64)">
            <summary> Constructor for usage info. </summary>
            <param name="source">   Matrix and/or view number usage source. </param>
            <param name="entID">    (Optional) Identifier for the entity (ent.ent_idn). </param>
            <param name="entDbPtr"> (Optional) The ent's database pointer. </param>
            <param name="OffsetOf"> (Optional) Number of bytes to the view number data. </param>
            <param name="nBytes">   (Optional) The number of bytes for the view number data (short = 2, long = 4). </param>
        </member>
        <member name="T:MastercamPlanes.MatrixUsage.UsageInfo.InfoSource">
            <summary> Values that represent matrix and/or view number usage sources. </summary>
        </member>
        <member name="T:MastercamPlanes.MatrixUsage.UsageInfo">
            <summary> Class that containts information about instances of PlaneClass::SystemMatrix usage. </summary>
        </member>
        <member name="T:MastercamPlanes.MatrixUsage">
            <summary> Class to determine PlaneClass::SystemMatrix usage in a MastercamPlanes object. </summary>
        </member>
        <member name="M:MastercamPlanes.GetTimeOfDayString">
            <summary> Gets time of day string. </summary>
            <returns> The time of day string. </returns>
        </member>
        <member name="M:MastercamPlanes.GetReservedPlaneIDsThatCanBeDeleted(std.unordered_set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.hash&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.equal_to&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*)">
            <summary> Copy reserved plane IDs from planeIDs that are incompatible with the current file. (example: reserved
		  lathes planes that are in a file with only a mill machine group). </summary>
            <param name="deleteThesePlaneIDs"> Copy of reserved plane IDs from pSourceIDs that can be deleted. </param>
            <param name="pSourceIDs">		   (Optional) The plane IDs to check, nullptr to check all plane IDs. </param>
            <returns> The incompatible product plane i ds. </returns>
        </member>
        <member name="M:MastercamPlanes.GetOperationInfoThatReferencePlanes(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt64,CInterrogateMastercamFile*)">
            <summary> Builds set of operation info that reference plane ID's. </summary>
            <param name="planeIDs">		   The plane IDs to search for. </param>
            <param name="excludeThisOpID"> (Optional) exclude this operation ID from processing. </param>
            <param name="maxIDs">		   (Optional) maximum # of ID's to collect, 0 to collect all IDs. </param>
            <param name="pInFile">		   (Optional) current Mastercam file info. </param>
            <returns> size of planeUsage. </returns>
        </member>
        <member name="M:MastercamPlanes.GetGroupInfoThatReferencePlanes(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64)">
            <summary> Builds set of group info that reference plane ID's. </summary>
            <param name="planeIDs"> The plane IDs to search for. </param>
            <param name="maxIDs">   (Optional) the maximum size of planeUsage. </param>
            <returns> std::set of PlaneUsageInfo. </returns>
        </member>
        <member name="M:MastercamPlanes.CheckTemporaryPlanesForUsage(System.Boolean,std.map&lt;PlaneID,System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;PlaneID&gt;,std.allocator&lt;std.pair&lt;PlaneID!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Check named planes marked as temporary for usage.  If they're used, update planes if fixThem == true. </summary>
            <param name="fixThem">   True to set the plane's temporary flag to false (and make them permanent). </param>
            <param name="pUsageMap"> The usage map, nullptr = read usage. </param>
            <returns> A list of named plane ID's marked as temporary but are used. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CInterrogateMastercamFile*,System.Int64)">
            <summary> Get usage mask if plane is used and cannot be deleted. </summary>
            <param name="planeID">		   ID of plane to remove. </param>
            <param name="ignoreMask">	   (Optional) ignore this usage from results. </param>
            <param name="excludeThisOpID"> (Optional) exclude this operation from the search. </param>
            <param name="pInFile">		   (Optional) snapshot of Mastercam file to limit to only 1 pass thru the db. </param>
            <param name="maxCount">		   (Optional) Maximum # of groups or operationss to check, 0 = check all. </param>
            <returns> return usage mask if Plane is being used, PLANE_USED_NONE if not used. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsedInDb(System.Int32!System.Runtime.CompilerServices.IsLong,MastercamPlanes.PlaneUsageInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CInterrogateMastercamFile*,System.Int64)">
            <summary> Get usage mask if Plane is active or used in an operation or group. </summary>
            <param name="planeID">		   ID of plane to remove. </param>
            <param name="planeUsage">	   set of usage info for each ID in planeIDs. </param>
            <param name="ignoreMask">	   (Optional) ignore this usage from results. </param>
            <param name="excludeThisOpID"> (Optional) Identifier for the exclude this operation. </param>
            <param name="pInFile">		   (Optional) snapshot of Mastercam file to limit to only 1 pass thru the db. </param>
            <param name="maxCount">		   (Optional) Maximum # of groups or operationss to check, 0 = check all. </param>
            <returns> return usage mask if Plane is being used, PLANE_USED_NONE if not used. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsedInSolidOps(System.Int32!System.Runtime.CompilerServices.IsLong,std.vector&lt;DB_LIST_ENT**,std.allocator&lt;DB_LIST_ENT**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
            <summary> determine if a given Plane is used in solid operations. </summary>
            <param name="planeID">   the Plane's ID. </param>
            <param name="eptrArray"> [in,out] the solid eptrs that are using the plane. </param>
            <param name="maxCount">  (Optional) Maximum # of solids to check, 0 = check all. </param>
            <returns> return usage mask if Plane is being used, PLANE_USED_NONE if not used. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsedInDrafting(System.Int32!System.Runtime.CompilerServices.IsLong,std.vector&lt;DB_LIST_ENT**,std.allocator&lt;DB_LIST_ENT**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
            <summary> determine if a given Plane is used in drafting. </summary>
            <param name="planeID">   the Plane's ID. </param>
            <param name="eptrArray"> [in,out] the solid eptrs that are using the plane. </param>
            <param name="maxCount">  (Optional) Maximum # of drafting entities to check, 0 = check all. </param>
            <returns> return usage mask if Plane is being used, PLANE_USED_NONE if not used. </returns>
        </member>
        <member name="M:MastercamPlanes.PlanesInViewSheets">
            <summary> Build map of plane info used in view sheets. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsedInViewSheets(System.Int32!System.Runtime.CompilerServices.IsLong,MastercamPlanes.PlaneUsageInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> determine if a given Plane is used in any viewsheet. </summary>
            <param name="planeID">    the Plane's ID. </param>
            <param name="planeUsage"> set of usage info for each ID in planeIDs. </param>
            <param name="sheetNames"> CString array to fill in with viewsheet names if used. </param>
            <returns> return usage mask if Plane is being used, PLANE_USED_NONE if not used. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsedInOperations(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,std.set&lt;MastercamPlanes.PlaneUsageInfo,std.less&lt;MastercamPlanes.PlaneUsageInfo&gt;,std.allocator&lt;MastercamPlanes.PlaneUsageInfo&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CInterrogateMastercamFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
            <summary> determine if a given Plane is used in any operation. </summary>
            <param name="planeID">		   the Plane's ID. </param>
            <param name="excludeThisOpID"> exclude this operation from the search. </param>
            <param name="planeUsage">	   set of usage info for each ID in planeIDs. </param>
            <param name="inFile">		   current Mastercam file info. </param>
            <param name="maxCount">		   (Optional) Maximum # of operations to check, 0 = check all operations. </param>
            <returns> return usage mask if Plane is being used, PLANE_USED_NONE if not used. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsedInGroups(System.Int32!System.Runtime.CompilerServices.IsLong,std.set&lt;MastercamPlanes.PlaneUsageInfo,std.less&lt;MastercamPlanes.PlaneUsageInfo&gt;,std.allocator&lt;MastercamPlanes.PlaneUsageInfo&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
            <summary> determine if a given Plane is used in any operation group. </summary>
            <param name="planeID">    the Plane's ID. </param>
            <param name="planeUsage"> set of usage info for each ID in planeIDs. </param>
            <param name="maxCount">   (Optional) Maximum # of groups to check, 0 = check all groups. </param>
            <returns> return usage mask if Plane is being used, PLANE_USED_NONE if not used. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsedActive(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> determine if a given Plane is used in any active system plane (WCS, Cplane, Tplane or WCS) </summary>
            <param name="planeID"> the Plane's ID. </param>
            <returns> return usage mask if Plane is being used, PLANE_USED_NONE if not used. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageSwapIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Swap an old plane ID with a new ID in all info in memory and entities in the database 
		  (except the plane itself) that have plane IDs embedded in them. </summary>
            <param name="oldID"> Old plane ID. </param>
            <param name="newID"> New plane ID. </param>
        </member>
        <member name="D:MastercamPlanes.UsageStringArray">
            <summary> Get plane usage masks. </summary>
            <param name="planeID">		  ID of single Plane to report about. </param>
            <param name="ignoreMask">	  (Optional) ignore this usage from results. </param>
            <param name="pInFile">		  (Optional) snapshot of Mastercam file to limit to only 1 pass thru the db. </param>
            <param name="pUsageStrings">  (Optional) ptr to string array to get usage info strings. </param>
            <param name="showMessageBox"> (Optional) 1=show message box if used, 2=show message always, 0=don't show message
							  box. </param>
            <param name="pParentWnd">	  (Optional) pointer to parent window. </param>
            <returns> return plane usage masks. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsage(System.Boolean)">
            <summary> Create a plane usage text file. </summary>
            <param name="editFileInEditor"> True to display the file in your default editor. </param>
            <returns> Full path of file name created if successfull, empty string if failure. </returns>
        </member>
        <member name="M:MastercamPlanes.GetIDsFromPlanesUsageSet(System.Int32!System.Runtime.CompilerServices.IsLong,std.set&lt;MastercamPlanes.PlaneUsageInfo,std.less&lt;MastercamPlanes.PlaneUsageInfo&gt;,std.allocator&lt;MastercamPlanes.PlaneUsageInfo&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Extracts the operation or group IDs from the usage set. </summary>
            <param name="planeID">  Identifier for the plane. </param>
            <param name="usageSet"> Set of the PlaneUsageInfo. </param>
            <returns> Set of opereration or group IDs. </returns>
        </member>
        <member name="D:MastercamPlanes.PlaneUsageSet">
            <summary> Defines an alias representing a std::set of PlaneUsageInfo types. </summary>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.Append(MastercamPlanes.PlaneUsageInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Appends more info to m_Info. </summary>
            <param name="info"> The information to append. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.GetIDs(MastercamPlanes.PlaneUsageInfo.Info.InfoID.IdType)">
            <summary> Gets a set if operation or group IDs. </summary>
            <param name="idType"> (Optional) Type of the identifier to match. </param>
            <returns> set of InfoID's. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.GetUsage(MastercamPlanes.PlaneUsageInfo.Info.InfoID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the usage for the plane at m_ID. </summary>
            <param name="infoID"> Identifier to match. </param>
            <returns> The usage. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.op_LessThan(MastercamPlanes.PlaneUsageInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,MastercamPlanes.PlaneUsageInfo.UsageType)">
            <summary> Constructor. </summary>
            <param name="planeID">   Identifier for the plane. </param>
            <param name="usageType"> Type of the usage. </param>
        </member>
        <member name="T:MastercamPlanes.PlaneUsageInfo.UsageType">
            <summary> Values that represent whether the contents of m_IDsAndMasks 
		  are opertion or group ID's. </summary>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.Info.#ctor(MastercamPlanes.PlaneUsageInfo.Info.InfoID,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*,System.UInt64)">
            <summary> Constructor. </summary>
            <param name="infoID">    Identifier for the operation or group. </param>
            <param name="usageMask"> The usage mask. </param>
            <param name="pID">		 If non-null a pointer to the long data. </param>
            <param name="offsetOf">  The offset address of where the data resides in the structure. </param>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.Info.#ctor(MastercamPlanes.PlaneUsageInfo.Info.InfoID,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*,System.UInt64)">
            <summary> Constructor. </summary>
            <param name="infoID">    Identifier for the operation or group. </param>
            <param name="usageMask"> The usage mask. </param>
            <param name="pID">		 If non-null a pointer to the short data. </param>
            <param name="offsetOf">  The offset address of where the data resides in the structure. </param>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.Info.InfoID.op_Equality(MastercamPlanes.PlaneUsageInfo.Info.InfoID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.Info.InfoID.#ctor(MastercamPlanes.PlaneUsageInfo.Info.InfoID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.Info.InfoID.#ctor(MastercamPlanes.PlaneUsageInfo.Info.InfoID.IdType,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="isOp">  (Optional) The ID type. </param>
            <param name="theID"> (Optional) Identifier for the operation or group. </param>
        </member>
        <member name="T:MastercamPlanes.PlaneUsageInfo.Info.InfoID.IdType">
            <summary> Values that represent the information ID types. </summary>
        </member>
        <member name="T:MastercamPlanes.PlaneUsageInfo.Info.InfoID">
            <summary> The info identifier. </summary>
        </member>
        <member name="T:MastercamPlanes.PlaneUsageInfo.Info">
            <summary> Class respresenting individual plane usage data. </summary>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.ShortOrLongPtr.GetValue">
            <summary> Gets the value pointed to by m_Pointer. </summary>
            <returns> A long value pointed to by m_Pointer. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.ShortOrLongPtr.SetValue(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the value pointed to by m_Pointer. </summary>
            <param name="newVal"> The new value. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.ShortOrLongPtr.GetSize">
            <summary> Returns the size of the data at m_Pointer. </summary>
            <returns> sizeof long or short data type pointed to by m_Pointer, 0 for error. </returns>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.ShortOrLongPtr.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> Constructor for long pointer type. </summary>
            <param name="pLong"> If non-null, pointer to the long value. </param>
        </member>
        <member name="M:MastercamPlanes.PlaneUsageInfo.ShortOrLongPtr.#ctor(System.Int16*)">
            <summary> Constructor for short pointer type. </summary>
            <param name="pShort"> If non-null, pointer to the short value. </param>
        </member>
        <member name="T:MastercamPlanes.PlaneUsageInfo.ShortOrLongPtr.PointerType">
            <summary> Values that represent what type of pointer m_Pointer really is. </summary>
        </member>
        <member name="T:MastercamPlanes.PlaneUsageInfo.ShortOrLongPtr">
            <summary> Plane ID's are long data types (for now), but there are many places in old
		  code where they're stored as a short.  This class exists for that puprpose. </summary>
        </member>
        <member name="D:MastercamPlanes.PlaneUsageMap">
            <summary> Defines an alias representing the plane usage map. </summary>
        </member>
        <member name="T:MastercamPlanes.PLANE_USAGE_MESSAGE_BOX">
            <summary> Values that represent PLANE_USAGE_MESSAGE_BOX parameter in PlaneUsage (). </summary>
        </member>
        <member name="M:MastercamPlanes.FindParallel(PlaneClass,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Double)">
            <summary> Searches for the first parallel. </summary>
            <param name="planeClass"> The plane class (NamedPlane or SystemMatrix). </param>
            <param name="m33">		  3x3 matrix to match. </param>
            <param name="sameDir">    True to find view with same vector direction. </param>
            <param name="matchTol">   (Optional) The match tolerance. </param>
            <returns> ID of the fisrt matching parallel NamedPlane or SystemView. </returns>
        </member>
        <member name="M:MastercamPlanes.MakeTemporaryStart(PlaneClass)">
            <summary> Make and return a pointer to a TemporaryStart class. This will set us into "mark all new planes as
		  temporary" mode. Temporary planes will be removed when this goes out of scope. </summary>
            <param name="planeClass"> The plane class (PlaneType::SystemMatrix and PlaneType::NamedPlane types only). </param>
            <returns> A std::unique_ptr to a TemporaryStart class. </returns>
        </member>
        <member name="M:MastercamPlanes.GetUpdateStatusBar">
            <summary> Get update status bar flag </summary>
            <returns> value of m_UpdateStatusBar. </returns>
        </member>
        <member name="M:MastercamPlanes.SetUpdateStatusBar(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Set update status bar flag </summary>
            <param name="on"> true to update the status bar with planes info. </param>
            <returns> previous value of m_DrawGnomon. </returns>
        </member>
        <member name="M:MastercamPlanes.RegenAndGet(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Regerate and return a Plane defined with associated geometry by its name. </summary>
            <param name="theName"> Name of plane to regenerate and return. </param>
            <param name="force">   (Optional) true - regenerate even if clean. </param>
            <returns> copy of regenerated Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.RegenAndGet(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Regerate and return a Plane defined with associated geometry by its ID. </summary>
            <param name="planeID"> ID of plane to regenerate and return. </param>
            <param name="force">   (Optional) true - regenerate even if clean. </param>
            <returns> copy of regenerated Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.RegenIfDirty(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Regerate a Plane defined with associated geometry. </summary>
            <param name="theName"> name of plane to regenerate. </param>
            <param name="force">   (Optional) true - regenerate even if clean. </param>
            <returns> return true if successful and Plane is valid. </returns>
        </member>
        <member name="M:MastercamPlanes.RegenIfDirty(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Regerate a Plane defined with associated geometry. </summary>
            <param name="planeID"> ID of plane to regenerate. </param>
            <param name="force">   (Optional) true - regenerate even if clean. </param>
            <returns> return true if successful and Plane is valid. </returns>
        </member>
        <member name="M:MastercamPlanes.RegenIfDirty(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Regerate a Plane defined with associated geometry. </summary>
            <param name="thePlane">   the plane to regenerate. </param>
            <param name="updateThis"> true - update object. </param>
            <param name="force">	  (Optional) true - regenerate even if clean. </param>
            <returns> return true if successful and Plane is valid. </returns>
        </member>
        <member name="M:MastercamPlanes.GetGapID(PlaneClass)">
            <summary> Returns first ID that does not exist in the map (i.e. 1,2,4,5... would return a 3). </summary>
            <param name="planeClass"> The plane class (SystemMatrix or NamedPlane). </param>
            <returns> The first ID that's not used in the middle of the range. </returns>
        </member>
        <member name="M:MastercamPlanes.GetNextID(PlaneClass,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the next unique Plane ID. </summary>
            <param name="planeClass"> The plane class. </param>
            <param name="gapFound">   [in,out] true = a gap in ID numbering was found and returned. </param>
            <returns> return the next unique Plane ID. </returns>
        </member>
        <member name="M:MastercamPlanes.GetHighID(PlaneClass)">
            <summary> get the highest ID value in the array. </summary>
            <param name="planeClass"> The plane class. </param>
            <returns> return the highest ID value in the array. </returns>
        </member>
        <member name="M:MastercamPlanes.EnsureUniqueName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Ensure the Plane name is unique. </summary>
            <param name="theName">		  the Plane name. </param>
            <param name="excludePlaneID"> (Optional) exclude the plane with this ID from the search. </param>
            <returns> Return true if name altered. </returns>
        </member>
        <member name="M:MastercamPlanes.WriteToDiskAsViewEnts(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Write this to given disk file as pre-X7 view_ent's. </summary>
            <param name="pFile"> pointer to open Mastercam file. </param>
            <returns> Return error code (0 = success) </returns>
        </member>
        <member name="M:MastercamPlanes.WriteToDisk(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Write this to given disk file. </summary>
            <param name="pFile"> pointer to open Mastercam file. </param>
            <returns> Return error code (0 = success) </returns>
        </member>
        <member name="M:MastercamPlanes.ReadPlanesFromFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> collect all the Planes from an external Mastercam file. </summary>
            <param name="fileName"> The Mastercam file name. </param>
            <returns> return vector of Planes collected. </returns>
        </member>
        <member name="M:MastercamPlanes.Erase(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Erase one or all planes. </summary>
            <param name="planeID"> (Optional) IconDrawMode::Erase = -2, IconDrawMode::Native = -1, IconDrawMode::Given = 0 or valid planeID. </param>
        </member>
        <member name="M:MastercamPlanes.Draw(System.Int32,Plane.IconDrawMode,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Draw one or all planes. </summary>
            <param name="theColor">  The color to draw the planes in (per IconDrawMode) </param>
            <param name="colorMode"> IconDrawMode::Erase = -2, IconDrawMode::Native = -1, IconDrawMode::Given = 0 or valid planeID to highlight in BR_WHITE. </param>
            <param name="planeID">   (Optional) Plane ID to draw or 0 for all planes. </param>
        </member>
        <member name="M:MastercamPlanes.SetReferenceCountsInDb">
            <summary> Rip through the database and update ent.vw_refs on all geometry entities. </summary>
            <returns> # of entities updated in db. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildGeometryArray(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build a set of geometry entities used in Planes and that have ent.vw_refs &gt; 0. </summary>
            <param name="geomIDs"> set of ent.ent_idn's to find. </param>
            <returns> return vector of matching entities copied into the array. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildOperationArray">
            <summary> Build an array of toolpath operations from the current file. </summary>
            <returns> std::vector of operations. </returns>
        </member>
        <member name="M:MastercamPlanes.BuildOperationArray(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build an array of toolpath operations from an external Mastercam file. </summary>
            <param name="excludeOpIDs"> set of plane IDs to exclude. </param>
            <param name="mcxFileName">  source Mastercam file name. </param>
            <returns> std::vector of operations. </returns>
        </member>
        <member name="M:MastercamPlanes.ScaleOrigins(System.Double)">
            <summary> Scale origins on all planes in this. </summary>
            <param name="scFac"> the scale factor. </param>
            <returns> Return planes update code PlanesUpdated::Updated or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.GetGeometryIDs(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Collect all the geometry IDs use in all the planes. </summary>
            <param name="planeID"> Plane ID to match, 0 for all planes. </param>
            <returns> return set of geometry IDs referenced by named planes. </returns>
        </member>
        <member name="M:MastercamPlanes.GetDirtyIDs">
            <summary> Collect all the plane IDs in that are marked dirty. </summary>
            <returns> set of Plane IDs. </returns>
        </member>
        <member name="M:MastercamPlanes.GetDisplayedPlanes">
            <summary> returns a set of PlaneID's that are marked as displayed planes. </summary>
            <returns> A set of PlaneID's that are marked as displayed planes. </returns>
        </member>
        <member name="M:MastercamPlanes.GetSectionViews">
            <summary> returns a set of PlaneID's that are marked as being used as sectionviews. </summary>
            <returns> A set of PlaneID's that are marked as being used as sectionviews. </returns>
        </member>
        <member name="M:MastercamPlanes.GetSystemMatrixIDs">
            <summary> Gets a set of system matrix IDs. </summary>
            <returns> The system matrix IDs. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlaneIDs(System.Boolean)">
            <summary> Collect all the plane IDs in this. </summary>
            <param name="includeTemporary"> (Optional) True to include temporary plane's IDs, false to exclude. </param>
            <returns> return a vector named plane IDs contained in m_Planes. </returns>
        </member>
        <member name="M:MastercamPlanes.InitOperationViewsToActivePlanes(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> initialize view (s) in toolpath operation. </summary>
            <param name="op">		  the operation to init. </param>
            <param name="whichPlane"> (Optional) which operation view to inti (CPLANE, TPLANE, WCSPLANE or UNDEFPLANE for all 3. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:MastercamPlanes.GetOperationViewNo(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return the view # from the operation view. </summary>
            <param name="opView"> the operation view to check. </param>
            <returns> the view # from the operation view. </returns>
        </member>
        <member name="M:MastercamPlanes.GetCurrentDB">
            <summary> return value of m_CurrentDB member variable. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MastercamPlanes.SetCurrentDB(System.Boolean)">
            <summary> Set the m_CurrentDB member variable. </summary>
            <param name="currentDB"> value to set m_CurrentDB to. </param>
            <returns> previous value of m_CurrentDB. </returns>
        </member>
        <member name="M:MastercamPlanes.SetLastAddedID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set ID of last added Plane. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> ID of previous last added Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetLastAddedID">
            <summary> get ID of last added Plane. </summary>
            <returns> ID of last added Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetSize(PlaneClass)">
            <summary> Get # of Planes of type PlaneClass. </summary>
            <param name="planeClass"> The plane class. </param>
            <returns> # of Planes. </returns>
        </member>
        <member name="M:MastercamPlanes.CreateRelative(System.Int32!System.Runtime.CompilerServices.IsLong,Plane.RelativeType,CoordinateDisplayType)">
            <summary> create a Plane relative to an existing Plane. </summary>
            <param name="parentID">			 ID of Plane to copy/rotate. </param>
            <param name="relType">			 relative type (RelativeType::Front, etc) </param>
            <param name="coordinateDisplay"> (Optional) The coordinate display mode, DISPLAY_UNDEFINED_COORD to maintain source. </param>
            <returns> pointer to new Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.CopyPlane(System.Int32!System.Runtime.CompilerServices.IsLong,CoordinateDisplayType)">
            <summary> copy a single Plane by its ID. </summary>
            <param name="planeID">			 ID of Plane to copy. </param>
            <param name="coordinateDisplay"> (Optional) The coordinate display mode, DISPLAY_UNDEFINED_COORD to maintain source. </param>
            <returns> pointer to new Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.CopySystemMatrices(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the system matrices from this into refPlanes filtering out duplicates. </summary>
            <param name="sourcePlanes"> The target object. </param>
            <returns> Number of system matrices added to refPlanes. </returns>
        </member>
        <member name="M:MastercamPlanes.CopyPlanes(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CoordinateDisplayType)">
            <summary> copy multiple Planes by their IDs. </summary>
            <param name="planeIDs">			 [in,out] array of Plane IDs to copy. </param>
            <param name="newIDs">			 [in,out] array of newly created Plane IDs. </param>
            <param name="coordinateDisplay"> (Optional) The coordinate display mode, DISPLAY_UNDEFINED_COORD to maintain source. </param>
            <returns> Return planes update code PlanesUpdated::Updated or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.ClearTemporaryPlanes(PlaneClass)">
            <summary> Clears the temporary plane state in matching planes described by planeClass. </summary>
            <param name="planeClass"> (Optional) the plane class. </param>
            <returns> Return planes update code PlanesUpdated::Updated or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.RemoveTemporaryPlanes(PlaneClass)">
            <summary> remove all the Planes marked as temporary (m_Temporary == true) </summary>
            <param name="planeClass"> The plane class to match, Undefined will match all. </param>
            <returns> Return set of plane IDs that were removed. </returns>
        </member>
        <member name="M:MastercamPlanes.RemoveAll">
            <summary> remove all the Planes, rebuild default Planes. </summary>
            <returns> Return planes update code PlanesUpdated::Updated or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.Remove(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> remove a single Plane by its ID. </summary>
            <param name="planeID">		   the Plane IDs to remove. </param>
            <param name="updateRefCounts"> true = update the ent.vw_refs in geometry entities in the db. </param>
            <returns> Return planes update code PlanesUpdated::Updated or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.Remove(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> remove multiple Planes by their IDs. </summary>
            <param name="planeIDs">		   array of Plane IDs to remove. </param>
            <param name="updateRefCounts"> true = update the ent.vw_refs in geometry entities in the db. </param>
            <returns> Return set of plane IDs that were removed. </returns>
        </member>
        <member name="M:MastercamPlanes.FindViewOrthK(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ViewNo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Double)">
            <summary> Searches for the first view whose k vector is orthogonal to the given vector. </summary>
            <param name="zNorm">	   the z component to match. </param>
            <param name="viewNo">	   [in,out] The view no. </param>
            <param name="favorViewNo"> true to favor view no. </param>
            <param name="firstMatch">  true = use first matching matrix found, false = use best match. </param>
            <param name="matchTol">    The match tolerance. </param>
            <returns> return const ptr to existing plane if successful, nullptr on error. </returns>
        </member>
        <member name="M:MastercamPlanes.FindViewK(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary> Find or add a base Plane definition with the given matrix. </summary>
            <param name="zNorm">	  the Z component to match. </param>
            <param name="firstMatch"> true = use first matching matrix found, false = use best match. </param>
            <param name="sameDir">    True to find view with same vector direction. </param>
            <param name="createNew">  true to add new base plane if an existing matrix not found. </param>
            <param name="getClosest"> True to accept closest match within default PLANE_TOL. </param>
            <param name="matchTol">   The match tolerance. </param>
            <returns> return const ptr to existing plane if successful, nullptr on error. </returns>
        </member>
        <member name="M:MastercamPlanes.FindView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find or add a base Plane definition with the given matrix. </summary>
            <param name="m33"> the matrix to add. </param>
            <returns> return const ptr to existing plane if successful, nullptr on error. </returns>
        </member>
        <member name="M:MastercamPlanes.FindView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Find or add a base Plane definition with the given matrix. </summary>
            <param name="m33">		 the matrix to add. </param>
            <param name="createNew"> True to create new if an existing not found. </param>
            <returns> return const ptr to existing plane if successful, nullptr on error. </returns>
        </member>
        <member name="M:MastercamPlanes.FindView(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a ptr to a SystemMatrix by its ID. </summary>
            <param name="viewNo"> The SystemMatrix ID. </param>
            <returns> Pointer to the SystemMatrix, nullptr if it does not exist. </returns>
        </member>
        <member name="T:MastercamPlanes.NonMatchingMask">
            <summary> Searches for the first closest matching named plane with parameter priorities. </summary>
            <param name="m33">				 The matching matrix to match - you have to at least match this. </param>
            <param name="wOrigin">			 The origin to match. </param>
            <param name="workOffset">		 The work offset to match. </param>
            <param name="coordinateDisplay"> The coordinate display to match. </param>
            <param name="nonMatching">		 [in,out] Value will be set to the parameters it did not match. </param>
            <returns> null if it fails, else the closest matching plane. </returns>
        </member>
        <member name="M:MastercamPlanes.FindPlane(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return constant ptr to a named Plane by its name. </summary>
            <param name="theName">				  a valid Plane name. </param>
            <param name="ignoreCase">			  true = ignore case. </param>
            <param name="includeTemporaryPlanes"> True to include temporary planes, false to exclude. </param>
            <param name="excludePlaneID">		  Exclude the plane with this ID from the search. </param>
            <returns> return constant ptr to a named Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.FindPlane(CoordinateDisplayType,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> Return const pointer to first plane that matches coordinate display mode, matrix and optional origin. </summary>
            <param name="coordinateDisplay"> The coordinate display mode. </param>
            <param name="m33">				 3x3 matrix to match. </param>
            <param name="wOriginPt">		 origin in world coordinates. </param>
            <param name="whichPlane">		 (Optional) which active system plane we intend to use the match for (CPLANE, TPLANE, etc) or UNDEFPLANE to ignore. </param>
            <returns> null if it fails, else the found plane pointer. </returns>
        </member>
        <member name="M:MastercamPlanes.FindPlane(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return const pointer to first named plane that matches given matrix. </summary>
            <param name="m33"> 3x3 matrix to match. </param>
            <returns> Return const pointer to first named plane that matches given matrix. </returns>
        </member>
        <member name="M:MastercamPlanes.FindPlane(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return const pointer to first plane that matches given matrix and origin. </summary>
            <param name="m33">		 3x3 matrix to match. </param>
            <param name="wOriginPt"> origin in world coordinates. </param>
            <returns> Return const pointer to first named plane that matches given matrix and origin. </returns>
        </member>
        <member name="M:MastercamPlanes.Find(PlaneClass,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Find for the first matching NamedPlane or SystemMatrix. </summary>
            <param name="planeClass"> The plane class (NamedPlane or SystemMatrix). </param>
            <param name="m33">		  The matrix to match. </param>
            <param name="createNew">  true = create new if no match found. </param>
            <returns> The plane ID of the matching plane. </returns>
        </member>
        <member name="M:MastercamPlanes.FindParallelView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Double)">
            <summary> Searches for the first parallel system matrix. </summary>
            <param name="m33">	    3x3 matrix to match. </param>
            <param name="sameDir">  true = find plane with same Z vector direction. </param>
            <param name="matchTol"> The match tolerance. </param>
            <returns> Return const pointer to first system matrix that is parallel to the given matrix. </returns>
        </member>
        <member name="M:MastercamPlanes.FindParallelPlane(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Double)">
            <summary> Searches for the first parallel named plane. </summary>
            <param name="m33">	    3x3 matrix to match. </param>
            <param name="sameDir">  true = find plane with same Z vector direction. </param>
            <param name="matchTol"> The match tolerance. </param>
            <returns> Return const pointer to first named plane that is parallel to the given matrix. </returns>
        </member>
        <member name="M:MastercamPlanes.FindFirst(PlaneClass)">
            <summary> Return iterator to the first instance of a class of Plane (NamedPlane or SystemMatrix). </summary>
            <param name="planeClass"> The plane class (NamedPlane or SystemMatrix). </param>
            <returns> const_iterator to the first instance found in m_Planes. </returns>
        </member>
        <member name="M:MastercamPlanes.Find(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return iterator plane ID in m_Planes </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> A PlaneMap::const_iterator. </returns>
        </member>
        <member name="M:MastercamPlanes.FindPrm.#ctor(MastercamPlanes.FindPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="findPrm"> The search parameters. </param>
        </member>
        <member name="M:MastercamPlanes.FindPrm.#ctor(PlaneClass,Matrix33!System.Runtime.CompilerServices.IsConst*,P3D!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,CoordinateDisplayType!System.Runtime.CompilerServices.IsConst*,PlaneType*,System.Int32!System.Runtime.CompilerServices.IsLong*,std.pair&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,System.Boolean&gt;*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Double)">
            <summary> Constructor. </summary>
            <param name="planeClass">	  The plane class (NamedPlane or SystemMatrix). </param>
            <param name="p33">			  (Optional) Pointer to plane's matrix. </param>
            <param name="pWorldOrigin">   (Optional) Pointer to plane's origin in world coordinates. </param>
            <param name="pCoordDisp">	  (Optional) Pointer to coordinate display mode. </param>
            <param name="pParallelMask">  (Optional) Pointer to parallel mask. </param>
            <param name="pPlaneType">	  (Optional) Pointer to plane type (CPLANE, TPLANE, GPLANE or WCS). </param>
            <param name="pWorkOffset">    (Optional) If non-null, (Optional) the work offset. </param>
            <param name="pName">		  (Optional) Pointer to pair of Plane name to match, true = ignore case. </param>
            <param name="pAxisIsAligned"> (Optional) If non-null, the axis that is aligned. </param>
            <param name="matchTol">		  (Optional) The match tolerance. </param>
        </member>
        <member name="T:MastercamPlanes.FindPrm">
            <summary> Class containing parameters for find functions.</summary>
        </member>
        <member name="T:MastercamPlanes.FindParallelMask">
            <summary> Parallellism matrix masks for find functions. </summary>
        </member>
        <member name="M:MastercamPlanes.EventLogPlaneAdded(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Add "added plane" message to event log. </summary>
            <param name="thePlane"> The plane we added. </param>
        </member>
        <member name="M:MastercamPlanes.AddSystemMatrix(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> add a base Plane definition by matrix. </summary>
            <param name="m33">			   the Plane to add. </param>
            <param name="requestedViewNo"> (Optional) The requested view number.  If already taken, a new unique view # will
							   be assigned. 0 = assign next highest. </param>
            <returns> return pointer to system matrix, nullptr if error. </returns>
        </member>
        <member name="M:MastercamPlanes.AddSystemMatrix(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> add up to 2 SYstemMatrix definitions, one for the PlaneBase::m_33 and one for PlaneBase::m_33 * Plane::m_Transform. </summary>
            <param name="thePlane"> [in,out] the Named Plane containing Matrix33's to add. </param>
            <returns> return pair of system matrix pointers to system matrices. </returns>
        </member>
        <member name="M:MastercamPlanes.AddSystemMatrix(PlaneBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> add a base Plane definition. </summary>
            <param name="thePlane"> [in,out] the Plane to add. </param>
            <returns> return pointer to system matrix, nullptr if error. </returns>
        </member>
        <member name="M:MastercamPlanes.Add(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> add a Plane definition. </summary>
            <param name="thePlane">		  [in,out] the Plane to add. </param>
            <param name="updatePlaneMgr"> (Optional) true to update plane manager. </param>
            <returns> return pointer to named plane, nullptr if error. </returns>
        </member>
        <member name="M:MastercamPlanes.Set(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CInterrogateMastercamFile*)">
            <summary> update an existing Plane definition. </summary>
            <param name="thePlane"> the Plane to update. </param>
            <param name="pInFile">  (Optional) if !nullptr, mark all dependent toolpath operations dirty. </param>
            <returns> Return planes update code PlanesUpdated::Updated or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.UnlockPlane(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> unlock the named Plane (edits allowed) with this ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> Return planes update code PlanesUpdated::Updated if successfully unlocked or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.LockPlane(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> lock the named Plane (no edits allowed) with this ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> Return planes update code PlanesUpdated::Updated if successfully locked or PlanesUpdated::NotUpdated. </returns>
        </member>
        <member name="M:MastercamPlanes.GetIDbyName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> lookup plane by its name, return its ID. </summary>
            <param name="theName"> the plane name. </param>
            <returns> return Plane ID using name, 0 if not found. </returns>
        </member>
        <member name="M:MastercamPlanes.GetTopPlanePtr">
            <summary> Gets const ptr to the commonly used top plane. </summary>
            <returns> nullptr if it fails (which it never should). </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanePtrByID(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return constant ptr to a Plane. </summary>
            <param name="planeID"> the Plane ID. </param>
            <returns> return constant ptr to a PlaneBase. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanePtrByID(ReservedPlanes.TypeID)">
            <summary> return constant ptr to a Plane. </summary>
            <param name="typeID"> the reserved plane type. </param>
            <returns> return constant ptr to a Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.GetPlanePtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return constant ptr to a named Plane. </summary>
            <param name="planeID"> the Plane ID. </param>
            <returns> return constant ptr to a named Plane. </returns>
        </member>
        <member name="M:MastercamPlanes.SelectOperationPlaneOrigin(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,CWnd*,CInterrogateMastercamFile*)">
            <summary> select a new origin for a Plane used in an op_view. </summary>
            <param name="theOp">	   The toolpath operation that contains the op_view. </param>
            <param name="whichPlane">  which op_view to select a new origin for (CPLANE, TPLANE or WCSPLANE) </param>
            <param name="thePlane">    The Mastercam plane selected to use for the op_view. </param>
            <param name="useMatching"> look for a matching plane. </param>
            <param name="addDB">	   Add plane to this if it needs to be created. </param>
            <param name="pWindow">	   (Optional) Parent window for dialog. </param>
            <param name="pInFile">	   (Optional) snapshot of Mastercam file to limit to only 1 pass thru the db. </param>
            <returns> return true if origin selected and everything is okay. </returns>
        </member>
        <member name="M:MastercamPlanes.RemoveEntityIDs(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CInterrogateMastercamFile*)">
            <summary> go thru all the planes, set matching entity ID's to 0. </summary>
            <param name="entIDs">  array of ID's to match and remove. </param>
            <param name="pInFile"> (Optional) ptr to snapshot of current Mastercam file to limit to only 1 pass thru the db.
					   If nullptr, system will have to read thru the db for each plane. </param>
            <returns> Return planes update code. </returns>
        </member>
        <member name="M:MastercamPlanes.SwapEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CInterrogateMastercamFile*)">
            <summary> go thru all the planes, swap new geometry entity ID for old. </summary>
            <param name="oldID">   the old entity ID to match. </param>
            <param name="newID">   the new entity ID to replace the old ID with. </param>
            <param name="pInFile"> (Optional) ptr to snapshot of current Mastercam file to limit to only 1 pass thru the db.
					   If nullptr, system will have to read thru the db for each plane. </param>
            <returns> Return planes update code. </returns>
        </member>
        <member name="M:MastercamPlanes.GetCoordinateDisplayMask">
            <summary> return appropriate coordinate display plane mask for the active coordinate display value. </summary>
            <returns> The coordinate display mask. </returns>
        </member>
        <member name="M:MastercamPlanes.GetCoordinateDisplay">
            <summary> return coordinate display value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <returns> The coordinate display. </returns>
        </member>
        <member name="M:MastercamPlanes.SetCoordinateDisplay(CoordinateDisplayType,System.Boolean)">
            <summary> Set the plane's coordinate display mode. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <param name="updateStatusBar">   Update coordinate mode in graphics area. </param>
            <returns> return previous value, -1 if invalid coordinateDisplay. </returns>
        </member>
        <member name="M:MastercamPlanes.ValidateCoordinateDisplayType(CoordinateDisplayType)">
            <summary> Validate the coordinate display mode (check for parallel X&amp;Y with active WCS for lathe modes) </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:MastercamPlanes.ValidViewNumber(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> make sure it's a valid view number. </summary>
            <param name="viewNo"> the long integer representation of a plane ID. </param>
            <param name="warn">   (Optional) true to display warning. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:MastercamPlanes.UpdateViewSheet(PlaneType,System.Int32)">
            <summary> Update the viewsheet's plane ID's and matrices. </summary>
            <param name="whichPlane"> (Optional) UNDEFPLANE = all or CPLANE, TPLANE, GPLANE or WCSPLANE. </param>
            <param name="sheetNo">    (Optional) The viewsheet #, -1 for the current. </param>
        </member>
        <member name="M:MastercamPlanes.Append(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,PlaneClass,System.Boolean,std.map&lt;PlaneID,std.pair&lt;PlaneID,MastercamPlanes.AppendedMethod&gt;,std.less&lt;PlaneID&gt;,std.allocator&lt;std.pair&lt;PlaneID!System.Runtime.CompilerServices.IsConst,std.pair&lt;PlaneID,MastercamPlanes.AppendedMethod&gt;&gt;&gt;&gt;*)">
            <summary> Appends the planes from another MastercamPlanes object. </summary>
            <param name="obj">			 The object containing planes to append. </param>
            <param name="useExisting">   true = check for existing planes with the same matrix and origin before adding new ones. </param>
            <param name="planeClass">    (Optional) The type of planes to append (PlaneClass::SystemMatrix, NamedPlane or Undefined for all). </param>
            <param name="markTemporary"> (Optional) true to mark any added planes as temporary. </param>
            <param name="pInfoMap">		 (Optional) Map of original plane IDs vs added planes and the method they were added. </param>
            <returns> Number of planes added. </returns>
        </member>
        <member name="T:MastercamPlanes.AppendedMethod">
            <summary> Values that represent how a plane was appended. </summary>
        </member>
        <member name="M:MastercamPlanes.Copy(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy MastercamPlanes object to this. </summary>
            <param name="obj"> MastercamPlanes object to copy. </param>
            <returns> return this. </returns>
        </member>
        <member name="M:MastercamPlanes.op_AdditionAssignment(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:MastercamPlanes.op_Equality(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> equality operator. </summary>
            <param name="obj"> MastercamPlanes object to compare. </param>
            <returns> return true if equal. </returns>
        </member>
        <member name="M:MastercamPlanes.op_Inequality(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator.  Compare only the planes, not any other member variables </summary>
            <param name="obj"> MastercamPlanes object to compare. </param>
            <returns> return true if not equal. </returns>
        </member>
        <member name="M:MastercamPlanes.op_Assign(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator for use with MastercamPlanes. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:MastercamPlanes.op_Assign(std.map&lt;PlaneID,std.shared_ptr&lt;PlaneBase&gt;,std.less&lt;PlaneID&gt;,std.allocator&lt;std.pair&lt;PlaneID!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;PlaneBase&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator for use with PlaneMap. </summary>
            <param name="theMap"> the map. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:MastercamPlanes.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:MastercamPlanes.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:MastercamPlanes.Init(System.Boolean)">
            <summary> Zero out member variables. </summary>
            <param name="currentDB"> (Optional) the current database. </param>
        </member>
        <member name="M:MastercamPlanes.GetEntType">
            <summary> Return the entity type (for ClassEnt) </summary>
            <returns> Return the entity type. </returns>
        </member>
        <member name="M:MastercamPlanes.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:MastercamPlanes.#ctor(System.Boolean)">
            <summary> Default constructor. </summary>
            <param name="currentDB"> (Optional) the current database. </param>
        </member>
        <member name="M:MastercamPlanes.TemporaryStart.RemoveTemporaryPlanes(System.Boolean)">
            <summary> Removes the temporary planes from m_RefPlanes. </summary>
            <param name="disableDelete"> True to disable delete on destruction, false to enable. </param>
            <returns> Update code. </returns>
        </member>
        <member name="M:MastercamPlanes.TemporaryStart.DisableDelete(System.Boolean)">
            <summary> Disables the deletion of temporary planes in the desctrictor. </summary>
            <param name="disable"> true to disable, false to enable. </param>
            <returns> previous value of m_DisableDelete. </returns>
        </member>
        <member name="M:MastercamPlanes.TemporaryStart.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:MastercamPlanes.TemporaryStart.#ctor(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneClass)">
            <summary> Constructor. </summary>
            <param name="refPlanes">  The referenced MastercamPlanes object. </param>
            <param name="planeClass"> (Optional) the plane class. </param>
        </member>
        <member name="T:MastercamPlanes.TemporaryStart">
            <summary> TemporaryStart class used when to temporarily change the referenced MastercamPlanes
		  object's m_Temporary value so it will mark all planes created/added as temporary from
		  instantiation on.  All temporary planes will be cleaned out upon destruction.
</summary>
        </member>
        <member name="M:MastercamPlanes.DbState.GetBnciRestored">
            <summary> Gets the value of m_BnciRestored. </summary>
            <returns> the value of m_BnciRestored. </returns>
        </member>
        <member name="M:MastercamPlanes.DbState.GetState">
            <summary> Gets the value of m_State. </summary>
            <returns> the value of m_State. </returns>
        </member>
        <member name="M:MastercamPlanes.DbState.Loading">
            <summary> Return true if the db is currently loading a file. </summary>
            <returns> true if the db is currently loading a file. </returns>
        </member>
        <member name="M:MastercamPlanes.DbState.NciAccessAllowed">
            <summary> Return true if the db is in a state where reading or writing to the 
		  binary NCI is safe. </summary>
            <returns> true if we can read/write nci, false is not. </returns>
        </member>
        <member name="M:MastercamPlanes.DbState.op_Assign(MastercamPlanes.DbState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:MastercamPlanes.DbState.#ctor(MastercamPlanes.DbStates,System.Boolean)">
            <summary> Constructor. </summary>
            <param name="dbState">	    (Optional) state of the database, 0=ready, 1=start up, 2=building view map, 3=reading file </param>
            <param name="bnciRestored"> (Optional) true if the binary nci is fully restored. </param>
        </member>
        <member name="T:MastercamPlanes.DbState">
            <summary> The current database state if m_CurrentDB == true. </summary>
        </member>
        <member name="T:MastercamPlanes.DbStates">
            <summary> if m_CurrentDB == true, the current state of your db. </summary>
        </member>
        <member name="D:MastercamPlanes.PlaneMapPair">
            <summary> Defines an alias representing the plane map pair. </summary>
        </member>
        <member name="D:MastercamPlanes.PlaneMap">
            <summary> Defines an alias representing the plane map. </summary>
        </member>
        <member name="T:PlanesActiveLock">
            <summary> Let our friends have their way with us. </summary>
        </member>
        <member name="F:NciCache">
            <summary> Cache for certain NCI lines to speed up Mastercam. </summary>
        </member>
        <member name="M:BnciCache.ClearAllDrawn">
            <summary> Clears all of the operation bnci drawn flags. </summary>
        </member>
        <member name="M:BnciCache.SetDrawn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Set true if operation's bnci has already been drawn in m_DrawnMap. </summary>
            <param name="opID">  Identifier for the operation. </param>
            <param name="drawn"> true if operation has been drawn in draw_bnci(). </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:BnciCache.GetDrawn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Returns a true if operation's bnci has already been drawn. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if operation's bnci has already been drawn. </returns>
        </member>
        <member name="M:BnciCache.Dump">
            <summary> Dumps this object to a text file and displays in the default editor. </summary>
        </member>
        <member name="M:BnciCache.Compare(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Compare cache contents to disk. </summary>
            <param name="badOpIDs"> The operation ID's whose NCI does not match cache. </param>
            <param name="warn">	    true to display warning. </param>
        </member>
        <member name="M:BnciCache.GetPlaneIdPtrIn1016Line(nci_bin*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to the plane ID in a 1016 line. </summary>
            <param name="bnciLine"> The 1016 bnci line. </param>
            <returns> reference to the plane ID. </returns>
        </member>
        <member name="M:BnciCache.FixBadPlaneIdIn1016Line(nci_bin*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Fix a bad plane ID in a 1016 line. </summary>
            <param name="bnciLine">		  The 1016 bnci line. </param>
            <param name="rewriteLine">    true to rewrite line to bnci file. </param>
            <param name="oldNewPlaneIDs"> The old new plane i ds. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:BnciCache.SetGcodeMask(std.map&lt;NCI_GCODE,System.Boolean,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;std.pair&lt;NCI_GCODE!System.Runtime.CompilerServices.IsConst,System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the gcode types in mask. </summary>
            <param name="gcodeMask"> map of gcodes and true = must be included. </param>
        </member>
        <member name="M:BnciCache.Clear">
            <summary> Clears the underlying maps. </summary>
        </member>
        <member name="M:BnciCache.GetOpIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets const reference to the set of operation IDs represented in the map of NCI lines. </summary>
            <param name="opIDs"> The set of ID's to fill in. </param>
            <returns> const reference to m_OpIDsInCache. </returns>
        </member>
        <member name="M:BnciCache.GetGcodeMask(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Fills in gcodeMask with NCI_GCODE types as long types. </summary>
            <param name="gcodeMask"> The array of gcodes to fill in. </param>
            <returns> Size of gcodeMask. </returns>
        </member>
        <member name="M:BnciCache.GetGcodeMask">
            <summary> Gets const reference to the gcode mask. </summary>
            <returns> const reference to m_GcodeMask. </returns>
        </member>
        <member name="M:BnciCache.GetMap">
            <summary> Gets const reference to the underlying map. </summary>
            <returns> const reference to m_Cache. </returns>
        </member>
        <member name="M:BnciCache.AddOrReplaceOp(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Add or replace the nci lines from the operation in m_BnciCache. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> Number of nci lines updated in m_BnciCache for the operation. </returns>
        </member>
        <member name="M:BnciCache.RemoveOp(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Removes all nci lines from the cache belonging to the operation with the IDs within opIDs. </summary>
            <param name="opIDs"> Identifiers for the operations. </param>
            <returns> Number of lines removed from m_CacheBnci. </returns>
        </member>
        <member name="M:BnciCache.RemoveOp(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes all nci lines from the cache belonging to the operation with the ID of opID. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> Number of lines removed from m_CacheBnci. </returns>
        </member>
        <member name="M:BnciCache.GetGcodesFromOp(System.Int32!System.Runtime.CompilerServices.IsLong,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the gcodes from operation's cached NCI lines. </summary>
            <param name="opID">   Identifier for the operation. </param>
            <param name="gcodes"> The gcodes. </param>
            <returns> Size of gcodes. </returns>
        </member>
        <member name="M:BnciCache.OpsCacheComplete(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Return true if op's cache can be considered as containing all the NCI lines to be considered complete. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if "complete", false if not. </returns>
        </member>
        <member name="M:BnciCache.Load(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the nci cache from the current file for the given operation ID. </summary>
            <param name="opIDs"> true = add just the ops that exist in the db whose nci is not yet cached, false = all ops. </param>
            <returns> Size of m_BnciCache. </returns>
        </member>
        <member name="M:BnciCache.Load(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Loads the nci cache from the current file for the given operation ID. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> Number of NCI lines cached for the given operation. </returns>
        </member>
        <member name="M:BnciCache.Load(System.Boolean)">
            <summary> Loads the nci cache from the current file. </summary>
            <param name="justMissingOps"> true = add just the ops that exist in the db whose nci is not yet cached, false = all ops. </param>
            <returns> Size of m_BnciCache. </returns>
        </member>
        <member name="M:BnciCache.GetNci(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CBnciReadWrite*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
            <summary> Copies nci lines into bnciRW from m_BnciCache that match gcodes. </summary>
            <param name="opIDs">	 The operation ID's to extract NCI from, 0 for all. </param>
            <param name="gcodeMask"> The gcode mask, empty for all. </param>
            <param name="bnciRW">    NCI container. </param>
            <param name="maxLines">  (Optional) the maximum number of nci lines to collect, 0 = all. </param>
            <returns> Number of NCI lines added to bnciRW. </returns>
        </member>
        <member name="M:BnciCache.GetNciPtrsThatMatchPlaneID(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;nci_bin!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;nci_bin!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds array of const ptrs to 1016 lines in m_BnciCache whose plane ID's match the given plane ID. </summary>
            <param name="planeID">  Plane ID to match. </param>
            <param name="bnciPtrs"> The array of const pointers to fill in. </param>
            <returns> Size of bnciPtrs. </returns>
        </member>
        <member name="M:BnciCache.CacheNciLine(nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the nci line to m_BnciCache. </summary>
            <param name="bnciLine"> The nci line to cache. </param>
            <returns> true if added to cache, false if not. </returns>
        </member>
        <member name="M:BnciCache.GetSettings">
            <summary> returns the m_Enabled and m_Compare values as a pair. </summary>
            <returns> The m_Enabled and m_Compare values as a pair. </returns>
        </member>
        <member name="M:BnciCache.Init(BnciCache.ToggleValues,BnciCache.ToggleValues,System.Boolean,System.Boolean,std.map&lt;NCI_GCODE,System.Boolean,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;std.pair&lt;NCI_GCODE!System.Runtime.CompilerServices.IsConst,System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Enables NCI caching. </summary>
            <param name="on">		  true to enable. </param>
            <param name="compare">    true to set comparison option. </param>
            <param name="clearCache"> true to clear cache. </param>
            <param name="loadCache">  true to reload cache from bnci disk file. </param>
            <param name="pGcodeMask"> (Optional) the gcode mask. </param>
        </member>
        <member name="T:BnciCache.ToggleValues">
            <summary> Values that represent toggling of m_Enabled and m_Compare values; </summary>
        </member>
        <member name="M:BnciCache.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:BnciCache.#ctor(System.Boolean,System.Boolean)">
            <summary> Constructor. </summary>
            <param name="enabled"> (Optional) true to enable, false to disable. </param>
            <param name="compare"> (Optional) true to compare with disk, false to ignore. </param>
        </member>
        <member name="D:BnciCache.DrawnMap">
            <summary> Defines an alias representing a map of operation ID's and a bool that keeps track of bnci that needs to
		  be redrawn. </summary>
        </member>
        <member name="D:BnciCache.CacheMap">
            <summary> Defines an alias representing a map of operation ID's and bnci lines. </summary>
        </member>
        <member name="D:BnciCache.BnciMap">
            <summary> Defines an alias representing a map of bnci file positions and bnci lines. </summary>
        </member>
        <member name="T:BnciCache">
            <summary> Mastercam Planes class. </summary>
        </member>
        <member name="M:WorkOffsetUtil.clear">
            <summary> Clears this object to its blank/initial state. </summary>
        </member>
        <member name="M:WorkOffsetUtil.GetAllNonMatchingNciNodes">
            <summary> Collect all nci-nodes that have matrices/origins different from the assigned plane.  This occurs with
		  lathe and rotary axis operations. </summary>
        </member>
        <member name="M:WorkOffsetUtil.AssignWorkOffsetNumber(WorkOffsetNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assign the work offset value based on parameter settings in m_BuildPrm. </summary>
            <param name="wNode"> The node to assign a work offset value to. </param>
        </member>
        <member name="M:WorkOffsetUtil.SkipOperation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Check build parameters include/exclude mask for the given operation ID when building m_Map. </summary>
            <param name="opID"> Operation ID to check. </param>
            <returns> Return true if operation should be skipped. </returns>
        </member>
        <member name="M:WorkOffsetUtil.CheckForConflict(WorkOffsetNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check for matching work offset value in m_Map whose matrix and origin do not match the given one. </summary>
            <param name="wNode"> Work offset node to compare. </param>
            <returns> Return true if conflict. </returns>
        </member>
        <member name="M:WorkOffsetUtil.OffsetInUse(System.Int32!System.Runtime.CompilerServices.IsLong,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return copy of matching work offset from m_Map that's already in use. </summary>
            <param name="woffNo">    Work offset value to match. </param>
            <param name="m33">		 Matrix33 to match. </param>
            <param name="wOriginPt"> Origin in world coordinates to match. </param>
            <returns> Return copy of matching work offset which contains source info. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetNumberingMode(System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Return return work offset numbering mode from nesting parameters. </summary>
            <param name="modeRef">  Reference to a mode value.  May be corrected/updated. </param>
            <param name="matchRef"> True - match existing workoffset matrix/origins. </param>
            <returns> return mode. </returns>
        </member>
        <member name="M:WorkOffsetUtil.MapAdd(WorkOffsetNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Add node to m_Map (check for duplicate matrices) </summary>
            <param name="wNode"> The node to add. </param>
            <returns> Return true if added, false if not added (or duplicate found) </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetAllMatchingNodes(System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;WorkOffsetNode,std.allocator&lt;WorkOffsetNode&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies all nodes from m_AllNodes that match work offset #, matrix and origin in world coordinates. </summary>
            <param name="matchOnWorkOffsetNo"> true to test for matching work offset to matchOnWorkOffsetNo, false = change all in
								   woffArray. </param>
            <param name="woffNo">			   The work offset # to match. </param>
            <param name="m33">				   The matrix to match. </param>
            <param name="wOrigin">			   The origin in world coordinates to match. </param>
            <param name="woffArray">		   Vector to fill inwith matching work offset nodes. </param>
            <returns> Size of woffArray. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetAllNodes">
            <summary> Gets const reference to m_AllNodes. </summary>
            <returns> const reference to m_AllNodes. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetMap">
            <summary> Gets const reference to m_Map. </summary>
            <returns> const reference to m_Map. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetGcodeMask">
            <summary> Return const reference to array of NCI gcodes related to work offset calculations. </summary>
            <returns> The gcode mask. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetBuildParameters">
            <summary> return const reference to m_BuildPrm. </summary>
            <returns> const reference to m_BuildPrm. </returns>
        </member>
        <member name="M:WorkOffsetUtil.NumberUndefinedWorkOffsetsInMap">
            <summary> Number any undefined work offsets in the map per the numbering rules in buildPrm. </summary>
            <returns> Return number of workoffset values updated. </returns>
        </member>
        <member name="M:WorkOffsetUtil.MapDump">
            <summary> Dump the contents of m_Map. </summary>
            <returns> size of the map. </returns>
        </member>
        <member name="M:WorkOffsetUtil.MapSize">
            <summary> Return size of the map. </summary>
            <returns> size of the map. </returns>
        </member>
        <member name="M:WorkOffsetUtil.MapAddNci(CBnciReadWrite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;WorkOffsetNode,std.allocator&lt;WorkOffsetNode&gt;&gt;*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Create and add work offset nodes to m_Map from the given NCI lines (1013, 1014, 1016 and 1027) </summary>
            <param name="bnciRW">		  Reference to a CBnciReadWrite containing the required NCI lines. </param>
            <param name="theOp">		  Reference to the NCI's owner operation. </param>
            <param name="pWoffArray">	  (Optional) Ptr to an array to save the newly added nodes since m_Map inserts them unordered. </param>
            <param name="machineGroupID"> (Optional) ID of NCI's owner machine group (0 to detect from theOp) </param>
            <returns> Return # of work offset nodes added. </returns>
        </member>
        <member name="M:WorkOffsetUtil.MapAddOperations(std.vector&lt;operation,std.allocator&lt;operation&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes!System.Runtime.CompilerServices.IsConst*)">
            <summary> Create and add work offset nodes to m_Map from the given operations. </summary>
            <param name="opArray"> Reference to array of operations. </param>
            <param name="pPlanes"> (Optional) the planes. </param>
            <returns> Return # of work offset nodes added. </returns>
        </member>
        <member name="M:WorkOffsetUtil.MapAddPlanes(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Create and add work offset nodes to m_Map from the given planes. </summary>
            <param name="refPlane"> Reference to MastercamPlanes object. </param>
            <returns> Return # of work offset nodes added. </returns>
        </member>
        <member name="M:WorkOffsetUtil.SetBuildParameters(WorkOffsetUtil.BuildParameters!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set the build parameters. </summary>
            <param name="buildPrm"> What to build and numbering rules. </param>
        </member>
        <member name="M:WorkOffsetUtil.BuildWorkOffsetMap(WorkOffsetUtil.BuildParameters!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;operation,std.allocator&lt;operation&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCFile*)">
            <summary> Build the array of work offset nodes from an operation array, planes array and binary NCI file. </summary>
            <param name="buildPrm">   What to build and numbering rules. </param>
            <param name="opArray">    an array of toolpath operations. </param>
            <param name="mcamPlanes"> a MastercamPlanes object. </param>
            <param name="pBnciFile">  a file ptr to an open binary NCI file. </param>
            <returns> Returns size of map. </returns>
        </member>
        <member name="M:WorkOffsetUtil.BuildWorkOffsetMap(WorkOffsetUtil.BuildParameters!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CInterrogateMastercamFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build the array of work offset nodes from a CInterrogateMastercam object. </summary>
            <param name="buildPrm"> What to build and numbering rules. </param>
            <param name="inFile">   reference to a CInterrogateMastercam. </param>
            <returns> Returns size of map. </returns>
        </member>
        <member name="M:WorkOffsetUtil.BuildParameters.SetExcludeMatchingMask(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Toolpath operation IDs to exclude from work offset match. </summary>
            <param name="opIDs"> Array of operation IDs. </param>
            <returns> Returns size of m_OpIDsExcludeMatching mask. </returns>
        </member>
        <member name="M:WorkOffsetUtil.BuildParameters.SetExcludeMask(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Toolpath operation IDs to exclude. </summary>
            <param name="opIDs"> Array of operation IDs. </param>
            <returns> Returns size of m_OpIDsExclude mask. </returns>
        </member>
        <member name="M:WorkOffsetUtil.BuildParameters.SetIncludeMask(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Toolpath operation IDs to include (exclusive) </summary>
            <param name="opIDs"> Array of operation IDs. </param>
            <returns> Returns size of m_OpIDsInclude mask. </returns>
        </member>
        <member name="M:WorkOffsetUtil.BuildParameters.op_Assign(WorkOffsetUtil.BuildParameters!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:WorkOffsetUtil.BuildParameters.#ctor(System.Boolean,WorkOffsetUtil.BuildParameters.Source,System.Boolean,System.Boolean,WorkOffsetUtil.BuildParameters.MatchExisting,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Default constructor. </summary>
            <param name="useCache">			   (Optional) UseNciCache::Yes to use NCI cache, :No = read from disk. </param>
            <param name="source">			   (Optional) (SourcePlanes | SourceOperations | SourceNci) </param>
            <param name="collectUndefined">    (Optional) true - add workoffsets with a -1 value (undefined) to the map. </param>
            <param name="numberUndefined">	   (Optional) true - number any undefined work offsets. </param>
            <param name="numberMatchExisting"> (Optional) When numbering undefined work offsets, first match existing. </param>
            <param name="allowConflicts">	   (Optional) allow conflicting work offsets to be added to the map. </param>
            <param name="incStart">			   (Optional) Starting work offset value. </param>
            <param name="inc">				   (Optional) Amount to increment work offset when numbering. </param>
            <param name="dumpMap">			   (Optional) Debug - dump map to a dialog and display. </param>
        </member>
        <member name="T:WorkOffsetUtil.BuildParameters.MatchExisting">
            <summary> Work offset value matching mode. </summary>
        </member>
        <member name="T:WorkOffsetUtil.BuildParameters.Source">
            <summary> work offset source flags. </summary>
        </member>
        <member name="T:WorkOffsetUtil.BuildParameters">
            <summary>Where to look for work offsets and numbering rules for BuildWorkOffsetMap()</summary>
        </member>
        <member name="M:WorkOffsetUtil.GetNumberingMode(prm_nesting*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return return work offset numbering mode from nesting parameters. </summary>
            <param name="prmNesting"> operation nesting parameters. </param>
            <returns> return mode. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetNumberingMode(prm_xform*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return return work offset numbering mode from transform parameters. </summary>
            <param name="prmXform"> operation transform parameters. </param>
            <returns> return mode. </returns>
        </member>
        <member name="M:WorkOffsetUtil.AlreadyBeingUsed(System.Int32!System.Runtime.CompilerServices.IsLong,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return first work offset node in map if work offset value is already being used somewhere with a different matrix and origin. </summary>
            <param name="woffNo">		  work offset value to match. </param>
            <param name="m33">			  the 3x3 matrix to match. </param>
            <param name="wOriginPt">	  the origin point to match. </param>
            <param name="ignoreThisOpID"> (Optional) do not check the operation with this ID. </param>
            <returns> return copy of the matching work offset node. </returns>
        </member>
        <member name="M:WorkOffsetUtil.AlreadyBeingUsed(System.Int32!System.Runtime.CompilerServices.IsLong,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;operation,std.allocator&lt;operation&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCFile*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return work offset node that matches given work offset value, matrix and origin. </summary>
            <param name="woffNo">		  work offset value to match. </param>
            <param name="m33">			  the 3x3 matrix to match. </param>
            <param name="wOriginPt">	  the origin point to match. </param>
            <param name="opArray">		  an operation array to look thru. </param>
            <param name="mcamPlanes">	  a Planes array to look thru. </param>
            <param name="pBnciFile">	  an open Mastercam file ptr to look thru. </param>
            <param name="ignoreThisOpID"> (Optional) do not check the operation with this ID. </param>
            <returns> return copy of the matching work offset node. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetMapNodeByFilePosition(System.Int64,WorkOffsetNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build map and get the work offset assignment at a binary NCI file position. </summary>
            <param name="fPos">   binary NCI file position of a 1016 line. </param>
            <param name="wNode">  work offset node to copy matching node into. </param>
            <returns> return true if node found and successful. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetMapNodesByMatrixAndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;WorkOffsetNode,std.allocator&lt;WorkOffsetNode&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Return the assigned work offset number that matched a 3x3 martix and origin point.
m_Map must have already been built via BuildWorkOffsetMap()
</summary>
            <param name="m33">			  the 3x3 matrix to match. </param>
            <param name="originPt">		  the origin point to match. </param>
            <param name="nodeArray">	  array to fill in with matches. </param>
            <param name="machineGroupID"> (Optional) the machine group ID to match, 0 for all. </param>
            <returns> return size of nodeArray. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetAllNodesByWorkOffset(System.Int32!System.Runtime.CompilerServices.IsLong,std.vector&lt;WorkOffsetNode,std.allocator&lt;WorkOffsetNode&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect all the existing work offset assignments for the given work offset # from m_AllNodes. </summary>
            <param name="woffNo">    work offset value to match. </param>
            <param name="nodeArray"> array to copy work offset nodes into. </param>
            <returns> return # of work offset nodes collected into array. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetMapNodesByWorkOffset(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,std.vector&lt;WorkOffsetNode,std.allocator&lt;WorkOffsetNode&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect all the existing work offset assignments for the given work offset # from m_Map. </summary>
            <param name="woffNo">		  work offset value to match. </param>
            <param name="machineGroupID"> Machine group ID to match, 0 for all. </param>
            <param name="nodeArray">	  array to copy work offset nodes into. </param>
            <returns> return # of work offset nodes collected into array. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetMapNodesByWorkOffset(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,std.vector&lt;operation,std.allocator&lt;operation&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCFile*,std.vector&lt;WorkOffsetNode,std.allocator&lt;WorkOffsetNode&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Build map and collect all the existing work offset assignments for the given work offset #. </summary>
            <param name="woffNo">		  work offset value to match. </param>
            <param name="machineGroupID"> Machine group ID to match, 0 for all. </param>
            <param name="opArray">		  operation array to search for work offset values. </param>
            <param name="mcamPlanes">	  MastercamPlanes object to search for work offset values. </param>
            <param name="pBnciFile">	  file pointer to open Mastercam binary NCI file to search for work offset values. </param>
            <param name="nodeArray">	  array to copy work offset nodes into. </param>
            <param name="ignoreThisOpID"> (Optional) do not check the operation with this ID. </param>
            <returns> return # of work offset nodes collected into array. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetNextWorkOffset(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary>
Calculate the next work offset #
m_Map must have already been built via BuildWorkOffsetMap()
</summary>
            <param name="machineGroupID"> Machine group ID to match, 0 for all. </param>
            <param name="start">		  start work offset value. </param>
            <param name="inc">			  value to increment work offset. </param>
            <returns> next available work offset value. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetNextWorkOffset(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.vector&lt;operation,std.allocator&lt;operation&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCFile*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Build map and calculate the next work offset #. </summary>
            <param name="machineGroupID"> Machine group ID to match, 0 for all. </param>
            <param name="start">		  start work offset value. </param>
            <param name="inc">			  value to increment work offset. </param>
            <param name="opArray">		  operation array to search for work offset values. </param>
            <param name="mcamPlanes">	  MastercamPlanes object to search for work offset values. </param>
            <param name="pBnciFile">	  file pointer to open Mastercam binary NCI file to search for work offset values. </param>
            <param name="ignoreThisOpID"> (Optional) do not check the operation with this ID. </param>
            <returns> next available work offset value. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetMatchingWorkOffset(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Return the assigned work offset number that matched a 3x3 martix and origin point.
m_Map must have already been built via BuildWorkOffsetMap()
</summary>
            <param name="m33">			  the 3x3 matrix to match. </param>
            <param name="originPt">		  the origin point to match. </param>
            <param name="assigned">		  only match on work offset values that were not assigned before being added to the map. </param>
            <param name="conflictOK">	  return the work offset value assigned to the match even if it conflict with others in the map. </param>
            <param name="machineGroupID"> the machine group ID to match. </param>
            <returns> return the matching work offset #. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetMatchingWorkOffset(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;operation,std.allocator&lt;operation&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCFile*,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Build map and return the assigned work offset number that matched a 3x3 martix and origin point. </summary>
            <param name="m33">			  the 3x3 matrix to match. </param>
            <param name="originPt">		  the origin point to match. </param>
            <param name="opArray">		  an operation array to look thru. </param>
            <param name="mcamPlanes">	  a Planes array to look thru. </param>
            <param name="pBnciFile">	  an open Mastercam file ptr to look thru. </param>
            <param name="assigned">		  only match on work offset values that were not assigned before being added to the map. </param>
            <param name="conflictOK">	  return the work offset value assigned to the match even if it conflict with others in the map. </param>
            <param name="ignoreThisOpID"> do not check the operation with this ID. </param>
            <returns> return the matching work offset #. </returns>
        </member>
        <member name="M:WorkOffsetUtil.GetUpdatedOpIDs">
            <summary> Gets const reference to m_OpIDsUpdated. </summary>
            <returns> const reference to m_OpIDsUpdated. </returns>
        </member>
        <member name="T:WorkOffsetUtil.OperationUpdated">
            <summary> Updates the operation's Tplane, WCS and Cplane work offset values. </summary>
            <param name="justQuery">			  true to just query (just collect the affected operation IDs, don't actually update the db). </param>
            <param name="matchOnOldWorkOffsetNo"> true to test for matching old work offset no, false = change all in woffArray. </param>
            <param name="theOp">				  the operation to update. </param>
            <param name="oldWoffNo">			  The old woff number. </param>
            <param name="newWoffNo">			  The new woff number. </param>
            <param name="m33">					  Matrix33 to match. </param>
            <param name="worldOrigin">			  Origin in world coordinates to match. </param>
            <param name="planeID">				  identifier for the plane, if (planeID &gt; 0) op_view.v_idn must match before
									  work offset is updated. </param>
            <param name="doDependents">			  true - also update any dependent operations of the given operation. </param>
            <param name="showTreeCtrl">			  true to show tree control of edited operation. </param>
            <returns> OperationUpdated mask if the operation's Tplane was updated. </returns>
        </member>
        <member name="M:WorkOffsetUtil.BuildOperationArray">
            <summary> collect an array of all toolpath operations from the current db. </summary>
            <returns> return vector of operations. </returns>
        </member>
        <member name="M:WorkOffsetUtil.BuildOperationArray(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> collect an array of toolpath operations. </summary>
            <param name="excludeOpIDs"> exclude operations with these ID's from collection. </param>
            <param name="mcxFileName">  valid Mastercam file name, 0 length for current DB. </param>
            <returns> return vector of operations. </returns>
        </member>
        <member name="M:WorkOffsetUtil.ChangeWorkOffsetInPlane(System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CWnd*,System.Boolean)">
            <summary> Change a plane's work offset. </summary>
            <param name="justQuery">			  true to just query (just collect the affected operation IDs, don't actually update the db). </param>
            <param name="matchOnOldWorkOffsetNo"> true to test for matching old work offset no, false = change all in woffArray. </param>
            <param name="planeID">				  Identifier for the plane. </param>
            <param name="oldWoffNo">			  The old woff no. </param>
            <param name="newWoffNo">			  The new woff number. </param>
            <param name="askUser">				  ptr to parent window to prompt user to proceed, nullptr = no prompt. </param>
            <param name="showTreeCtrl">			  true to show tree control of edited operation. </param>
            <returns> return the number of substitutions that occured. </returns>
        </member>
        <member name="M:WorkOffsetUtil.ChangeWorkOffsetInDb(System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;WorkOffsetNode,std.allocator&lt;WorkOffsetNode&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> update a work offset value in a MastercamPlanes object, toolpath operation and binary nci file. </summary>
            <param name="justQuery">			  true to just query (just collect the affected operation IDs, don't actually update the db). </param>
            <param name="matchOnOldWorkOffsetNo"> true to test for matching old work offset no, false = change all in woffArray. </param>
            <param name="oldWoffNo">			  The old work offset value. </param>
            <param name="newWoffNo">			  The new work offset value. </param>
            <param name="m33">					  The 3x3 matrix to match. </param>
            <param name="wOriginPt">			  The origin in world coordinates to match. </param>
            <param name="woffArray">			  Array of work offset nodes to update. </param>
            <param name="showTreeCtrl">			  true to show tree control of edited operation. </param>
            <returns> return the number of substitutions that occured. </returns>
        </member>
        <member name="M:WorkOffsetUtil.ShowTreeControlOfUpdatedOperations(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Shows the tree control of updated operations. </summary>
            <param name="opIDs">	 The operation IDs to show. </param>
            <param name="oldWoffNo"> The old work offset #. </param>
            <param name="newWoffNo"> The new woork offset #. </param>
            <param name="message">   The message, empty for default. </param>
        </member>
        <member name="M:WorkOffsetUtil.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:WorkOffsetUtil.#ctor(MastercamPlanes*)">
            <summary> Constructor. </summary>
            <param name="pRefPlanes"> (Optional) The MastercamPlanes reference. </param>
        </member>
        <member name="D:WorkOffsetUtil.Map">
            <summary> Defines an alias representing the map type. </summary>
        </member>
        <member name="D:WorkOffsetUtil.Pair">
            <summary> Defines an alias representing the pair to insert into the Map type. </summary>
        </member>
        <member name="T:WorkOffsetUtil.TRANSFORM_WOFF_MODE">
            <summary> work offset assignment modes in transform toolpath operation parameters. </summary>
        </member>
        <member name="T:NCIToIOF">
            <summary> Allow NCIToIOF to access a private function. </summary>
        </member>
        <member name="T:WorkOffsetUtil">
            <summary> WorkOffsetUtil utility class to collect, calculate and assign work offset assignments from Planes,
		  operations and NCI. </summary>
            <summary> You can never have too many friends. </summary>
        </member>
        <member name="D:WOFF_ARRAY">
            <summary> Defines an alias representing array of work offset info nodes. </summary>
        </member>
        <member name="M:WorkOffsetNode.ValidMachineGroupID">
            <summary> Return true if machine ID in m_Key is valid. </summary>
            <returns> true if m_Key.m_MachineGroupID is valid. </returns>
        </member>
        <member name="M:WorkOffsetNode.RequiresMachineGroupID">
            <summary> Return true if node type requires a valid machine ID in its m_Key. </summary>
            <returns> Return true if node type requires a valid machine ID in its m_Key. </returns>
        </member>
        <member name="M:WorkOffsetNode.GetDescription(CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return a description of the work offset node's contents. </summary>
            <param name="strArray"> String array to fill in with description. </param>
            <returns> The description. </returns>
        </member>
        <member name="M:WorkOffsetNode.Dispose">
            <summary> Default destructor. </summary>
        </member>
        <member name="M:WorkOffsetNode.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:WorkOffsetNode.MapKey.op_LessThan(WorkOffsetNode.MapKey!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than operator for map insertion. </summary>
            <param name="obj"> The object. </param>
            <returns> true if this is less than obj. </returns>
        </member>
        <member name="M:WorkOffsetNode.MapKey.op_Inequality(WorkOffsetNode.MapKey!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Not-equal comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:WorkOffsetNode.MapKey.op_Equality(WorkOffsetNode.MapKey!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:WorkOffsetNode.MapKey.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Default constructor. </summary>
            <param name="woffNo">		  (Optional) the woff no. </param>
            <param name="MachineGroupID"> (Optional) identifier for the machine group. </param>
        </member>
        <member name="T:WorkOffsetNode.MapKey">
            <summary> Key for m_Map.  MapKey::m_MachineGroupID must be valid for all node types except NodeType::Plane. </summary>
        </member>
        <member name="T:WorkOffsetNode.AssignmentType">
            <summary> How was the Work offset value assigned? </summary>
        </member>
        <member name="T:WorkOffsetNode.NodeType">
            <summary> Work offset source. </summary>
        </member>
        <member name="T:WorkOffsetNode">
            <summary> WorkOffsetNode class defines single work offset instance harvested from either an operation, Plane or NCI
		  line.  Used in work offset detection and value calculations. </summary>
        </member>
        <member name="T:MastercamPlanes">
            <summary> forward declaration. </summary>
            <summary> Mastercam Planes class. </summary>
        </member>
        <member name="M:BnciReadFile.ReadFile(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Reads a file. </summary>
            <param name="bnciOpenFile"> The bnci open file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:BnciReadFile.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:BnciReadFile.#ctor(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*,std.unordered_set&lt;NCI_GCODE,std.hash&lt;NCI_GCODE&gt;,std.equal_to&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="bnciOpenFile"> [in,out] The bnci open file. </param>
            <param name="pOpIDs">	    (Optional) If non-null, the operation IDs of the NCI to read. </param>
            <param name="pGcodeMask">   (Optional) If non-null, the gcodes of the NCI to read. </param>
        </member>
        <member name="M:BnciReadFile.#ctor(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*,std.unordered_set&lt;NCI_GCODE,std.hash&lt;NCI_GCODE&gt;,std.equal_to&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="bnciFileName"> Filename of the bnci file. </param>
            <param name="pOpIDs">	    (Optional) If non-null, the operation IDs of the NCI to read. </param>
            <param name="pGcodeMask">   (Optional) If non-null, the gcodes of the NCI to read. </param>
        </member>
        <member name="M:BnciReadFile.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:BnciReadFile">
            <summary> Read a entire binary NCI file into 2 maps, 1 by op ID and one by file position. </summary>
        </member>
        <member name="M:CBnciReadWrite.GetValidPreviousMove(System.Int64,System.Int64,System.Boolean)">
            <summary> Return array index of a valid previous move. </summary>
            <param name="idxStart"> The index start. </param>
            <param name="idxLimit"> The index limit. </param>
            <param name="sosMoves"> true to sos moves. </param>
            <returns> The valid previous move. </returns>
        </member>
        <member name="M:CBnciReadWrite.Init(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initialises this object. </summary>
            <param name="opID"> Identifier for the operation. </param>
        </member>
        <member name="M:CBnciReadWrite.GetNciProductTypeFromOperation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>			Gets nci product type from an operation.</summary>
            <param name="opID">	Identifier for the operation. </param>
            <returns>			NCI_MILL_TYPE, NCI_LATHE_TYPE or NCI_WIRE_TYPE. </returns>
        </member>
        <member name="M:CBnciReadWrite.SortByFilePosition">
            <summary> Sort m_BnciLines by bnci file position. </summary>
        </member>
        <member name="M:CBnciReadWrite.GetData(CArray&lt;nci_bin,nci_bin&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Converts and copies the contents of m_BnciLines into a CArray. </summary>
            <param name="nciArray">   [in,out] The array to copy the nci lines into. </param>
            <param name="pGcodeMask"> A set of nci line's gcodes to include, nullptr = all. </param>
            <returns> return size of nciArray. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetData">
            <summary> Gets const reference to the vector that contains all the NCI. </summary>
            <returns> const reference to m_BnciLines. </returns>
        </member>
        <member name="M:CBnciReadWrite.CopyFromBnciSptr(std.shared_ptr&lt;nci_bin&gt;!System.Runtime.CompilerServices.IsConst,nci_bin*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the bnci line from bnci sptr into bnciLine. </summary>
            <param name="spBnci">   Shared ptr to the bnci line. </param>
            <param name="bnciLine"> Target bnci line structure. </param>
            <returns> The number of bytes copied into bnciLine. </returns>
        </member>
        <member name="M:CBnciReadWrite.MakeBnciSptr(NCI_GCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
            <summary> Makes a nci pointer to the current size of the gcode type. </summary>
            <param name="gcode">    The gcode line. </param>
            <param name="bnciType"> (Optional) Type of the bnci 9NCI_MILL_TYPE, NCI_LATHE_TYPE, NCI_WIRE_TYPE). </param>
            <returns> ptr to new bnci line. </returns>
        </member>
        <member name="M:CBnciReadWrite.MakeBnciSptr(nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a nci pointer and copies contents of bnciLine. </summary>
            <param name="bnciLine"> The bnci line. </param>
            <returns> ptr to copied line </returns>
        </member>
        <member name="M:CBnciReadWrite.GetCommentGcodes">
            <summary> Gets comment gcodes. </summary>
            <returns> The comment gcodes. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetSubProgramGcodes">
            <summary> Gets sub program gcodes. </summary>
            <returns> The sub program gcodes. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetToolChangeGcodes">
            <summary> Gets tool change gcodes. </summary>
            <returns> The tool change gcodes. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetFileName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a Mastercam file name. </summary>
            <param name="fileName"> [in,out] Filename of the file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CBnciReadWrite.BuildSosEosMap(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds a map of operation ID's and their sos and eos bnci lines found in the file. </summary>
            <param name="mcamFile"> The Mastercam file. </param>
            <returns> A pointer to a map. </returns>
        </member>
        <member name="T:CBnciReadWrite.SosEosMap.SosEosPairs">
            <summary> Maps of sos/eos pairs. </summary>
        </member>
        <member name="T:CBnciReadWrite.SosEosMap">
            <summary> Maps of info of start-of-section and end-of-section NCI lines for a file. </summary>
        </member>
        <member name="M:CBnciReadWrite.CheckSosEosPairings(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Check for invalid pairings of start-of-section and end-of-section NCI lines. </summary>
            <param name="mcamFile">		 The bnci file. </param>
            <param name="displayDialog"> True to display dialog the info dialog. </param>
            <returns> True if ok, false if error in pairings. </returns>
        </member>
        <member name="M:CBnciReadWrite.IsAlongVectorMove(System.Int64,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Test if a move is along the tool axis only. </summary>
            <param name="nIndex">    The index into m_BnciLines array. </param>
            <param name="isRetract"> Will be set to true if move is a retract move. </param>
            <returns> true if along vector move, false if not. </returns>
        </member>
        <member name="M:CBnciReadWrite.IsArcMove(System.Int64,System.Double**)">
            <summary> Test if bnci line at index is an arc move. </summary>
            <param name="nIndex">    The index into m_BnciLines array. </param>
            <param name="pFeedRate"> (Optional) If non-null, set to feed rate field. </param>
            <returns> true if arc move, false if not. </returns>
        </member>
        <member name="M:CBnciReadWrite.IsZmove(System.Int64,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double**)">
            <summary> Test if bnci line at index is a Z move. </summary>
            <param name="nIndex">    The index into m_BnciLines array. </param>
            <param name="isRetract"> Will be set to true if move is a retract move. </param>
            <param name="pFeedRate"> (Optional) If non-null, set to feed rate field. </param>
            <returns> true if zmove, false if not. </returns>
        </member>
        <member name="M:CBnciReadWrite.IsToolChangeGcode(NCI_GCODE)">
            <summary> Return gcode value if gcode == 1000, 1001 or 1002, 0 for no match. </summary>
            <param name="gcode"> The gcode to test. </param>
            <returns> The valid tool change gcode, 0 if not. </returns>
        </member>
        <member name="M:CBnciReadWrite.ValidIndex(System.Int64,System.Boolean)">
            <summary> Return true if array index is valid. </summary>
            <param name="idx">  The index. </param>
            <param name="warn"> (Optional) true to display debug warning. </param>
            <returns> true if array index is valid, false if it fails. </returns>
        </member>
        <member name="M:CBnciReadWrite.CompareSize(CBnciReadWrite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare the array contents of comp to this. </summary>
            <param name="comp"> The CBnciReadWrite class to compare this to. </param>
            <returns> -1 if this is less than comp, 1 if comp1 is greater than this, 0 if equal. </returns>
        </member>
        <member name="M:CBnciReadWrite.Empty">
            <summary> Empty contents of m_BnciLines array. </summary>
            <returns> # of elements removed. </returns>
        </member>
        <member name="M:CBnciReadWrite.RemoveAll">
            <summary> Empty contents of m_BnciLines array. </summary>
            <returns> # of elements removed. </returns>
        </member>
        <member name="M:CBnciReadWrite.RemoveAt(System.Int64,System.Int64)">
            <summary> like CArray::RemoveAt() </summary>
            <param name="nIndex"> The index. </param>
            <param name="nCount"> (Optional) number of elements to remove. </param>
        </member>
        <member name="M:CBnciReadWrite.Copy(CBnciReadWrite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy the array of bnci lines into m_BnciLines. </summary>
            <param name="bnciRW"> The array to copy. </param>
            <param name="includeGcodeMask"> Array of gcodes to copy. </param>
            <param name="excludeGcodeMask"> Array of gcodes to exclude. </param>
            <returns> Size of m_BnciLines. </returns>
        </member>
        <member name="M:CBnciReadWrite.Copy(CBnciReadWrite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy the array of bnci lines into m_BnciLines. </summary>
            <param name="bnciRW"> The array to copy. </param>
            <returns> Size of m_BnciLines. </returns>
        </member>
        <member name="M:CBnciReadWrite.Add(std.shared_ptr&lt;nci_bin&gt;)">
            <summary> Append a line to the end of m_BnciLines. </summary>
            <param name="spBnciLine"> The bnci line to add. </param>
            <returns> Array append location. </returns>
        </member>
        <member name="M:CBnciReadWrite.Add(nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Append a line to the end of m_BnciLines. </summary>
            <param name="bnciLine"> The bnci line to add. </param>
            <returns> Array append location. </returns>
        </member>
        <member name="M:CBnciReadWrite.Add(nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;nci_bin&gt;,std.allocator&lt;std.shared_ptr&lt;nci_bin&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Append a line to the end of an array. </summary>
            <param name="bnciLine">  The bnci line to append. </param>
            <param name="bnciLines"> The array to append it to. </param>
            <returns> Array append location. </returns>
        </member>
        <member name="M:CBnciReadWrite.InsertAt(System.Int64,nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Insert a line into the array. </summary>
            <param name="idx">	    The array index. </param>
            <param name="bnciLine"> The bnci line. </param>
            <returns> Array insert location. </returns>
        </member>
        <member name="M:CBnciReadWrite.RemoveIgnoreBlocks">
            <summary> Removes the NCI lines between the NCI_IGNORE_START and NCI_IGNORE_END markers. </summary>
            <returns> Remaining size of m_BnciLines. </returns>
        </member>
        <member name="M:CBnciReadWrite.RemoveNegativeGcodeLines(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;*)">
            <summary> Remove any gcode lines that are &lt; 0 from the array (NCI_BIN_CTOUR_SECT, etc) </summary>
            <param name="pKeepThese"> (Optional) list of negative gcode lines to keep. </param>
            <returns> Remaining size of m_BnciLines. </returns>
        </member>
        <member name="M:CBnciReadWrite.RemoveGcodeLines(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Remove any matching gcode lines from the array. </summary>
            <param name="gcodeMask">	 An array of gcodes to match. </param>
            <returns> Remaining size of m_BnciLines. </returns>
        </member>
        <member name="M:CBnciReadWrite.SetAt(System.Int64,nci_bin!System.Runtime.CompilerServices.IsConst*)">
            <summary> Update a bnci line in the array (must be same gcodes) </summary>
            <param name="idx">		 The array index. </param>
            <param name="pBnciLine"> If non-null, the ptr to bnci line to set. </param>
            <returns> An INT_PTR. </returns>
        </member>
        <member name="M:CBnciReadWrite.SetAt(System.Int64,nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update a bnci line in the array (must be same gcodes) </summary>
            <param name="idx">	    The array index. </param>
            <param name="bnciLine"> The bnci line to set. </param>
            <returns> array index if succf, -1 if error. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetConstPtrAt(System.Int64)">
            <summary> Return a const bnci line ptr from the array. </summary>
            <param name="idx"> The index. </param>
            <returns> null if it fails, else the constant pointer. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetPtrAt(System.Int64)">
            <summary> Return a bnci line ptr from the array. </summary>
            <param name="idx"> The array index. </param>
            <returns> a pointer to the bnci line in the array, nullptr on error. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetEos(nci_bin*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return the end-of-section bnci line for the section. </summary>
            <param name="bnciLine"> The bnci line to fill in with eos. </param>
            <returns> size of bnci line, 0 for error. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetSos(nci_bin*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return the start-of-section bnci line for the section. </summary>
            <param name="bnciLine"> The bnci line to fill in with sos. </param>
            <returns> The size of bnci line, 0 for error. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetAt(System.Int64,nci_bin*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get a bnci line from the array. </summary>
            <param name="idx"> The array index. </param>
            <param name="bnciLine"> The bnci line to fill in. </param>
            <returns> return size of bnci line, 0 for error. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetAt(System.Int64)">
            <summary> Return a bnci line from the secified inden in the array. </summary>
            <param name="idx"> The array index. </param>
            <returns> a copy of the bnci line from the array. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetGcodeLineConstPtrs(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;nci_bin!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;nci_bin!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build an array of nci_bin pointers pointing to matching gcode lines in the member array m_BnciLines. </summary>
            <param name="gcodeMask">	   Array of gcode to match. </param>
            <param name="arrayOfBnciPtrs"> Array of bnci ptrs to fill in. </param>
            <returns> Number of lines found. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetGcodeLinePtrs(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;nci_bin&gt;,std.allocator&lt;std.shared_ptr&lt;nci_bin&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build an array of nci_bin pointers pointing to matching gcode lines in the member array m_BnciLines. </summary>
            <param name="gcodeMask">	   Array of gcode to match. </param>
            <param name="arrayOfBnciPtrs"> Array of bnci ptrs to fill in. </param>
            <returns> Number of lines found. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetGcodeLinePtrs(NCI_GCODE,std.vector&lt;std.shared_ptr&lt;nci_bin!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;nci_bin!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build an array of nci_bin pointers pointing to matching gcode lines in the member array m_BnciLines. </summary>
            <param name="gcodeMatch">	   gcode to match. </param>
            <param name="arrayOfBnciPtrs"> Array of bnci ptrs to fill in. </param>
            <returns> Number of lines found. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetGcodeLines(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;nci_bin&gt;,std.allocator&lt;std.shared_ptr&lt;nci_bin&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Int64,System.Int64)">
            <summary> Gather lines with matching gcodes from the array. </summary>
            <param name="gcodeMask"> The array of gcodes to match. </param>
            <param name="nciLines">  The array to stuff nci lines into. </param>
            <param name="idxStart">  (Optional) the start index of array, -1 for all. </param>
            <param name="idxEnd">    (Optional) the end index of array, -1 for all. </param>
            <param name="nMaxMatch"> (Optional) total # of matching gcode lines to look for, 0 for all. </param>
            <returns> return # of matching gcode bnci lines. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetGcodeLines(NCI_GCODE,std.vector&lt;std.shared_ptr&lt;nci_bin&gt;,std.allocator&lt;std.shared_ptr&lt;nci_bin&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Int64,System.Int64)">
            <summary> Gather lines with matching gcodes from the array. </summary>
            <param name="gcodeMatch"> gcode to match. </param>
            <param name="nciLines">   array to stuff nci lines into. </param>
            <param name="idxStart">   (Optional) start index of array, -1 for all. </param>
            <param name="idxEnd">	  (Optional) end index of array, -1 for all. </param>
            <param name="nMaxMatch">  (Optional) total # of matching gcode lines to look for, 0 for all. </param>
            <returns> The # of matching gcode bnci lines. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetGcodeCount(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return # of matching gcode bnci lines in array. </summary>
            <param name="gcodeMask"> The gcodes to match. </param>
            <returns>  # of matching gcode bnci lines. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetGcodes">
            <summary> Return a set of gcodes that exist in m_spBnciRW. </summary>
            <returns> return gcodes. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetGcodeCount(NCI_GCODE)">
            <summary> Return # of matching gcode bnci lines in array. </summary>
            <param name="gcode"> The gcode to match. </param>
            <returns> return # of matching gcode bnci lines. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetUpperBound">
            <summary> Return upper bound of array. </summary>
            <returns> The upper bound. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetSize">
            <summary> Get size of array. </summary>
            <returns> The size. </returns>
        </member>
        <member name="M:CBnciReadWrite.RewriteLine(nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Rewrite an existing nci line to the binary nci. </summary>
            <param name="bnciLine">		 The bnci line to rewrite. </param>
            <param name="checkExisting"> (Optional) true = check before writing that the NCI line being overwritten is of the same gcode. </param>
            <returns> file position of where the NCI line was written, -1 = error. </returns>
        </member>
        <member name="M:CBnciReadWrite.FindGcode(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,CBnciReadWrite.SearchDirection,System.Int32)">
            <summary> Get array index of the next matching gcode line. </summary>
            <param name="gcodesToMatch"> the gcodes to match. </param>
            <param name="idxCurrent">    current index in array (search will start on the next line). </param>
            <param name="modeDirection"> SearchDirection::Backward = go backwards thru array, SearchDirection::Forward = go forwards. </param>
            <param name="modeMatch">	 (Optional) 1 = find first matching gcode, 0 = find first non-matching gcode. </param>
            <returns> array index of the matching gcode line, -1 if not found. </returns>
        </member>
        <member name="M:CBnciReadWrite.WriteSection(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean)">
            <summary> Write the NCI section to any operation. </summary>
            <param name="opID">		   ID of operation to write to. </param>
            <param name="dontWriteSos"> true - don't write the NCI_BIN_SOS nci line, false - write it. </param>
            <param name="dontWriteEos"> true - don't write the NCI_BIN_EOS nci line, false - write it. </param>
            <returns> # of bnci lines written. </returns>
        </member>
        <member name="M:CBnciReadWrite.RewriteSection(System.Boolean,System.Boolean,System.Boolean)">
            <summary> Rewrite the array to the binary nci file. </summary>
            <param name="overWriteExisting"> false = append new section, true = overwrite existing (must be same size). </param>
            <param name="dontWriteSos">		 true - don't write the NCI_BIN_SOS nci line, false - write it. </param>
            <param name="dontWriteEos">		 true - don't write the NCI_BIN_EOS nci line, false - write it. </param>
            <returns> # of bnci lines rewritten. </returns>
        </member>
        <member name="M:CBnciReadWrite.GetSectionSize">
            <summary> Return total size of all nci lines in the array. </summary>
            <returns> The section size. </returns>
        </member>
        <member name="M:CBnciReadWrite.ReadSection(System.Int64,System.Int64,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
            <summary> Read all the bnci lines in an operation's nci section. </summary>
            <param name="fposStart"> first bnci file position to read from. </param>
            <param name="fposEnd">   last bnci file position to read from. </param>
            <param name="gcodeMask"> array of gcodes to match. </param>
            <param name="maxLines">  (Optional) maximum # of lines to read. </param>
            <returns> # of lines in array. </returns>
        </member>
        <member name="M:CBnciReadWrite.ReadSection(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Int64)">
            <summary> Read all the bnci lines in an operation's nci section. </summary>
            <param name="opID">	    ID of operation to read. </param>
            <param name="useCache"> true to try and use the cache of NCI lines in Planes. </param>
            <param name="maxLines"> (Optional)  maximum # of lines to read. </param>
            <returns> # of lines in array. </returns>
        </member>
        <member name="M:CBnciReadWrite.ReadSection(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
            <summary> Read only the bnci lines that match the gcodMask in an operation's nci section. </summary>
            <param name="opID">		 ID of operation to read. </param>
            <param name="useCache">  true to try and use the cache of NCI lines in Planes. </param>
            <param name="gcodeMask"> set of gcodes to match. </param>
            <param name="maxLines">  (Optional) maximum # of lines to read. </param>
            <returns> # of lines in array. </returns>
        </member>
        <member name="M:CBnciReadWrite.ReadLine(System.Int64)">
            <summary> Read and return the bnci line at the file position. </summary>
            <param name="fpos"> (Optional) the file position. </param>
            <returns> bnci line read; .fpos == -1 on error. </returns>
        </member>
        <member name="M:CBnciReadWrite.SetBnciFilePtr(MCFile*)">
            <summary> Set the file ptr to the desired bnci. </summary>
            <param name="pOpenFile"> If non-null, the open file. </param>
            <returns> previous file ptr. </returns>
        </member>
        <member name="M:CBnciReadWrite.IsEqualContents(CBnciReadWrite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' contains equal contents to this. </summary>
            <param name="obj"> The object to compare. </param>
            <returns> true if equal contents, false if not. </returns>
        </member>
        <member name="M:CBnciReadWrite.IsEqual(CBnciReadWrite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal to this. </summary>
            <param name="obj"> The object to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:CBnciReadWrite.op_Inequality(CBnciReadWrite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:CBnciReadWrite.op_Equality(CBnciReadWrite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:CBnciReadWrite.op_Subscript(System.Int64)">
            <summary> Array indexer operator for m_BnciLines. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:CBnciReadWrite.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CBnciReadWrite.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="opID"> Identifier for the operation. </param>
        </member>
        <member name="M:CBnciReadWrite.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="D:CBnciReadWrite.ConstBnciLineArray">
            <summary> Defines an alias representing an array of constant bnci line ptrs. </summary>
        </member>
        <member name="D:CBnciReadWrite.BnciLineArray">
            <summary> Defines an alias representing an array of bnci line ptrs. </summary>
        </member>
        <member name="D:CBnciReadWrite.BnciLineConstPtr">
            <summary> Defines an alias representing a const bnci line pointer. </summary>
        </member>
        <member name="D:CBnciReadWrite.BnciLinePtr">
            <summary> Defines an alias representing a bnci line pointer. </summary>
        </member>
        <member name="T:CBnciReadWrite.SearchDirection">
            <summary> Values that represent array search direction. </summary>
        </member>
        <member name="T:CBnciReadWrite">
            <summary> A binary NCI utility class. </summary>
        </member>
        <member name="M:fmu_scale_db(System.Boolean,DB_LIST_ENT*,System.Boolean,System.Boolean,System.Boolean)">
 @par Purpose:
		Scales either from metric to english or from english to metric
 @param[in]		e2m				true if the entities are to be scaled to metric; false if they're to be scaled to English
 @param[in]		eptr			The mark from which to check for scalable entities
 @param[in]		b4eptr			true if we're to check the entities before the eptr; false if we're to check the ones after
 @param[in]		prmpt			true if the user is to be prompted as to whether or not there should be any scaling done
 @param[in]		onlyXMTSolids	Flag to control whether or not only XMT solids are processed

</member>
        <member name="M:fmu_scale_yn(System.Boolean,DB_LIST_ENT*,System.Boolean,System.Boolean)">
 @par Purpose:
		Checks to see if there is anything to scale, and if the user wants to
 @param[in]		e2m			true if the entities are to be scaled to metric; false if they're to be scaled to English
 @param[in]		eptr		The mark from which to check for scalable entities
 @param[in]		b4eptr		true if we're to check the entities before the eptr; false if we're to check the ones after
 @param[in]		prmpt		true if the user is to be prompted as to whether or not there should be any scaling done
 @return			true if there are entities to be scaled

</member>
        <member name="M:get_scale_xm(System.Boolean*,x_matrix*,System.Double*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
		Prompt for a scale transformation
 @param[in]		scaleXYZ	true if you wish to scale each vector seperately; false if not
 @param[out]		x_m			The resulting scaled transformation matrix
 @param[out]		scFac		The scale factor(s) - 3 doubles if scaleXYZ; 1 double if !scaleXYZ
 @param[out]		sel_pt		The point to scale about
 @param[out]		succf		true if the user chose a translation successfully; false if not

</member>
        <member name="M:get_translate_xm(x_matrix*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*,System.Int16*,System.Boolean*)">
 @par Purpose:
		Prompt for the translation transformation matrix
 @param[out]		x_m			The resulting translation transformation matrix
 @param[out]		from_pt		The 'from' pt
 @param[out]		to_pt		The 'to' pt
 @param[out]		from_view_n	The 'from' view
 @param[out]		to_view_n	The 'to' view
 @param[out]		succf		true if the user chose a translation successfully; false if not

</member>
        <member name="M:get_rotate_xm(x_matrix*,System.Double*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
		Ask for a rotation.
 @param[out]		x_m			The resulting rotation matrix
 @param[out]		angDegs		The resulting angle of rotation
 @param[out]		sel_pt		The point to rotate about
 @param[out]		succf		true if the user chose a rotation successfully; false if not

</member>
        <member name="M:get_mirror_xm(x_matrix*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
		Ask for the transformation (e.g. mirror line, translation points, etc).
	This matrix can then be passed to xform_setup() prior to xform_store_ent()
	or any of the *_silent() functions.
 @param[out]		x_m		The resulting transformation matrix
 @param[out]		p1		One end of the 'line' to mirror about
 @param[out]		p2		Other end of the 'line' to mirror about
 @param[out]		succf	true if the user chose a transformation and the transformation matrix was created successfully; false if not

</member>
        <member name="M:xform_store_ent(ent*,System.Boolean*,std.vector&lt;DB_LIST_ENT**,std.allocator&lt;DB_LIST_ENT**&gt;&gt;*!System.Runtime.CompilerServices.IsConst)">
 @par Purpose:
			Transform any entity according to x_m_cur and xformation
			(set by xform_setup) and store it in database
 @param[in,out]	entity				entity to transform
 @param[out]		succf				true if transformation ok
 @param[out]		pSldDuplicatedGeom	(optional) Wireframe eptrs duplicated by solid transformation (added to)

</member>
        <member name="M:xform_ent(ent*,x_matrix*,xform_type)">
 @par Purpose:
		Transform any entity according to xm and xt
 @param[in,out]	entity			entity to transform
 @param[in]		xm				transformation matrix
 @param[in]		xt				transformation type (M_xform, etc.)
 @return			succf			true if transformation ok

</member>
        <member name="M:free_xform_data">
 @par Purpose:
		Free up some memory which xform_store_ent() needs

</member>
        <member name="M:get_xform_matrices(CArray&lt;x_matrix,x_matrix&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Get last set of matrices used by xform

 @param[out]		xma		Array of matrices (world)
 @return			type	M_xform, R_xform, S_xform, T_xform

</member>
        <member name="M:free_xform_matrices">
 @par Purpose:
		Free xform matrix array.

 @param[in]		xm		matrix (world)

</member>
        <member name="M:add_xform_matrix(x_matrix)">
 @par Purpose:
		Add a matrix to the xform matrix array.

 @param[in]		xm		matrix (world)

</member>
        <member name="M:xform_rot_angle(System.Double,System.Boolean)">
 @par Purpose:
		Set static variable rot_angle (used by xform_ent and xform_arc)
	Used to rotate arcs within parallel views (set to MAXREAL to disable)
	Should be called after xform_setup (xm, R_xform)
 @param[in]		angle			New rotation angle
 @param[in]		rads			Angle in radians (otherwise, degrees)
 @return			true if a rotation angle was created; false if MAXREAL was used

</member>
        <member name="M:xform_setup(x_matrix*,xform_type)">
 @par Purpose:
		Set static variables x_m_cur and xformation (used by xform_line and xform_arc, for example)
 @param[in]		new_xm			New transformation matrix
 @param[in]		new_xtype		New transformation type (M_xform, etc.)

</member>
        <member name="M:scale_silent(DB_LIST_ENT**,System.Boolean,System.Boolean,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Boolean*)">
 @par Purpose:
		Scales an entity, without any prompts or messages to the user
 @param[in]		eptr			eptr of entity, if null_eptr - use existing selected ents
 @param[in]		init_xf			true = init the transformation matrix
 @param[in]		copy			true = copy, false = rotate existing
 @param[in]		ref_pt			scaling pt (world coordinates)
 @param[in]		scale			scale factor
 @param[out]		succf			true = ok

</member>
        <member name="M:rotate_silent(DB_LIST_ENT**,System.Boolean,System.Boolean,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Int16,System.Boolean*)">
 @par Purpose:
		Rotate a single entity (THAT HAS NO ASSOC WITH OTHER ENTITIES) without making any noise
 @param[in]		eptr			eptr of entity, if null_eptr - use existing selected ents
 @param[in]		init_xf			true = init the transformation matrix
 @param[in]		copy			true = copy, false = rotate existing
 @param[in]		rpt				rotation pt (world coordinates)
 @param[in]		ra				rotation angle in degrees
 @param[in]		view_n			view to rotate in
 @param[out]		succf			true = ok

</member>
        <member name="M:mirror_silent(DB_LIST_ENT**,System.Boolean,System.Boolean,p_3d*,System.Int16,System.Boolean*)">
 @par Purpose:
		Mirror an entity without making any noise
 @param[in]		eptr			eptr of entity, if null_eptr - use existing selected ents
 @param[in]		init_xf			true = init the transformation matrix
 @param[in]		copy			true = copy, false = mirror existing
 @param[in]		pts				two end points of the mirror axis (world coordinates)
 @param[in]		view_n			view to rotate in
 @param[out]		succf			true = ok

</member>
        <member name="M:translate_silent(DB_LIST_ENT**,System.Boolean,System.Int16,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Int16,System.Boolean*)">
 @par Purpose:
		Translate an entity without making any noise
 @param[in]		eptr			eptr of entity, if null_eptr - use existing selected ents
 @param[in]		init_xf			true = init the transformation matrix
 @param[in]		copy			0 = move existing, 1 = copy, 2 = join
 @param[in]		from_pt			from pt (world coordinates)
 @param[in]		to_pt			destination pt (world coordinates)
 @param[in]		from_view_n		from view
 @param[in]		to_view_n		destination view
 @param[out]		succf			true = ok

</member>
        <member name="M:MakeHelix(HELIX_PARAMS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,nb_type*)">
            <summary> Makes a helix. </summary>
            <param name="helixParams">	    If non-null, the sp eptr. </param>
            <param name="helixCenter">	    If non-null, the sp eptr. </param>
            <param name="spEptrs">			The helix center. </param>
            <param name="pNb">				(Optional) If non-null, the nurb struct filled up on output. </param>
            <returns> Return code - 0 = ok, 1 = error </returns>
        </member>
        <member name="M:MakeSpiral(SPIRAL_PARAMS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a Spiral. </summary>
            <param name="spiralParams">		The spiral parameters. </param>
            <param name="spiralCenter">		The array of spiral splines. </param>
            <param name="spEptrs">			The spiral center. </param>
            <returns> Return code - 0 = ok, 1 = error </returns>
        </member>
        <member name="M:create_helix_ent(HELIX_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,nb_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates helix ent without storing it in the database. </summary>
            <param name="helixParams">	Options for controlling the helix. </param>
            <param name="basePoint">  	The base point. </param>
            <param name="nb">		   	The nurb struct. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:create_helix_ent(HELIX_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates helix ent and store it in the database. </summary>
            <param name="helixParams">	Options for controlling the helix. </param>
            <param name="basePoint">  	The base point. </param>
            <param name="helixEptrs">   	The helix eptrs. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:create_spiral_ent(SPIRAL_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates spiral ents and store it in the database. </summary>
            <param name="spiralParams">	Options for controlling the spiral. </param>
            <param name="basePoint">  		The base point. </param>
            <param name="splineEptrs">   	The spiral splines. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:FreeVariableRegistry">
 @par Purpose:
		Frees all of the memory being used by the variable registry

</member>
        <member name="M:UnRegisterVariable(System.Double*)">
 @par Purpose:
		Unregisters a variable (both english and metric)

 @param[in]	var				variable to un-register

</member>
        <member name="M:UnRegisterVariableMetric(System.Double*)">
 @par Purpose:
		Unregisters a metric measurement system variable

 @param[in]	var				metric variable to un-register

</member>
        <member name="M:UnRegisterVariableEnglish(System.Double*)">
 @par Purpose:
		Unregisters an english measurement system variable

 @param[in]	var				english variable to un-register

</member>
        <member name="M:RefreshRegisteredVariable(System.Double*)">
 @par Purpose:
		Resets the values of a previously registered variable

 @param[in]	var				variable to reset

</member>
        <member name="M:RegisterVariable(System.Double*,System.Double,System.Double)">
 @par Purpose:
		Registers a variable

 @param[out]	var				pointer to the registered variable
 @param[in]	metric_default	metric value to set this variable to
 @param[in]	english_default english value to set this variable to

</member>
        <member name="M:RegisterVariableMetric(System.Double*,System.Double)">
 @par Purpose:
		Registers an metric measurement system variable

 @param[out]	var				pointer to the registered variable
 @param[in]	default_value	value to set this variable to

</member>
        <member name="M:RegisterVariableEnglish(System.Double*,System.Double)">
 @par Purpose:
		Registers an english measurement system variable

 @param[out]	var				pointer to the registered variable
 @param[in]	default_value	value to set this variable to

</member>
        <member name="M:ResetRegisteredVariable(System.Double*,System.Double,System.Boolean)">
 @par Purpose:
		Resets the value of a previously registered variable

 @param[in]	var				pointer to the register variable to reset the value for
 @param[in]	new_value		new value to set this variable to
 @param[in]	value_is_metric true if the variable is a metric variable; false if not

</member>
        <member name="M:ChangeConfiguration(System.Boolean,System.Int16,System.Boolean)">
 @par Purpose:
		Pops a dialog prompting the user to change their current configuration

 @param[in]	new_metric		true if the measurement system is to be set to metric; false, and it's set to english
 @param[in]	type_of_chg		0=show dialog, 1=units only, 2=all settings
 @param[in]	regen			true if the user selected to regenerate solids as a result; false if not

</member>
        <member name="M:ReloadConfiguration(System.Boolean)">
 @par Purpose:
		Reloads the current configuration file

 @param[in]	forFileNew			(Optional) true if we're reloading for file/new, otherwise false (the default)

</member>
        <member name="M:SetUnitsMetric(System.Boolean)">
 @par Purpose:
		Sets the working measurement system to metric

 @param[in]	regen			true if the user selected to regenerate solids as a result; false if not

</member>
        <member name="M:SetUnitsEnglish(System.Boolean)">
 @par Purpose:
		Sets the working measurement system to english

 @param[in]	regen			true if the user selected to regenerate solids as a result; false if not

</member>
        <member name="M:SetUnits(System.Boolean,System.Boolean)">
@defgroup  PockBound_Error_Codes Pocket Boundary Error Code Types 
@{ 
@} 
 @par Purpose:
		Sets the working measurement system

 @param[in]	new_metric		true if the measurement system is to be set to metric; false, and it's set to english
 @param[in]	regen			true if the user selected to regenerate solids as a result; false if not

</member>
        <member name="M:pock_ccw(pock_bound*,System.Double*)">
	Purpose: Calculates the direction and area of a pocket boundary

 @param[in]		b		The pocket boundary to examine
 @param[out]		area	The area of the input pocket boundary

 @returns			true if the pocket is counter-clockwise, false if it's clockwise

</member>
        <member name="M:free_pock_bound(pock_bound**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Free a pocket boundary
 @param[in]	b		The pocket boundary to free

</member>
        <member name="M:free_pock_bounds(pock_bound**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Free a linked list of pocket boundaries
 @param[in]	b		The list of pocket boundaries to free

</member>
        <member name="M:duplicate_pock_bounds(pock_bound*,pock_bound*,System.Double)">
            <summary> Test for duplicate pocket boundaries. </summary>
            <param name="pb1">		Pocket boundary 1. </param>
            <param name="pb2">		Pocket boundary 2. </param>
            <param name="locTol">	Tolerance. </param>
            <returns> Return true if all endpoints are duplicate. </returns>
        </member>
        <member name="M:sort_pock_bounds(pock_bound*,System.Boolean,System.Boolean,System.Double,pock_bound**,System.Int16*)">
 Purpose: Set the .pock_n (starting at 0) and .isl flags in pocket
			boundaries according to how boundaries are nested.
 @param[in]		b_chnd			boundaries used to check illegal pockets
 @param[in]		delete_bad		delete bad boundaries by checking against b_chnd
 @param[in]		use_inters		add intersecting islands to pocket boundary
 @param[in]		lin_tol			linearization tolerance (for dealing with boundaries that have a shared edge)
 @param[in,out]	bounds			boundaries with .pock_n and .isl set
 @param[out]		n_pocks			number of pockets

</member>
        <member name="M:chain_to_pock_bound(CHAIN*,System.Double,pock_bound**,System.Int16)">
	Purpose: Converts a chain to a pocket boundary

 @param[in]		chain		The chained geometry to convert
 @param[in]		lin_tol		The linearization tolerance to use when converting
 @param[out]		b			The output pocket boundary
 @param[in]		ViewNumber	The output view number (0 = use current construction plane)

 @returns			A standard pocketing error code (POCK_OK, etc.)

</member>
        <member name="M:read_immed_cur_pos_ac(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16*,System.Boolean*,System.Boolean*,System.Byte*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 * @par Purpose:
 *		Read the cursor position immediately and check for function keys (AutoCursor on)
 *
 * @param[in]	cs		Prompt string to display while waiting for the event ("*" to not display the prompt window)
 * @param[out]	m_pos	cursor position
 * @param[out]	lbd		true = left button down (drag events)
 * @param[out]	click	true = right button down (sketched a point)
 * @param[out]	ch		key pressed
 * @param[out]	m_pt	auto cursor point
 * @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 * @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:read_immed_cur_pos(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16*,System.Boolean*,System.Boolean*,System.Byte*,System.Boolean*)">
 @par Purpose:
		Read the cursor position immediately and check for function keys (AutoCursor off)

 @param[in]	cs		Prompt string to display while waiting for the event ("*" to not display the prompt window)
 @param[out]	m_pos	cursor position
 @param[out]	lbd		true = left button down (drag events)
 @param[out]	click	true = right button down (sketched a point)
 @param[out]	ch		key pressed
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:SelectEntsOrdered(std.deque&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,MC_PRESEL,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
 @par Purpose:
		Same as select_ents but ents are returned in order of selection.

 @param[out]  idns    Container containing entity id numbers of the selected entities
 @param[in]	prompt	Prompt string to display while waiting for the event ("*" to not display the prompt window)
 @param[in]	entMask	A combination of entity mask bit flag types for limiting selection (ie, L_ID, A_ID, SPLINE_ID, etc. 0 for default)
 @param[in]	preSel	A preselection flag value, of the MC_PRESEL type
 @param[in]	bUseDL	Flag that indicates use of display list or database when searching for selected ents.
 @param[in]	bUpdate	Flag that indicates to update idn array after each selection.

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:SelectEnts(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MC_PRESEL,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Wait for the user to select a series of entities. </summary>
            <param name="cs">			  Prompt string to display while waiting for the event ("*" to not display the prompt window) </param>
            <param name="emask">		  A combination of entity mask bit flag types for limiting selection (ie, L_ID, A_ID, SPLINE_ID, etc. 0 for default) </param>
            <param name="succf">		  Fills a provided bool with a true if the event was returned successfully; false if not </param>
            <param name="preSel">		  (Optional) A preselection flag value, of the MC_PRESEL type </param>
            <param name="pSelectedEptrs"> (Optional) If non-null, the selected eptrs. </param>
            <param name="useDL">		  (Optional) Flag that indicates use of display list or database when searching for selected ents. </param>
            <returns> An int. </returns>
        </member>
        <member name="M:select_ents(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean*,MC_PRESEL,DB_LIST_ENT***,System.Int32*,System.Boolean!System.Runtime.CompilerServices.IsConst)">
 @par Purpose:
		Wait for the user to select a series of entities.

 @param[in]	cs		Prompt string to display while waiting for the event ("*" to not display the prompt window)
 @param[in]	emask	A combination of entity mask bit flag types for limiting selection (ie, L_ID, A_ID, SPLINE_ID, etc. 0 for default)
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not
 @param[in]	preSel	A preselection flag value, of the MC_PRESEL type
 @param[out]	eptrs	A pointer to an array containing the eptrs of the selected entities (NULL if they won't need to be returned immediately)
 @param[out]	num_eptrs	A pointer to the number of eptrs returned (NULL if the eptrs won't need to be returned immediately)
 @param[in]	bUseDL	Flag that indicates use of display list or database when searching for selected ents.

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:select_ent(System.Char!System.Runtime.CompilerServices.IsConst*,ent*,DB_LIST_ENT**,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,System.Boolean*)">
@}
 @par Purpose:
		Wait for the user to select an entity.

 @param[in]	cs		Prompt string to display while waiting for the event ("*" to not display the prompt window)
 @param[out]	entity	A pointer to the structure of the entity the user selected
 @param[out]	eptr	The eptr of the selected entity
 @param[out]	sel_pt	The position of the cursor upon entity selection, in view coordinates
 @param[out]	t		A pointer to the selected entity's t value (or values, depending on the entity type)
 @param[in]	smask	A combination of selection bit flag types for limiting selection (ie, ALIVE_BIT, etc. 0 for default)
 @param[in]	emask	A combination of entity mask bit flag types for limiting selection (ie, L_ID, A_ID, SPLINE_ID, etc. 0 for default)
 @param[in]	s_color The integer value of the color to use for selected entities
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:read_cursor_pos(System.Char!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
		Reads the cursor position upon a user sketching a point

 @param[in]	cs			Prompt string to display while waiting for the integer event ("*" to not display the prompt window)
 @param[out]	cursor_pos	The cursor position, in view coordinates
 @param[out]	succf		Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:point_proc(System.Char!System.Runtime.CompilerServices.IsConst*,System.Byte*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
		Wait for and then get user input of a sketcher point being selected

 @param[in]	cs			Prompt string to display while waiting for the integer event ("*" to not display the prompt window)
 @param[out]	pt_option	Any point entry code values returned by the point selection (ie, PEC_SKETCH, PEC_ENDPOINT, etc.)
 @param[out]	wpt			The point selected by the user, in world coordinates
 @param[out]	succf		Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:point_proc_proj(System.Char!System.Runtime.CompilerServices.IsConst*,System.Byte*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
		Wait for and then get user input of a sketcher point being selected, projected onto the construction plane

 @param[in]	cs			Prompt string to display while waiting for the integer event ("*" to not display the prompt window)
 @param[out]	pt_option	Any point entry code values returned by the point selection (ie, PEC_SKETCH, PEC_ENDPOINT, etc.)
 @param[out]	cpt			The point selected by the user, projected onto the construction plane
 @param[out]	succf		Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:get_b_int(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16,System.Int16,System.Int16*,System.Boolean*)">
 @par Purpose:
		Wait for and then get user input of an integer, within the provided min and max constraints

 @param[in]	cs		Prompt string to display while waiting for the integer event ("*" to not display the prompt window)
 @param[in]	minv	Minimum value constraint on the input
 @param[in]	maxv	Maximum value constraint on the input
 @param[out]	v		Integer passed back upon some sort of user input
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:get_int(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16*,System.Boolean*)">
 @par Purpose:
		Wait for and then get user input of an integer

 @param[in]	cs		Prompt string to display while waiting for the integer value event ("*" to not display the prompt window)
 @param[out]	v		Integer passed back upon some sort of user input
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:get_b_real_pos(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double,System.Double,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Boolean*,CPoint!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
		Wait for and then get user input of a real, within the provided min and max constraints,
		with the dialog positioned near a given point

 @param[in]	cs		Prompt string to display while waiting for the real value event ("*" to not display the prompt window)
 @param[in]	minv	Minimum value constraint on the input
 @param[in]	maxv	Maximum value constraint on the input
 @param[in]	pt		Point where the dialog will be positioned beside
 @param[out]	v		Real passed back upon some sort of user input
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @param[out]	pOffset (Optional) Pointer to pixel offset of dialog from "pt". Default is (20, 20) - right 20, down 20.
 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:get_b_real(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double,System.Double,System.Double*,System.Boolean*)">
 @par Purpose:
		Wait for and then get user input of a real, within the provided min and max constraints

 @param[in]	cs		Prompt string to display while waiting for the real value event ("*" to not display the prompt window)
 @param[in]	minv	Minimum value constraint on the input
 @param[in]	maxv	Maximum value constraint on the input
 @param[out]	v		Real passed back upon some sort of user input
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:get_real(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double*,System.Boolean*)">
 @par Purpose:
		Wait for and then get user input of a real

 @param[in]	cs		Prompt string to display while waiting for the real value event ("*" to not display the prompt window)
 @param[out]	v		Real passed back upon some sort of user input
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:wait_for_space(System.Char!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
		Wait for a user input of a keyboard "space" hit

 @param[in]	cstr	Prompt string to display while waiting for the angle event (default is NULL)

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:get_angle(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double*,System.Boolean*)">
 @par Purpose:
		Wait for and then get user input of an angle

 @param[in]	cs		Prompt string to display while waiting for the angle event ("*" to not display the prompt window)
 @param[out]	v		Angle passed back upon some sort of user input
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:get_string(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char*,System.Int32,System.Boolean*)">
 @par Purpose:
		Wait for and then get user input of a string

 @param[in]	cs				Prompt string to display while waiting for the string event ("*" to not display the prompt window)
 @param[out]	return_array	The allocated array that will be filled with the string entered by the user
 @param[in]	array_size		The size of the TCHAR array allocated to recieve the resulting string
 @param[out]	succf			Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:get_string(System.Char!System.Runtime.CompilerServices.IsConst*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
		Wait for and then get user input of a string

 @param[in]	cs		Prompt string to display while waiting for the string event ("*" to not display the prompt window)
 @param[out]	str		String passed back upon some sort of user input
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the function

</member>
        <member name="M:get_event(System.Char!System.Runtime.CompilerServices.IsConst*,MCEvent*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Boolean*)">
@}
 @par Purpose:
		Wait for and then get some sort of user input event.

 @param[in]	cs		Prompt string to display while waiting for the event ("*" to not display the prompt window)
 @param[out]	event	Event data passed back upon some sort of user input
 @param[in]	mode	A combination of event mode bit flags for limiting input types (ie, EM_Select, EM_Point, etc.)
 @param[in]	emask	A combination of entity mask bit flag types for limiting selection (ie, L_ID, A_ID, SPLINE_ID, etc. 0 for default)
 @param[in]	smask	A combination of selection bit flag types for limiting selection (ie, ALIVE_BIT, etc. 0 for default)
 @param[out]	succf	Fills a provided bool with a true if the event was returned successfully; false if not

 @return		The return code, of the MC_RETURN type, of the get_event function

</member>
        <member name="T:MC_PRESEL">
@defgroup pre_sel_grp1 Preselection Bit Flag Values
 * @{
</member>
        <member name="M:MCEvent.CleanEvent(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		This will free and redraw any point if necessary
 @param[in]	pnt  The point to clean

</member>
        <member name="M:MCEvent.CleanEvent(CHAIN**)">
 @par Purpose:
		This will free and redraw any chains if necessary
 @param[in]	chains	The chains to clean

</member>
        <member name="M:MCEvent.CleanEvent(ent*)">
 @par Purpose:
		If the entity was not previously selected, this will clean the select bit and redraw the entity if necessary
 @param[in]	entity	The entity to clean

</member>
        <member name="M:MCEvent.CleanEvent(System.Int32)">
 @par Purpose:
		If the solid item was not previously selected, this will clean the item and redraw it if necessary
 @param[in]	tag		The tag of the solid item (body/face/edge)

</member>
        <member name="M:MCEvent.CleanEvent(DB_LIST_ENT*)">
 @par Purpose:
		If the eptr was not previously selected, this will clean the select bit and redraw the entity if necessary
 @param[in]	eptr	The eptr of the entity to clean

</member>
        <member name="M:MCEvent.GetFillDragResults">
 @par Purpose:
		Gets fill drag results
 @return   fill drag results

</member>
        <member name="M:MCEvent.SetFillDrag(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
 @par Purpose:
		Gets fill drag mask
 @param[in]	value	Fill drag event mode (EM_Point/EM_Select/EM_SldBody/EM_SldFace/EM_SldEdge
 @param[in]	value	Fill drag visibility mask (-1 = All Visible)
 @param[in]	value	Fill drag entity mask (-1 = All Types)

</member>
        <member name="M:MCEvent.GetFillDragVisMask">
 @par Purpose:
		Gets fill drag visibility mask
 @return   fill drag visibility mask

</member>
        <member name="M:MCEvent.GetFillDragEntMask">
 @par Purpose:
		Gets fill drag entity mask
 @return   fill drag entity mask

</member>
        <member name="M:MCEvent.GetFillDragEveMode">
 @par Purpose:
		Gets fill drag event mode
 @return   fill drag event mode

</member>
        <member name="M:MCEvent.SelectEntityNotSketchPointWhenControlKeyIsDown">
            <summary> Get select entity not sketch point when control key is down. </summary>
            <returns> True if selection overrides sketched point. </returns>
        </member>
        <member name="M:MCEvent.SelectEntityNotSketchPointWhenControlKeyIsDown(System.Boolean)">
            <summary> Sets select entity not sketch point when control key is down. </summary>
            <param name="value"> True to value. </param>
        </member>
        <member name="M:MCEvent.SameItem(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Check if two events share the same item (entity or solid tag)
 @param[in]	item	The MCEvent to compare
 @return				true if the events share the same item; false if not

</member>
        <member name="M:MCEvent.SamePoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 @par Purpose:
		Check if two point events share the location
 @param[in]	item	The MCEvent to compare
 @param[in]	3d		true = CPlane, false = World
 @return				true if the events share the location; false if not

</member>
        <member name="M:MCEvent.HighlightTag(System.Boolean)">
 @par Purpose:
		Modify highlight of solid selection
 @param[in]	enable	true Add highlight, false Remove highlight

</member>
        <member name="M:MCEvent.op_Assign(MCEvent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Copies MCEvent into another one

 @param[in]	source	The MCEvent to copy

</member>
        <member name="M:MCEvent.SaveSelectionAndHighlight">
 @par Purpose:
		Save selection and highlight states to event

</member>
        <member name="M:MCEvent.RestoreSelectionAndHighlight(ent*,System.Boolean,System.Boolean)">
 @par Purpose:
		Set selection and highlight states to before event status
 @param[in,out]	pEntity		entity (EM_Select only)
 @param[in]		getEntity	get entity from database (EM_Select only)
 @param[in]		putEntity	put entity to database (EM_Select only)

</member>
        <member name="M:MCEvent.CleanEvent">
 @par Purpose:
		This will free and redraw anything that was used in this event type

</member>
        <member name="M:MCEvent.eptr_MALLOC(DB_LIST_ENT***,System.Int32*)">
 @par Purpose:
		Allocates memory for and copies the contents of the internal eptr array
 @param[out]	ptr		The output database entity pointer list
 @param[out]	num		The number of items output in the database entity pointer list
 @return				True if the list was allocated and copied successfully; false if not

</member>
        <member name="M:MCEvent.FillWithBITS(System.Int16)">
 @par Purpose:
		Fills the internal eptrArray with all entities matching a bit field
 @param[in]	bits		The active bit field with which to get entities
 @return					The number of entities filled

</member>
        <member name="M:MCEvent.FilterEptrArray(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
 @par Purpose:
		Filter the internal eptrArray by entity id and selection mask
 @param[in]	emask		entity mask (L_ID, etc)
 @param[in]	smask		selection mask (SELECT_BIT, etc)

</member>
        <member name="M:MCEvent.SetClrSelBits(System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
 @par Purpose:
		This method sets the select bits according to set_match. It clears the select bits that are set in clr_match.
 @param[in]	set_match		bits to set in .sel of selected entities
 @param[in]	clr_match		bits to clear in .sel of selected entities
 @param[in]	clr_unmatched	bits to clear in .sel of non-selected entities
 @param[in]	draw			true if the entities are to be redrawn

</member>
        <member name="M:MCEvent.SetupSelObjEvent(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,System.Int32)">
 @par Purpose:
		Sets up a selection object event
 @param[in]	emode		Event mode
 @param[in]	selIdx		Index of selection object
 @param[in]	item		selection item
 @return		true if the event could be set up correctly

</member>
        <member name="M:MCEvent.SetupTripleclkEvent(System.Int16*)">
 @par Purpose:
		Sets up a triple-click event
 @param[in]	cur_pos		The initial cursor position

</member>
        <member name="M:MCEvent.SetupDblclkEvent(System.Int16*)">
 @par Purpose:
		Sets up a double-click event
 @param[in]	cur_pos		The initial cursor position

</member>
        <member name="M:MCEvent.SetupDragEvent(System.Int16*,System.Boolean)">
 @par Purpose:
		Sets up a drag event
 @param[in]	cur_pos		The initial cursor position
 @param[in]	lbd			The initial left-button-down state

</member>
        <member name="M:MCEvent.SetupMultiEvent">
 @par Purpose:
		Sets up a multiple-input event
 @return		true if the multiple-input event could be set up correctly

</member>
        <member name="M:MCEvent.SetupWindowEvent(System.Int16!System.Runtime.CompilerServices.IsConst(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N2],System.Int16!System.Runtime.CompilerServices.IsConst(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N2],CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Sets up a windowing event
 @param[in]	cip1	The first corner
 @param[in]	cip2	The second corner
 @param[in]	rect	The CRect boundaries

</member>
        <member name="M:MCEvent.SetupVectorEvent(std.vector&lt;p_2d,std.allocator&lt;p_2d&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Sets up a vector event
 @param[in]	vertices	The vertices of the polygon

</member>
        <member name="M:MCEvent.SetupPolygonEvent(std.vector&lt;p_2d,std.allocator&lt;p_2d&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Sets up a polygon event
 @param[in]	vertices	The vertices of the polygon

</member>
        <member name="M:MCEvent.SetupChainEvent(CHAIN**)">
 @par Purpose:
		Sets up a chain event
 @param[in]	chains	The chains to set the event up for

</member>
        <member name="M:MCEvent.SetupFunctionPanelEvent(System.UInt32,System.UInt64,System.Int64)">
 @par Purpose:
		Sets up a function panel event
 @param[in]	cmd		The command ID to set the event up for
 @param[in]	wp		The wParam value
 @param[in]	lp		The lParam value

</member>
        <member name="M:MCEvent.SetupNotifyEvent(System.UInt32,System.UInt64,System.Int64)">
 @par Purpose:
		Sets up a notify event
 @param[in]	cmd		The command ID to set the event up for
 @param[in]	wp		The wParam value
 @param[in]	lp		The lParam value

</member>
        <member name="M:MCEvent.SetupCommandEvent(System.UInt32,System.UInt64,System.Int64)">
 @par Purpose:
		Sets up a command event
 @param[in]	cmd		The command ID to set the event up for
 @param[in]	wp		The wParam value
 @param[in]	lp		The lParam value

</member>
        <member name="M:MCEvent.SetupKeyUpEvent(System.Int16,System.UInt64,System.Int64)">
 @par Purpose:
		Sets up a key up event
 @param[in]	key		The key value to set the event up for
 @param[in]	wp		The wParam value
 @param[in]	lp		The lParam value

</member>
        <member name="M:MCEvent.SetupKeyEvent(System.Int16,System.UInt64,System.Int64)">
 @par Purpose:
		Sets up a key event
 @param[in]	key		The key value to set the event up for
 @param[in]	wp		The wParam value
 @param[in]	lp		The lParam value

</member>
        <member name="M:MCEvent.SetupSketchEvent(aPoint*,System.Int16*)">
 @par Purpose:
		Sets up a sketching event
 @param[in]	ap		An initial auto-cursor point
 @param[in]	cur_pos The initial cursor position

</member>
        <member name="M:MCEvent.SetupSolidEvent(psHit*,System.Int16*)">
 @par Purpose:
		Sets up a solid event
 @param[in]	hit		The initial parasolid hit structure
 @param[in]	cur_pos The initial cursor position

</member>
        <member name="M:MCEvent.SetupSelectEvent(ent*,System.Double*,System.Int16*,System.Int32)">
 @par Purpose:
		Sets up a selection event
 @param[in]	e		An initial entity
 @param[in]	t		Initial t values
 @param[in]	cur_pos The initial cursor position
 @param[in]	selb4	true if the entity was previously selected

</member>
        <member name="M:MCEvent.SetupSelectEvent(DB_LIST_ENT*,System.Double*,System.Int16*,System.Int32)">
 @par Purpose:
		Sets up a selection event
 @param[in]	eptr	An initial entity's eptr
 @param[in]	t		Initial t values
 @param[in]	cur_pos The initial cursor position
 @param[in]	selb4	true if the entity was previously selected

</member>
        <member name="M:MCEvent.SetupPointEvent(aPoint*,System.Int16*,System.Int32)">
 @par Purpose:
		Sets up a point event
 @param[in]	ap		An initial auto-cursor point
 @param[in]	cur_pos The initial cursor position
 @param[in]	tag     Solid tag associated with the point (0 if none)

</member>
        <member name="M:MCEvent.SetupPointEvent(aPoint*,System.Int16*)">
 @par Purpose:
		Sets up a point event
 @param[in]	ap		An initial auto-cursor point
 @param[in]	cur_pos The initial cursor position

</member>
        <member name="M:MCEvent.SetPoints(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the point members - does not set m_ap. </summary>
            <param name="worldPoint"> The world point. </param>
        </member>
        <member name="M:MCEvent.FreeEvent">
 @par Purpose:
			Frees all the memory associated with the current event

</member>
        <member name="M:MCEvent.SetupSldPickMask">
 @par Purpose:
			Set solid pick member

</member>
        <member name="M:MCEvent.SldPickMask(System.Int16)">
 @par Purpose:
			Get solid pick mask setting for type

</member>
        <member name="M:MCEvent.Dispose">
 @par Purpose:
			Standard destructor

</member>
        <member name="M:MCEvent.#ctor">
 @par Purpose:
			Standard constructor

</member>
        <member name="T:SLD_PATTERN_PARAMS">
Solid Patern operation parameters
</member>
        <member name="T:SLD_TRIM_PARAMS">
Solid Trim operation parameters
</member>
        <member name="T:SLD_TRIM_PARAMS_X7">
Solid Trim operation parameters for X6 - X7
</member>
        <member name="T:SLD_TRIM_PARAMS_X5">
Solid Trim operation parameters
</member>
        <member name="T:SLD_DRAFTFACE_PARAMS_X7">
Solid Draft Face operation parameters
</member>
        <member name="T:SLD_SWEEP_PARAMS_V8">
Solid Sweep operation parameters  (pre-v2018)
</member>
        <member name="T:SLD_SWEEP_PARAMS">
Solid Sweep operation parameters
</member>
        <member name="T:SLD_SHELL_PARAMS">
Solid Shell operation parameters
</member>
        <member name="T:SLD_THICKEN_PARAMS">
Solid Thicken operation parameters
</member>
        <member name="T:SLD_LOFT_PARAMS">
Solid Loft operation parameters
</member>
        <member name="T:SLD_PRIMITIVE_PARAMS">
Primitive solid operation parameters
</member>
        <member name="T:SLD_TORUS_PARAMS">
Primitive solid torus operation parameters
</member>
        <member name="T:SLD_SPHERE_PARAMS">
Primitive solid shpere operation parameters
</member>
        <member name="T:SLD_CYL_PARAMS">
Primitive solid cylinder operation parameters
</member>
        <member name="T:SLD_CONE_PARAMS">
Primitive solid cone operation parameters
</member>
        <member name="T:SLD_BLOCK_PARAMS">
Primitive solid block operation parameters
</member>
        <member name="T:SLD_LOOP_INP">
Solid Loop selection structure
</member>
        <member name="T:SLD_CHAMFER_PARAMS">
Solid Chamfer operation parameters
</member>
        <member name="T:psHit">
Solid Selection 'Hit' structure
</member>
        <member name="T:SLD_REVOLVE_PARAMS">
Solid Revolve Parameters
</member>
        <member name="T:SLD_EXTRUDE_PARAMS">
Solid Extrude Parameters
</member>
        <member name="T:SLD_THINWALL_PARAMS">
Solid Thinwall Parameters - used in Solid Extrude, Revolve, etc.
</member>
        <member name="T:SLD_DRAFT_PARAMS">
Solid Draft Parameters - used in Solid Extrude Parameters
</member>
        <member name="D:SldFilletVRDataVector">
            <summary> Defines an alias representing a vector of the solid fillet variable radius instance vector. </summary>
        </member>
        <member name="D:SldFilletVRInstanceVector">
            <summary> Defines an alias representing the solid fillet variable radius instance vector. </summary>
        </member>
        <member name="M:SldFilletVRInstance.#ctor">
            <summary> Constructor to initialize struct. </summary>
        </member>
        <member name="T:SldFilletVRInstance">
            <summary> A solid fillet variable radius instance. </summary>
        </member>
        <member name="T:SLD_FILLET_PARAMS">
@}
@defgroup draft_methods Draft methods
 * @{
@}
@defgroup solid_trim_methods Solid Trim operation methods
 * @{
@}
@defgroup solid_fillet_methods Solid Fillet methods
 * @{
@}
@defgroup solid_fillet_overflow_methods Solid Fillet Overflow methods
 * @{
@}
@defgroup face_face_fillet_types Solid Face-Face Fillet methods
 * @{
@}
@defgroup face_face_fillet_holdline_types Solid Face-Face Fillet HoldLine types
 * @{
@}
Solid Fillet Parameters - used in Solid Fillet functionality
</member>
        <member name="T:SweepTwistType">
@}
@defgroup sweep direction locking options
* @{
</member>
        <member name="T:SweepDirectionLocking">
@}
@defgroup sweep direction locking options
* @{
</member>
        <member name="T:SweepAlignment">
@}
@defgroup sweep alignment options
* @{
</member>
        <member name="T:PATTERN_TYPE">
@}
@defgroup pattern_type patterning method 
 * @{
</member>
        <member name="T:SLD_BOOL_OP">
@}
@defgroup boolean_operations Method for specifying boolean operation
 * @{
</member>
        <member name="M:det3(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Finds the determinant of the matrix

 @param[in]		p1			point 1
 @param[in]		p2			point 2
 @param[in]		p3			point 3
 @return			The determinant of the matrix

</member>
        <member name="M:ReverseArray(System.Int32!System.Runtime.CompilerServices.IsLong,p_3d*)">
 @par Purpose:
			Reverse array of 3D points from start index to stop index

 @param[in]		num			number to be reversed
 @param[in,out]	pArray		array being reversed

</member>
        <member name="M:ReverseArray(System.Int32!System.Runtime.CompilerServices.IsLong,p_2d*)">
 @par Purpose:
			Reverse array of 2D points from start index to stop index

 @param[in]		num			number to be reversed
 @param[in,out]	pArray		array being reversed

</member>
        <member name="M:reverse_real_array(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Double*)">
 @par Purpose:
			Reverse array of reals from start index to stop index

 @param[in]		num			number to be reversed
 @param[in]		dim			number per index
 @param[in,out]	array		array being reversed

</member>
        <member name="M:UnitNormal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the unit normal to two vectors

 @param[in]		tu			the tangent in U direction
 @param[in]		tv			the tangent in V direction
 @param[out]		norm		normal
 @return			Error code

</member>
        <member name="T:UnitNormalErr">
            <summary> UnitNormal error codes. </summary>
        </member>
        <member name="M:curv(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Finds curvature from first and second derivatives.

 @note	This is the real geometric curvature ie the radius
			of curvature is its reciprocal.
			This is not the same as the 'parametric curvature'which
			can be used more efficiently for chord height checks.

 @param[in]		v	first derivative = V
 @param[in]		a	second derivative = A
 @return			The curvature value

</member>
        <member name="M:pt_on_gt_new(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,gt*,System.Double)">
@return true = pt lies on ent
@param[in]		pt			a 2d point
@param[in]		entity		a 2d entity
@param[in]		loc_tol		maximum distance point may lie beyond entity

</member>
        <member name="M:pt_on_gt(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,gt!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Determine whether a point actually lies on an entity.

 @return true = pt lies on ent
 @param[in]		pt		 a 2d point
 @param[in]		entity	 a 2d entity

</member>
        <member name="M:ints_on_gt_new(gt*,gt*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Double,System.Boolean*)">
 @par Purpose:
			like ints_on_gt except intersection may lie beyond end of
			entity by loc_tol
 @param[in]		ent1		entity 1 to intersect
 @param[in]		ent2		entity 2 to intersect
 @param[in]		bias_pt		bias point
 @param[out]		inters		The intersection(s) that lie on both entities
 @param[out]		n_inters	Number of intersections found
 @param[in]		loc_tol		max. distance between ent1 and ent2
 @param[out]		succf		true = ent1 and ent2 intersect

</member>
        <member name="M:ints_on_gt(gt!System.Runtime.CompilerServices.IsConst*,gt!System.Runtime.CompilerServices.IsConst*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*,System.Int16*,System.Double,System.Boolean*)">
 @par Purpose:
			Find the intersection of two entities, insuring that the
			intersection lies on both entities

 @param[in]		ent1		entity 1 to intersect
 @param[in]		ent2		entity 2 to intersect
 @param[in]		bias_pt		bias point
 @param[out]		inters		The intersection(s); that lie on both entities
 @param[out]		n_inters	Number of intersections found
 @param[in]		loc_tol		max. distance between ent1 and ent2
 @param[out]		succf		true = ent1 and ent2 intersect

</member>
        <member name="M:aa_ints(a_2d!System.Runtime.CompilerServices.IsConst*,a_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Finds the intersection points of two circles whose center
			and radius are specified by arc1 and arc2.	Returns the
			intersection points in p1 and p2.  Sets succf to false if the
			circles are concentric or do not intersect.  Allows for tangent
			circles (to within a distance of loc_tol);

 @par		Globals:
			[in]loc_tol		maximum allowable distance between arc1 and arc2
 @param[in]		arc2		second arc to intersect
 @param[out]		p1			intersection point
 @param[out]		p2			intersection point
 @param[out]		succf		true = arc1 and arc2 intersect
 @param[in]		arc1		first arc to intersect

</member>
        <member name="M:la_ints(l_2d!System.Runtime.CompilerServices.IsConst*,a_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Find the intersections of a 2d line and a 2d arc

 @param[in]		line		The line to intersect
 @param[in]		arc			The arc to intersect
 @param[out]		p1			The first intersection point
 @param[out]		p2			The second intersection point
 @param[out]		succf		true = p1 and p2 are valid

</member>
        <member name="M:break_arc_n(a_2d!System.Runtime.CompilerServices.IsConst*,System.Int16,System.Boolean,p_2d*,System.Int16*)">
 @par Purpose:
			Break an arc into points that lie on the endpoints or quadrants and
			put them in forward or reverse order

 @param[in]		arc			The arc to break
 @param[in]		n_pieces	Number of pieces to break arc into
 @param[in]		reversed	true = put points in reverse order
 @param[out]		points		Array of points where the arc was broken
 @param[out]		n_points	Number of points in the points array

</member>
        <member name="M:solve_2x2(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Solves the equation Ax = b, or
			x[1] a1 + x[2] a2 = b, where a1, a2 and b are vectors

 @param[in]		a1			column 1 of matrix
 @param[in]		a2			column 2 of matrix
 @param[in]		b			column vector on right hand side of equation
 @param[out]		x			solution of x1[1] * a1 + x[2] * a2 = b
 @param[out]		succf		true = a1 and a2 are not parallel

</member>
        <member name="M:pt_near_line(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Determines whether a point lies on a line
 @param[in]		pt			a 2d point
 @param[in]		line		a 2d line
 @return			true = point is near the line

</member>
        <member name="M:dist_to_finite_line(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*,System.Double,System.Double*,System.Boolean*)">
 @par Purpose:
			Find the distance from a point to a line.  If the projection of
			the point lies off the line, find the distance from the point
			to the nearest endpoint.  Return false if the distance is greater
			than or equal to max_dist.

 @param[in]		pt			a 2d point
 @param[in]		line		a 2d line
 @param[in]		max_dist
 @param[out]		dist
 @param[out]		succf

</member>
        <member name="M:pt_on_line(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Determines whether a point lies on a line

 @return true = pt lies between line's endpoints
 @param[in]		pt			the 2d point in question
 @param[in]		line		the 2d line in question

</member>
        <member name="M:pt_on_line2(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Determines whether a point lies on a line.
 @note Identical to pt_on_line except with pt_on_line2 a point that lies
		 on the endpoint of the line is considered to lie on the line.

 @return true = pt lies on the line
 @param[in]		pt			the 2d point in question
 @param[in]		line		the 2d line in question

</member>
        <member name="M:cr_a_ppt(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d*,System.Boolean*)">
 @par Purpose:
			Create an arc that passes through two points and is tangent
			thru a vector passing thru the 1st pt

</member>
        <member name="M:cr_a_3p(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d*,System.Boolean*)">
 @par Purpose:
			Create an arc that passes through three points
 @param[in]		p1			point 1 on arc
 @param[in]		p2			point 2 on arc
 @param[in]		p3			point 3 on arc
 @param[out]		arc			a 2d arc
 @param[out]		valid_arc	true = arc is valid

</member>
        <member name="M:constr_ns_arc(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d*,System.Boolean*)">
 @par Purpose:
			Construct an arc that may have a negative sweep.  The advantage
			is that there is no need for a "reversed" flag

 @param[in]		pt1			Endpoint 1
 @param[in]		pt2			Endpoint 2
 @param[in]		center		Centerpoint of the arc
 @param[in]		cw			Arc portion desired is clockwise from start_pt to end_pt (arc sweep will be negative in this case)
 @param[in]		loc_tol		Tolerance
 @param[out]		arc			The arc that's created
 @param[out]		succf		true = Success;  false = Failed

</member>
        <member name="M:constr_circle(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,a_2d*,System.Boolean*)">
 @par Purpose:
			Given the end point, center, and direction of a circle (360 degree arc);,
			reconstruct it
 @param[in]		end_pt		final point
 @param[in]		center		center
 @param[in]		cw			true = CW
 @param[in]		min_radius	minimum arc radius
 @param[out]		arc			the arc
 @param[out]		succf		true if arc radius &gt;= min_radius

</member>
        <member name="M:constr_arc(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d*,System.Boolean*)">
 @par Purpose:
			Given the start point, end point, center, and direction of an arc,
			reconstruct it
 @param[in]		start_pt	Start point
 @param[in]		end_pt		End point
 @param[in]		center		Centerpoint of the arc
 @param[in]		reversed	Reversed?
 @param[out]		arc			The arc that's created
 @param[out]		succf		true = Success;  false = Failed

</member>
        <member name="M:add_to_area(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find twice the area of a polygon (trapezoid) defined by p1, p2 and two
			vertical lines.
 @param[in,out]	area		Adds the area found to this number
 @param[in]		p1			Endpoint of first vertical line
 @param[in]		p2			Endpoint of second vertical line

</member>
        <member name="M:get_gt_endpoints(gt!System.Runtime.CompilerServices.IsConst*,p_2d*)">
 @par Purpose:
			Get the endpoints of a line or arc.
 @param[in]		g		The line or arc to calculate the endpoints of
 @param[out]		pt		The endpoints
 @return			Unused (returns 0)

</member>
        <member name="M:get_ep(gt!System.Runtime.CompilerServices.IsConst*,System.Boolean,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Get an endpoint of a line or arc , or return the location of an entity point
 @param[in]		ent2	The line or arc
 @param[in]		is_near true returns the near endpoint, false returns the far endpoint
 @param[out]		ep		The resulting endpoint
 @return			0 is successful; 1 if the entity was not of one of the given types

</member>
        <member name="M:t_to_pt_arc(System.Double,a_2d!System.Runtime.CompilerServices.IsConst,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Convert parameter value to point on an arc.
 @param[in]		t		The parameter input
 @param[in]		a		The arc from which to calculate our point
 @param[out]		p		The point on the arc represented by the inputs

</member>
        <member name="M:t_to_pt_line(System.Double,l_2d!System.Runtime.CompilerServices.IsConst,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
		Convert a parameter value to point on a line.
 @param[in]		t		The parameter input
 @param[in]		l		The line from which to calculate our point
 @param[out]		p		The point on the line represented by the inputs

</member>
        <member name="M:l_offset(l_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d*,System.Boolean*)">
 @par Purpose:
			Offset a 2d line
 @param[in]		line	The line to offset
 @param[in]		dist	The distance to offset line
 @param[in]		bias	A point to offset line towards
 @param[out]		line1	line offset by dist
 @param[out]		succf	true if bias does not lie on line

</member>
        <member name="M:ll_ints_3d(l_3d!System.Runtime.CompilerServices.IsConst*,l_3d!System.Runtime.CompilerServices.IsConst*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Find the "intersection" (the point on each line closest to the
			other line); of two 3d lines
 @param[in]		line1		The first line to intersect
 @param[in]		line2		The second line to intersect
 @param[out]		inters1		The point on line1 closest to line2
 @param[out]		inters2		The point on line2 closest to line1
 @param[out]		succf		Success/Fail

</member>
        <member name="M:pp_ints(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Boolean*)">
 @par Purpose:
			Finds the point of projection of a point in space onto a plane.
 @param[in]		N			The plane's normal
 @param[in]		plane_pt	Any point in the plane
 @param[in]		point		The point to project
 @param[out]		inters		The intersection of the line and the plane
 @param[out]		t			The parameter value corresponding to inters
 @param[out]		succf		Success/Fail

</member>
        <member name="M:lp_ints(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_3d!System.Runtime.CompilerServices.IsConst*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Boolean*)">
 @par Purpose:
			Finds the intersection of a line and a plane
 @param[in]		N			The plane's normal
 @param[in]		plane_pt	Any point in the plane
 @param[in]		line		The line to intersect
 @param[out]		inters		The intersection of the line and the plane
 @param[out]		t			The parameter value corresponding to inters
 @param[out]		succf		Success/Fail

</member>
        <member name="M:l_ints(l_2d!System.Runtime.CompilerServices.IsConst*,l_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Double*,System.Boolean*)">
 @par Purpose:
			Intersect two 2d lines
 @param[in]		l1		The first line
 @param[in]		l2		The second line
 @param[out]		inters	The intersection point
 @param[out]		t1		parameter value
 @param[out]		t2		parameter value
 @param[out]		succf	Success/Fail

</member>
        <member name="M:t_on_gt(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,gt!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Find the t parameter on a 2d line or arc given a point
 @param[out]		t		The parameter corresponding to the "projected" point
 @param[in]		pt		The point to "project"
 @param[in]		ent_gt	The entity to "project" onto

</member>
        <member name="M:t_on_arc(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Find the t parameter on an arc given a point
 @param[out]		t		The parameter value corresponding to the projected point
 @param[in]		pt		The point to "project"
 @param[in]		arc		The arc to "project" onto

</member>
        <member name="M:t_on_line(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Find the t parameter on a 2d line given a point
 @param[out]		t		The parameter corresponding to the projected point
 @param[in]		pt		The point to "project"
 @param[in]		line	The line to "project" onto

</member>
        <member name="M:proj_pt_gt(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,gt!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Project a point onto a line or arc
 @param[in]		pt		The point to project
 @param[in]		gen_obj The line or arc to project onto
 @param[out]		pr_pt	The projected point
 @param[out]		succf	Success/Fail

</member>
        <member name="M:proj_pt_ar(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Project a 2d point onto a 2d arc
 @param[in]		pt		The point to project
 @param[in]		arc		The arc to project onto
 @param[out]		pr_pt	The projected point
 @param[out]		succf	True if length (pt - arc center); &gt; tol

</member>
        <member name="M:proj_pt_ln_3d(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_3d!System.Runtime.CompilerServices.IsConst*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Boolean*)">
 @par Purpose:
			Project a 3d point onto a 3d line
 @param[in]		pt		The point to project
 @param[in]		line	The line to project onto
 @param[out]		proj_pt The projected point
 @param[out]		t		The parameter (0 = line-&gt;e1, 1 = line-&gt;e2);
 @param[out]		succf	True if line length &gt; tol

</member>
        <member name="M:l_pp_3d(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_3d*)">
 @par Purpose:
			Form a 3d line from its 3d endpoints
 @param[out]		line   Endpoints are set to p1 and p2
 @param[in]		p2		Point 2
 @param[in]		p1		Point 1

</member>
        <member name="M:l_pp(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d*)">
 @par Purpose:
			Form a 2d line from its 2d endpoints
 @param[out]		line	Endpoints are set to p1 and p2
 @param[in]		p2		Point 2
 @param[in]		p1		Point 1

</member>
        <member name="M:unvec(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Double*)">
 @par Purpose:
			Extract the x, y components from a 2d vector
 @param[in]		vector	 vector
 @param[out]		x		 x output
 @param[out]		y		 y output

</member>
        <member name="M:LeftHand(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Given a 2d vector, rotate it 90 degrees.
 @param[in]		vector		original vector
 @return			left hand vector

</member>
        <member name="M:RightHand(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Given a 2d vector, rotate it -90 degrees.
 @param[in]		vector		original vector
 @return			right hand vector

</member>
        <member name="M:restrict_angle(System.Double,System.Double,System.Double*)">
 @par Purpose:
			Restrict an angle between two values by adding or subtracting
			two pi

 @param[in]		min_angle	minimum angle allowed (radians);
 @param[in]		max_angle	maximum angle allowed (radians);
 @param[out]		angle		angle forced

</member>
        <member name="M:rotate_pt(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Rotate a 2d point about another 2d point given the cosine and
			sine of the rotation angle

 @param[in]		pt			The point to rotate
 @param[in]		center		The point to rotate about
 @param[in]		cos_t		cos (rotation angle);
 @param[in]		sin_t		sin (rotation angle);
 @param[out]		rotated_pt	The rotated point

</member>
        <member name="M:length_gt(gt!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Return the length of a 2d line or 2d arc
 @return	The length of the line or arc
 @param[in]	ent		The 2d line or arc to calculate the length of

</member>
        <member name="M:copy_p_3dx(System.Double*,System.Double!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Copy a 3d point
 @param[out]		pt_out		The array to copy to
 @param[in]		pt_in		The array to copy from

</member>
        <member name="M:SetDefaultPartsFolder(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Set the default parts folder for current version part files. </summary>
            <param name="pDefaultFolder"> The new default folder. </param>
        </member>
        <member name="M:GetDefaultPartsFolder">
            <summary> Return the default folder for current version part files, as listed in config. </summary>
            <returns> The default parts folder. </returns>
        </member>
        <member name="M:calc_ellipse(System.Double,System.Double,System.Double,System.Double,System.Double,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*)">
            <summary> Calculates an ellipse in world(top) plane. </summary>
            <param name="xRadius">	   The X axis radius. </param>
            <param name="yRadius">	   The Y axis radius. </param>
            <param name="startAngle">  The start angle in degrees. </param>
            <param name="endAngle">    The end angle in degrees. </param>
            <param name="rotation">    The rotation angle in degrees. </param>
            <param name="centerPoint"> The center point in world coordinates. </param>
            <param name="pEntity">	   The resulting entity (not stored) . </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:save_draft_as_geo(ent*)">
 @par Purpose:
		Create geometry from a drafting entity (note, dimension, witness, or leader).

 @param[in]		entity	drafting entity

 @note			new entities will have current construction color, level, style

</member>
        <member name="M:calc_arrow_vec(v8_wit_ldr*,System.Int16,l_3d*)">
 @par Purpose:
		Calculate a vector from the arrowhead tip to a point along arrow's leader line.

 @param[in]		wl		witness leader line to use
 @param[in]		view	view number of the current view
 @param[out]		vv		the resulting line, in view coordinates

 @note			Depth: DfCIRCULAR = arc[Z] (in view), DfLEADER = 0.0

 @return			true if vector was created successfully; false if not

</member>
        <member name="M:InitLettersData(letters_data*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes (all zero) letters data structure. </summary>
            <param name="data"> The letters data. </param>
        </member>
        <member name="T:letters_data">
            <summary> The letters data. </summary>
        </member>
        <member name="M:LettersIdToFont(System.Int32)">
            <summary> Calculate font number from letters id. </summary>
            <param name="id">   The letters id. </param>
            <returns> The font number. </returns>
        </member>
        <member name="M:LettersIdToMode(System.Int32)">
            <summary> Calculate letters mode from letters id. </summary>
            <param name="id"> The letters id. </param>
            <returns> The letters mode. </returns>
        </member>
        <member name="T:LettersMode">
            <summary> Letters modes. </summary>
        </member>
        <member name="F:DfHvpAngle">
@defgroup draft_ch2 Arrow Defines
@{ 
@} 
@defgroup draft_ch3 Drafting Types
@{ 
@defgroup draft_ch5 Linear Drafting Types
@{ 
@} 
@defgroup draft_ch6 Circular Drafting Types
@{ 
@} 
@defgroup draft_ch7 Ordinate Drafting Types
@{ 
@} 
@} 
</member>
        <member name="M:DraftGlobalsFromDim(ent*,System.Boolean,DGREC*)">
            <summary> Set drafting globals from a dimension. </summary>
            <param name="pEntity"> The entity. </param>
            <param name="doPlane"> (Optional) True to set construction plane. </param>
            <param name="pData">   (Optional) Globals record containing construction plane origin in world coordinates. </param>
        </member>
        <member name="M:DraftGlobalsFromNote(ent*,System.Boolean,DGREC*)">
            <summary> Set drafting globals from a note. </summary>
            <param name="pEntity"> The entity. </param>
            <param name="doPlane"> (Optional) True to set construction plane. </param>
            <param name="pData">   (Optional) Globals record containing construction plane origin in world coordinates. </param>
        </member>
        <member name="M:DraftGlobalsSaveRestore.Save">
            <summary> Save drafting globals to this object. </summary>
        </member>
        <member name="M:DraftGlobalsSaveRestore.Restore">
            <summary> Restore drafting globals from this object. </summary>
        </member>
        <member name="M:DraftGlobalsSaveRestore.Save(System.Boolean)">
            <summary> Save drafting globals to this object. </summary>
            <param name="plane"> True to save plane. </param>
        </member>
        <member name="M:DraftGlobalsSaveRestore.Restore(System.Boolean)">
            <summary> Restore drafting globals from this object. </summary>
            <param name="plane"> True to restore plane. </param>
        </member>
        <member name="M:DraftGlobalsSaveRestore.GlobalsFromDim(ent*)">
            <summary> Set drafting globals from a dimension. </summary>
            <param name="pEntity"> The entity. </param>
        </member>
        <member name="M:DraftGlobalsSaveRestore.GlobalsFromDim(ent*,System.Boolean)">
            <summary> Set drafting globals from a dimension. </summary>
            <param name="pEntity"> The entity. </param>
            <param name="plane">   True to set construction plane. </param>
        </member>
        <member name="M:DraftGlobalsSaveRestore.GlobalsFromNote(ent*)">
            <summary> Set drafting globals from a note. </summary>
            <param name="pEntity"> The entity. </param>
        </member>
        <member name="M:DraftGlobalsSaveRestore.GlobalsFromNote(ent*,System.Boolean)">
            <summary> Set drafting globals from a note. </summary>
            <param name="pEntity"> The entity. </param>
            <param name="plane">   True to set construction plane. </param>
        </member>
        <member name="M:DraftGlobalsSaveRestore.SaveTextHeight(System.Boolean,System.Boolean,System.Boolean)">
            <summary> Save global text height to this object. </summary>
            <param name="dimensions"> True for dimensions. </param>
            <param name="notes">	  True for notes. </param>
            <param name="otherItems"> True for arrow items. </param>
        </member>
        <member name="M:DraftGlobalsSaveRestore.GetAttributes(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets attributes. </summary>
            <param name="color"> The color. </param>
            <param name="level"> The level. </param>
            <param name="width"> The line width. </param>
        </member>
        <member name="M:DraftGlobalsSaveRestore.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:DraftGlobalsSaveRestore.#ctor(System.Boolean,System.Boolean)">
            <summary> Constructor. </summary>
            <param name="automatic"> (Optional) True to save/restore in constructor/destructor.. </param>
            <param name="plane">	 (Optional) True to save/restore plane information. </param>
        </member>
        <member name="T:DraftGlobalsSaveRestore">
            <summary> Save and restore draft globals. </summary>
        </member>
        <member name="T:DGREC">
            <summary> Draft globals save/restore record. </summary>
        </member>
        <member name="M:FreeEntAllocations(ent*,System.Boolean)">

 @par Purpose:
			Frees any memory that was allocated for the entity.
 @param[in]		entity	 entity to free alllcations from
 @param[in]		purge	 should only be set to true when called by database cleanup

 @note	This function must be called when an entity is no longer needed anytime \n
			an entity is aquired via read_ent() or read_ent_from_disk() and the entity \n
			is not stored in the database via store_ent().

</member>
        <member name="M:check_entity_array_size(ent*)">

 @par Purpose:
			Compare array size to array allocated, inform user if too big.
 @return	returns true =&gt; OK	false=&gt; required size could not be allocated\n
			message sent to user if false
 @param[in]		entity	 entity to check

</member>
        <member name="M:sel_bit_is_on(System.Int16,System.Int16)">
 @par Purpose:
			Return True if bit in entity.sel is ON. False if OFF.
 @param[in]		sel			The sel short
 @param[in]		sel_bit		The selection bit to check
 @return			true = bit in entity.sel is on

</member>
        <member name="M:sel_bit_is_off(System.Int16,System.Int16)">
 @par Purpose:
			Return True if bit in entity.sel is OFF. False if ON.
 @param[in]		sel			The sel short
 @param[in]		sel_bit		The selection bit to check
 @return			true = bit in entity.sel is off

</member>
        <member name="M:sel_bit_turn_off(System.Int16*,System.Int16)">
 @par Purpose:
			Set bit in entity.sel OFF.
 @param[in,out]	sel			The sel short
 @param[in]		sel_bit		The sel bit to turn off

</member>
        <member name="M:sel_bit_turn_on(System.Int16*,System.Int16)">
 @par Purpose:
			Set bit in entity.sel ON.
 @param[in,out]	sel			The sel short
 @param[in]		sel_bit		The sel bit to turn on

</member>
        <member name="M:sel_bit_is_off(ent*,System.Int16)">
 @par Purpose:
			Return True if bit in entity.sel is OFF. False if ON.
 @param[in,out]	entity		The entity to modify
 @param[in]		sel_bit		The sel bit check
 @return			true = bit in entity.sel is off

</member>
        <member name="M:sel_bit_is_on(ent*,System.Int16)">
 @par Purpose:
			Return True if bit in entity.sel is ON. False if OFF.
 @param[in,out]	entity		The entity to modify
 @param[in]		sel_bit		The sel bit check
 @return			true = bit in entity.sel is on

</member>
        <member name="M:sel_bit_turn_off(ent*,System.Int16)">
 @par Purpose:
			Set bit in entity.sel OFF.
 @param[in,out]	entity		The entity to modify
 @param[in]		sel_bit		The sel bit to turn off

</member>
        <member name="M:sel_bit_turn_on(ent*,System.Int16)">
 @par Purpose:
			Set bit in entity.sel ON.
 @param[in,out]	entity		The entity to modify
 @param[in]		sel_bit		The sel bit to turn on

</member>
        <member name="M:alloc_surf_data_ptr(surf_type*,System.Int32!System.Runtime.CompilerServices.IsLong)">
 @par Purpose:
			Allocate RAM for surface array pointers

 @par Globals:
	 [in] spline_data_ptr_index to 0 or 1
 @param[in]	required	if !0 then it is the required size needed to allocate
 @param[out]	psf			surf.s_ptr set to surf_data_ptr [0] or surf_data_ptr [1]


</member>
        <member name="M:alloc_nurbs_data_ptr(nb_type*,System.Int32!System.Runtime.CompilerServices.IsLong)">

 @par Purpose:
			Allocate RAM for nurbs data

 @par Globals:
	 [in] spline_data_ptr_index to 0 or 1
 @param[in]	required	if !0 then it is the required size needed to allocate
 @param[out]	pnb			set nb.c_ptr to spline_data_ptr [0] or
							spline_data_ptr [1]

</member>
        <member name="M:alloc_spline_data_ptr(spline*,System.Int32!System.Runtime.CompilerServices.IsLong)">

 @par Purpose:
			Allocate RAM for spline coefficients
 @par Globals:
	 [in] spline_data_ptr_index to 0 or 1
 @param[in]	required	if !0 then it is the required size needed to allocate
 @param[out]	sp			sp.c_ptr set to spline_data_ptr [1] or
							spline_data_ptr [2]


</member>
        <member name="M:bytes_per_ent(ent!System.Runtime.CompilerServices.IsConst*,System.Int16)">
 @par Purpose:
			Return the number of bytes used by one entity

 @param[in]		entity	 entity to be checked
 @param[in]		code   1=&gt;base entity  2=&gt;arrays 3=&gt;base plus arrays

</member>
        <member name="M:undo_go_back">
 @par Purpose:
		This is a shortcut to terminate the current Undo transaction (if one
		is active) and start a new transaction..

</member>
        <member name="M:undo_is_on">
 @par Purpose:
		Inquire if logging of undoable changes is enabled.
 @return			Returns true if logging of undoable changes is enabled.

</member>
        <member name="M:undo_disable">
 @par Purpose:
		Disables logging of undoable changes in the active Undo transaction.
 @return	true if undo was disabled successfully

</member>
        <member name="M:undo_enable">
 @par Purpose:
		Enables logging of undoable changes in the active Undo transaction.
 @note	This is only required if undo_disable ahs been called while an
			Undo transaction is active.
 @return	true if undo was enabled successfully

</member>
        <member name="T:UndoSpecialWhat">
@enum UndoSpecialWhat
 * Defines possible values of what_happened in put_special_undo()

</member>
        <member name="M:UndoDeleteTransStart">
 @par Purpose:
      Starts a new Delete undo transaction.  The transaction is completed by
			calling UndoTransCommit() or UndoTransTerminate().
 @return	true if the Undo Transaction was started successfully

</member>
        <member name="M:UndoXformTransCommit(System.Boolean)">
 @par Purpose:
      Ends a Xform undo transaction.

 @param[in]		moving	are we moving geometry vs. copying
 @return	true if an Undo Transaction was committed.

</member>
        <member name="M:UndoXformTransStart">
 @par Purpose:
      Starts a new Xform undo transaction.  The transaction is completed by
				calling UndoXformTransCommit() or UndoTransTerminate().
 @return	true if the Undo Transaction was started successfully.

</member>
        <member name="M:IsUndoTransActive">
 @par Purpose:
		Query to see if an Undo transaction is currently active.
 @return			Returns true if Undo transaction is currently active

</member>
        <member name="M:UndoTransTerminate">
 @par Purpose:
		Ends the undo transaction, removes it from the undo stack, and
		rolls back any changes that were made to the database during
		this transaction.

</member>
        <member name="M:UndoTransCommit">
 @par Purpose:
		Ends the undo transaction and keeps it on the undo stack.  If the
		transaction was initiated by UndoSolidTransStart() the database
		changes will be maintained but the transaction will be removed
		from the undo stack.

</member>
        <member name="M:UndoTransStart">
@file DbUndo_CH.h
 *		 Unlimited Undo/Redo functions.
 *		 Unlimited Undo/Redo requires several new functions, some of which
 *		 replace old V9 functions.	Some of the old V9 functions have been
 *		 retained but in most cases they do something slightly different.
 *		 Please refer to "Unlimited Undo-Redo API.doc" for more detailed
 *		 documentation on the use of these functions.

 @par Purpose:
		Starts a new undo transaction.	The transaction is completed by
		calling UndoTransCommit() or UndoTransTerminate().
 @return	true if the Undo Transaction was started successfully

</member>
        <member name="M:connect_to_existing_arc(a_3d*,DB_LIST_ENT**)">
 @par Purpose
		see if an arc connects to an existing arc and join them if possible
 @param[in,out]	testArc		The arc to see if it connects to another arc
 @param[in]		retEptr		The eptr of the new arc if it does connect
 @return			true = the arc connected to another arc

</member>
        <member name="M:put_spline_in_db(spline*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte,System.Int32,System.Boolean,System.Boolean,DB_LIST_ENT**)">
 @par Purpose
		Fills out entries (.t1, .t2, .e1, .e2, .max_curv) in sp and puts it in
		the database.
 @param[in]		sp			The spline to put in the database
 @param[in]		n_segs		The number of spline segments
 @param[in]		color		The spline's color
 @param[in]		level		The spline's level
 @param[in]		closed1		True if the spline is closed
 @param[in]		blank		The set blank bit flag
 @param[out]		d_ptr		The entity creation number

</member>
        <member name="M:put_surf_in_db(surf_type*,System.Byte,System.Int32,System.Boolean,DB_LIST_ENT**)">

 @par Purpose:
			Add a surface to the database.

 @param[in]		psf			surface to be stored
 @param[in]		color		make it this color
 @param[in]		level		put it on this level
 @param[in]		blank		set blank bit flag
 @param[out]		d_ptr		location in db

</member>
        <member name="M:put_nurbs_in_db(nb_type*,System.Byte,System.Int32,attributes*,System.Boolean,DB_LIST_ENT**,System.Boolean)">

 @par Purpose:
			Fill out entries in nurbs record and add to database.

 @param[in]		nb		nurbs to be stored
 @param[in]		color	make it this color
 @param[in]		level	put it on this level
 @param[in]		att		give it these attributes
 @param[in]		blank	set blank bit flag
 @param[out]		d_ptr	location in db
 @param[in]		checkKnots	true to check and fix knot sequence problems if found

</member>
        <member name="M:saving_with_mask">
 @par Purpose
		Inquire whether "SaveSome" is the current state of File/Save

 @return true = File/Save will do a "SaveSome"

</member>
        <member name="M:set_save_with_mask(System.Boolean)">
 @par Purpose
		Set whether or not "SaveSome" is to be the current state of "File/Save"

</member>
        <member name="M:has_db_changed">
 @par Purpose
		Indicate whether the database has changed

 @return true = database has changed

</member>
        <member name="M:db_has_changed">
@par Purpose
 *		Mark the database as having changed.  See has_db_changed

</member>
        <member name="M:set_db_unchanged">
@par Purpose
 *		Set an internal variable indicating that the database has not been modified

</member>
        <member name="M:rewrite_ent(ent*,System.Int32!System.Runtime.CompilerServices.IsLong)">
 @par Purpose:
			Rewrite an entity to the database (ram or disk)
 @param[in]		entity		The entity
 @param[in]		sysFlags	Optional flags to permit writing of "system level data" (zero by default)

</member>
        <member name="M:fill_in_ent(ent*,DB_LIST_ENT*)">
 @par Purpose:
			Fill out an entity record given a database pointer
 @param[in]		ptr			The database pointer
 @param[out]		entity		The entity

</member>
        <member name="M:read_ent(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*,System.Boolean*)">
 @par Purpose:
			Read an entity from disk (not from overflow section of database)
 @param[in]		f			The file to read entity from
 @param[out]		entity		The entity
 @param[out]		succf		False if end of file reached

</member>
        <member name="M:GetAnyEnt(System.Boolean,DB_LIST_ENT**,DB_LIST_ENT**,ent*,System.Boolean*)">
 @par Purpose:
			loop through all entities in the database to find anything on a level

 @param[in]		chkvis		If true, checks if entity is visible
 @param[in]		ptr			The database pointer
 @param[in]		found_ptr	The pointer to the entity
 @param[in]		entity		The entity
 @param[out]		succf		true if entity is found

</member>
        <member name="M:get_raw_ent(System.Boolean,DB_LIST_ENT**,DB_LIST_ENT**,ent*,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean*)">
 @par Purpose:
			Get the next "ALIVE" entity from the database

 @param[in]		chkvis		If true, checks if entity is visible
 @param[in]		ptr			The database pointer
 @param[in]		found_ptr	The pointer to the entity
 @param[in]		entity		The entity
 @param[in]		sel_mask	The selection mask
 @param[in]		ent_mask	The entity mask
 @param[out]		succf		true if entity is found

</member>
        <member name="M:rewrite_ent_sel(ent*)">
            <summary> Rewrite the .sel and .id field of an entity to the database. </summary>
            <param name="entity"> The pointer to the entity. </param>
        </member>
        <member name="M:write_ent_sel(ent*,DB_LIST_ENT*)">

 @par Purpose:
			Write the .sel and .id field of an entity to the database (ram or
			disk) given the entity and a pointer
 @param[in]		entity		The entity
 @param[in]		ptr			Pointer to where the entity is stored in the database


</member>
        <member name="M:store_ent_nodraw(ent*,DB_LIST_ENT**,System.Int16,System.Int32,attributes,System.Boolean*)">
            <summary> Chokepoint for gr_back_color. </summary>
            <param name="entity">	  Pointer to ent structure. </param>
            <param name="d_ptr">	  Pointer to ent in database list. </param>
            <param name="new_sel">    New selection bits. </param>
            <param name="new_level">  New entity level. </param>
            <param name="new_attrib"> New attributes. </param>
            <param name="succf">	  Flag pointer indicating success of operation. </param>
        </member>
        <member name="M:store_ent(ent*,DB_LIST_ENT**,System.Int16,System.Byte,System.Int32,attributes,System.Boolean*)">

 @par Purpose:
			Save any type of entity in the database
 @param[in]		entity		The entity
 @param[out]		d_ptr		Database pointer where entity is written to
 @param[in]		new_sel		New selection bits
 @param[in]		new_color	New entity color
 @param[in]		new_level	New entity level
 @param[in]		new_attrib	New attributes
 @param[out]		succf		true = Success; false = Failed

</member>
        <member name="M:ea_adjustment(ent*)">
 @par Purpose
		Adjust entity attributes to current global settings
 @param[in,out]	entity		Attributes set to global attributes
 @return			true = entity changed

</member>
        <member name="M:dbinit">
@par Purpose
 *		Initialize database

</member>
        <member name="M:write_ent_to_disk(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*,System.Int16*)">
 @par Purpose:
			Write an entity to the disk
 @param[in]	f		The file to write to
 @param[in]	entity	The entity to write to the file
 @param[out]	error	Returns an error code if there is one

</member>
        <member name="M:eptr_valid(DB_LIST_ENT*,System.Boolean)">
 @par Purpose
		Is the entity pointer valid?
 @param[in]	eptr			The entity pointer
 @param[in]	allow_deleted	If true, consider entities in the deleted stack to be valid.
 @return		true = eptr is valid.

</member>
        <member name="M:get_ent_from_eptr(DB_LIST_ENT*,ent*)">

 @par Purpose:
			Fetch entity using entity pointer

 @return 0=&gt;OK 1=&gt;null ent *
 @param[in]		eptr   entity pointer
 @param[out]		entity	 found entity

</member>
        <member name="M:get_ent_univ(sel_mask_type*,DB_LIST_ENT**,DB_LIST_ENT**,ent*,System.Int16,System.Boolean*)">
 Get a visible, unmasked (not excluded by the level mask) entity according
 to sel_mask and ent_mask, and optionally color, level or style.	If
 sel_method is 1, only sel_mask and ent_mask are used.  If sel_methodis 2,
 sel_mask, ent_mask and color are used.  If sel_method is 3, sel_mask,
 ent_mask and level are used.  If sel_method is 4, sel_mask, ent_mask, and
 style are used.

 @param[in]		s			The selection mask
 @param[in,out]	ptr			The current position in the database
 @param[out]		found_ptr	The pointer to entity
 @param[out]		entity		The entity
 @param[in]		sel_mask	The selection mask
 @param[out]		succf		true if entity found

</member>
        <member name="M:get_ent(DB_LIST_ENT**,DB_LIST_ENT**,ent*,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean*)">
 Get the next visible unmasked entity from the database. If an entity is
 found, found_ptr will point to the entity and ptr will point to
 the next position in the database.  If the end of the database is reached,
 succf is returned as false.

 @verbatim
 The selection mask, sel_mask, is defined as any combination of the
 following bits:

 #define ALIVE_BIT 1	   bit 0 - cleared when entity is deleted
 ...

 The entity mask ent_mask is defined as any combination of the following
 bits:

 #define P_ID 1		   Point (bit 0)
 ...

 If entity-&gt;id is set to DB_ID, then entity-&gt;db_fn is defined as follows:

 #define V_MATRIX_FN 0		 View matrix
 ...

 Surface types:

 #define NB_SURF 0			NURBS surface
 ...
 @endverbatim

 @param[in,out]	   ptr		  Current position in the database
 @param[in]		   sel_mask   Mask for sel bits
 @param[in]		   ent_mask   Entity mask

 @param[out]		   found_ptr  Points to the next entity in the database
 @param[out]		   entity	  Points to an entity with matching sel and id bits
								  (All the sel bits must match, but only one of the
								  id bits must match)
 @param[out]		   succf	  True if entity found.  False if end of database reached

 @note	ptr must be set to the beginning of database on the first call

</member>
        <member name="M:save_db(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean*,System.Boolean,System.Boolean)">
 @par Purpose:
			Save the database to an opened file
 @param[in]		f			opened file
 @param[in]		just_hdr	just write the header info
 @param[out]		succf		true = successful
 @param[in]		educ		(optional) true = saving EMCX file, false = saving MCX file
 @param[in]		reset_db_changed		(optional) true = allow db_changed to be reset.  This should only be set to false when called from save_temp_db().

</member>
        <member name="M:merge_db(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean*,System.Boolean,System.Boolean,System.Boolean,System.Boolean*,System.Boolean*,System.Boolean,System.Boolean,FileMergeOptions*)">
 @par Purpose:
			Merge an opened file into the (existing) database
		   (Level visibility in the incoming file will be ignored,
			and level descriptors will only be brought in to those levels
			which currently have no descriptor.
			The entity attributes (ENT_ATTR_FN) will also be ignored

 @param[in]		f						The file
 @param[in]		post_invis_ent_warn		Post warning if file contains entities in graphics background color
 @param			useEntityAtts			[0]=color, [1]=level, [2]=linestyle, [3]=pointstyle [4]=linewidth
 @param[in]		allow_interruption		true = allow interruption with Esc
 @param[out]		interrupted				true = user pressed Esc
 @param[in]		perform_cleanup			true = perform GE3 file cleanup
											(delete duplicates,
											try to fix bad associations,
											dont bring in entities using unfixable assocs.,
											remove colinear trim surf boundary pts)
 @param[in]		check_units				check metric flag, switch cfg and/or scale
 @param[out]		succf					true = error storing in the database
 @param[in]		educ					(optional) true = merging EMCX file, false = merging MCX file
 @param[in]		suppressWarning			(optional) true = suppress showing the "Associative entities will not be merged" warning
 @param[in]		pFileMergeOptions		(optional) Pointer to FileMergeOptions structure to control unit dialog displayed when merging

</member>
        <member name="M:get_db(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean*,System.Boolean,System.Boolean,System.Boolean,System.Boolean*,System.Boolean,System.Boolean)">
 @par Purpose:
			Read an opened file into the database
 @param[in]		post_invis_ent_warn		Post warning if file contains entities
											in graphics background color
 @param[in]		f						The file
 @param[in]		read_screen_info		true = read screen scale
 @param[in]		allow_interruption		true = allow interruption with Esc
 @param[out]		interrupted				true = user pressed Esc
 @param[in]		perform_cleanup			true = perform GE3 file cleanup
											(delete duplicates,
											try to fix bad associations,
											dont bring in entities using unfixable assocs.,
											remove colinear trim surf boundary pts)
 @param[in]		check_units				check metric flag, switch cfg and/or scale
 @param[out]		succf					true = error storing in the database
 @param[in]		educ					(optional) true = getting EMCX file, false = getting MCX file

</member>
        <member name="M:cleartextall">
 @par Purpose:
		Clears both the message log and the message prompt

</member>
        <member name="M:cleartext">
 @par Purpose:
		Clears any text in the message log

</member>
        <member name="M:clearprompt">
 @par Purpose:
		Clears the message prompt

</member>
        <member name="M:mprintf(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
 @par Purpose:
		Mastercam print.  Emulate printf using write_str and write_nl.

 @note	This function should be used for debugging only

 @param[in]		fmt   format
 @param[in]		...   parameters to write

</member>
        <member name="M:write_nl">
 @par Purpose:
		Write a new line

</member>
        <member name="M:write_ch(System.Char)">
 @par Purpose:
			Write a character to the text or graphics screen

 @param[in]	ch			The character to write out

</member>
        <member name="M:write_real(System.Double,System.Int16)">
 @par Purpose:
		Write a real number to the text or graphics screen, assuming one places before the decimal point

 @param[in]	x			The real value to write out
 @param[in]	n_places	The number of decimal places to include

</member>
        <member name="M:write_str_nl(System.Char!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
		Write a string followed by a new line

 @param[in]	message		The string to write out

</member>
        <member name="M:write_int(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
 @par Purpose:
		Write an integer to the text or graphics screen

 @param[in]	i			The integer value to write out
 @param[in]	n_places	The number of decimal places to include

</member>
        <member name="M:write_long(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
 @par Purpose:
		Write a long integer to the text or graphics screen

 @param[in]	i			The long value to write out
 @param[in]	n_places	The number of decimal places to write the value out to

</member>
        <member name="M:write_str(System.Char!System.Runtime.CompilerServices.IsConst*)">
Defines the file_exist as file_exists()
 @par Purpose:
		Write a string without carriage returns of line feeds at the end of the string

 @param[in]	message		The string to write out

</member>
        <member name="M:file_exists(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 @par Purpose:
		This method determines if the path is a file.

 @param[in]	   fname   the file path.
 @param[in]	   warn

 @return true, if the path is a file, else, false.

</member>
        <member name="M:_Afreadln(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32,_iobuf*)">
 @par Purpose:
		This method reads one line from an MBCS text file and replaces the new line with a null character.

 @param[out]	pLine		null terminated string read from the file.
 @param[in]	maxChars	maximum number of characters to read.
 @param[in]	pFile		file pointer.

 @return true, if OK, else false.

</member>
        <member name="M:freadln(System.Char*,System.Int16,_iobuf*)">
 @par Purpose:
		This method reads one line from a file and replaces
 the new line with a null character.

 @param[in]	n		maximum number of characters to read.
 @param[in]	f		file pointer.
 @param[out]	lstr	null terminated string read from the file.

 @return true, if OK, else false.

</member>
        <member name="M:m_fclose(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,_iobuf*)">
 @par Purpose:
		This method calls fclose and then marks the file allocation record
 as dead if the record is found in our array.

 @param[in]	module_name source module closing the file.
 @param[in]	line_n		source line within the source module.
 @param[in]	fp			file pointer to close.

 @return	   return code.

</member>
        <member name="M:FileOpenHL(SysFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
		Tries to open a file using the passed SysFile and dispalys error if unsuccessful

 @param[in]	fileClass	reference to SysFile object.
 @param[in]	prefix		prefix to insert
 @param[in]	name		the file to open
 @param[in]	mode		the file open mode

 @return	   true if opened successfully.

</member>
        <member name="M:m_fopen_hl(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean*)">
 @par Purpose:
		This method inserts a file prefex then calls FOPEN

 @param[in]	module		source module opening the file.
 @param[in]	line_n		source line within the source module.
 @param[in]	prefix		prefix to insert
 @param[in]	name		the file to open
 @param[in]	mode		the file open mode
 @param[out]	succf		true if success, else false

 @return	   return code.

</member>
        <member name="M:list_filename(System.Char!System.Runtime.CompilerServices.IsConst*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*,CWnd*)">
 @par Purpose:
		This method lists a file on the screen.

 @param[in]	filename	file to list.
 @param[in]	msg			title string (can be NULL in which case the file name will be the title)
 @param[in]	pParent		Parent window

</member>
        <member name="M:edit_filename(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 @par Purpose:
		This method calls the default editor to begin editing
 the passed file.

 @param[in]	fname		 file to edit.
 @param[in]	wait

</member>
        <member name="M:CFile_DoFileSave(System.Char!System.Runtime.CompilerServices.IsConst*,CWnd*,System.Boolean,System.Boolean)">
 @par Purpose:
		This method performs the file save operation.  It is usually called
 from the SaveFile() interface method.  However, it can be called directly
 to bypass the File/Save dialog.

 @return	   return code (true, if OK, else, false).

</member>
        <member name="M:CFile_DoFileSave(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Boolean,System.Boolean)">
 @par Purpose:
		This method performs the file save operation.  It is usually called
 from the SaveFile() interface method.  However, it can be called directly
 to bypass the File/Save dialog.

 @return	   return code (true, if OK, else, false).

</member>
        <member name="M:SaveFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Boolean)">
 @par Purpose:
		This method performs the file save operation, first displaying the File/Save dialog.

 @param[in]  filen				MUST be complete path to file
 @param[in]  pParent				pointer to the parent window
 @param[in]  bGetFilenameOnly		true= get the filename but don't save the file
 @return	   return code (true, if OK, else, false).

</member>
        <member name="M:DoFileDialog(System.Boolean,System.Boolean*,tagOFNW*,System.Char!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
		This function displays the file open or file save dialog.  It does not 
		open the file, it simply populates the OPENFILENAME param and returns 1 
		if OK is clicked, or 2 if cancel is clicked.

 @param[in]  bOpen	true to start OPEN, false to state SAVE 
 @param[out] merge	merge flag
 @param[in,out] ofn	The OPENFILENAME structure which passes in and out many of the parameters from the open or save.
 @param[in] folderPrompt	Custom string to display in the static text control to the left of the folder browser combo box.

 @return	   return code (1 if OK clicked, 2 if CANCEL clicked).

</member>
        <member name="M:DoFileOpen(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean,System.Int16,System.Boolean,System.Boolean*,FileMergeOptions*)">
 @par Purpose:
		This method performs the file open operation.  It is usually called
 from the OpenFile() interface method.  However, it can be called directly
 to bypass the File/Open dialog.

 @param[in]  filen				MUST be complete path to file
 @param[in]  merge				merge flag
 @param[in]  astext				open as flag.  true= open as text, else, false
 @param[in]  checkUnits			check incoming files units and put up a dialog if they differ from the current units (0=no check, 1=always check, 2=opposite of 'merge' flag)
 @param[in]  makeLevelsVisible	if 'merge' and !'astext' and a level is currently non-visible but it is visible in the incoming file, turn it on (default=true)
 @param[out] escaped				optional (may be null) if provided, will return true is used aborted file open due to current file state (default=NULL)
 @param[in]  pFileMergeOptions	(optional) Pointer to FileMergeOptions structure to control unit dialog displayed when merging

 @return	   return code (true, if OK, else, false).

</member>
        <member name="T:FileMergeOptions">
            <summary> File merge options. </summary>
        </member>
        <member name="M:OpenFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Boolean)">
 @par Purpose:
		This method performs the file open operation, first displaying the File/Open dialog.

 @param[in]  filen				MUST be complete path to file
 @param[in]  pParent				pointer to the parent window
 @param[in]  bGetFilenameOnly		true= get the filename but don't open the file
 @return	   return code (1 if OK, 0 if file could not be opened, -1 if cancel hit)

</member>
        <member name="M:OpenFile(System.Char*,System.UInt64,CWnd*,System.Boolean)">
 @par Purpose:
		This method performs the file open operation, first displaying the File/Open dialog.

 @param[in,out]	pFileName				MUST be complete path to file
 @param[in]		maxChars				maximum number of characters pFileName can hold (including null)
 @param[in]		pParent					pointer to the parent window
 @param[in]		getFilenameOnly			true = get the filename but don't open the file
 @return			return code (1 if OK, 0 if file could not be opened, -1 if cancel hit)

</member>
        <member name="M:MCFile.ReadEducHeaderInfo">
            <summary> Attempts to read and validate the educational header info from the file. </summary>
            <returns> True if header validated, false otherwise. </returns>
        </member>
        <member name="M:MCFile.GetMastercamFileVersion(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*)">
            <summary> Gets the Mastercam file version. </summary>
            <param name="major">				   Returned major version number. </param>
            <param name="minor">				   Returned minor version number. </param>
            <param name="pFileBitSize">			   Returned file bit size: 0 = 32 bit; 1 = 64 bit. </param>
            <returns> true if successful, false if file not open. </returns>
        </member>
        <member name="M:MCFile.CurrentVersion">
            <summary> Gets the current version header. </summary>
            <returns> Current version header. </returns>
        </member>
        <member name="M:MCFile.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:MCFileBase.ReadEducHeaderInfo">
            <summary> Attempts to read and validate the educational header info from the file. </summary>
            <returns> True if header validated, false otherwise. </returns>
        </member>
        <member name="M:MCFileBase.IsMastercamFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Checks if the specified file is a Mastercam file. </summary>
            <param name="pFilePath">   File path. </param>
            <param name="checkExists"> If TRUE, file must exist. </param>
            <returns> Version number if Mastercam file, else 0.  Note that a return of 10 could be X,
		  X2, X3, or X4 etc. </returns>
        </member>
        <member name="M:MCFileBase.GetMastercamFileVersion(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*)">
            <summary> Gets the Mastercam file version. </summary>
            <param name="major">				   Returned major version number. </param>
            <param name="minor">				   Returned minor version number. </param>
            <param name="pFileBitSize">			   Returned file bit size: 0 = 32 bit; 1 = 64 bit. </param>
            <returns> true if successful, false if file not open. </returns>
        </member>
        <member name="M:MCFileBase.CurrentVersion">
            <summary> Gets the current version header. </summary>
            <returns> Current version header. </returns>
        </member>
        <member name="M:MCFileBase.DoOpen(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Helper function for overloaded Open functions that actually does the open. </summary>
            <param name="fileName">	Fully qualified file name to open. </param>
            <param name="mode">	Type of access permitted. </param>
            <param name="shFlag">	Type of sharing allowed. </param>
            <remarks> Refer to help for _tfsopen for possible values for mode and shFlag.  shFlag is optional
		  and defaults to _SH_DENYNO. </remarks>
            <returns> Returns true if the file opened successfully or if the same file name is already open.
		  Returns false if a different file is currently open or if the open fails. </returns>
        </member>
        <member name="M:MCFileBase.Initialize(System.Boolean)">
            <summary> Initializes member variables to default values. </summary>
            <remarks> A constructor must pass true for "constructor" to prevent the virtual function
		  "CurrentVersion" from being called (to get the major and minor version numbers).  When
		  "constructor" is true, both m_VersionMajor and m_VersionMinor are set to zero. </remarks>
            <param name="constructor"> Optional flag to indicate we are called from a constructor. </param>
        </member>
        <member name="M:MCFileBase.SetMastercamFileType(MCFileType)">
            <summary> Sets the type of the currently open file. </summary>
            <remarks> Currently this is not set automatically by this class
		  nor is it saved in the file. The application accessing
		  the file must set it using this function. </remarks>
            <remarks> Initialized at file open to MCFT_UNDEF. </remarks>
        </member>
        <member name="M:MCFileBase.GetDumpEntAllocations">
            <summary> Gets the current state of the flag that controls whether
		  general entity allocations will be dumped when these entities are read. </summary>
        </member>
        <member name="M:MCFileBase.GetDumpGroups">
            <summary> Gets the current state of the flag that controls whether
		  groups will be dumped when they are read. </summary>
        </member>
        <member name="M:MCFileBase.GetDumpFileLockHist">
            <summary> Gets the current state of the flag that controls whether
		  the file lock history entity will be dumped when it is read. </summary>
        </member>
        <member name="M:MCFileBase.GetDumpWorksheets">
            <summary> Gets the current state of the flag that controls whether
		  worksheets will be dumped when they are read. </summary>
        </member>
        <member name="M:MCFileBase.GetDumpLevels">
            <summary> Gets the current state of the flag that controls whether
		  levels will be dumped when they are read. </summary>
        </member>
        <member name="M:MCFileBase.GetDumpFont">
            <summary> Gets the current state of the flag that controls whether
		  font entities will be dumped when they are read. </summary>
        </member>
        <member name="M:MCFileBase.GetDumpDescriptor">
            <summary> Gets the current state of the flag that controls whether
		  the descriptor entity will be dumped when it is read. </summary>
        </member>
        <member name="M:MCFileBase.GetDumpBitmap">
            <summary> Gets the current state of the flag that controls whether
		  the bitmap entity will be dumped when it is read. </summary>
        </member>
        <member name="M:MCFileBase.GetMergeMtable">
            <summary> Gets the current state of the flag that controls whether the memory table being read
		  from the file should be merged into the existing memory table. </summary>
        </member>
        <member name="M:MCFileBase.GetSkipMtable">
            <summary> Gets the current state of the flag that controls whether
		  the memory table should be skipped when reading the file. </summary>
        </member>
        <member name="M:MCFileBase.GetReadMtable">
            <summary> Gets the current state of the flag that controls whether
		  the memory table should be read from the file. </summary>
        </member>
        <member name="M:MCFileBase.GetReadPMeshData">
            <summary> Gets the current state of the flag that controls whether
		  polygonal mesh data should be read from the file. </summary>
        </member>
        <member name="M:MCFileBase.GetSaveAs32Bit">
            <summary> Gets the current state of the flag that controls whether the file is being saved as 32 bit.
		  </summary>
            <remarks> Files are always saved as the bit size of the version of Mastercam doing the save.
		  </remarks>
        </member>
        <member name="M:MCFileBase.GetSaveAsVersion">
            <summary> Gets the major version number that the file will be saved as. </summary>
            <remarks> This value will be 0 for the current version.  By default the file will be saved
		  as the current version.  If the file is to be saved as a previous version the the
		  application will need to set this using SetSaveAsVersion. </remarks>
        </member>
        <member name="M:MCFileBase.GetFileVersionMinor">
            <summary> Gets the minor version number of the currently open file. </summary>
        </member>
        <member name="M:MCFileBase.GetFileVersionMajor">
            <summary> Gets the major version number of the currently open file. </summary>
        </member>
        <member name="M:MCFileBase.GetMastercamFileType">
            <summary> Gets the type of the currently open file. </summary>
            <remarks> Currently this is not set automatically by this class
		  nor is it saved in the file. The application accessing
		  the file must set it using SetMastercamFileType. </remarks>
        </member>
        <member name="M:MCFileBase.GetFullName">
            <summary> Gets the fully qualified name of the currently open file. </summary>
            <remarks> If file is not open, a empty string will be returned. </remarks>
        </member>
        <member name="M:MCFileBase.IsStandardOutput">
            <summary> Returns true if the stream is directed to standard output. </summary>
        </member>
        <member name="M:MCFileBase.Is32BitFile">
            <summary> Returns true if the file being read was saved by a 32 bit version of Mastercam. </summary>
        </member>
        <member name="M:MCFileBase.IsImportExportFile">
            <summary> Returns true if the file being read is a previous version of Mastercam
		  or if the file is being written as a previous version. </summary>
        </member>
        <member name="M:MCFileBase.IsEducationalFile">
            <summary> Returns true if the file being read is an Educational file. </summary>
        </member>
        <member name="M:MCFileBase.Rewind(System.Boolean)">
            <summary> Sets the value of the file pointer to the beginning of the file </summary>
            <param name="forceEMCXtoZero">	if true, even EMCX files will position to zero. </param>
            <remarks> For Educational files, the position will actually be set to the first position
		  after the encrypted header, unless the override parameter is passed. </remarks>
            <returns> True if successful, false if file not open. </returns>
        </member>
        <member name="M:MCFileBase.SetPosition(System.Int64,System.Int32)">
            <summary> Moves the file pointer to a specified location. </summary>
            <param name="offset">	Number of bytes from origin. </param>
            <param name="origin">	Initial position. </param>
            <remarks> Refer to help for fseeki64 for possible values for origin.  This function is designed to
		  handle files greater than 2GB in length, but it also works with a long parameter for files
		  less than 2GB.  For Educational files, if the seek would result in positioning to the
		  beginning of the file, the position will actually be set to the first position after the
		  encrypted header. </remarks>
            <returns> Returns 0 if successful, otherwise returns a nonzero value. </returns>
        </member>
        <member name="M:MCFileBase.Open(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Opens the specified fileName using the read/write mode and the shFlag (sharing) option.
		  </summary>
            <param name="fileName">	Fully qualified file name to open. </param>
            <param name="mode">		Type of access permitted. </param>
            <param name="shFlag">	Type of sharing allowed. </param>
            <remarks> Refer to help for _tfsopen for possible values for mode and shFlag.  shFlag is optional
		  and defaults to _SH_DENYNO. </remarks>
            <returns> Returns true if the file opened successfully or if the same file name is already open.
		  Returns false if a different file is currently open or if the open fails. </returns>
        </member>
        <member name="M:MCFileBase.Open(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Opens the specified fileName in filePath using the read/write mode and the shFlag
		  (sharing) option. </summary>
            <param name="filePath">	Path where fileName is located. </param>
            <param name="fileName">	File name to open in filePath. </param>
            <param name="mode">		Type of access permitted. </param>
            <param name="shFlag">	Type of sharing allowed. </param>
            <remarks> Refer to help for _tfsopen for possible values for mode and shFlag.  shFlag is optional
		  and defaults to _SH_DENYNO. </remarks>
            <returns> Returns true if the file opened successfully or if the same file name is already open.
		  Returns false if a different file is currently open or if the open fails. </returns>
        </member>
        <member name="M:MCFileBase.Dispose">
            <summary> Standard destruction, but also closes the file if it is still open. </summary>
        </member>
        <member name="M:MCFileBase.#ctor">
            <summary> Constructs the class and initializes member variables to default values. </summary>
            <remarks> This base class constructor sets both m_VersionMajor and m_VersionMinor to zero. </remarks>
        </member>
        <member name="T:MCFileBase">
            <summary> Mastercam File I/O base class. </summary>
        </member>
        <member name="M:delete_ent(DB_LIST_ENT*,System.Boolean,System.Boolean,System.Boolean,System.Boolean*,System.Boolean,System.Boolean)">

 @par Purpose:
			Remove the given entity from the database by zeroing out the
			alive bit

 @return			Returns false	only if user aborts when warned about toolpath or solid references
 @param[in]		ptr				eptr to the entity that is being deleted
 @param[in]		draw			true = draw entity in the background color
 @param[in]		blank_ent		true = blank entity, false = delete entity
 @param[in]		del_tp_refs		true = delete toolpath references
 @param[in,out]	tp_ref_warn		true = warn user about toolpath references.
									Returned as false when warning output
 @param[in]		purge			for deleting temporary entities.
 @param[in]		batchMode		true if deleting many entities.

</member>
        <member name="M:delete_ent(DB_LIST_ENT*,System.Boolean,System.Boolean,System.Boolean,System.Boolean*,System.Boolean)">

 @par Purpose:
			Remove the given entity from the database by zeroing out the
			alive bit

 @return			Returns false	only if user aborts when warned about toolpath or solid references
 @param[in]		ptr				eptr to the entity that is being deleted
 @param[in]		draw			true = draw entity in the background color
 @param[in]		blank_ent		true = blank entity, false = delete entity
 @param[in]		del_tp_refs		true = delete toolpath references
 @param[in,out]	tp_ref_warn		true = warn user about toolpath references.
									Returned as false when warning output
 @param[in]		purge			for deleting temporary entities.

</member>
        <member name="M:chain_to_ctour_array(CHAIN!System.Runtime.CompilerServices.IsConst*,ctour_rec*,System.Double*,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Boolean*,System.Boolean,System.Double,System.Boolean,System.Boolean*)">
 @par Purpose:
			Convert a chain to a ctour_array, optionally breaking the first
			entity
 @param[in]		chain	chain to convert
 @param[out]		rel_depth		Depth of the first point in the contour
									relative to the construction plane
 @param[out]		ctour			2d form of the chained contour
 @param[in]		view_n			view number for ctour
 @param[in]		max_chain		maximum number of elements in ctour
 @param[in]		low_index		starting index for ctour
 @param[out]		n_pts			number of points in ctour
 @param[out]		view_match		(false for 3D Contour)
 @param[in]		s_nb_allowed	Chaining of splines and NURBS allowed
 @param[in]		l_tol			Curve linearization tolerance
 @param[in]		ct_3d			Contour is 3D (ctour_rec ent_ptr used)
 @param[out]		succf			false if chain allocation exceeded

</member>
        <member name="M:CSplineNodeMgr.get_pt_from_spline_nodes2(System.Int32!System.Runtime.CompilerServices.IsLong)">
 @par Purpose:
	Returns the point stored at the given index in the spline_nodes2 buffer
	Only use this if you are sure that the index is less than max_n_spline_pts

 @param[in]	   index		index in the buffer at which to get the point

 @return  the point at the given index

</member>
        <member name="M:CSplineNodeMgr.get_pt_from_spline_nodes2(System.Int32!System.Runtime.CompilerServices.IsLong,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
	Returns the point stored at the given index in the spline_nodes2 buffer

 @param[in]	   index		index in the buffer at which to get the point
 @param[out]	   pt			point stored at the specified index

 @return  false if the specified index is greater than max_n_spline_pts

</member>
        <member name="M:CSplineNodeMgr.add_pt_to_spline_nodes2(System.Int32!System.Runtime.CompilerServices.IsLong,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
	Stores a point at the given index in the spline_nodes2 buffer
	If the index is greater than max_n_spline_pts the buffer will be reallocated

 @param[in]	   index		index in the buffer at which to store the point
 @param[in]	   pt			point to store at the specified index

 @return  false if reallocation is required but unsuccessful

</member>
        <member name="M:CSplineNodeMgr.get_spline_nodes2">
 @par Purpose:
	Returns a pointer to the current spline_nodes2 buffer

</member>
        <member name="M:CSplineNodeMgr.get_pt_from_spline_nodes1(System.Int32!System.Runtime.CompilerServices.IsLong)">
 @par Purpose:
	Returns the point stored at the given index in the spline_nodes1 buffer
	Only use this if you are sure that the index is less than max_n_spline_pts

 @param[in]	   index		index in the buffer at which to get the point

 @return  the point at the given index

</member>
        <member name="M:CSplineNodeMgr.get_pt_from_spline_nodes1(System.Int32!System.Runtime.CompilerServices.IsLong,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
	Returns the point stored at the given index in the spline_nodes1 buffer

 @param[in]	   index		index in the buffer at which to get the point
 @param[out]	   pt			point stored at the specified index

 @return  false if the specified index is greater than max_n_spline_pts

</member>
        <member name="M:CSplineNodeMgr.add_pt_to_spline_nodes1(System.Int32!System.Runtime.CompilerServices.IsLong,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
	Stores a point at the given index in the spline_nodes1 buffer.
	If the index is greater than max_n_spline_pts the buffer will be reallocated

 @param[in]	   index		index in the buffer at which to store the point
 @param[in]	   pt			point to store at the specified index

 @return  false if reallocation is required but unsuccessful

</member>
        <member name="M:CSplineNodeMgr.get_spline_nodes1">
 @par Purpose:
	Returns a pointer to the current spline_nodes1 buffer

</member>
        <member name="M:CSplineNodeMgr.get_max_spline_segs">
 @par Purpose:
	Returns the maximum number of spline segments (max_n_spline_pts - 1) that can be stored in the current allocation

</member>
        <member name="M:CSplineNodeMgr.put_max_n_spline_pts(System.Int32!System.Runtime.CompilerServices.IsLong)">
 @par Purpose:
	Reallocates the spline buffers for the specified number of points (same as AllocateMemNPts())

 @param[in]	   npts			 number of spline points to allocate

 @return  true if reallocation was successful

</member>
        <member name="M:CSplineNodeMgr.get_max_n_spline_pts">
 @par Purpose:
	Returns the maximum number of spline points that can be stored in the current allocation

</member>
        <member name="M:CSplineNodeMgr.AllocateMemNPts(System.Int32!System.Runtime.CompilerServices.IsLong)">
 @par Purpose:
	Reallocates the spline buffers (spline_nodes1 and spline_nodes2) for the specified number of points

 @param[in]	   npts			 number of spline points to allocate

 @return  true if reallocation was successful

</member>
        <member name="M:create_rectangle2(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DB_LIST_ENT***,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>This method adds a rectangle to the database.</summary>
            <param name="ll_c">Location of the lower left corner of the rectangle.</param>
            <param name="ur_c">Location of the upper right corner of the rectangle.</param>
            <param name="NewIDs">A pointer that will reference the newly created entities.</param>
            <param name="NewIDsNumber">An integer that will represent the number of newly created entities.</param>
        </member>
        <member name="M:create_nurbsurf_from_4_points(p_3d*,ent*)">
 @par Purpose:
		Create a surface from 4 3D positions

 @param[in]		nodes		 3D positions
 @param[out]		surf_ent	 output surface

</member>
        <member name="M:create_nurbsurf_from_surf(surf_type*,ent*)">
 @par Purpose:
		Convert any surface to a NURB surface

 @return			0 = no errors
 @param[in]		psf			 input surface
 @param[out]		surf_ent	 output surface

</member>
        <member name="M:convert_revsurf_to_nbs(rev_type*,ent*,nbs_type*)">
@defgroup cdefs_grp1 NotifyUserApp() Notify Events 
@{ 
@} 
@defgroup cdefs_grp2 get_event() Event Mode Bit Flags 
@{ 
@} 
 @par Purpose:
		Convert any revolved surface to a NURB surface

 @return			0 = no errors
 @param[in]		prev		 input surface
 @param[in]		curve_ent	 edge curve entity
 @param[out]		nbs			 output surface

</member>
        <member name="M:copy_chains(CHAIN*,CHAIN**)">
 @par Purpose:
			copies a linked list of chains into a second, new chain

 @param[in]		old_chains		 chains to copy chain data from
 @param[out]		new_chains		 newly allocacated chain holding the copied chain data

</member>
        <member name="M:copy_chain(CHAIN*,CHAIN**)">
 @par Purpose:
			copies one chain into a second, new chain

 @param[in]		old_chain		chain to copy chain data from
 @param[out]		new_chain		newly allocacated chain holding the copied chain data

</member>
        <member name="M:chain_to_eptrs(CHAIN*,System.Boolean,DB_LIST_ENT***,System.Int32*)">
 @par Purpose:
			converts a chain to a series of eptrs

 @param[in]		chain			chain to parse
 @param[in]		validate_eptrs	true = make sure eptrs are valid
 @param[out]		eptrs			alloc'd array of curve eptrs
 @param[out]		n_eptrs			size of array

</member>
        <member name="M:GetSolidPtrsFromChains(CHAIN**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;DB_LIST_ENT**,std.allocator&lt;DB_LIST_ENT**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.Int32,std.allocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Returns associated solid ptrs from given list of chains
 @param[in]		chains			chains
 @param[out]		solidPtrs		vector of solid pointers (no duplicates)
 @param[out]		solidOpIndex	vector of solid operation index in database

</member>
        <member name="M:SortChainsTopDown(CHAIN**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Sorts the list of chain in decreasing z level.
 @param[in]		chain			chain

</member>
        <member name="M:ChainDIRECTION(CHAIN*,System.Int16)">
 @par Purpose:
			Determine if passed in chain is Clockwise or Counter-Clockwise.
 @return	short chain direction CHAIN_INVALID(-2), CHAIN_DIR_CW(0), CHAIN_DIR_CCW(1)
 @param[in]		chain			chain
 @param[in]		view_n			current view

</member>
        <member name="M:next_chain_curve(CHAIN!System.Runtime.CompilerServices.IsConst*,CHAIN_ENT*,System.Boolean)">
 @par Purpose:
			Get the next curve in a chain.	If "wrap around" is specified,
			chain is closed and the current entity is the last entity in
			the chain,	return the first curve in the chain.
 @return	next curve in chain (NULL for none)
 @param[in]		chain			chain
 @param[in]		ce				current chain entity
 @param[in]		wrap_around		get first curve if current entity is at last curve

</member>
        <member name="M:prev_chain_curve(CHAIN*,CHAIN_ENT*,System.Boolean)">
 @par Purpose:
			Get the previous curve in a chain.	If "wrap around" is specified,
			the chain is closed and the current entity is the first curve in
			the chain, return the last entity in the chain.

 @return	previous chain entity (NULL for none)
 @param[in]		chain		  chain
 @param[in]		ce			  current chain entity
 @param[in]		wrap_around   get last curve if current entity is at start of chain

</member>
        <member name="M:last_chain_curve(CHAIN!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Return the last curve in a chain

 @return	first curve in a chain
 @param[in]		chain	chain

</member>
        <member name="M:chain_from_file(System.Boolean,System.Char*,CHAIN**,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*)">
 @par Purpose:
			Get chains from a Mastercam file

 @param[in]	prompt		flag specifying if the user is to be prompted for a file name
 @param[in]	filename	name of the file to get the chains from
 @param[out]	new_chains	the chains found in the file
 @param[out]	pNotes		the notes found in the file

 @return		error code (CHAIN_OK, CHAIN_INVALID)

</member>
        <member name="M:optimize_inner_nested_order(CHAIN**)">
 @par Purpose:
			optimize sort of closed chains. Group inner to outer closed chains.
			before moving to next group of closed chains.
 @param[in,out]	chains	 linked list of chains

</member>
        <member name="M:optimize_outer_nested_order(CHAIN**)">
 @par Purpose:
			optimize sort of closed chains. Group outer to inner closed chains.
			before moving to next group of closed chains.
 @param[in,out]	chains	 linked list of chains

</member>
        <member name="M:sort_outside_to_inside(CHAIN**)">
 @par Purpose:
			sort closed chains from outside to inside.
 @param[in,out]	chains	 linked list of chains

</member>
        <member name="M:sort_inside_to_outside(CHAIN**)">
 @par Purpose:
			sort closed chains from inside to outside.	This is needed
			for water cutting, since an inner boundary can't be cut
			after its parent boundary has been cut since the part will
			have dropped out
 @param[in,out]	chains	 linked list of chains

</member>
        <member name="M:length_chain(CHAIN*)">
 @par Purpose:
			find the length of a chain
 @return	length of all entities in a chain
 @param[in]		chain	the chain to measure

</member>
        <member name="M:free_chains(CHAIN**)">
 @par Purpose:
			free chain memory for a linked list of chains.
 @param[in]		chains	 linked list of chains

</member>
        <member name="M:free_chain(CHAIN**)">
 @par Purpose:
			Free a linked list of CHAIN_ENT structures and one CHAIN
			structure.
 @param[in]		chain	one chain

</member>
        <member name="M:chain_all_selected(CHAIN**,System.Boolean,System.Boolean)">
 @par Purpose:
			Chain previously selected entities using TEMP2_BIT
 @return	CHAIN_ESC = user backed out, CHAIN_OK = user didn't back out
 @param[out]		new_chains		chained contours
 @param[in]		only_closed		true = collect just closed chains, false = all ents
 @param[in]		no_pts			true = remove chain pts, false = keep them

</member>
        <member name="M:check_chain_tp_refs(CHAIN*,System.Boolean,System.Boolean*,System.Boolean*)">
 check_chain_tp_refs
 @par Purpose:
			Check chain entities to see if any are referenced by toolpath
			entities.
 @param[in]		c			Chain which faces obliteration
 @param[in]		disp_warn	true = display warning if toolpath references found
 @param[out]		ref_found	true = toolpath references found
 @param[out]		dont_doit	true = user wants to cancel operation

</member>
        <member name="M:chain_1(System.Int32,CHAIN**,HINSTANCE__*,System.Boolean)">
 @par Purpose:
			Get one chain from the user

 @param[in]		msg_id				message number of string table
 @param[out]		chains				chained contours
 @param[in]		rsrc_handle			resource that contains the message
 @param[in]		preserveSelection	Do we keep the current selections?

 @return			error code (CHAIN_OK, CHAIN_ESC)

</member>
        <member name="M:chain_1(System.Int32,CHAIN**,System.Boolean)">
 @par Purpose:
			Get one chain from the user

 @param[in]		msg_id				message number of string table
 @param[out]		chains				chained contours
 @param[in]		preserveSelection	Do we keep the current selections?

 @return			error code (CHAIN_OK, CHAIN_ESC)

</member>
        <member name="M:chain_1(System.Char!System.Runtime.CompilerServices.IsConst*,CHAIN**,System.Boolean)">
 @par Purpose:
			Get one chain from the user

 @param[in]		msg					prompt message
 @param[out]		chains				chained contours
 @param[in]		preserveSelection	Do we keep the current selections?

 @return			error code (CHAIN_OK, CHAIN_ESC)

</member>
        <member name="M:chain_it_saw(CHAIN**)">
 @par Purpose:
			Chaining for saw.  Display the chain menu:

 @param[out]		chains	 chained contours

</member>
        <member name="M:chain_it_point(System.Int32,CHAIN**,HINSTANCE__*)">
 @par Purpose:
			Chaining with points.  Display the chain menu:

 @param[in]		msg_id	 message number of string table
 @param[out]		chains	 chained contours
 @param[in]		rsrc_handle   resource that contains the message

 @return			error code (CHAIN_OK, CHAIN_ESC)

</member>
        <member name="M:chain_it_point(System.Int32,CHAIN**)">
 @par Purpose:
			Chaining with points.  Display the chain menu:

 @par Chaining method:
 Chain\n
 Window\n
 Area\n
 Single\n
 Section\n
 Point\n
 [Solids]\n
 Last\n
 Unselect\n
 Done\n

 @param[in]		msg_id	 message number of string table
 @param[out]		chains	 chained contours

 @return			error code (CHAIN_OK, CHAIN_ESC)

</member>
        <member name="M:chain_it_point(System.Char!System.Runtime.CompilerServices.IsConst*,CHAIN**)">
 @par Purpose:
			Chaining with points.  Display the chain menu:

 @param[in]		msg		  prompt message
 @param[out]		chains	  chained contours

</member>
        <member name="M:chain_it(System.Int32,CHAIN**,HINSTANCE__*)">
 @par Purpose:
			Main chaining function.  Display the chain menu:
 @param[in]		msg_id		  message number of string table
 @param[out]		chains		  chained contours
 @param[in]		rsrc_handle   resource that contains the message

 @return			error code (CHAIN_OK, CHAIN_ESC)

</member>
        <member name="M:chain_it(System.Int32,CHAIN**)">
 @par Purpose:
			Main chaining function.  Display the chain menu:

 @par Chaining method:
 Chain\n
 Window\n
 Area\n
 Single\n
 Section\n
 [Solids]\n
 Last\n
 Unselect\n
 Done\n

 @param[in]		msg_id	 message number of string table
 @param[out]		chains	 chained contours

 @return			error code (CHAIN_OK, CHAIN_ESC)

</member>
        <member name="M:chain_it(System.Char!System.Runtime.CompilerServices.IsConst*,CHAIN**)">
 @par Purpose:
			Main chaining function.  Display the chain menu:
 @param[in]		msg		 prompt message
 @param[out]		chains	 chained contours

</member>
        <member name="M:reverse_chain(CHAIN*)">
 @par Purpose:
			reverse a chain
 @param[in,out]	chain	chain to reverse

</member>
        <member name="M:get_last_chain(CHAIN*,CHAIN**)">
 @par Purpose:
			return the last chain a linked list of chains
 @param[in]		chains		linked list of chains
 @param[out]		last_chain	last chain in the list

</member>
        <member name="M:unlink_chain(CHAIN**,CHAIN*,System.Int16,System.Boolean,System.Boolean,System.Boolean)">
 Move cur_chain from chains to sorted_chains. Do not deallocate the
 pocket boundary while unlinking the chain.

 @param[in,out]	first_chain		first chain in linked list
 @param[in]		chain			chain to unlink
 @param[in]		sel_bit			.sel bit to toggle
 @param[in]		free_pock_bnd	free pocket boundary
 @param[in]		unselect		unselect chain
 @param[in]		draw			true = draw when unselecting

</member>
        <member name="M:append_chains(CHAIN**,CHAIN*)">
 @par Purpose:
			append a linked list of chains to the end of a linked list of
			chains
 @param[in,out]	chains		 linked list of chains
 @param[in]		new_chains	 new chains

</member>
        <member name="M:append_chain(CHAIN**,CHAIN*)">
 @par Purpose:
			Add a chain entity to the end of a chain.  The chain entity
			is reallocated.
 @param[in,out]	chains		linked list of chains
 @param[in]		new_chain	new chain

</member>
        <member name="M:append_chain_ent(CHAIN*,CHAIN_ENT*,CHAIN_ENT**)">
 @par Purpose:
			Add a chain entity to the end of a chain.  The chain entity
			is reallocated.
 @return	error code (CHAIN_OK, CHAIN_MEM_ERR)
 @param[in,out]	chain		chain
 @param[in]		ce			chain entity to add
 @param[in,out]	last_ce		last chain entity in the chain

</member>
        <member name="M:add_curve_to_chain(ent*,System.Int16,System.Boolean,System.Int16,CHAIN*,CHAIN_ENT**,System.Int32)">
 @par Purpose:
			add a chain entity to start or end of a chain

 @param[in]		new_ent		entity to add to chain
 @param[in]		ep_n		endpoint number to save in new chain entity
 @param[in]		add_to_end	true = add entity to end of chain, false = add to start of chain
 @param[in]		sel_bit		.sel bit to flip (TEMP_BIT or SELECT_BIT)
 @param[in,out]	chain		chain
 @param[in,out]	ce			last (or first) entity in the chain
 @param[in]		fbm_type	FBM curve type (-1 if not FBM curve)

 @return			error code (CHAIN_OK, CHAIN_MEM_ERR)

</member>
        <member name="M:cleanup_chaining(CHAIN**,CHAIN_HASH*)">
 @par Purpose:
			deallocate data structures and .sel bits used for chaining
			This function does not call free_chain_mem, becuase it shouldn't
			be called the chain is no longer needed.
 @param[in]		chains	 linked list of chains.
 @param[in]		hash	 hash table

</member>
        <member name="M:init_chaining(CHAIN**,CHAIN_HASH*,System.Int16)">
 @par Purpose:
			initialize data structures and set .sel bits for chaining.
			Called prior to select_and_append_chains, for example.
 @return	error code (0 = ok, -1 = memory allocation error)
 @param[in,out]	chains	linked list of chains.
 @param[in,out]	hash	hash table for finding endpoints
							Bits to clear in prep. for chaining
 @param[in]		clear_sel_bits

</member>
        <member name="M:free_chain_mem">
 @par Purpose:
			Free all memory blocks that were allocated with chain_malloc

</member>
        <member name="M:chain_is_point(CHAIN*)">
 @par Purpose:
			determine whether a chain contains exactly one point
 @return	true = chain is only a point
 @param[in]		chain	chain to test

</member>
        <member name="M:unselect_chain(CHAIN*,System.Int16,System.Boolean)">
 @par Purpose:
			unselect all entites that are part of a chain (clear
			SELECT_BIT in the .sel field)
 @param[in]		chain		chain
 @param[in]		draw		draw entities after unselecting
 @param[in]		sel_bit		.sel bit to toggle

</member>
        <member name="M:unselect_chains(CHAIN*,System.Int16,System.Boolean)">
 @par Purpose:
			Unselect a linked list of chains
 @param[in]		chains		linked list of chains
 @param[in]		draw		draw entities after unselecting
 @param[in]		sel_bit		.sel bit to toggle

</member>
        <member name="M:first_chain_curve(CHAIN!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Return the first curve in a chain
 @return	first curve in a chain
 @param[in]		chain	chain

</member>
        <member name="M:check_chains_3d(CHAIN*,System.Boolean*,System.Boolean*)">
 @par Purpose:
			determine whether a chain contains 3d entities relative to the given view
 @param[in]		chain			chained entities
 @param[out]		chain_3d		true = chain is 3D
 @param[out]		chain_has_curve true = chain contains spline(s)/curve(s)

</member>
        <member name="M:end_of_chain(CHAIN*)">
 @par Purpose:
			Get the last entity (any type of entity) in a chain
 @return	last entity in the chain
 @param[in]		chain	chain

</member>
        <member name="M:number_of_syncs(CHAIN*,System.Boolean*)">
 @par Purpose:
			count the number of syncs in a chain
 @return	number syncs with at least one curve entity
 @param[in]		chain		   chain
 @param[out]		end_of_chain   END_OF_CHAIN id found

</member>
        <member name="M:number_of_chains(CHAIN*)">
 @par Purpose:
			Count the number of non-empty chains in a linked list
 @return	number of non-empty chains
 @param[in]		chains	 linked list of chains

</member>
        <member name="M:draw_chain_direction(CHAIN*)">
 @par Purpose:
			Draw an arrow in the direction of the last chain in the list
 @param[in]		chain	a chain

</member>
        <member name="M:draw_chains_sel(CHAIN*)">
 @par Purpose:
			Draw a linked list of chains and set the .sel field
 @param[in]		chain	linked list of chains

</member>
        <member name="M:draw_chain_sel(CHAIN*)">
 @par Purpose:
			Draw a chain and set the .sel field
 @param[in]		chain	a chain

</member>
        <member name="M:draw_chains(CHAIN*,System.Byte)">
 @par Purpose:
			Draw a linked list of chains
 @param[in]		chains	linked list of chains
 @param[in]		color	color

</member>
        <member name="M:draw_chain(CHAIN*,System.Byte)">
 @par Purpose:
			Draw a chain
 @param[in]		chain	a chain
 @param[in]		color	color

</member>
        <member name="M:get_chain_depth(CHAIN*,System.Double*,System.Boolean*)">
 @par Purpose:
			Return the depth of the first entity in a chain
 @param[in]		chain	chain
 @param[out]		z		depth
 @param[out]		ok		depth is valid

</member>
        <member name="M:chain_endpoint(CHAIN*,System.Int16,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Get the endpoint of a chain by number
 @param[in]		chain		chain
 @param[in]		chain_ep_n	0 = start of first entity, 1 = end of last entity
 @param[out]		ep			endpoint

</member>
        <member name="M:RecordBoundaries_Start">
@defgroup chain_ch1 Chain geometry modes 
@{ 
@} 
@defgroup chain_ch2 Chain direction 
@{ 
@} 
@defgroup chain_ch3 Chain sync options 
@{ 
@} 
@defgroup chain_ch4 Chaining error constants 
@{ 
@} 
</member>
        <member name="T:SolidChainSelection">
            <summary> Values that represent the different solid chain selection. </summary>
        </member>
        <member name="M:_sort_zig_zag(System.Int16,WWPTS*,System.Int16,System.Boolean*)">
 @par Purpose:
			Given a sorted list of points (sorted by x and y or y and x),
			reverse runs of points to create a zig-zag effect

 @param[in]		n_wpts		Number of window points to sort
 @param[in,out]	wpts		Window points (wpts[0] is start point)
 @param[in]		sort_i1		sort criteria
 @param[in,out]	change_made Has a change been made

</member>
        <member name="M:_sort_pts(System.Int16,WWPTS*,System.Int16,System.Int16,drill_options,System.Boolean*)">
@} 
 @par Purpose:
			Sort points by x+,x-,y+,y-, then by x+,x- or y+,y-

 @param[in]		n_wpts		Number of window points to sort
 @param[in,out]	wpts		Window points (wpts[0] is start point)
 @param[in]		sort1		first sorting criterion
 @param[in]		sort2		second sorting criterion
 @param[in]		option		drill sorting option
 @param[in,out]	change_made Has a change been made

</member>
        <member name="T:WWPTS">
@defgroup chain_sort Window Point Structure
@{ 
</member>
        <member name="M:ReverseDrillPointsInOp(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Reverse the order of drill points in an operation. </summary>
            <remarks> This will turn OFF the sorting in the operation. </remarks>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:SortDrillPointsInOp(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sort the drill points in an operation. </summary>
            <remarks> The desired sort style must be set in sort_method of the operation! </remarks>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:point_proc_assoc(System.Byte*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int16,System.Double,System.Boolean,ent*,System.Double*,System.Boolean*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*,System.Boolean,System.Boolean)">

 @par Purpose:
			Return a point, selected entity, input method and t values

 @param[out]		pt_option				point entry method
 @param[out]		pnt						3D point in world coordinates
 @param[in]		create_pt				true = create pt ent if undefined type
 @param[in]		sketch_view				if 0, use CONSTR_VIEW_N
 @param[in]		sketch_depth			if 0, use constr_depth
 @param[in]		sld_assoc				true = allow solid assoc points
 @param[out]		sel_ent					entity used in pt selection
 @param[out]		tval					t values used in pt selection
 @param[out]		valid_point				true = successful
 @param[in]		msg						select prompt
 @param[in]		disableDrawingCreatedPt	true = disable drawing of created point
 @param[in]		allowSelectionOfTempPt	true = allow selection of temporary point, false = do not allow selection of temporary point


</member>
        <member name="M:create_point_ent(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*,System.Boolean*)">

 @par Purpose:
			create and add a p_3d to the database

 @param[in]		pt			pt to add
 @param[out]		pt_ent		pt entity
 @param[out]		succf		true, if successful, otherwise false


</member>
        <member name="T:drill_options">
Drill options 
</member>
        <member name="M:pro_drill">

 @par Purpose:
			display the autodrill parameter dialog

 @return			unused


</member>
        <member name="M:drill_assoc(System.Int32)">
*@defgroup drill_srt_methods Drill Sorting Method Defines
 * @{
@}
*@defgroup filter depth Defines
 * @{
@}

 @par Purpose:
			collect drill params and points, write to db, process nci section

 @return			unused

 @param[in]		unused		unused


</member>
        <member name="M:set_chain_options(CWnd*,CHAIN_HASH*,System.Boolean*)">
 * @par Purpose:
 *			Display the options dialog, set options
 *
 * @param[in]		pwnd		  parent window pointer
 * @param[in,out]	hash		  hash table
 * @param[out]		sect_ang_on   true = section angle check box on

 * @return	error code (CHAIN_OK, CHAIN_MEM_ERR)

</member>
        <member name="M:save_screen_as_bitmap_info">
 @par Purpose:
		This function saves the graphics screen to a bitmap object.
 It then converts the bitmap object to a Device Independent Bitmap.

 @return		true if successful; false if not

</member>
        <member name="M:find_direction(ctour_rec*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*,System.Boolean*)">
 @par Purpose:
			Determine whether a closed contour was chained in the clockwise or
			counterclockwise direction

 @param[in]		ctour		The contour to analyze.  Must be closed.
 @param[in]		n_pts		Number of points in ctour
 @param[out]		direction	1 = ccw, -1 = cw
 @param[out]		succf		true if the direction was found successfully; false if not

</member>
        <member name="M:cutter_comp_2d(ctour_rec*,cc_rec*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int16*,System.Double,System.Char,System.Boolean,System.Boolean*)">
 @par Purpose:
			Take the information in ctour_info, offset it, and put it into
			cc_info

 @param[in,out]	ctour_info		contour information structure
 @param[out]		cc_info			resulting cutter comp information
 @param[in]		low_index		base index of the contour described in the ctour_info variable
 @param[in]		n_pts			number of points in the contour
 @param[in]		n_discarded		- unused -
 @param[in]		signed_ofst_dist	the offset value to be used
 @param[in]		cutter_orient	'L' to offset to the left; 'R' to offset to the right
 @param[in]		do_self_inters	true if the function is to find self intersections
 @param[out]		succf			true if the information was loaded into cc_info successfully; false if not

</member>
        <member name="M:SetLocalOp(System.Byte!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets local operation. </summary>
            <param name="newValue"> The new value. </param>
        </member>
        <member name="M:GetLocalOp">
            <summary> Gets local operation. </summary>
            <returns> The local operation. </returns>
        </member>
        <member name="M:oplib_list(System.Char!System.Runtime.CompilerServices.IsConst*,TpGrpList*,TpOpList*,System.Boolean)">
 @par Purpose:
			Make a list of operations from an external file

 @param[in]		fname			operations file name
 @param[out]		grps_out		list of groups that operations belong to
 @param[out]		ops_out			list of operations
 @param[in]		dumpEntAllocations			dump entity allocations; default == true

</member>
        <member name="M:oplib_delete(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int64*,System.Boolean*)">
 @par Purpose:
			open an external file, delete the operation by it's id number or file position

 @param[in]		slot		&gt;0-tool number to overwrite
 @param[in]		src			source file to open
 @param[in]		fpos		&gt;0-file position of tool (disregard slot no)
 @param[out]		succf		true = tool ent found

</member>
        <member name="M:oplib_rewrite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,operation*,System.Int64*,System.Boolean*)">
 @par Purpose:
			Open an external file, delete the operation by it's id number or file position

 @param[in]		slot		&gt;0-op number to overwrite
 @param[in]		src			source file to open
 @param[in]		op			operation info
 @param[in]		fpos		&gt;0-file position of tool (disregard slot no)
 @param[out]		succf		true = tool ent found

</member>
        <member name="M:oplib_save(operation*,System.Char*,System.Boolean,System.Boolean,System.Boolean*)">
 @par Purpose:
			Save an operation to the library

 @param[in]		op			ptr to tool structure
 @param[in]		lib_name	file name
 @param[in]		msg			true = display success message
 @param[in]		add_list	true = add to current tool list
 @param[out]		succf		true = everything went aok

</member>
        <member name="M:list_op_restore_bnci(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
 @par Purpose:
			restore the bnci for the op from the .mc8 file

 @param[in]		op_ids		operation ids to restore, NULL for all ops
 @param[in]		n_op_ids	# of ids in array
 @param[in]		path		active mastercam file (usually geo_filename)

 @return			true if the bnci was restored successfully; false if not

</member>
        <member name="M:tp_get_1st_ent(System.Int32!System.Runtime.CompilerServices.IsLong,ent*,System.Boolean*)">
 @par Purpose:
			find the first toopath entity in an operation

 @param[in]		opIdn	 		operation id number
 @param[out]		pFirstTpEnt	 	1st toolpath ent found that belongs to op
 @param[out]		pSuccf	 		true = successful

</member>
        <member name="M:op_info(System.Int32!System.Runtime.CompilerServices.IsLong,TpOpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_information*)">
 @par Purpose:
			get all info on operation

 @param[in]		op_idn			id number of the operation to get information for
 @param[in]		oplist			pointer to an operation list to look in
 @param[out]		info			fills a user-created op_information variable with the appropriate operation info

</member>
        <member name="M:list_op_change_nci(operation*,System.Char*,System.Boolean,System.Boolean)">
 @par Purpose:
			change nci path in all operations that match nci

 @param[in]		op			 current operation
 @param[in]		new_nci_name new nci path
 @param[in]		select_flag  true = use select flag
 @param[in]		ask			 true = ask "Update all operations... "

</member>
        <member name="M:op_make_description(operation!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Char*,System.UInt64)">
 @par Purpose:
			make the operation description

 @param[in]		op			operation
 @param[in]		add_comment true - append the operation comment
 @param[out]		str			ptr to destination string
 @param[in]		sz_str		max size of str

</member>
        <member name="M:run_op_chook(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean*)">
 @par Purpose:
			Run a function in a C-Hook DLL

 @param[in]		chook_name	The name of the C-Hook DLL (no path)
 @param[in]		func_name	The name of the function to be executed in the DLL (if empty, runs 'm_main')
 @param[out]		succf		true = all is ok

</member>
        <member name="M:memcmp_op(operation!System.Runtime.CompilerServices.IsConst*,operation!System.Runtime.CompilerServices.IsConst*,System.Int16,System.Boolean)">
 @return Purpose:
			compares two operations in memory for any differences

 @param[in]		opA		ptr to operation #1
 @param[in]		opB		ptr to operation #2
 @param[in]		mode	0 = compare all, 1=compare just important stuff
 @param[in]		warn	true = display warning (for debugging only)

 @return			return 0 for equal, non-zero if different

</member>
        <member name="M:CheckOperationEntityCount(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,CInterrogateMastercamFile*)">
            <summary> Check the operation's toolpath entity count. </summary>
            <param name="theOp">    the operation to check. </param>
            <param name="updateDb"> true to update database. </param>
            <param name="warn">	    true for debug warning. </param>
            <param name="pInFile">  a pointer to a CInterrogateMastercamFile object. </param>
            <returns> true if op's entity count is diffent thatn the # of toolpath entities found in the db for that operation. </returns>
        </member>
        <member name="M:PromptKeepNewOperation(System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,HINSTANCE__*,System.UInt32)">
            <summary> Prompt "Keep operation?" with operation description. </summary>
            <param name="opOK">		  true if the new operation was added, false if escape or cancel was hit. </param>
            <param name="opID">		  Identifier for the operation. </param>
            <param name="resHdl">	  (Optional) the resource handle for the dialog's title. </param>
            <param name="resourceID"> (Optional) the resource ID for the dialog's title. </param>
            <returns> true = operation saved and dependent ops marked dirty, false = operation deleted (or does not exist). </returns>
        </member>
        <member name="M:PromptKeepNewOperation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Prompt "Keep operation?" with operation description. </summary>
            <param name="opID">				  Identifier for the operation. </param>
            <param name="justDeleteNoPrompt"> (Optional) true = just delete the operation with no prompt. </param>
            <param name="pDlgTitle">		  (Optional) The dialog title, nullptr = "Keep operation?". </param>
            <returns> true = operation saved and dependent ops marked dirty, false = operation deleted (or does not exist). </returns>
        </member>
        <member name="M:GetInEditOperation">
            <summary> returns value of static InEditOperation. </summary>
            <returns> The in edit operation. </returns>
        </member>
        <member name="M:edit_operation(operation*,System.Byte,System.Boolean*,CWnd*,System.Int32*,System.Int32)">
 @par Purpose:
			run appropriate dialog for operation type (op-&gt;opcode),

 @param[in,out]	op			operation to edit
 @param[in]		update_db	true = update current db, false=just call dialog
 @param[out]		succf		true = successful
 @param[in]		pParentWnd	CWnd pointer to the parent dialog which called this function (default = NULL)
 @param[out]		pReturn		return value from the DoModal call to the op's dialog (default = NULL)
 @param[in]		StartPage	page to launch operation edit dialog to

 @return			# of ops successfully imported

</member>
        <member name="M:edit_operation_ext(operation*,System.Boolean,System.Boolean*)">
 @par Purpose:
			run appropriate dialog for operation type (op-&gt;opcode), in a CHook SDK-friendly fashion

 @param[in,out]	op			operation to edit
 @param[in]		update_db	true = update current db, false=just call dialog
 @param[out]		redo_idn	if op is redone - this will be set to the new op id #
 @param[out]		succf		true = successful

 @return			# of ops successfully imported

</member>
        <member name="M:opIsAssociativeLinkingParameterPointCompatible(TP_OPCODE)">
            <summary>	Operation is associative linking parameter point compatible. </summary>
            <remarks>	WEB, 10/17/2016. </remarks>
            <param name="opCode">	The operation code. </param>
            <returns>	true if it is compatible, false if not. </returns>
        </member>
        <member name="M:op_is_tip_comp(operation*)">
 @par Purpose:
			determines if the given op is set to tip comp
 @param[in]		op	 The operation to check

 @return			A pointer to the tip comp bool, true if set to tip comp,
					false if set to center comp

</member>
        <member name="M:op_is_notool(System.Int16,System.Boolean)">
 @par Purpose:
			determines if the given op does not have/require tool info 
 @param[in]		opcode	 operation opcode
 @param[in]		oldnci	 // I: true = include non-assoc toolpath operations in this evaluation

 @return			true if the op does not contain (use) a tool; false if it isn't

</member>
        <member name="M:op_is_chook(System.Int16)">
 @par Purpose:
			determines if the given op is an C-Hook operation
 @param[in]		opcode	 operation opcode

 @return			true if the op is a C-Hook type operation; false if it isn't

</member>
        <member name="M:op_is_manual_entry(System.Int16)">
 @par Purpose:
			determines if the given op is an manual entry operation
 @param[in]		opcode	 operation opcode

 @return			true if the op is an manual entry type toolpath; false if it isn't

</member>
        <member name="M:op_is_xform(TP_OPCODE)">
 @par Purpose:
			determines if the given op is an xforrm'd toolpath 
 @param[in]		opcode	 operation opcode

 @return			true if the op is an xform'd type toolpath; false if it isn't

</member>
        <member name="M:op_is_msurf(System.Int16)">
 @par Purpose:
			determines if the given op is a multi-surface toolpath (3-,4-, or 5-axis)
 @param[in]		opcode	 operation opcode

 @return			true if the op is a multi-surface type toolpath; false if it isn't

</member>
        <member name="M:op_is_FBM(System.Int16)">
 @par Purpose:
			determines if the given op is an FBM operation
 @param[in]		opcode	 operation opcode

 @return			true if the op is an FBM operation; false if it isn't

</member>
        <member name="M:op_is_point(System.Int16)">
 @par Purpose:
			determines if the given op is a point based toolpath
 @param[in]		opcode	 operation opcode

 @return			true if the op is a point based toolpath; false if it isn't

</member>
        <member name="M:op_is_drill5ax(System.Int16)">
 @par Purpose:
			determines if the given op is a holemaking toolpath.
 @param[in]		opcode	 operation opcode

 @return			true if the op is a drill, circle mill, thread mill or helix bore toolpath; false if it isn't

</member>
        <member name="M:op_is_drill(System.Int16)">
 @par Purpose:
			determines if the given op is a drill or c-axis drill toolpath
 @param[in]		opcode	 operation opcode

 @return			true if the op is a drill or c-axis drill toolpath; false if it isn't

</member>
        <member name="M:op_is_surface_or_chook(System.Int16)">
 @par Purpose:
			determines if the given op is a multi-surface toolpath (3-5axis) or chook
 @param[in]		opcode	 operation opcode

 @return			true if the op is a multi-surface type toolpath; false if it isn't

</member>
        <member name="M:opIsAnyMultiaxCapable(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determines if the given operation is capable of oututing multi-axis moves.  
		  Includes 2D holemaking when the tool axis control is set to 4 or 5 axis.</summary>
            <param name="op"> The operation. </param>
            <return>  	True if toolpath is multi-axis. </return>
        </member>
        <member name="M:op_is_any_multiax(System.Int16)">
 @par Purpose:
			determines if the given op is a multi-axis toolpath
 @param[in]		opcode	 operation opcode

 @return			true if the op is a multi-axis type toolpath; false if it isn't

</member>
        <member name="M:op_is_mw_multiax(System.Int16)">
 @par Purpose:
			determines if the given op is a multi-axis toolpath
 @param[in]		opcode	 operation opcode

 @return			true if the op is a multi-axis type toolpath; false if it isn't

</member>
        <member name="M:opIsMultiaxCapable(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determines if the given operation is capable of outputing multi-axis moves.  
		  Includes 2D holemaking when the tool axis control is set to 4 or 5 axis. </summary>
            <param name="op"> The operation. </param>
            <return>  	True if toolpath is multi-axis. </return>
        </member>
        <member name="M:op_is_multiax(System.Int16)">
 @par Purpose:
			determines if the given op is a multi-axis toolpath
  10/29/2018 - this function no longer includes 5Ax drill and circle mill because holemaking
  operations can now either be 5 axis or locked to 3 axis. The opcode alone is not sufficient to determine which.
  Use opIsMultiaxCapable (operation) instead.

 @param[in]		opcode	 operation opcode

 @return			true if the op is a multi-axis type toolpath; false if it isn't

</member>
        <member name="M:op_is_router(System.Int16)">
 @par Purpose:
			determines if the given op is a router toolpath
 @param[in]		opcode	 operation opcode

 @return			true if the op is a router type toolpath; false if it isn't

</member>
        <member name="M:op_updates_lathe_stock(System.Int16)">
 @par Purpose:
			determines if the op is a stock transfer
 @param[in]		opcode	 operation opcode

 @return			true if the op update the lathe stock boundary; false if it doesn't

</member>
        <member name="M:op_moves_lathe_stock(System.Int16)">
 @par Purpose:
			determines if the given op is stock transfer, flip or advance
 @param[in]		opcode	 operation opcode

 @return			true if the op is a stock transfer; false if it isn't

</member>
        <member name="M:op_is_lathe(System.Int16)">
 @par Purpose:
			determines if the given op is a lathe toolpath
 @param[in]		opcode	 operation opcode

 @return			true if the op is a lathe type toolpath; false if it isn't

</member>
        <member name="M:op_is_wire(System.Int16)">
 @par Purpose:
			determines if the given op is a wire toolpath
 @param[in]		opcode	 operation opcode

 @return			true if the op is a wire type toolpath; false if it isn't

</member>
        <member name="M:op_is_oldnci(System.Int16)">
 @par Purpose:
			determines if the given op is an old toolpath type
 @param[in]		opcode	 operation opcode

 @return			true if the op is a old toolpath type; false if it isn't

</member>
        <member name="M:op_is_fbm(System.Int16)">
 @par Purpose:
			determines if the given op is a fbm type toolpath

 @param[in]		opcode	 operation opcode

 @return			true if the op is a fbm type toolpath; false if it isn't

</member>
        <member name="M:op_is_milling(System.Int16)">
 @par Purpose:
			determines if the given op is a milling type toolpath

 @param[in]		opcode	 operation opcode

 @return			true if the op is a milling type toolpath; false if it isn't

</member>
        <member name="M:op_is_mt_supported(System.Int16)">
 @par Purpose:
			return true if op is supported by mt

 @param[in]		opcode	 operation opcode

 @return			return true if op is supported by mt

</member>
        <member name="M:toolpath_init(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean*)">
 @par Purpose:
			delete all operations and/or tools

 @param[in]		ops		true - delete all operations
 @param[in]		tls		true - delete all tools
 @param[in]		job		true - init the job setup
 @param[in]		silent	true - don't ask, don't tell
 @param[out]		succf	true - all went well

</member>
        <member name="T:RefPtBits">
@defgroup  assocvar_ch44 spindle direction 
@{ 
@} 
@defgroup  assocvar_ch45 drill pt initial values 
@{ 
@} 
@defgroup  assocvar_ch47 TP_CHN types 
@{ 
@} 
@defgroup  assocvar_ch62 1013 nci line opcodes - LATHE 
@{ 
@} 
@defgroup  assocvar_ch63 3D HMM Toolpath types 
@{ 
@} 
@defgroup  assocvar_ch64 2D HMM Toolpath styles 
@{ 
@} 
@defgroup  assocvar_ch65 Wirepath types 
@{ 
@} 
@defgroup  assocvar_ch66 Agie machine model and control limits 
@{ 
@} 
reference point bits, used with ref_pt_state 
</member>
        <member name="D:eLatheSpindles">
@defgroup assocvar_ch15 nci line types 
@{ 
@} 
@defgroup assocvar_ch2 Toolpath Regeneration Error Codes 
@{
@}
@defgroup assocvar_ch4 rotary axis (stored in bnci) 
@{ 
@} 
@defgroup assocvar_ch10 contour-pocket change at point codes 
@{ 
@} 
@defgroup assocvar_ch11 Wire change at point codes 
@{ 
@} 
@defgroup assocvar_ch12 Wire control setting codes 
@{ 
@} 
@defgroup assocvar_ch13 Wire control flag codes 
@{ 
@} 
@defgroup assocvar_ch14 maximum number of parameters on an NCI line 
@{ 
@} 
@defgroup assocvar_ch25 coolant states 
@{ 
@} 
@defgroup  assocvar_ch37 transform operation types
 *	@warning  make sure you update sizeof_operation() in assocnci.c with any new opcodes 
@{ 
@} 
@defgroup  assocvar_ch38 1013 nci line opcodes - Wire 
@{ 
@} 
@defgroup  assocvar_ch39 cutter compensation constants 
@{ 
@} 
@defgroup  assocvar_ch41 material type constants 
@{ 
@} 
@defgroup  assocvar_ch42 tool active head/turret and axis motion constants 
@{ 
</member>
        <member name="T:Cnc.Tool.TlMgr.TlMgrDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.CheckStickoutsAreLessThanPhysicalLength">
            <summary> Pass through check that stickouts are safe and not putting tools in midair, throws debug only asserts. </summary>
            <returns> stickout are safe? </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.PrepareObjectsForStoring">
            <summary> Prepares objects for storing. </summary>
            <returns> map of TlIds, TlObjects. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SetupAssemblies">
            <summary> Similar to FixObjects but to only be called to setup assembly relationships from old TlMgr's. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FixSlicedMillTools">
            <summary> Fix Sliced Tools from old files. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FixAssemblies">
            <summary> Fix assemblies. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FixObjects">
            <summary> Fix objects. </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_CorruptedAssemblies">
            <summary> A vector of all Assemblies that need to have their operations updated due to the
issue of multiple assemblies per tool bad bad relationship </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_ToolObjects">
            <summary> The base map that stores the objects, indexed by the TlID of
the object. </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_LatheSlotToID">
            <summary> A map which stores which slot number goes with which TlID
Used to support quick looked in the parts of Mastercam which
still depend on slot number </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_SlotToID">
            <summary> A map which stores which slot number goes with which TlID
Used to support quick looked in the parts of Mastercam which
still depend on slot number </summary>
        </member>
        <member name="F:Cnc.Tool.TlMgr.m_AssemblyToMachineGroup">
            <summary> A map that stores which TlID goes with which machine
group number.  This map will only contain assemblies that belong
to a machine group </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetEntType">
            <summary> Gets the ent type. </summary>
            <returns> The ent type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlMgr.DeleteAll">
            <summary> Removes all the items and deletes all the memory used by those items. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLatheTools">
            <summary> Gets lathe tools. </summary>
            <returns> The lathe tools. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetAssemblies">
            <summary> Gets the assemblies. </summary>
            <returns> The assemblies. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetAll">
            <summary>	Gets all tool class objects in this manager. </summary>
            <returns>	All objects. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLiveCenterIDs">
            <summary> Returns all the live center component IDs in the manager. </summary>
            <returns> A list of IDs of all the live center components in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetToolTypeIDs">
            <summary> Returns all the tool type IDs in the manager. </summary>
            <returns> A list of IDs of all the tool type in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetToolGroupIDs">
            <summary> Returns all the tool group IDs in the manager. </summary>
            <returns> A list of IDs of all the tool group in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetCutParamIDs">
            <summary> Returns all the cut params IDs in the manager. </summary>
            <returns> A list of IDs of all the cut params in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetOpTypeIDs">
            <summary> Returns all the op type IDs in the manager. </summary>
            <returns> A list of IDs of all the op types in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetOpGroupIDs">
            <summary> Returns all the op group IDs in the manager. </summary>
            <returns> A list of IDs of all the op groups in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetWorkMaterialIDs">
            <summary> Returns all the work material IDs in the manager. </summary>
            <returns> A list of IDs of all the work materials in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetHolderIDs">
            <summary> Returns all the holder IDs in the manager. </summary>
            <returns> A list of IDs of all the holders in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLatheToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetAssemblyIDs">
            <summary> Returns all the assembly IDs in the manager. </summary>
            <returns> A list of IDs of all the assemblies in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetIDs">
            <summary> Returns all the IDs in the manager. </summary>
            <returns> A list of IDs of all the objects in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsLatheTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a lathe tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a lathe tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsWorkMaterial(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a work material, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a work material, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsHolder(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a holder, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a holder, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsAssembly(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is an assembly, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies and assembly, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.RetrieveCorruptedAssemblyList">
            <summary> Retrieves the corrupted assembly list. </summary>
            <returns> List of corrupted TlIds. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.LatheSlotByID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the lathe tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.LatheIDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Find the lathe tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> Tlid of the lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SlotByID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the mill tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Find the mill tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> the corresponding TlID. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.CopyObjects(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID)">
            <summary> Copies an object from the other manager into this one. IF that object is an assembly, also copies all
		  associated AssemblyItems. </summary>
            <param name="otherManager"> Manager for other. </param>
            <param name="id">		    The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.RetrieveLatheSlotMap">
            <summary> Maps slots for use by wrapper lists when trying to open a slot. </summary>
            <returns> map of slots. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.RetrieveSlotMap">
            <summary> Retrieves the slot map. </summary>
            <returns> map of slots. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SaveAsTooldb(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves the current TlMgr as a tooldb file of the current .tooldb version. </summary>
            <param name="destinationFile"> The file name a path for the output .tooldb file. </param>
            <returns> true if the file is converted and saved correclty. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Attempts to locate a similar assembly to the input parameter "similarAssembly". </summary>
            <param name="similarAssembly"> The similar assembly. </param>
            <param name="machineGroupId">  Identifier for the machine group. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(DUPTOOL_CHK!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a tool assembly matching the provided set of search parameters. </summary>
            <param name="searchSettings"> The search settings. </param>
            <param name="searchParams">   Options for controlling the search. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary>	Attempts to locate a tool assembly matching the provided set of search parameters. </summary>
            <param name="searchParams">			Options for controlling the search. </param>
            <param name="machineGroupId">   	Identifier for the machine group. </param>
            <param name="displayDupWarning">	(Optional) True to display duplicate tool warning. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(Cnc.Tool.TpToolSearchParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate a tool assembly matching the provided set of search parameters. </summary>
            <param name="searchParams"> Options for controlling the search. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot"> The slot. </param>
            <param name="tool"> The tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot">	    The slot. </param>
            <param name="assembly"> [out] The assembly. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Update(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Updates an item in the tool manager.  The item must be a TlObject.  The ID of the item is used to
		  determine what item to update. </summary>
            <typeparam name="TYPE"> Type of the type. </typeparam>
            <param name="item"> The item to update.  The updated item is assigned to the old item. </param>
            <param name="add">  (Optional)
					If this parameter is true, then the function will update an existing item if one exists, or
					add if it does not.  If the parameter is false, then this function returns false if the item
					provided already exists in the manager. </param>
            <returns> true if the item is updated, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Update(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Updates an item in the tool manager.  The item must be a TlObject.  The ID of the item is used to
		  determine what item to update. </summary>
            <typeparam name="TYPE"> Type of the type. </typeparam>
            <param name="item"> The item to update.  The updated item is assigned to the old item. </param>
            <param name="add">  (Optional)
					If this parameter is true, then the function will update an existing item if one exists, or
					add if it does not.  If the parameter is false, then this function returns false if the item
					provided already exists in the manager. </param>
            <returns> true if the item is updated, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Add(std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Adds an item to the tool manager.  The item must be a TlObject. This is a templated function which
		  determines its type based on the type of the first parameter.  This function will create a new object
		  copied from the item parameter and store that copy. </summary>
            <typeparam name="TYPE"> Type of the type. </typeparam>
            <param name="item">			  The item to add to the list.  A copy of the item will be created and added to the
							  list, not the parameter itself. </param>
            <param name="updateExisting"> (Optional)
							  If this parameter is true, then the function will update an existing item if one
							  exists, or add if it does not.  If the parameter is false, then this function
							  returns false if the item provided already exists in the manager. </param>
            <returns> true if the item is added, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Add(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Adds an item to the tool manager.  The item must be a TlObject. This is a templated function which
		  determines its type based on the type of the first parameter.  This function will create a new object
		  copied from the item parameter and store that copy. </summary>
            <typeparam name="TYPE"> Type of the type. </typeparam>
            <param name="item">			  The item to add to the list.  A copy of the item will be created and added to the
							  list, not the parameter itself. </param>
            <param name="updateExisting"> (Optional)
							  If this parameter is true, then the function will update an existing item if one
							  exists, or add if it does not.  If the parameter is false, then this function
							  returns false if the item provided already exists in the manager. </param>
            <returns> true if the item is added, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Delete(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Deletes ALL tool records that contain the provided slot. </summary>
            <param name="slot"> The id of the tool to look for. </param>
            <param name="mill"> Flag indicating whether to remove the Mill tool associated at the provided slot, or the Lathe
					tool associated at the provided slot. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Delete(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given ID. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.DoesObjectExist(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determines if the specified item exists in this tool manager. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if the item exists, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Size">
            <summary> Returns the number of items stored in the manager. </summary>
            <returns> The number of items stored in the tool manager. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.op_Equality(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.op_Assign(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.op_Assign(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Dispose">
            <summary>   Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Copy(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Copies the given TlMgr. </summary>
            <param name="other">    The other tlMgr. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.#ctor(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlMgr.#ctor(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy Constructor.  Creates a copy tool manager. </summary>
            <param name="other"> The other tlMgr. </param>
        </member>
        <member name="T:Cnc.Tool.TlMgr.DefaultSlotValidator">
            <summary>	A default slot validator. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLathe.TlToolLatheDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolLathe.m_HolderPoints">
            <summary>	The holder points array. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolLathe.m_InsertPoints">
            <summary>	The insert points array. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.#ctor">
            <summary>Default constructor.  Creates an empty tool.</summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLathe.TlHolderLatheDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlInsert.TlInsertDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoIsCuttingItem">
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.GetAnsiStringPos(System.Char)">
            <summary>	Gets an ANSI string position. </summary>
            <param name="c">	The TCHAR to process. </param>
            <returns>	The ANSI string position. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.GetAnsiString">
            <summary>	Gets the ANSI string. </summary>
            <returns>	The ANSI string. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsert.GetDefaultCuttingSide">
            <summary>	Gets default cutting side. </summary>
            <returns>	The default cutting side. </returns>
        </member>
        <member name="D:Cnc.Tool.tp_tool_ptr">
            <summary>	Defines an alias representing the TP tool pointer. </summary>
        </member>
        <member name="D:Cnc.Tool.LATHETOOL_PTR">
            <summary>	Defines an alias representing the lathetool pointer. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssembly.TlAssemblyDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.OnSetMainHolder">
            <summary>	Executes the set main holder action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.OnSetMainTool">
            <summary>	Executes the set main tool action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.OnSlotChanged">
            <summary> Executes the slot changed action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.CreateNewFromOp(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates new assembly from operation. </summary>
            <param name="op"> The operation. </param>
            <returns> The new new from operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetMachineSideConnectionType">
            <summary>	Gets machine side connection type. </summary>
            <returns>	The machine side connection type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.RemoveAssemblyComponents">
            <summary>	Removes the assembly components. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetStationPerConfig">
            <summary>	Sets the station per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetOffsetsPerConfig">
            <summary>	Sets the offsets per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetAsDefaultAssembly(System.Boolean)">
            <summary>	Sets as default assembly. </summary>
            <param name="val">	The value. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetToolNumber(System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets tool number. </summary>
            <param name="toolNum">	    The tool number. </param>
            <param name="machineGroup"> Group the machine belongs to. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetMillTool">
            <summary>	Gets the mill tool. </summary>
            <returns>	The mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.IsSimilar(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Determines if the other tool assembly is similar enough to be considered a duplicate. </summary>
            <param name="spOther">		  The other tool assembly. </param>
            <param name="machineGroupId"> (Optional) identifier for the machine group. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.IsDifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if different enough to dirty operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.IsDifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="D:Cnc.Tool.TlAssemblyEntry">
            <summary>	Defines an alias representing the tl assembly entry. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolMill.TlToolMillDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.CleanUpPoorlyDefinedTools(System.Boolean,System.Boolean)">
            <summary> Clean up tools that were created badly in older versions. </summary>
            <param name="preX8"> True if called from a pre-X8 serialization version </param>
            <param name="preX9"> True if called from a pre-X9 serialization version </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.HasDifferentPeckStepCoolantValues(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'otherTool' has different peck step coolant values. </summary>
            <param name="otherTool"> The other tool. </param>
            <returns> true if different peck step coolant values, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.HasDifferentFeedSpeedValues(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'otherTool' has different feed speed values. </summary>
            <param name="otherTool"> The other tool. </param>
            <returns> true if different feed speed values, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolMill.m_MCToolType">
Old Holder Attributes
</member>
        <member name="M:Cnc.Tool.TlToolMill.GetProfileParams">
            <summary> Gets the profile parameters. </summary>
            <returns> The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetDataFromLegacy">
            <summary>	Gets the data from legacy tool. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetCornerRadius(System.Double)">
            <summary>	Convenience only - No backing field on TlToolMill </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetCornerRadius">
            <summary>	Convenience only - No backing field </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetFBMWasMetric(System.Boolean)">
            <summary> Sets fbm was metric. </summary>
            <param name="value"> true to value. </param>
            <remarks> This is here to support a hack in FBM. </remarks>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.AdjustLengthForStickout(System.Double)">
            <summary>	Adjust length for stickout. </summary>
            <param name="stickout">	The stickout. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.ResetProjectionValues">
            <summary>	Resets the projection values. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetToolMaterialCode(System.Int16,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>	Sets a tool material code. </summary>
            <param name="code">	   	The code. </param>
            <param name="matlName">	Name of the matl. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetToolMaterialCode">
            <summary>	Gets the tool material code. </summary>
            <returns>	The tool material code. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetCannedTxtCoolant(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets a canned text coolant. </summary>
            <param name="cool">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetPreXCoolant(System.Int16)">
            <summary>	Sets a pre x coordinate coolant. </summary>
            <param name="cool">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetLegacyHolderData(System.Double,System.Double)">
            <summary> Sets the legacy holder data. </summary>
            <param name="top">    The top. </param>
            <param name="height"> The height. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetMCToolType(MCToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the mastercam type of this tool.</summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetMCToolType(System.Int32)">
            <summary> Sets mc tool type. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetMCToolType">
            <summary>Returns the mastercam type of this tool.</summary>
            <returns>The Mastercam type of this tool.</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetOpTypeIDs">
            <summary>Returns a list of the IDs of the op type this tool
		 supports</summary>
            <returns>The list of op type IDs support by this tool</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the TlToolMill properties located within op_tool_info</summary>
            <returns>true of the setting was successful</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.#ctor">
            <summary>Default constructor.  Creates an empty tool.</summary>
        </member>
        <member name="M:Cnc.Tool.TlToolGrade.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGrade.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlMillingOpParams.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMillingOpParams.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlOpParams.TlOpParamsDeserializationImpl">
            <summary>	A TlOpParams deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.SetCannedTxtCoolant(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets canned text coolant. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.SetPreXCoolant(System.Int16)">
            <summary> Sets pre x coordinate coolant. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.DecrunchValues(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Decrunches the values from the inputed coolant vector </summary>
            <param name="coolant"> [in] The initial coolant vector to decrunch. </param>
            <returns>	Decrunched coolant vector. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.ConvertToTime(System.Int16)">
            <summary>	Converts the inputted coolant value to a Time index (0, 1, 2). </summary>
            <param name="value"> The value to convert from. </param>
            <returns>	Coolant Timing state (BEFORE, WITH, AFTER). </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.ConvertToState(System.Int16)">
            <summary>	Converts the inputted coolant value to a State index (0, 1, 2). </summary>
            <param name="value"> The value to convert from. </param>
            <returns>	Coolant State (ON, OFF, IGNORE). </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.UpdateFrom(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates from canned txt coolant escribed by coolant. </summary>
            <param name="coolant">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.op_Implicit~std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;">
            <summary> 
Converts this coolant object into the cannedtxtcoolant shorts
that Mastercam uses in machine definitions and posts.
</summary>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.#ctor(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Paramaterized Constructor. </summary>
            <param name="other"> The old style coolant flag to update from. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.#ctor(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Paramaterized Constructor. </summary>
            <param name="other"> The coolant vector to update from. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetCodeFromID">
            <summary> Sets code from identifier. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetIDFromCode">
            <summary> Sets identifier from code. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_User2_Bad">
            <summary>	The old user 2 id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_User2">
            <summary>	The old user 2 id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_User1">
            <summary>	The old user 1 id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_Ceramic">
            <summary>	The ceramic id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_TinCoated">
            <summary>	The tin coated id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_Carbide">
            <summary>	The carbide id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolMaterial.s_HSS">
            <summary>	The high speed steel id. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsIDValidMaterialID(Cnc.Tool.TlID)">
            <summary> Query if 'testID' is a valid material identifier. </summary>
            <param name="testID"> Identifier for the test. </param>
            <returns> true if identifier a valid material identifier, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsUser2">
            <summary> Query if this object is user 2. </summary>
            <returns> true if user 2, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsUser1">
            <summary> Query if this object is user 1. </summary>
            <returns> true if user 1, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsCeramic">
            <summary> Query if this object is ceramic. </summary>
            <returns> true if ceramic, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsTinCoated">
            <summary> Query if this object is tin coated. </summary>
            <returns> true if tin coated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsCarbide">
            <summary> Query if this object is carbide. </summary>
            <returns> true if carbide, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsHighSpeedSteel">
            <summary> Query if this object is high speed steel. </summary>
            <returns> true if high speed steel, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsDefinedMaterial">
            <summary> Query if this object is defined material. </summary>
            <returns> true if defined material, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsKnownMaterial">
            <summary> Query if this object is known material. </summary>
            <returns> true if known material, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetID(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.#ctor(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst)">
            <summary>	Paramiterized constructor. </summary>
            <param name="knownID"> Material ID to set the code based off of.Will only work for Mastercam known ids </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.#ctor(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Paramiterized constructor. </summary>
            <param name="code"> Material code to set the ID based off of </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMaterial.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlMaterial.SetCommercialName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a commercial name. </summary>
            <param name="name"> The name. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMaterial.GetCommercialName">
            <summary>   Gets the commercial name. </summary>
            <returns>   The commercial name. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoIsCuttingItem">
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if the other tool is different enough to affect an operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.IsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Determines if the other tool is similar enough to be considered a duplciate. </summary>
            <param name="other">		  The other. </param>
            <param name="machineGroupId"> (Optional) identifier for the machine group to aid in the comparison. </param>
            <param name="compareMode">    (Optional) the compare mode. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.IsDifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other tool is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other tool. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.IsDifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Determines if the other tool is different enough to affect an operation. </summary>
            <param name="other">					 The other tool. </param>
            <param name="useToolStepPeckCoolValues"> True if the machine group tells operations to use the tool Peck/Step/Coolant values. </param>
            <param name="useToolFeedSpeedValues">    True if the control definition tells operations to use the tool Feed/Speed values. </param>
            <param name="useToolOffsetValues">		 True if the control definition tells operations to use the tool offsets. </param>
            <param name="gougeCheckingEnabled">		 True if the current operation has gouge checking support and it is
										 enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.GetIsLegacyToolValid">
            <summary>	Gets is legacy tool valid. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.legacy_tool">
            <summary> Gets the legacy tool data. This is only used outside the class in TlToolMill 
		  during legacy deserialization and conversion into legacy tools. </summary>
            <returns> The legacy tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.GetLegacyIsAggregate">
            <summary>	Gets legacy is aggregate. </summary>
            <returns>	true if is aggregate, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.GetOpToolInfo">
            <summary> Gets the operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.op_Assign(Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.#ctor(Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="x"> A deep copy of this object </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.#ctor">
            <summary> Default constructor.  Creates an empty tool. </summary>
        </member>
        <member name="M:ClassEnt.GetEntType">
            <summary> Gets the assoc_id representing the ClassEnt type (i.e. OP_ID). </summary>
            <returns> The assoc_id representing the ClassEnt type. </returns>
        </member>
        <member name="M:ClassEnt.AddDerivedClass(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;*(void)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a derived class. </summary>
            <param name="entID">   Identifier for the ent. </param>
            <param name="assocID"> Identifier for the associated. </param>
            <param name="func">    The function. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.AddDefaultClass(std.function&lt;*(void)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds/Sets the default constructor to the ClassEnt class factory. </summary>
            <remarks> If an unknown ClassEnt type is encountered while deserialization, this constructor will be invoked to contain the unknown typed entity. </remarks>
            <param name="func"> The default constructor function. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.CreateFromFile(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary> Creates the ClassEnt object instance and deserializes it from the file. </summary>
            <param name="file">   The file to read from. </param>
            <param name="entity"> The entity. </param>
            <param name="bytes">  The bytes. </param>
            <returns> null if it fails, else the new from file. </returns>
        </member>
        <member name="M:ClassEnt.GetXMLVersion">
            <summary> Get Version (used in XML serialization). </summary>
            <returns> the version </returns>
        </member>
        <member name="M:ClassEnt.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Writes/Serializes the entity from a given archive. </summary>
            <param name="archive"> The archive to write to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.Deserialize(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Reads/Deserializes entity from the given file. </summary>
            <param name="file">			The file to read from. </param>
            <param name="bytesToRead">	Size of the block in bytes containing the entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.Serialize(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Writes/Serializes entity to the given file. </summary>
            <param name="file"> The file to write to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.GetBufferSize">
            <summary> Gets buffer size. </summary>
            <remarks> the buffer size is the memory footprint that the entity takes in the serialized form. </remarks>
            <returns> The buffer size. </returns>
        </member>
        <member name="M:ClassEnt.GetIDN">
            <summary> Gets the ent_idn of the Mastercam entity that is represented by this instance. </summary>
            <returns> The Mastercam entity ent_idn value. </returns>
        </member>
        <member name="M:ClassEnt.DetachFromDB">
            <summary> Determines if we can detach from database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.DetachFromDB(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Detach from database. </summary>
            <param name="entIDN"> The ent idn. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.DetachFromDB(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Detach from database. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.AttachToDB(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attach to database. </summary>
            <param name="entity"> The entity. </param>
            <returns> A long. </returns>
        </member>
        <member name="M:ClassEnt.AttachToDB">
            <summary> Attach to database. </summary>
            <returns> A long. </returns>
        </member>
        <member name="M:ClassEnt.Dispose">
            <summary> Finalizes an instance of the ClassEnt class. </summary>
        </member>
        <member name="M:ClassEnt.#ctor">
            <summary> Initializes a new instance of the ClassEnt class. </summary>
        </member>
        <member name="T:ClassEnt">
            <summary> Base class providing a more object oriented approach to Mastercam entities. </summary>
        </member>
        <member name="M:Cnc.Tool.HolderCompare(tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two holders, returns two if they are identical,
		  false otherwise.</summary>
            <param name="holderA">A reference to the first holder</param>
            <param name="holderB">A reference to the second holder</param>
        </member>
        <member name="M:Cnc.Tool.HolderUpdateData(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given new data to store in the holder, attaches all the data
	      and setups up the holder correctly </summary>
            <param name="holderIDN"> The IDN of the holder to modify </param>
            <param name="source">    Source for the holder data. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderUpdateData(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given new data to store in the holder, attaches all the data
		 and setups up the holder correctly</summary>
            <param name="holderIDN">The IDN of the holder to modify</param>
            <param name="holderData">Pointer to the segment data for the holder</param>
            <param name="holderDataSize">The total size of holderData.</param>
            <param name="libraryName">Pointer to the library name.</param>
            <param name="libraryNameSize">The number of characters in the library name.</param>
            <param name="holderName">Pointer to the holder name.</param>
            <param name="holderNameSize">The number of characters in the holder name.</param>
        </member>
        <member name="M:Cnc.Tool.HolderUpdateData(tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given new data to store in the holder, attaches all the data
		 and setups up the holder correctly</summary>
            <param name="holder">The holder to modify</param>
            <param name="holderData">Pointer to the segment data for the holder</param>
            <param name="holderDataSize">The total size of holderData.</param>
            <param name="libraryName">Pointer to the library name.</param>
            <param name="libraryNameSize">The number of characters in the library name.</param>
            <param name="holderName">Pointer to the holder name.</param>
            <param name="holderNameSize">The number of characters in the holder name.</param>
        </member>
        <member name="M:Cnc.Tool.HolderExists(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given an ent_idn, returns true if the holder exists, false 
		 otherwise</summary>
            <returns>true is the holder exists, false otherwise</returns>
        </member>
        <member name="M:Cnc.Tool.HolderGetHolder(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given a ent_idn, retrieves the tp_holder for this holder</summary>

For more details on the holder profile (holder data), read information at the top of 
TlHolder_CH.h (in particular about holderEntity.u.holder.holder_ptr_numsegs and 
triplets at holderEntity.u.holder.holder_ptr)
<returns>true if a matching holder entity was found, false otherwise</returns></member>
        <member name="M:Cnc.Tool.HolderGetEnt(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Given a ent_idn, retrieves the entity for this holder</summary>

For more details on the holder profile (holder data), read information at the top of 
TlHolder_CH.h (in particular about holderEntity.u.holder.holder_ptr_numsegs and 
triplets at holderEntity.u.holder.holder_ptr)
<returns>true if a matching holder entity was found, false otherwise</returns></member>
        <member name="M:Cnc.Tool.HolderCreateEnt(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new holder entity and stores it in the database. </summary>
            <param name="source"> Source for the holder data. </param>
            <returns> The ent_idn of the newly-created holder. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderCreateEnt">
            <summary>Creates a new holder entity and stores it in the database.</summary>
            <returns>The ent_idn of the newly-created holder.</returns>
        </member>
        <member name="M:Cnc.Tool.HolderCreateEnt(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder entity and stores it in the database.</summary>
            <param name="holder_lib">The library name to initialize this holder with.</param>
            <param name="holder_lib_size">The length of the holder_lib string.</param>
            <param name="holder_name">The name of the holder.</param>
            <param name="holder_name_size">The length of the holder_name string.</param>
            <returns>The ent_idn of the newly-created holder.</returns>
        </member>
        <member name="M:Cnc.Tool.HolderLoadFromFile(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads the holder with the given ent_idn from a file.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to retrieve.</param>
            <param name="filename">The name of the file to get the holder from.</param>
            <param name="updatedIDN">The updated ent_idn of the holder.</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetSegmentCount(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the number of segements for the holder and creates the needed
		 memory to store the segments.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="segmentCount">The number of segments this holder has.</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetHolderName(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the holder name for the holder.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="holderName">The new holder name as a CString.</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetHolderName(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the holder name for the holder.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="libraryName">A pointer to the buffer holding the new holder name</param>
            <param name="holderNameLength">The number of characters in the holder name</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetLibraryName(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the holder name for the holder.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="libraryName">The library name as a CString</param>
        </member>
        <member name="M:Cnc.Tool.HolderSetLibraryName(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the library name for the holder.</summary>
            <remarks>This function clears out the currently allocated memory.</remarks>
            <param name="holderIDN">The ent_idn of the holder to modify.</param>
            <param name="libraryName">A pointer to the buffer holding the new library 
						name</param>
            <param name="libraryNameLength">The number of characters in the library name</param>
        </member>
        <member name="M:Cnc.Tool.HolderCopyHolderTemp(tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder with COPIES of the old holder data.  Does not
		 place holder entity into the part file.</summary>
            <param name="dstHolder">The destination holder.</param>
            <param name="srcIDN">The IDN of the holder to copy.</param>
        </member>
        <member name="M:Cnc.Tool.HolderCopyHolderTemp(tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder with COPIES of the old holder data.  Does not
		place holder entity into the part file.</summary>
            <param name="dstHolder">The destination holder.</param>
            <param name="srcHolder">The source holder.</param>
        </member>
        <member name="M:Cnc.Tool.HolderCopyHolder(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder with COPIES of the old holder data.</summary>
            <param name="holderIDN">The IDN of the holder to copy.</param>
        </member>
        <member name="M:Cnc.Tool.HolderCopyHolder(tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new holder with COPIES of the old holder data.</summary>
            <param name="holder">The holder to copy.</param>
        </member>
        <member name="T:Cnc.Tool.TlHolder.TlHolderDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoOnSetStoredProfile">
            <summary> Executes the on set stored profile operation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolder.MakeSegment(Cnc.Tool.TlHolderSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Byte)">
            <summary> Makes a segment. </summary>
            <param name="segment">	    The segment. </param>
            <param name="bottomHeight"> (Optional) height of the bottom. </param>
            <param name="color">	    (Optional) the color. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.ConvertProfileSegmentToHolderSegment(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert profile segment to holder segment. </summary>
            <param name="segment"> The profile segment. </param>
            <returns> The holder segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.MakeHolderSegmentsFromProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary> Makes holder segments from profile. </summary>
            <param name="profile"> The profile. </param>
            <returns> A vector of TlHolderSegment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.MakeProfileFromHolderSegments(std.vector&lt;Cnc.Tool.TlHolderSegment,std.allocator&lt;Cnc.Tool.TlHolderSegment&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes profile from holder segments. </summary>
            <param name="holderSegments"> The holder segments. </param>
            <returns> A TlProfilePtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.IsDifferentEnoughToDirtyOp(std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other holder is different enough to warrant dirtying an operation. </summary>
            <param name="other">			    The other holder. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if different enough to dirty operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.IsDifferentEnoughToAffectOp(std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determines if the other holder is different enough to affect an operation. </summary>
            <param name="other">			    The other holder. </param>
            <param name="gougeCheckingEnabled"> True if the current operation has gouge checking support and it is enabled. </param>
            <returns> true if different enough to affect operation, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.GetLength">
            <summary> Gets the length of the holder (max y value - min y value). </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.GetHeight">
            <summary>	Gets the total Height of the Holder (from y=0 to the holder's max y value). </summary>
            <returns>	The Height of the Holder. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.IsDefaultHolder">
            <summary>	Query if this object is default holder. </summary>
            <returns>	true if default holder, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.SetSegments(std.vector&lt;Cnc.Tool.TlHolderSegment,std.allocator&lt;Cnc.Tool.TlHolderSegment&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets the segments </summary>
            <param name="segments">	segments to define the holder </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.GetSegments">
            <summary> Gets the segments. </summary>
            <returns> The segments. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.AddSegment(System.Double,System.Double,System.Double)">
            <summary> Adds a segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DeleteAllSegments">
            <summary> Deletes all segments. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.op_Assign(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.#ctor(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="x"> A deep copy of this object </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.#ctor(System.Boolean)">
            <summary>	Parameterized constructor. </summary>
            <param name="IsMetric">	true if this object is metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderSegment.op_Equality(Cnc.Tool.TlHolderSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	comparison operator. </summary>
            <param name="rhs">	The other. </param>
            <returns>	true if objects are the same </returns>
        </member>
        <member name="T:Cnc.Tool.TlHolderSegment">
            <summary> Class representing an old-style holder segment in the form of a top width, a bottom width, and a height. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAccessory.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAccessory.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyItem.TlAssemblyItemDeserializationImpl">
            <summary>	A tool assembly item deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoIsCuttingItem">
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoOnSetStoredProfile">
            <summary> Executes the set stored profile action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.IsCuttingItem">
            <summary>	Query if this tool assembly item is a cutting item. </summary>
            <returns>	True if this assembly item is a cutting item, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetProfile">
            <summary> Generates the profile of this item. If the item is a parametric item, a parametric profile will be
		  generated.  Otherwise, the item's stored custom profile will be retrieved in the form of a
		  TlProfileResult instance. </summary>
            <returns> The profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.RemoveOpGroup(Cnc.Tool.TlOpGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Removes the operation group described by opGroup. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.AddOpGroup(Cnc.Tool.TlOpGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Adds an operation group. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.SetStoredProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the stored profile of the item using the given profile.  The passed in profile is assumed to be in the
specified units, as it will be scaled as necessary before being set as the stored profile.
</summary>
            <param name="spProfile">	  		The profile in system units to be set as the stored profile of this item. </param>
            <param name="profileIsInMetric">	True if the profile passed in is in Metric units. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.SetStoredProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the stored profile of the item using the given profile.  The passed in profile is assumed to be in the
specified units, as it will be scaled as necessary before being set as the stored profile.
</summary>
            <param name="spProfile">	  		The profile in system units to be set as the stored profile of this item. </param>
            <param name="profileIsInMetric">	True if the profile passed in is in Metric units. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetStoredProfileCPtr(System.Boolean)">
            <summary>	Gets a scaled version of the stored internal profile in the desired units. </summary>
            <param name="getProfileInMetric">	true to get profile in metric. </param>
            <returns>	The stored profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetStoredProfile(System.Boolean)">
            <summary>	Gets a scaled version of the stored internal profile in the desired units. </summary>
            <param name="getProfileInMetric">	true to get profile in metric. </param>
            <returns>	The stored profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetOpGroups">
            <summary>   Gets the operation groups. </summary>
            <returns>   The operation groups. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.op_Assign(Cnc.Tool.TlAssemblyItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A reference to this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.op_Assign(Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A reference to this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.#ctor(Cnc.Tool.TlAssemblyItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.#ctor(Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Copy constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFileCollection.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old identifiers to new identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFileCollection.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFileCollection.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.GetFileDataSize">
            <summary>   Gets the file data binary size. </summary>
            <returns>   The file data binary size. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.SetFileData(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the file data using the path to the Parasolid transmit (.x_b) file. </summary>
            <param name="filePath"> Full pathname of the file. Must be a Parasolid transmit (.x_b) file. </param>
        </member>
        <member name="T:Cnc.Tool.TlConnection.TlConnectionDeserializationImpl">
            <summary>	A connection deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlConnection.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset IDs operation. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the is equal operation. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnection.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Serialize this object to the given stream. </summary>
            <param name="ar">	The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.SetItemPtr(Cnc.Tool.TlAssemblyItem*)">
            <summary>	Sets the item pointer. </summary>
            <param name="pItem">	The item . </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.GetItemPtr">
            <summary>	Gets the item pointer. </summary>
            <returns>	The item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnection.GetIsMetric">
            <summary>	Gets a value indicating whether the scalar values in this connection are metric. </summary>
            <returns>	True if metric, false if inch. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.SetTranslation(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Sets the translation portion of the locator, scaling the input value if necessary. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	True if the value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlLocator.SetTranslation(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the translation portion of the locator assuming that the value is in system units. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlLocator.GetTranslation(System.Boolean)">
            <summary>	Gets the translation portion of the locator in the specified units. </summary>
            <param name="inMetric">	True to get the translation portion in metric. </param>
            <returns>	The translation portion of the locator. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.GetTranslation">
            <summary>	Gets the translation portion of the locator in system units. </summary>
            <returns>	The translation portion of the locator. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_PrimeTurn">
            <summary>   The prime turn tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_US_Union_Tool">
            <summary>   The us union tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_HPI">
            <summary>   The hpi id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_MariTool">
            <summary>   The mari tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Lyndex_Nikken">
            <summary>   The lyndex nikken id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_YG_1">
            <summary>   The yg id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Fraisa">
            <summary>   The fraisa id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Redline">
            <summary>   The redline id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Micro100">
            <summary>   The micro 100 id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Harvey_Tool">
            <summary>   The harvey tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Garr">
            <summary>   The garr id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Everede">
            <summary>   The everede id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_MA_Ford">
            <summary>   The ma ford id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Emuge">
            <summary>   The emuge id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_OSG">
            <summary>   The osg id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Mitsubishi">
            <summary>   The mitsubishi id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Helical_Solutions">
            <summary>   The Helical ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Holex_Hoffman_Group">
            <summary>   The Holex - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Garant_Hoffman_Group">
            <summary>   The Garant - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Sumitomo">
            <summary>   The Sumitomo ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Onsrud">
            <summary>   The Onsrud ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Harvey">
            <summary>   The Harvey ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Greenleaf">
            <summary>   The Greenleaf ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Vortex">
            <summary>   The Vortex ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Widia_Valenite">
            <summary>   The Widia - Valenite ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Widia_Hanita">
            <summary>   The Widia-Hanita ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Seco">
            <summary>   The Seco ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Dapra">
            <summary>   The Dapra ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Duramill">
            <summary>   The Duramill ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Niagara">
            <summary>   The Niagara ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Dataflute">
            <summary>   The Dataflute ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_MillStar">
            <summary>   The Millstar ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Intersoll">
            <summary>   The Intersoll ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Robbjack">
            <summary>   The Robbjack ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Sandvik">
            <summary> The Sandvik ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Kennametal">
            <summary>   The Kennemetal ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Command_Tool">
            <summary>   The Command Tool ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Mastercam">
            <summary>   The mastercam id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Iscar">
            <summary>   The iscar id. </summary>
        </member>
        <member name="M:Cnc.Tool.TlManufacturer.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="F:Cnc.Tool.TlProfile.linearizationConstant">
            <summary> The linearization constant. </summary>
        </member>
        <member name="F:Cnc.Tool.TlProfile.m_Profile">
            <summary> The profile segments in order from bottom up. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfile.TlProfileDeserializationImpl">
            <summary>	A TlProfile deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the operation to reset identifiers. </summary>
            <param name="changedIDs">	The changed identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitSegmentAtYValueIntoProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Splits segment into profiles. </summary>
            <param name="spCurrentSegment">   The sp segment. </param>
            <param name="spLowerProfile">	  The sp lower profile. </param>
            <param name="spLowerLastSegment"> The sp lower last segment. </param>
            <param name="spUpperProfile">	  The sp upper profile. </param>
            <param name="spUpperLastSegment"> The sp upper last segment. </param>
            <param name="yValue">			  The value. </param>
            <param name="tol">				  The tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitSegmentAtXValueIntoProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Splits segment into profiles. </summary>
            <param name="spCurrentSegment">   The sp segment. </param>
            <param name="spLowerProfile">	  The sp lower profile. </param>
            <param name="spLowerLastSegment"> The sp lower last segment. </param>
            <param name="spUpperProfile">	  The sp upper profile. </param>
            <param name="spUpperLastSegment"> The sp upper last segment. </param>
            <param name="xValue">			  The value. </param>
            <param name="tol">				  The tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddSegmentToProfile(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Adds a segment to profile. </summary>
            <param name="spSegment">	 The sp segment. </param>
            <param name="spProfile">	 The sp profile. </param>
            <param name="spLastSegment"> The sp last segment. </param>
            <param name="tol">			 The tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing360(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing 360. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing 270, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing270(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing 270. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing 270, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing180(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing a specified angle. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing angle, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing90(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing a specified angle. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing angle, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentCompletelyBelowXValue(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Segment completely below x coordinate value. </summary>
            <param name="spSegment"> The sp segment. </param>
            <param name="xValue">    The value. </param>
            <param name="tol">		 The tolerance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentCompletelyBelowYValue(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Segment completely below y coordinate value. </summary>
            <param name="spSegment"> The sp segment. </param>
            <param name="yValue">    The value. </param>
            <param name="tol">		 The tolerance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitArcAtAngle(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Splits arc at angle. </summary>
            <param name="segment"> The segment. </param>
            <param name="angle">   The angle. </param>
            <returns> Results of the arc split. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.PointsEqualTol(std.array&lt;System.Double,0x02&gt;,std.array&lt;System.Double,0x02&gt;,System.Double)">
            <summary> Comparison tool for points. </summary>
            <param name="value1"> The first value. </param>
            <param name="value2"> The second value. </param>
            <param name="tol">    The tolerance. </param>
            <returns> true if the two points are equal within system tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transforms the current profile by the given transformation. </summary>
            <param name="transformation">	  The transformation. </param>
            <param name="transformationType"> Type of the transformation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Scale(System.Double)">
            <summary> Scales the current profile. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimOrExtendToYValue(System.Double)">
            <summary> Trim or extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ExtendToYValue(System.Double)">
            <summary> Extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimToYValue(System.Double,System.Boolean)">
            <summary> Trim to y coordinate value. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimToXValue(System.Double,System.Boolean)">
            <summary> Trim to x coordinate value. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitAtYValue(System.Double,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Splits the current profile at the specified y coordinate value. </summary>
            <param name="yValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitAtXValue(System.Double,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Splits the current profile at the specified x coordinate value. </summary>
            <param name="xValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TranslateToYZero">
            <summary> Translates the entire profile, so that the lowest point of the profile is at Y=0. </summary>
            <remarks> Looks at the endpoints of each segment to determine the amount to translate. </remarks>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddHorizontalConnectors">
            <summary> Adds horizontal connectors to the start and endpoint of the profile. </summary>
            <remarks> If the point is already at y=0, then no connector is added/needed. </remarks>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Linearize">
            <summary> Linearizes this profile into strictly line segments. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SortProfile">
            <summary> Sorts the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.CleanupZeroLengthSegments">
            <summary>	Cleanup zero length segments. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AnyLineSegmentsOnYAxis">
            <summary> Determines if we have any line segments on the Y axis. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ValidateProfileQuadrant">
            <summary> Validates the profile quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SwapSegments(System.Int32,System.Int32,System.Boolean)">
            <summary> Swap the segments at index1 and index2. </summary>
            <param name="index1">	  The first index. </param>
            <param name="index2">	  The second index. </param>
            <param name="reverseDir"> (Optional) true to reverse direction of the resulting index1 segment. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddToTopOfProfile(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a segment to the top of profile. The rest of the profile remains unchanged. </summary>
            <remarks> The passed in segment should have coordinates relative to the profile we're adding it to. </remarks>
            <param name="segment"> The segment. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddToBottomOfProfile(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	adds a segment to the bottom of a profile, and pushes everything else up to accomadate it. </summary>
            <param name="segment">	New segment to add - should be constructed from origin.  Will be translated down if profile is below x axis</param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetProfileSegmentsCount(System.Boolean)">
            <summary> Gets the number of profile segments with height. </summary>
            <param name="onlyWithHeight"> (Optional) true to only get the segments with height. </param>
            <returns> The number of profile segments with height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetProfileSegments">
            <summary> Provides const reference to profile segment array. </summary>
            <returns> const reference to profile segments array. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetProfileSegmentsTopDown(System.Boolean)">
            <summary> Gets all the profile segments as a const vector of const TlProfileSegmentPtr objects (does not clone segments!). </summary>
            <remarks> This function returns the profile segments in reverse order to mimick the TlHolderSegments. </remarks>
            <param name="onlyWithHeight"> (Optional) true to only get the segments with height. </param>
            <returns> The profile from the top down. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetSegmentAt(System.Int32)">
            <summary> Gets the segment at the specified index. </summary>
            <param name="index"> Zero-based index of the segments. </param>
            <returns> The segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ClearProfile">
            <summary> Clears the profile. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetSegmentCount">
            <summary> Gets segment count. </summary>
            <returns> The segment count. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MaxY">
            <summary>	Maximum y coordinate of this profile. </summary>
            <returns>	The maximum y coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MinY">
            <summary>	Minimum y coordinate of this profile. </summary>
            <returns>	the minimum y coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MaxX">
            <summary>	Maximum x coordinate of this profile. </summary>
            <returns>	The maximum X coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MinX">
            <summary>	Minimum x coordinate of this profile. </summary>
            <returns>	the minimum X coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetLength">
            <summary>	True length of profile in Y, including section below X axis </summary>
            <returns>	said length </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetHeight">
            <summary>	Height of profile at top as measured from X axis </summary>
            <returns>	said height </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsEmpty">
            <summary>	Checks to see if this profile is empty </summary>
            <returns>	true if empty, else false </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsClosedLoop">
            <summary> Query if this object is a closed loop profile. </summary>
            <remarks> Does not need segments to be in any specific direction or order. </remarks>
            <returns> true if closed loop, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.op_Implicit~std.vector&lt;prof_ent,std.allocator&lt;prof_ent&gt;&gt;">
            <summary> Cast that converts the given  to a vector. </summary>
            <typeparam name="prof_ent"> Type of the prof ent. </typeparam>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.op_Implicit~std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;">
            <summary> Cast that converts the given  to a vector. </summary>
            <typeparam name="TlProfileEnt"> Type of the tl profile ent. </typeparam>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.op_Assign(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side of the assignment operation. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy Constructor. </summary>
            <param name="profile"> The profile. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor to create a TlProfile from a vector of profile segments. </summary>
            <param name="profile"> The profile. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor to create a TlProfile from a vector of profile segments. </summary>
            <param name="profile"> The profile. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor">
            <summary> Default constructor.  Creates an empty profile. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoTrimAtXValue(System.Double,System.Boolean)">
            <summary> Executes the trim at x coordinate value operation. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoTrimAtYValue(System.Double,System.Boolean)">
            <summary> Executes the trim at y coordinate value operation. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoIsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.SetToOldSegment(TlProfileEnt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.SetToOldSegment(prof_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetScaledSegment(System.Double)">
            <summary> Gets scaled segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
            <returns> The scaled segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Scale(System.Double)">
            <summary> Scales this segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetRotatedSegment(System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets rotated segment. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetRotatedSegment(System.Double)">
            <summary> Gets rotated segment. </summary>
            <param name="radians"> The radians. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Rotate(System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Rotates this object about the passed in point. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Rotate(System.Double)">
            <summary> Rotates this object. </summary>
            <param name="radians"> The radians. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetMirroredSegment(System.Boolean)">
            <summary> Gets mirrored segment. </summary>
            <param name="aboutYAxis"> true to about y coordinate axis. </param>
            <returns> The mirrored segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Mirror(System.Boolean)">
            <summary> Mirrors. </summary>
            <param name="aboutYAxis"> true to mirror about the Y axis, false to mirror about the X axis. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetTranslatedSegment(System.Double,System.Double)">
            <summary> Gets translated segment. </summary>
            <param name="deltaX"> The delta x coordinate. </param>
            <param name="deltaY"> The delta y coordinate. </param>
            <returns> The translated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Translate(System.Double,System.Double)">
            <summary> Translates the segment in 2space. </summary>
            <param name="deltaX"> The change to make in X. </param>
            <param name="deltaY"> The change to make in Y. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetTransformedSegment(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Gets transformed segment. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
            <returns> The transformed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Transforms the current segment by the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetReversedSegment">
            <summary> Gets reversed segment. </summary>
            <returns> The reversed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.ValidateQuadrant">
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Reverse">
            <summary> Reverses the segment. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.TrimAtXValue(System.Double,System.Boolean)">
            <summary> Trim at x coordinate value. </summary>
            <param name="x">			    The x coordinate. </param>
            <param name="keepLowerSegment"> (Optional) true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.TrimAtYValue(System.Double,System.Boolean)">
            <summary> Trim at y coordinate value. </summary>
            <param name="y">			    The y value to trim to. </param>
            <param name="keepLowerSegment"> (Optional) true to keep the lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.CrossesXValue(System.Double)">
            <summary> Determines if the current segment x coordinate value. </summary>
            <param name="value"> The value. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.CrossesYValue(System.Double)">
            <summary> Determines whether a given segment would have to be trimmed to stay under Y. </summary>
            <param name="maxY"> Y value to stay under. </param>
            <returns> true if it needs trimming, else false. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.IsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetMaxWidth">
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetTopWidth">
            <summary> Gets top width. </summary>
            <returns> The top width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetBottomWidth">
            <summary> Gets bottom width. </summary>
            <returns> The bottom width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetHeight">
            <summary> Height of segment. </summary>
            <returns> said height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetLength">
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetEndpoint2">
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetEndpoint1">
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MinY">
            <summary> Lowest point contained in segment. </summary>
            <returns> Lowest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MinX">
            <summary> Minimum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MaxY">
            <summary> Highest point contained in segment. </summary>
            <returns> Highest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MaxX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Linearize">
            <summary> Conversion function. </summary>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.op_Implicit~TlProfileEnt">
            <summary> Cast that converts the given profile segment to a TlProfileEnt. </summary>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.op_Implicit~prof_ent">
            <summary> Conversion operator. </summary>
            <returns> prof_ent representing this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="color"> The segment. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileSegment.TransformationType">
            <summary> Values that represent the various possible transformations for a segment. </summary>
        </member>
        <member name="T:Cnc.Tool.TlObject.TlObjectDeserializationImpl">
            <summary>	A TlObject deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoAccept(Cnc.Tool.IConstTlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoAccept(Cnc.Tool.ITlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoClone">
            <summary>	Executes the clone operation. </summary>
            <returns>	A TlObjectPtr. </returns>
        </member>
        <member name="F:Cnc.Tool.TlObject.m_ID">
            <summary>	The identifier. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.OnSlotChanged">
            <summary> Executes the slot changed action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.ResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.ResetIDs">
            <summary>	Resets all identifiers associated to this object. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.Accept(Cnc.Tool.IConstTlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Method to accept an instance of the IConstTlClassVisitor interface in an implementation of the Visitor 
		  design pattern. The IConstTlClassVisitor interface allows read only access to the Tl class instance 
		  based off of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.Accept(Cnc.Tool.ITlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Method to accept an instance of the ITlClassVisitor interface in an implementation of the Visitor design
		  pattern. The ITlClassVisitor interface allows for changes to be made to the Tl class instance based off 
		  of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.SetID(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.SetID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.SetSlotDirect(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets slot directly with no side affects. </summary>
            <remarks> This special accessor is needed because m_Slot is actually serialized out in the TlToolAssembly class.
		  This will be resolved eventually. </remarks>
            <param name="slot"> The new slot number. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.GetID">
            <summary>	Gets the identifier. </summary>
            <returns>	The identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_LessThan(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Less-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Inequality(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Equality(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	comparison operator. </summary>
            <param name="rhs">	The other. </param>
            <returns>	true if objects are the same </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.Clone">
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	null if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Assign(Cnc.Tool.TlObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assigment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Assign(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.#ctor(Cnc.Tool.TlObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.#ctor(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Copy constructor. </summary>
            <param name="other">	The other tl object. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:RotatePoint(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
 @par Purpose:
			Find the point rotated about a point and a unit directional vector

 @param[in]		pt		3d point
 @param[in]		pt0		fixed point
 @param[in]		axis	unit axial vector
 @param[in]		angle	angle of rotation in radians
 @return			rotated 3d point

</member>
        <member name="M:RotateVector(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
 @par Purpose:
			Find the components of one vector rotated about a unit directional vector

 @param[in]		v		3d vector
 @param[in]		axis	unit axial vector
 @param[in]		angle	angle of rotation in radians
 @return			rotated 3d vector

</member>
        <member name="M:Parallel(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Determine if two 3d vectors are parallel
 @param[in]		v1		First vector
 @param[in]		v2		Second vector
 @return			true = parallel, false = non-parallel

</member>
        <member name="M:Components(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the components of one vector w.r.t. a unit vector

 @param[in]		v			first 3d vector
 @param[in]		u			unit 3d vector
 @param[out]		perpUVec	component of V perpendicular to U
 @param[out]		dirUVec		component of V in direction of U

</member>
        <member name="M:vec_3dx(System.Double,System.Double,System.Double,System.Double*)">
 @par Purpose:
			Form a 3d vectors from its x, y, z components
 @param[in]		x		x component
 @param[in]		y		y component
 @param[in]		z		z component
 @param[out]		pt		components set to x, y, and z

</member>
        <member name="M:vecx(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*)">
 @par Purpose:
			Form a 2d vector from its x, y components
 @param[out]		vector		components set to x and y
 @param[in]		x			x component
 @param[in]		y			y component

</member>
        <member name="M:AngleBetween(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the angle formed by two 3d vectors

 @param[in]		vec1	first 3d vector
 @param[in]		vec2	second 3d vector
 @return			Angle formed by the vectors (radians);

</member>
        <member name="M:SweepAngle(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the angle formed by a 2d vector
 @param[in]		vec		a 2d vector
 @return			Angle, in radians, formed by vec (equivalent to [0,360] degrees)

</member>
        <member name="M:copy_ptx(System.Double*,System.Double!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Copy a 2d point
 @param[out]		pt_out		The array to copy to
 @param[in]		pt_in		The array to copy from

</member>
        <member name="M:copy_ptx(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Copy a 2d point
 @param[out]		pt_out		The array to copy to
 @param[in]		pt_in		The point to copy from

</member>
        <member name="M:proj_pt_ln(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Boolean*)">
 @par Purpose:
			Project a 2d point onto a line
 @param[in]		pt		The point to project
 @param[in]		line	The line to project onto
 @param[out]		pr_pt	The projected point
 @param[out]		t		The parameter (0 to 1);
 @param[out]		succf	true if line has non-zero length

</member>
        <member name="M:pt_on_line_tol(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
 @par Purpose:
			Determines whether a point lies on a line

 @return true = pt lies between line's endpoints
 @param[in]		pt			the 2d point in question
 @param[in]		line		the 2d line in question

</member>
        <member name="M:aa_ints_new(a_2d!System.Runtime.CompilerServices.IsConst*,a_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Find the intersection points of two circles whose center and
			radius are specified by arc1 and arc2.	Return the intersection
			points in p1 and p2.  Set succf to false if the circles are
			concentric or do not intersect.  Allow for tangent circles (to
			within a distance of tol);

 @param[in]		arc1		first 2d arc to intersect
 @param[in]		arc2		second 2d arc to intersect
 @param[in]		loc_tol		maximum allowable distance between arc1 and arc2
 @param[out]		p1			first intersection
 @param[out]		p2			second intersection
 @param[out]		succf		true = p1 and p2 are valid

</member>
        <member name="M:l_offset_tol(l_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,l_2d*,System.Boolean*)">
 @par Purpose:
			Offset a 2d line
 @param[in]		line	The line to offset
 @param[in]		dist	The distance to offset line
 @param[in]		bias	A point to offset line towards
 @param[out]		line1	line offset by dist
 @param[out]		succf	true if bias does not lie on line

</member>
        <member name="M:ints_gt(gt!System.Runtime.CompilerServices.IsConst*,gt!System.Runtime.CompilerServices.IsConst*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			New version of gp_ints with the input loc_tol
			  Find the intersection of a line or arc with a line or arc.

 @param[in]		object1		2d line or arc
 @param[in]		object2		2d line or arc
 @param[in]		bias_pt		bias point
 @param[in]		loc_tol		max distance between object1 and object2
 @param[out]		near_inters intersection closest to bias_pt
 @param[out]		far_inters	intersection furthest from bias_pt
 @param[out]		succf		true = object1 and object2 intersect

</member>
        <member name="M:pt_on_arc(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d!System.Runtime.CompilerServices.IsConst*,System.Double)">
 @par Purpose:
			Determine whether a point is within loc_tol of a finite arc,
			based on a distance and angle test.

 @return pt lies on arc
 @param[in]		pt			a 2d point
 @param[out]		arc			a 2d arc
 @param[in]		loc_tol		local tolerance for closeness

</member>
        <member name="M:pt_on_gt_tol(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,gt!System.Runtime.CompilerServices.IsConst*,System.Double)">
 @par Purpose:
			Determine whether a point actually lies on an entity.

 @return true = pt lies on ent
 @param[in]		pt		 a 2d point
 @param[in]		entity	 a 2d entity

</member>
        <member name="M:arc_ep_3d(a_3d!System.Runtime.CompilerServices.IsConst*,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method computes the endpoints of a 3d arc

 @param[in]		arc			the arc to analyze
 @param[in]		mat			An nxm matrix
 @param[out]		ep1			the endpoint corresponding to sa (first endpoint)
 @param[out]		ep2			the endpoint corresponding to sa_sw (second endpoint)


</member>
        <member name="M:arc_endpoints(a_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the endpoints of a 2d arc
 @param[in]		arc			a 2d arc
 @param[out]		p1			the endpoint corresponding to sa
 @param[out]		p2			the endpoint corresponding to sa + sw

</member>
        <member name="M:t_on_line_tol(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*,System.Double)">
 @par Purpose:
			Find the t parameter on a 2d line given a point
 @param[out]		t		The parameter corresponding to the projected point
 @param[in]		pt		The point to "project"
 @param[in]		line	The line to "project" onto

</member>
        <member name="M:la_ints_new(l_2d!System.Runtime.CompilerServices.IsConst*,a_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			New version of la_ints.
			Finds the intersections of a line and an arc

 @param[in]		line		a 2d line to intersect
 @param[in]		arc			a 2d arc to intersect
 @param[in]		loc_tol		maximum allowable distance between line and arc
 @param[out]		p1			first intersection
 @param[out]		p2			second intersection
 @param[out]		succf		true = p1 and p2 are valid

</member>
        <member name="M:l_ints_tol(l_2d!System.Runtime.CompilerServices.IsConst*,l_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Double*,System.Boolean*)">
 @par Purpose:
			Intersect two 2d lines
 @param[in]		l1		The first line
 @param[in]		l2		The second line
 @param[out]		inters	The intersection point
 @param[out]		t1		parameter value
 @param[out]		t2		parameter value
 @param[out]		succf	Success/Fail

</member>
        <member name="M:InchToMm(System.Double)">
            <summary> Convert value from Inch to Millimeters. </summary>
            <param name="inch"> The value in inches. </param>
            <returns> The value in millimeters. </returns>
        </member>
        <member name="M:MmToInch(System.Double)">
            <summary> Convert value from Millimeters to Inch. </summary>
            <param name="mm"> The value in millimeters. </param>
            <returns> The value in inches. </returns>
        </member>
        <member name="M:IsMetric">
            <summary> Checks if the working measurement system is metric. </summary>
            <returns> True if the system is metric; false if it is not. </returns>
        </member>
        <member name="M:IsNotMetric">
            <summary> Checks if the working measurement system is NOT metric. </summary>
            <returns> True if the system is not metric; false if it is. </returns>
        </member>
        <member name="M:IsEnglish">
            <summary> Checks if the working measurement system is english. </summary>
            <returns> True if the system is english; false if it is not. </returns>
        </member>
        <member name="M:IsNotEnglish">
            <summary> Checks if the working measurement system is NOT english. </summary>
            <returns> True if the system is not english; false if it is. </returns>
        </member>
        <member name="M:TpOpMgr.PopListStacks">
 @par Purpose:
		This virtual method override pops list objects off of the list stacks.

 @return		Returns true if the list objects were popped off the stacks correctly and false if not.

</member>
        <member name="M:TpOpMgr.PushListStacks">
 @par Purpose:
		This virtual method override pushes new list objects onto the list stacks.

 @return		Returns true if new list objects were pushed onto the stacks correctly and false if not.

</member>
        <member name="M:TpOpMgr.Dispose">
 @par Purpose:
		This is the default TpOpMgr destructor. It empties all of the list stacks upon destruction.

</member>
        <member name="M:TpOpMgr.#ctor">
 @par Purpose:
		This is the default TpOpMgr constructor. It initializes the list stacks upon creation.

</member>
        <member name="M:TpOpMgr.EmptyAllListStacks">
 @par Purpose:
		This virtual method empties all of the list stacks. This method is marked as private because
	the list stacks should only be emptied when the manager gets destructed.

 @return	A boolean value indicating whether the emptying of the lists stacks was successful or not.

</member>
        <member name="F:TpOpMgr.m_MainOpListStack">
This is the manager class's main operation list stack. This is where instances of our main operation lists get stored.
</member>
        <member name="T:TpOpMgr">
@par Purpose:
	This class's purpose is to hold and work with instances of the op manager operation list classes for the life
of a given Mastercam app execution. It also houses the operation list stacks themselves, which we use to manage
temporary list creation situations (see base TpMgr class declaration for more details).

</member>
        <member name="M:Cnc.Tool.TpPartOpList.SuspendOpMgrUpdate">
            <summary> Suspend operation manager refresh until this is destroyed. </summary>
            <returns> An operation manager refresh object. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefresh.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefresh.#ctor(Cnc.Tool.TpPartOpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="opList"> List of operations. </param>
        </member>
        <member name="T:Cnc.Tool.TpPartOpList.OpMgrRefresh">
            <summary> An operation manager refresh object. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.Add(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the operation to the map.  Upon destruction these operations will be 
		  compared to their current state in the oplist to determine which type of
		  refresh should be applied in the OpMgr</summary>
            <param name="theOp"> the operation to add. </param>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.#ctor(Cnc.Tool.TpPartOpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="opList"> List of operations. </param>
        </member>
        <member name="T:Cnc.Tool.TpPartOpList.OpMgrRefreshMap">
            <summary> A map of operations to queue up for refresh when m_spOpMgrRefreshMap is destroyed. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.FirstOpIndexUsing3DTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	First operation index using the 3D tool specified by the given identifier. </summary>
            <param name="toolId">	  	Identifier for the tool. </param>
            <param name="excludeOpId">	(Optional) Identifier for an operation to exclude. </param>
            <returns>	An INT_PTR to the first operation using the 3D tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.FirstOpUsing3DTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	First operation using the 3D tool specified by the given identifier. </summary>
            <param name="toolId">	  	Identifier for the tool. </param>
            <param name="excludeOpId">	(Optional) Identifier for an operation to exclude. </param>
            <returns>	Null if it fails, else a pointer to the first operation using the 3D tool. </returns>
        </member>
        <member name="M:TpOpList.SortBySlotNumber">
            <summary> Sort ascending by operation.slot number. </summary>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpMgr.CheckForMachineGroup(TpGrpList*)">
 @par Purpose:
		This method checks a group list for a machine group. If none is found, one is created. If bad group
	pointers are found, they are fixed and reset to valid groups.

 @param[in]	g			The group list object to validate a machine group in.

</member>
        <member name="M:TpGrpMgr.SetGroupViews(op_group*,System.Boolean,CoordinateDisplayType)">
 @par Purpose:
		This method sets the current views based on the saved view information stored in a group structure.

 @param[in]	Group		The group data that should be used to reset the current view information.
 @param[in]	setActivePlanes	true = set the active planes (Cplane, Tplane, WCS) as well
 @param[in]	coordinateDisplay	MILL_COORD, LATHE_COORD_X, LATHE_COORD_D or -1 to extract from given machine group.

</member>
        <member name="M:TpGrpMgr.PopListStacks">
 @par Purpose:
		This virtual method override pops list objects off of the list stacks.

 @return		Returns true if the list objects were popped off the stacks correctly and false if not.

</member>
        <member name="M:TpGrpMgr.PushListStacks">
 @par Purpose:
		This virtual method override pushes new list objects onto the list stacks.

 @return		Returns true if new list objects were pushed onto the stacks correctly and false if not.

</member>
        <member name="M:TpGrpMgr.Dispose">
 @par Purpose:
		This is the default TpGrpMgr destructor. It empties all of the list stacks upon destruction.

</member>
        <member name="M:TpGrpMgr.#ctor">
 @par Purpose:
		This is the default TpGrpMgr constructor. It initializes the list stacks upon creation.

</member>
        <member name="M:TpGrpMgr.EmptyAllListStacks">
 @par Purpose:
		This virtual method empties all of the list stacks. This method is marked as private because
	the list stacks should only be emptied when the manager gets destructed.

 @return	A boolean value indicating whether the emptying of the lists stacks was successful or not.

</member>
        <member name="F:TpGrpMgr.m_ReadGrpListStack">
This is the manager class's file read group list stack. This is where instances of our file read group lists get stored.
</member>
        <member name="F:TpGrpMgr.m_MainGrpListStack">
This is the manager class's main group list stack. This is where instances of our main group lists get stored.
</member>
        <member name="T:TpGrpMgr">
@par Purpose:
	This class's purpose is to hold and work with instances of the op manager group list classes for the life
of a given Mastercam app execution. It also houses the group list stacks themselves, which we use to manage
temporary list creation situations (see base TpMgr class declaration for more details). Finally, it holds
some utility functions for managing global group related states and for searching lists for machine groups.

</member>
        <member name="M:TpGrpList.LegacyReplaceChar(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
            <summary>	Replace characters in a legacy (MBCS) group name. </summary>
            <param name="pName">  	The MBCS group name. </param>
            <param name="oldChar">	The character to replace. </param>
            <param name="newChar">	The replacement character. </param>
        </member>
        <member name="M:TpGrpList.ConvertStruct(System.Void*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt64,System.UInt64,System.UInt64)">
            <summary>	Convert a structure with an embedded string. </summary>
            <param name="lpDest">	   	Pointer to the destination structure. </param>
            <param name="lpSrc">	   	Pointer to the source structure. </param>
            <param name="stringOffset">	The offset of the string to convert to Unicode. </param>
            <param name="stringSize">  	Size of the string to convert. </param>
            <param name="structSize">  	Size of the structures. </param>
        </member>
        <member name="M:TpGrpList.LegacyRetrieveFileGroups(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,TpGrpList*)">
            <summary> The old way of reading file groups. </summary>
            <remarks> Keeping this around for a release.  It should be removed for Mastercam 2021. </remarks>
            <param name="File">			    The part file file. </param>
            <param name="CurrentGroupList"> If the current group list. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.GetChildHierarchy(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the child group hierarchy. </summary>
            <param name="groupID"> Identifier for the parent group. </param>
            <returns> The child hierarchy. </returns>
        </member>
        <member name="M:TpGrpList.GetParentHierarchy(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the parent group hierarchy. </summary>
            <param name="groupID"> Identifier for the group. </param>
            <returns> The parent hierarchy. </returns>
        </member>
        <member name="M:TpGrpList.SortByType">
            <summary> Sort by type placing toolpath groups first. </summary>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.SortBySlotNumber">
            <summary> Sort ascending by slot op_group.slot. </summary>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.GetProductMask">
            <summary> Return mask set to which products machine groups contains (AEB_MILL, AEB_LATHE, AEB_MT, etc. </summary>
            <returns> The product mask. </returns>
        </member>
        <member name="M:TpGrpList.BuildReservedPlanes(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds the reserved planes based on all machine group's coordinate display mode. </summary>
            <param name="refPlanes"> The reference planes. </param>
        </member>
        <member name="M:TpGrpList.DeleteAll(System.Boolean,System.Boolean)">
            <summary> Deletes all. </summary>
            <param name="DeleteAllMachines"> (Optional) true to delete all the machines. </param>
            <param name="forceDelete">		 (Optional) true to force delete deletion from the database. </param>
            <returns> A ListReturnCode. </returns>
        </member>
        <member name="M:TpMatMgr.PopListStacks">
 @par Purpose:
		This virtual method override pops list objects off of the list stacks.

 @return		Returns true if the list objects were popped off the stacks correctly and false if not.

</member>
        <member name="M:TpMatMgr.PushListStacks">
 @par Purpose:
		This virtual method override pushes new list objects onto the list stacks.

 @return		Returns true if new list objects were pushed onto the stacks correctly and false if not.

</member>
        <member name="M:TpMatMgr.Dispose">
 @par Purpose:
		This is the default TpMatMgr destructor. It empties all of the list stacks upon destruction.

</member>
        <member name="M:TpMatMgr.#ctor">
 @par Purpose:
		This is the default TpMatMgr constructor. It initializes the list stacks upon creation.

</member>
        <member name="M:TpMatMgr.EmptyAllListStacks">
 @par Purpose:
		This virtual method empties all of the list stacks. This method is marked as private because
	the list stacks should only be emptied when the manager gets destructed.

 @return	A boolean value indicating whether the emptying of the lists stacks was successful or not.

</member>
        <member name="F:TpMatMgr.m_MatListStack">
This is the manager class's main material list stack. This is where instances of our main material lists get stored.
</member>
        <member name="T:TpMatMgr">
@par Purpose:
	This class's purpose is to hold and work with instances of the op manager material list classes for the life
of a given Mastercam app execution. It also houses the material list stacks themselves, which we use to manage
temporary list creation situations (see base TpMgr class declaration for more details).

</member>
        <member name="T:ListReturnCode">
List Return Code types
</member>
        <member name="M:TpMgr.PopListStacks">
 @par Purpose:
		This virtual method needs to be overridden in order to pop list objects off of the list stacks.
	This needs to be handled in the derived classes because the base classes have no idea which list
	stacks exist in the derived classes.

 @return		Should return true if the list objects were popped off the stacks correctly and false if not.

</member>
        <member name="M:TpMgr.PushListStacks">
 @par Purpose:
		This virtual method needs to be overridden in order to push new list objects onto the list stacks.
	This needs to be handled in the derived classes because the base classes have no idea which list
	stacks exist in the derived classes.

 @return		Should return true if new list objects were pushed onto the stacks correctly and false if not.

</member>
        <member name="M:TpMgr.GetStackDepth">
 @par Purpose:
		This method returns the number of lists in each list stack.

 @return	The return value is the number of lists in the each list stack.

</member>
        <member name="M:TpMgr.#ctor">
 @par Purpose:
		This is the basic TpMgr constructor. Note that the stack depth initializes to zero.

</member>
        <member name="M:TpMgr.EmptyAllListStacks">
 @par Purpose:
		This virtual method needs to be overridden in order to empty out all of the list stacks. Since
	only the derived classes actually know which lists exist in their class, that cleanup has to be
	done on their end.

 @return		Should return true if the list stacks were emptied correctly and false if not.

</member>
        <member name="F:TpMgr.m_StackDepth">
This is a running tally of how many lists are on the stacks at any given time.
</member>
        <member name="T:TpMgr">
@par Purpose:
	This class's purpose is to set up an interface for the managing of Mastercam's internal Op Manager lists.
The list objects are managed in stacks, which gives Mastercam some flexibility when it has to create new 'main'
lists for temporary purposes (temporary databases, file I/O, etc.). In those situations, the list stacks allow
us to push new, temporary list objects onto the stacks for use during the duration of the temporary situation.
Once no longer needed, we can then pop those temporary lists off the stacks and still be left with our original
lists still completely intact. This architecture removes the need to swap memory in and out for temporary lists
and still easily accomodates nested temporary list creation situations.

</member>
        <member name="M:init_tp_ent(ent!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,TP_ENT_TYPE,System.Byte,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,operation!System.Runtime.CompilerServices.IsConst*,ent*)">
 @par Purpose:
			initialize the toolpath entity ptr

 @param[in]		e			 selected entity to point to
 @param[in]		ent_id		 toolpath entity type (P_ID, L_ID, etc)
 @param[in]		tp_id		 toolpath point type (points only) GRID, BOLT, etc
 @param[in]		entry_method point entry method used
 @param[in]		pt			 point value selected (if tp_id == P_ID)
 @param[in]		tval		 point t value used
 @param[in]		op			 current operation
 @param[out]		tp			 ptr to toolpath ent to initialize

</member>
        <member name="M:replace_HST_holder(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Double*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			replace holder, if any, in HST operation with given one.  Note-holder_data, holder_name,
			and holder_library_name should be allocated memory input to this function and
          the memory will be deleted by this function (as it is move into the operation entity)

 @param[in]			op_idn				the operation to be modified
 @param[in]			num_segs			the number of holder segments in the new holder
 @param[in, out]		holder_data			the holder segments (triplets:  Upper dia, Lower dia, Height)
 @param[in, out]		holder_name			the holder name
 @param[in, out]		holder_library_name	the holder library name


</member>
        <member name="M:remove_HST_holder(System.Int32!System.Runtime.CompilerServices.IsLong)">

 @par Purpose:
			remove holder, if any, from HST operation

 @param[in]		op_idn		the operation to be modified


</member>
        <member name="M:add_stl_file_to_operation(operation*,System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			add an stl file to an operation

 @param[in]		op			the operation to be added to
 @param[in]		pathstl		the path of the stl file to add


</member>
        <member name="M:set_gview(System.Int16)">

 @par Purpose:
			set the graphics view to a numbered view

 @param[in]		n			numbered view to set the graphics view to


</member>
        <member name="M:point_manager(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Boolean,System.Boolean*)">
@defgroup pt_mgr_def Point Manager modes
 * @{
@}

 @par Purpose:
			function to gather drill points for an existing operation -
			toolpath point entities are added to db

 @param[in]		op_idn			existing operation id number
 @param[in]		mode			PTMGR_MENU, PTMGR_ADD, PTMGR_DELETE, etc
 @param[in]		stay_in_menu	true = stay in point manager menu for more selections
 @param[out]		succf			drill point operations successful


</member>
        <member name="M:library_manager(ASSOC_ENT_TYPE,System.Char*,System.UInt64,System.Void*,System.Void*,System.Int16,System.Int64*,System.Boolean*)">
@defgroup lib_mgr_def Library Manager Modes
 * @{
@}

 @par Purpose:
			function to add/get/delete/edit the operation, tools and material libraries

 @param[in]		lib_type		library type (OP_ID, TL_ID or M_ID)
 @param[in]		lib_name		library name or "" (null string) for default library
 @param[in]		lib_name_sz		length of the allocation for lib_name
 @param[in,out]	lib_entity		library entity (ptr to operation, tp_tool or material structure)
 @param[in]		lib_id			OP_ID=op_idn, TL_ID=slot number, M_ID=material name
 @param[in]		mode			LIBMGR_ADD, LIBMGR_GET, LIBMGR_DELETE, LIBMGR_REWRITE and LIBMGR_EDIT
 @param[out]		fpos			file position of entity in the library, -1 if not applicable per mode
 @param[out]		succf			library manager successful


</member>
        <member name="M:chain_manager(chain_manager_info*,System.Int16,System.Boolean*)">

 @par Purpose:
			function to gather/edit chains for an existing operation -
			chain boundary entities are added/delete/edited to db

 @param[in]		cmi			chain manager instructions
 @param[in]		chntype		type of chains to use - 0 = all
 @param[out]		succf		chain boundary operations successful


</member>
        <member name="T:chain_manager_info">
*@defgroup chn_mgr_def Chain Manager Modes
 * @{
@}
Chain Manager Info
</member>
        <member name="M:operation_manager(operation*,System.Int16,DB_LIST_ENT**,System.Boolean*)">
@defgroup op_mgr_defs Operation Manager Modes
 * @{
@}

 @par Purpose:
			function to add/get/delete/edit/regen operations in the current db

 @param[in,out]	op			pointer to operation - make sure op-&gt;op_idn is set for read access
 @param[in]		mode		OPMGR_ADD, OPMGR_EDIT, etc
 @param[out]		eptr		db pointer to operation entity
 @param[out]		succf		operation manager successful


</member>
        <member name="M:ltool_manager(Cnc.Tool.LATHETOOL*,System.Int16,DB_LIST_ENT**,System.Boolean*)">
@defgroup tl_mgr_defs Tool Manager Modes
 * @{
@}

 @par Purpose:
			function to add/get/delete/edit lathe tools in the current db

 @param[in,out]	tl			pointer to operation - make sure tl-&gt;op.slot is set for read access
 @param[in]		mode		TLMGR_ADD, TLMGR_EDIT, etc
 @param[out]		eptr		db pointer to tool entity
 @param[out]		succf		tool manager successful

</member>
        <member name="M:material_manager(material*,System.Int16,DB_LIST_ENT**,System.Boolean*)">
@defgroup mtl_mgr_defines Material Manager Modes
 * @{
@}

 @par Purpose:
			function to add/get/delete/edit materials in the current db

 @param[in,out]		matl			pointer to material - make sure matl-&gt;name is set for read access
 @param[in]			mode			MTLMGR_ADD, MTLMGR_EDIT, etc
 @param[out]			eptr			db pointer to material entity
 @param[out]			succf			tool manager successful


</member>
        <member name="M:nci_manager(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,nci_bin*,System.Int64*,System.Boolean*)">
@defgroup bin_nci_funcs binary nci functions
 * @{
@}

 @par Purpose:
			binary nci functions

 @param[in]		op_idn			existing operation id
 @param[in]		mode			NCIMGR_RD, NCIMGR_WR, etc.
 @param[in,out]	n				pointer to nci line structure
 @param[out]		fpos			current file position in binary nci file
 @param[out]		succf			true = nci manager successful


</member>
        <member name="M:list_manager(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16,System.Void**)">

 @par Purpose:
			retrieve or free COPIES of linked lists of operations, tools or
 material lists from libraries or the current database

 @param[in]		lib_type			listitem type (LTL_ID)
 @param[in]		lib_name			library name or "" (null string) for current database
 @param[in]		mode				LSTMGR_GET or LSTMGR_FREE
 @param[in,out]	list_ptr			pointer to alloc'd linked list of items


</member>
        <member name="M:validate_toolpath(System.Boolean*)">
@par Purpose:
 *			read thru all toolpath entities, check to make sure the referenced
 *			geometry still exists, mark operations for regeneration, update named views
 *
 * @param[out]		succf	true if toolpath was validated successfully; false if not
 *

</member>
        <member name="M:delete_ent_assoc(ent*,System.Boolean*,System.Boolean,System.Boolean)">
 @par Purpose:
			deletes any type of toolpath entity and keeps things kosher
 @param[in]		e		toolpath entity to delete
 @param[in]		succf	true = delete went ok
 @param[in]		markDependentOps	true/false
 @param[in]		purge	true/false

</member>
        <member name="M:tp_del_all(System.Int32!System.Runtime.CompilerServices.IsLong)">
 @par Purpose:
			deletes all the toolpath ents in an operation
 @param[in]		opIdn	 operation id to kill all it's entities

</member>
        <member name="M:alloc_nc_size(System.Int32!System.Runtime.CompilerServices.IsLong*)">
 @par Purpose:
			returns the buffering (aka memory blocking) size
 @param[in]	   n_bytes_desired	 bytes to allocate

</member>
        <member name="M:alloc_nc_none">
 @par Purpose:
			Wrapper for discard_all

</member>
        <member name="M:alloc_nc_all(System.Int32!System.Runtime.CompilerServices.IsLong*,System.Void**)">
 @par Purpose:
			Get all possible toolpath allocation for NC functions such
			as surface machining
 @param[out]		num_bytes	number of bytes allocated
 @param[out]		ptr   pointer to toolpath allocation memory

</member>
        <member name="M:alloc_nc(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Boolean*)">
 @par Purpose:
			returns the buffering (aka memory blocking) size

</member>
        <member name="M:mid_t_on_ent(ent*)">
 @par Purpose:
			return middle t value on entity

 @return			middle t value on given entity

 @param[in]		entity	given entity

</member>
        <member name="M:max_t_on_ent(ent*)">
 @par Purpose:
			return maximum t value on entity

 @return			maximum t value on given entity

 @param[in]		entity	given entity

</member>
        <member name="M:min_t_on_ent(ent*)">
 @par Purpose:
			return minimum t value on entity

 @return			minimum t value on given entity

 @param[in]		entity	given entity

</member>
        <member name="M:pt_equal_2d(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			decide if two 2d points are equal

 @return			true = points are equal

 @param[in]		p1		first point
 @param[in]		p2		second point

</member>
        <member name="M:pt_equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			decide if two 3d points are equal

 @return			true = points are equal

 @param[in]		p1		first point
 @param[in]		p2		second point

</member>
        <member name="M:bbox_overlap_2d(p_2d*,p_2d*,System.Double)">
 @par Purpose:
			test two 2d bounding boxes (probably part of a pock_chn record)
			overlap

 @return			true = bounding boxes overlap

 @param[in]		b0	   2d bounding box
 @param[in]		b1	   2d bounding box
 @param[in]		ovlp   overlap distance

</member>
        <member name="M:bbox_gt(gt*,p_2d*)">
 @par Purpose:
			Find the minimum and maximum x and y values on a 2d line or arc

 @param[out]		bbox   bounding box
 @param[in]		e	   2d entity

</member>
        <member name="M:nci_to_ent(NCI_GCODE,System.Int16,System.Int16,System.Double*,System.Double,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*,System.Int16*,System.Double*,System.Boolean*,System.Boolean*,System.Boolean*)">
 @par Purpose:
			Convert a list of numbers read from an NCI file into a 3d line
		   or 3d arc

 @param[in]		g		 0 = rapid, 1 = linear, 2 = arc cw, 3 = arc ccw
 @param[in]		tl_vw_n  Tool view
 @param[in]		n_reals  Number of entries in reals
 @param[in]		prev_pt  Previous point read from the NCI file
 @param[out]		cc		 Cutter compensation in control
 @param[out]		feedrate Feedrate
 @param[out]		reversed True if entity is a CW arc
 @param			reals
 @param[in]		loc_tol
 @param			entity
 @param[out]		prev_pt_valid
 @param[out]		succf

</member>
        <member name="M:intersect_ents(ent*,System.Double!System.Runtime.CompilerServices.IsConst*,System.Double*,System.Double*,System.Boolean*,System.Boolean*)">
 @par Purpose:
			Intersect two 3d lines, arcs, or spline.
			If 2d construction used, project both lines to the construction
			plane and find the the t parameters of the 2d intersection.  If
			3d construction used, check that the entities actually intersect
			in 3d space.

 @param[in]		entities	Two entities (lines, arc or splines)
 @param[in]		sel_t		t parameters used to select entities
 @param[out]		t2
 @param[out]		t			t parameters of intersection on entities
 @param[out]		succf		true if entities intersect
 @param[out]		t2_succf

</member>
        <member name="M:proj_pt_on_ent(ent!System.Runtime.CompilerServices.IsConst*,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Double,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Boolean*,System.Boolean)">
 @par Purpose:
			Project a 3d point onto an entity (useful for breaking splines
		   into two pieces )

 @param[in]		entity	  The selected entity (line, arc or spline)
 @param[in]		break_pt  Point to project onto entity
 @param[in]		view	  0 = use 3d projection, &gt;0 = use 2d projection
 @param[in]		t_sel	  Value of t at which entity was selected
 @param[out]		proj_pt   The projection of break_pt onto entity
 @param[out]		t		  The value of t corresponding to proj_pt
 @param[out]		succf	  True if break point found
 @param[in]		limit_osc True to use a new meathod which limits oscillations (false by default)

</member>
        <member name="M:t_from_pt_2d(System.Double*,ent!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Boolean)">
 @par Purpose:
			Find the t parameter given a 2d point

 @note	The value of t is only approximate for arcs and splines

 @param[out]		t			Resulting t value
 @param[in]		entity		ent we're finding the t for
 @param[in]		old_t		The old t value
 @param[in]		pt			2D point we're testing for
 @param[in]		view		view number of the view to project the entity onto
 @param[in]		bSearchCrv	Flag for global search (set to true if input guess parameter is unknown) (default = false)

</member>
        <member name="M:tan_on_ent_from_t(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,ent!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 @par Purpose:
			Find the tangent of a line, arc or spline given the t parameter

 @param[out]		tan_v	The tangent
 @param[in]		t		parameter value
 @param[in,out]	entity	a 3d entity
 @param[in]		bGlobalDerivs	flag for global deriv magnitude - default = false

</member>
        <member name="M:pt_on_ent_from_t(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,ent!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Find a point on a line, arc or spline given the t parameter

 @param[out]		pt		 A point on entity
 @param[in]		t		 parameter value (0:1)
 @param[in]		entity	 3d entity

</member>
        <member name="M:eval_gt_tan(gt*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find a point on a 2d line or arc given the t parameter

 @param[in]		e	  2d line or arc
 @param[in]		t	  parameter value
 @param[out]		t_v   tangent vector, unit length

</member>
        <member name="M:eval_gt_pt(gt*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Find a point on a 2d line or arc given the t parameter
 @param[in]		e	2d line or arc
 @param[in]		t	parameter value
 @param[out]		pt	A point on the line or arc

</member>
        <member name="M:dist_p_line_3d(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_3d*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 @par Purpose:
			Find the nearest point on a line from a point.  Returns the distance to that point.
 @param[in]		point	point to check distance from
 @param[in]		line	a 3d line
 @param[out]		nearPt	the nearest point
 @param[in]		infline	true for infinite line

</member>
        <member name="M:dist_pt_l_3d(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_3d!System.Runtime.CompilerServices.IsConst*,System.Double*)">

 @par Purpose:
			Find the distance from a point to a 3d line
 @param[in]		pt		a 3d point
 @param[in]		line	a 3d line
 @param[out]		dist	distance from pt to line

</member>
        <member name="M:arc_2d_to_3d(a_3d*,System.Int16,System.Double,a_2d*)">
 @par Purpose:
			Convert a 2d arc (a) to a 3d arc (a_3d)

 @param[out]		arc		The 3d arc
 @param[in]		view	Arc view
 @param[in]		depth	Depth of arc center point relative to view
 @param[in]		a2		The 2d arc

</member>
        <member name="M:line_2d_to_3d(l_3d*,System.Int16,System.Double,l_2d*)">
 @par Purpose:
			Convert a 2d line to a 3d line (l_3d)

 @param[out]		line	The 3d line
 @param[in]		view	Arc view
 @param[in]		depth	Depth of arc center point relative to view
 @param[in]		l2		The 2d line

</member>
        <member name="M:ent_to_gt(gt*,System.Int16,ent!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Convert a 3d entity to a 2d entity

 @param[out]		ent_gt	The 2d entity
 @param[in]		view	The view to project entity into
 @param[in]		entity	The 3d entity

</member>
        <member name="M:find_view_from_ent(ent!System.Runtime.CompilerServices.IsConst*,System.Int16*,System.Double*,System.Boolean*,System.Boolean)">
 @par Purpose:
			Find a view given a line or arc.

 @param[in]		entity	Line or arc
 @param[out]		view	An existing view number
 @param[out]		depth	A depth relative to view
 @param[out]		succf	True if view is valid.	False if no existing
							view was found, or if arcs were found in more
							than one view
 @param[in]		favor_cplane   If true and entity is a line, retrun CPlane if possible - default = false

</member>
        <member name="M:make_view_k(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Make a view matrix given its k component

 @param[in]		k_c		k component to use
 @param[out]		view	resuling view matrix
 @param[out]		succf	true if view matrix was created successfully; false if not


</member>
        <member name="M:view_to_world_pt(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Map view coordinates to world coordinates

 @param[in]		pt		point in view coords/point in world coords
 @param[in]		view	A view number

</member>
        <member name="M:view_to_world_pt(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16)">
 @par Purpose:
			Map view coordinates to world coordinates

 @param[in]		pt		point in view coords/point in world coords
 @param[in]		view	A view number

</member>
        <member name="M:view_to_view(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Int16,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Map coordinates from one view to another

 @param[in]		pt_in	A 3d point in view coordinates
 @param[in]		from_view_n   A view number
 @param[in]		to_view_n	A different view number
 @param[out]		pt_out	 A 3d point in the new view coordinates

</member>
        <member name="M:world_to_2d(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Map world coordinates to a 2d point relative to a give view.

 @param[in]		pt_world   A 3d point in world coordinates
 @param[in]		view   A view matrix
 @param[out]		pt_view   A 2d point in view coordinates

</member>
        <member name="M:world_to_2d(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Map world coordinates to a 2d point relative to a give view.

 @param[in]		pt_world   A 3d point in world coordinates
 @param[in]		view   A view number
 @param[out]		pt_view   A 2d point in view coordinates

</member>
        <member name="M:proj_iso_pt(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Project a 3d point (world coordinates) onto the isometric axes
			(graphics view coordinates)
			Global inputs: x_iso_axis, y_iso_axis

 @param[in]		pt		a 3d point
 @param[out]		proj_pt a 2d point expressed in user units

</member>
        <member name="M:length_ent(ent!System.Runtime.CompilerServices.IsConst*,System.Double*)">
 @par Purpose:
		Finds the length of a point, line, arc or spline.

 @param[in]		entity	the entity to measure
 @param[out]		length	the length of entity

</member>
        <member name="T:WIRE_MISC_DATA">
Wire Miscellaneous Data Structure
</member>
        <member name="T:thread_pt_rec">
@defgroup thread_point_cut_types  thread point cut types 
@{ 
@} 
Thread Point Record Structure
</member>
        <member name="F:nc_file_open">
@} 
</member>
        <member name="F:comp_to_tip">
@defgroup gen_nc_params General NC Parameters  
@{ 
</member>
        <member name="F:chain_tol">
@} 
</member>
        <member name="F:display_tool">
@} 
@defgroup  ncvars_display_parameters NC Global Display Parameters 
@{ 
</member>
        <member name="F:rot_axis_diam">
@} 
@defgroup  rot_group Rotary Axis Globals 
@{ 
</member>
        <member name="F:entry_ents_enabled">
@defgroup contour_ncvars Contour Globals 
@{ 
</member>
        <member name="T:WIRE_AUX_REG_DATA">
Wire Auxiliary Register Data Structure
</member>
        <member name="T:WIRE_AUX_REG_PASS">
Wire Auxiliary Register Pass Structure
</member>
        <member name="T:p_marker_type">
Place marker type
</member>
        <member name="T:cc_rec">
Cutter Comp Record Structure
</member>
        <member name="T:ctour_rec">
@defgroup drill_types Drill Types 
@{ 
@} 
@defgroup	Contour_Flags Contour flags
 *	@note		reserved across all products 
@{ 
@defgroup	CFlag_Misc Misc Contour Flags
/** @{ 
@} 
@defgroup	CC_ON_OFF CC On/Off flags
/** @{ 
@} 
@defgroup C_Wire_Specific_Flags Wire specific contour flags 
@{ 
@} 
@defgroup C_Tank_Flags Tank contour flags 
@{ 
@} 
@defgroup C_Lathe_Flags Lathe contour flags 
@{ 
@} 
@} 
@defgroup Nested_Code_Case Nested Code Case (for subprograms)
@{ 
@} 
@defgroup  toolno_flags Tool Number Flags 
@{ 
@} 
@defgroup post_modes Post Modes 
@{ 
@defgroup post_return_modes Post Return Modes 
@{ 
@} 
@defgroup wire_aux_reg_data Wire auxiliary register data 
@{ 
@} 
@defgroup wire_aux_reg_flags Wire auxillary register flags	
@{ 
@} 
Contour Record Structure
</member>
        <member name="M:SysFile.BytesInString(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Count how many bytes in a wide string. </summary>
            <remarks> If the file was opened in TEXT mode,
		  all new-lines (\n) will be counted as 4 bytes,
		  since they will be written to the disk as wide-character \r\n. </remarks>
            <param name="pString"> The wide string to inspect. </param>
            <returns> The number of bytes in the string. </returns>
        </member>
        <member name="M:SysFile.BytesInString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary> Count how many bytes in a narrow UTF-8 or MBCS string. </summary>
            <remarks> If the file was opened in TEXT mode,
		  all new-lines (\n) will be counted as 2 bytes,
		  since they will be written to the disk as \r\n. </remarks>
            <param name="pString"> The narrow string to inspect. </param>
            <returns> The number of bytes in the string. </returns>
        </member>
        <member name="M:SysFile.DoOpen(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Helper function for overloaded Open functions that actually does the open. </summary>
            <param name="fileName">	Fully qualified file name to open. </param>
            <param name="mode">	Type of access permitted. </param>
            <param name="shFlag">	Type of sharing allowed. </param>
            <remarks> Refer to help for _tfsopen for possible values for mode and shFlag.  shFlag is optional
		  and defaults to _SH_DENYNO. </remarks>
            <returns> Returns true if the file opened successfully or if the same file name is already open.
		  Returns false if a different file is currently open or if the open fails. </returns>
        </member>
        <member name="M:SysFile.VerifyFileOpen">
            <summary> Verifies that the file is really open. </summary>
        </member>
        <member name="M:SysFile.Initialize(System.Boolean)">
            <summary> Initializes member variables to default values. </summary>
            <remarks> A constructor must pass true for "constructor" to prevent the virtual function
		  "CurrentVersion" from being called (to get the major and minor version numbers).  When
		  "constructor" is true, both m_VersionMajor and m_VersionMinor are set to zero. </remarks>
            <param name="constructor"> Optional flag to indicate we are called from a constructor. </param>
        </member>
        <member name="M:SysFile.InternalFilePosition.UpdateFileSize">
            <summary> Update the file size based upon the current position. </summary>
        </member>
        <member name="M:SysFile.InternalFilePosition.GetFileSize">
            <summary> Returns the current file size. </summary>
            <returns> The current file size. </returns>
        </member>
        <member name="M:SysFile.InternalFilePosition.GetFilePosition">
            <summary> Returns the current file position. </summary>
            <returns> The current file position. </returns>
        </member>
        <member name="M:SysFile.InternalFilePosition.UpdateFilePosition(System.Int64,System.Int32)">
            <summary> Update the current file position. </summary>
            <param name="position"> The new position (absolute or relative, based upon origin). </param>
            <param name="origin">   The origin (SEEK_SET or SEEK_CUR). </param>
        </member>
        <member name="M:SysFile.InternalFilePosition.SetFileSize(System.Int64)">
            <summary> Set the file size to the given value. </summary>
            <param name="newSize"> the new size of the file. </param>
        </member>
        <member name="M:SysFile.InternalFilePosition.SetFileSize(_iobuf*)">
            <summary> Set the file size based upon the file contents. </summary>
            <param name="pFhandle"> Handle to the open file to check. </param>
        </member>
        <member name="M:SysFile.InternalFilePosition.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:SysFile.InternalFilePosition.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:SysFile.InternalFilePosition">
            <summary> Class to hold the current file size and file position. </summary>
        </member>
        <member name="M:SysFile.MakeSaveRestoreFilePosition(System.Int64)">
            <summary> Create and return a unique ptr to a SaveRestoreFilePosition class. </summary>
            <param name="setPos"> (Optional) The file position to set this to. </param>
            <returns> A std::unique_ptr to a SaveRestoreFilePosition class. </returns>
        </member>
        <member name="M:SysFile.SaveRestoreFilePosition.GetFposSuccess">
            <summary> Gets value of m_SetFposSuccess. </summary>
            <returns> value of m_SetFposSuccess. </returns>
        </member>
        <member name="M:SysFile.SaveRestoreFilePosition.SetFposSuccess(System.Boolean)">
            <summary> Sets value of m_SetFposSuccess. </summary>
            <param name="ok"> true if SEEK_SET was successful if called to set the file position, false if it failed. </param>
            <returns> Previous value of m_SetFposSuccess. </returns>
        </member>
        <member name="M:SysFile.SaveRestoreFilePosition.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:SysFile.SaveRestoreFilePosition.#ctor(SysFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="sysFile"> The system file (this!) </param>
        </member>
        <member name="T:SysFile.SaveRestoreFilePosition">
            <summary> Class to save the current file position and restore upon destruction. </summary>
        </member>
        <member name="M:SysFile.GetEncoding">
            <summary> Returns the encoding for the current file. </summary>
            <returns> The mode. </returns>
        </member>
        <member name="T:SysFile.Encoding">
            <summary> Specifies what type of file we are reading/writing. </summary>
        </member>
        <member name="M:SysFile.GetFullName">
            <summary> Gets the fully qualified name of the currently open file. </summary>
            <remarks> If file is not open, a empty string will be returned. </remarks>
        </member>
        <member name="M:SysFile.IsEOF">
            <summary> Returns true if the file pointer is currently at end of file. </summary>
        </member>
        <member name="M:SysFile.IsOpen">
            <summary> Returns true if the file is currently open. </summary>
        </member>
        <member name="M:SysFile.Flush">
            <summary> Flushes any Stream I/O buffers associated with the file. </summary>
            <returns> Returns 0 if the buffer was successfully flushed.
		  The value 0 is also returned in cases in which the file is open for reading only.
		  A return value of EOF indicates an error. </returns>
        </member>
        <member name="M:SysFile.Rewind">
            <summary> Sets the value of the file pointer to the beginning of the file </summary>
            <remarks> For Educational files, the position will actually be set to the first position
		  after the encrypted header. </remarks>
            <returns> True if successful, false if file not open. </returns>
        </member>
        <member name="M:SysFile.GetLength64">
            <summary> Obtains the current logical length of the file in bytes </summary>
            <remarks> This function should be used for files greater than 2GB in length. </remarks>
            <returns> The length of the file </returns>
        </member>
        <member name="M:SysFile.GetLength">
            <summary> Obtains the current logical length of the file in bytes </summary>
            <remarks> This function is only reliable on files less than 2GB in length. </remarks>
            <returns> The length of the file </returns>
        </member>
        <member name="M:SysFile.SetLength(System.Int64)">
            <summary> Changes the length of the file. </summary>
            <param name="newLength"> Desired length of the file in bytes.  This value can be larger or
						 smaller than the current length of the file. </param>
            <remarks> The file will be extended or truncated as appropriate. </remarks>
        </member>
        <member name="M:SysFile.Truncate">
            <summary> Sets the file length to the current file pointer. </summary>
            <remarks> A flush is performed first to ensure the current file pointer is updated. </remarks>
        </member>
        <member name="M:SysFile.GetFilePosition">
            <summary> Gets the current position of the file pointer. </summary>
            <returns> If the file is not open 0 is returned, otherwise the current file position. </returns>
        </member>
        <member name="M:SysFile.GetFilePositionFromHandle">
            <summary> Gets the current position of the file pointer using an ftell() call. </summary>
            <remarks> This function should NOT be used for text files as it can give wrong results,
		  and should be used sparingly for binary files because it is slow.
		  Use GetFilePosition () instead, which caches the current file position, making it much faster. </remarks>
            <returns> If the file is not open 0 is returned, otherwise the current file position. </returns>
        </member>
        <member name="M:SysFile.GetPosition64">
            <summary> Gets the current position of the file pointer. </summary>
            <remarks> This function should be used for files greater than 2GB in length. </remarks>
            <returns> If the file is not open 0 is returned, otherwise the current file position. </returns>
        </member>
        <member name="M:SysFile.GetPosition32">
            <summary> Gets the current position of the file pointer. </summary>
            <remarks> This function is only reliable on files less than 2GB in length. </remarks>
            <returns> If the file is not open 0 is returned, otherwise the current file position. </returns>
        </member>
        <member name="M:SysFile.SetPosition(System.Int64,System.Int32)">
            <summary> Moves the file pointer to a specified location. </summary>
            <param name="offset">	Number of bytes from origin. </param>
            <param name="origin">	Initial position. </param>
            <remarks> Refer to help for fseeki64 for possible values for origin.  This function is designed to
		  handle files greater than 2GB in length, but it also works with a long parameter for files
		  less than 2GB.  For Educational files, if the seek would result in positioning to the
		  beginning of the file, the position will actually be set to the first position after the
		  encrypted header. </remarks>
            <returns> Returns 0 if successful, otherwise returns a nonzero value. </returns>
        </member>
        <member name="M:SysFile.Write(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt64!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary> Attempts to write count items of size bytes from buffer to the currently open file.
		  </summary>
            <param name="pBuffer">	Pointer to the user-supplied buffer that contains the data to be written
						to the file. </param>
            <param name="size">		Item size in bytes. </param>
            <param name="count">	Maximum number of items to be written. </param>
            <returns> The number of full items actually written, which may be less than count if an error occurs.
		  </returns>
        </member>
        <member name="M:SysFile.Write(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary> Attempts to write count bytes from buffer to the currently open file. </summary>
            <param name="pBuffer">	Pointer to the user-supplied buffer that contains the data to be written
						to the file. </param>
            <param name="count">	The maximum number of bytes to be transferred from the buffer. For text-mode
						files, carriage returnï¿½linefeed pairs are counted as single characters.
						</param>
            <returns> The number of bytes actually written. </returns>
        </member>
        <member name="M:SysFile.Read(System.Void*,System.UInt64!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary> Attempts to read count items of size bytes from the currently open file into buffer.
		  </summary>
            <param name="pBuffer">	Pointer to the user-supplied buffer that is to receive the data read from
						the file. </param>
            <param name="size">		Item size in bytes. </param>
            <param name="count">	Maximum number of items to be read. </param>
            <returns> The number of full items actually read, which may be less than count if an
		  error occurs or if the end of the file is encountered before reaching count. </returns>
        </member>
        <member name="M:SysFile.Read(System.Void*,System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary> Attempts to read count bytes from the currently open file into buffer. </summary>
            <param name="pBuffer">	Pointer to the user-supplied buffer that is to receive the data read from
						the file. </param>
            <param name="count">	The maximum number of bytes to be read from the file. For text-mode files,
						carriage returnï¿½linefeed pairs are counted as single characters. </param>
            <returns> The number of bytes actually read. The return value could be less than count
		  if an error or end of file encountered. </returns>
        </member>
        <member name="M:SysFile.Close">
            <summary> Closes the currently open file and resets member variables to default values. </summary>
            <remarks> A flush is performed before closing to ensure all buffers are written. </remarks>
            <returns> The result of a GetLastError() call.  Error codes are defined in winerror.h. </returns>
        </member>
        <member name="M:SysFile.Open(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Opens the specified fileName using the read/write mode and the shFlag (sharing) option.
		  </summary>
            <param name="fileName">	Fully qualified file name to open. </param>
            <param name="mode">		Type of access permitted. </param>
            <param name="shFlag">	Type of sharing allowed. </param>
            <remarks> Refer to help for _tfsopen for possible values for mode and shFlag.  shFlag is optional
		  and defaults to _SH_DENYNO. </remarks>
            <returns> Returns true if the file opened successfully or if the same file name is already open.
		  Returns false if a different file is currently open or if the open fails. </returns>
        </member>
        <member name="M:SysFile.Open(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Opens the specified fileName in filePath using the read/write mode and the shFlag
		  (sharing) option. </summary>
            <param name="filePath">	Path where fileName is located. </param>
            <param name="fileName">	File name to open in filePath. </param>
            <param name="mode">		Type of access permitted. </param>
            <param name="shFlag">	Type of sharing allowed. </param>
            <remarks> Refer to help for _tfsopen for possible values for mode and shFlag.  shFlag is optional
		  and defaults to _SH_DENYNO. </remarks>
            <returns> Returns true if the file opened successfully or if the same file name is already open.
		  Returns false if a different file is currently open or if the open fails. </returns>
        </member>
        <member name="M:SysFile.Dispose">
            <summary> Standard destruction, but also closes the file if it is still open. </summary>
        </member>
        <member name="M:SysFile.#ctor">
            <summary> Constructs the class and initializes member variables to default values. </summary>
        </member>
        <member name="T:SysFile">
            <summary> Mastercam File I/O base class. </summary>
        </member>
        <member name="M:ConstrDepth.op_Implicit~System.Double">
            <summary> double operator overload. </summary>
            <returns> The depth value. </returns>
        </member>
        <member name="M:ConstrDepth.op_Assign(System.Double!System.Runtime.CompilerServices.IsConst)">
            <summary> Assignment operator overload. </summary>
            <param name="val"> Depth value to assign. </param>
            <returns> The new depth value. </returns>
        </member>
        <member name="M:ConstrDepth.#ctor(System.Double)">
            <summary> Constructor. </summary>
            <param name="val"> Optional value. </param>
        </member>
        <member name="T:ConstrDepth">
            <summary> Simple class which allows special handling when the construction depth is set. </summary>
        </member>
        <member name="F:clean_sel_mask">
@} 
selection variables 
</member>
        <member name="T:sel_mask_type">
Selection Mask Type
</member>
        <member name="T:SM_DEPTH_COMPARE">
Selection Mask depth comparisons
</member>
        <member name="T:SM_COMPARE">
Selection Mask length and diameter comparisons
</member>
        <member name="T:LevelMask">
            <summary> Macro for allocating an ent structure instead of having it on the stack. </summary>
@defgroup sel_mask_types Selection Mask 
@{ 
@defgroup sel_mask_surf_types Selection Mask - Surface Types
/** @{ 
@} 
@defgroup sel_mask_draft_types Selection Mask - Drafting Types 
@{ 
@} 
@defgroup Solid Types 
@{ 
@} 
@defgroup selection_mask__max Selection Mask - Max 
@{ 
@} 
</member>
        <member name="T:ent_tp">
            <summary> Create struct that matches the legacy ent_tp structure.  We use a struct instead of using or
		  typedef in order to preserve the existing use of forward declarations. </summary>
        </member>
        <member name="T:ent">
            <summary> Create struct that matches the legacy ent structure.  We use a struct instead of using or
		  typedef in order to preserve the existing use of forward declarations. </summary>
        </member>
        <member name="T:EntTpUnion">
            <summary>A streamlined entity union used to store toolpath entity information only.</summary>
        </member>
        <member name="T:EntUnion">
@note If a ent member is added between pad and u and the new member
*		  is not supposed to be part of the ent header, the define below
*		  must be changed to use the new member in place of u. 
<summary>The union portion of the Entity.  Contains the data for the specific type actually stored
		 in the entity, as indicated by the entity's id and assoc_id.</summary></member>
        <member name="T:EntHeader">
            <summary>A type that is used to just contain the "header" portion of the ent structure.</summary>
        </member>
        <member name="T:EntUnionEmpty">
            <summary>An empty struct that allows us to construct an "ent header".</summary>
        </member>
        <member name="T:assoc_setup">
setup and stock definition 
</member>
        <member name="T:assoc_hdr">
mc7 associative file header definition 
</member>
        <member name="T:nci_bin_5ax">
5ax abbreviated nci entity - definition
</member>
        <member name="T:nci_bin">
@} 
nci entity - definition
</member>
        <member name="T:nci_disp_marker">
mill nci - mark start/end of NCI display section
</member>
        <member name="T:nci_ctour_sect">
mill nci - contour start section marker (used in contour temp file)
</member>
        <member name="T:nci_pock_ktd_move">
mill nci - pocket start/end keep tool down move marker (used in pocket temp file)
</member>
        <member name="T:nci_pock_sect">
mill nci - pocket start section marker (used in pocket temp file)
</member>
        <member name="T:nci_nocore_sect">
wire nci - nocore start section marker (used in pocket temp file)
</member>
        <member name="T:nci_marker">
mill nci - mark start/end of cut/pass
</member>
        <member name="T:nci_nest_prt">
nci - part info
</member>
        <member name="T:nci_nest_sht">
nci - sheet change marker
</member>
        <member name="T:nci_sop">
start of operation output for the post
Note: The start of transform op is not marked but the
start of transformed ops within the transform op are marked.
</member>
        <member name="T:nci_eos">
mill nci - end of operation's nci section
</member>
        <member name="T:nci_sos">
@} 
@defgroup nci_start nci - start of operation's nci section 
@{ 
</member>
        <member name="T:nci_event_2919">
event bnci - unused
</member>
        <member name="T:nci_event_2918">
event bnci - unused
</member>
        <member name="T:nci_event_2917">
event bnci - unused
</member>
        <member name="T:nci_event_2916">
event bnci - unused
</member>
        <member name="T:nci_event_2915">
event bnci - unused
</member>
        <member name="T:nci_event_2914">
event bnci - unused
</member>
        <member name="T:nci_event_2913">
event bnci - unused
</member>
        <member name="T:nci_event_2912">
event bnci - unused
</member>
        <member name="T:nci_event_2911">
event bnci - unused
</member>
        <member name="T:nci_event_2910">
event bnci - unused
</member>
        <member name="T:nci_event_2909">
event bnci - unused
</member>
        <member name="T:nci_event_2908">
event bnci - unused
</member>
        <member name="T:nci_event_2907">
event bnci - unused
</member>
        <member name="T:nci_event_2906">
event bnci - unused
</member>
        <member name="T:nci_event_2905">
event bnci - unused
</member>
        <member name="T:nci_event_2904">
event bnci - unused
</member>
        <member name="T:nci_event_2903">
event bnci - feed type
</member>
        <member name="T:nci_event_2902">
event bnci - feed rate
</member>
        <member name="T:nci_event_2901">
event bnci - tool spindle rpm/css
</member>
        <member name="T:nci_event_2900">
event bnci - part spindle rpm/css
</member>
        <member name="T:nci_event_2881">
event bnci - work shift select
</member>
        <member name="T:nci_event_2880">
event bnci - work offset select
</member>
        <member name="T:nci_event_2852">
event bnci - drill cancel
</member>
        <member name="T:nci_event_2851">
event bnci - drill reference
</member>
        <member name="T:nci_event_2848">
event bnci - axis clamp select
</member>
        <member name="T:nci_event_2847">
event bnci - rtcp select
</member>
        <member name="T:nci_event_2846">
event bnci - reference return select
</member>
        <member name="T:nci_event_2845">
event bnci - polar cylinder select
</member>
        <member name="T:nci_event_2844">
event bnci - cutter comp select
</member>
        <member name="T:nci_event_2843">
event bnci - plane select
</member>
        <member name="T:nci_event_2842">
event bnci - abs/inc select
</member>
        <member name="T:nci_event_2841">
event bnci - unit select
</member>
        <member name="T:nci_event_2840">
event bnci - motion select
</member>
        <member name="T:nci_event_2832">
event bnci - comment output
</member>
        <member name="T:nci_event_2830">
event bnci - tool table
</member>
        <member name="T:nci_event_2812">
event bnci - tool stage
</member>
        <member name="T:nci_event_2811">
event bnci - tool call
</member>
        <member name="T:nci_event_2810">
event bnci - tool offset
</member>
        <member name="T:nci_event_2808">
event bnci - a axis motion place holder
</member>
        <member name="T:nci_event_2807">
event bnci - tool change approach place holder
</member>
        <member name="T:nci_event_2806">
event bnci - b axis motion place holder
</member>
        <member name="T:nci_event_2805">
event bnci - axis motion place holder
</member>
        <member name="T:nci_event_2801">
event bnci - tool change event list end
</member>
        <member name="T:nci_event_2800">
event bnci - tool change event list start
</member>
        <member name="T:nci_event_2705">
event bnci - stock transfer
</member>
        <member name="T:nci_event_2704">
event bnci - custom (canned text)
</member>
        <member name="T:nci_event_2703">
event bnci - manual entry
</member>
        <member name="T:nci_event_2702">
event bnci - join token
This is only used in the toolpath simulation, it is not passed to the post
</member>
        <member name="T:nci_event_2701">
event bnci - macro end
</member>
        <member name="T:nci_event_2700">
event bnci - macro start
</member>
        <member name="T:nci_event_2699">
event bnci - macro else
</member>
        <member name="T:nci_event_2620">
event bnci - transform subprogram marker
</member>
        <member name="T:nci_event_2612">
event bnci - join
</member>
        <member name="T:nci_event_2606">
event bnci - hidden part rotary axis master event
</member>
        <member name="T:nci_event_2605">
event bnci - part rotary axis master event
</member>
        <member name="T:nci_event_2604">
event bnci - hidden part spindle speed master event
</member>
        <member name="T:nci_event_2603">
event bnci - part spindle speed master event
</member>
        <member name="T:nci_event_2602">
event bnci - hidden tool change marker event
</member>
        <member name="T:nci_event_2600">
event bnci - sync event
</member>
        <member name="T:nci_event_2586">
event bnci - part spindle stock grip length move
</member>
        <member name="T:nci_event_2585">
event bnci - part spindle stock clearance move 
</member>
        <member name="T:nci_event_2580">
event bnci - part spindle advance/retract 
</member>
        <member name="T:nci_event_2571">
event bnci - bar puller stock grip length move
</member>
        <member name="T:nci_event_2570">
event bnci - bar puller stock clearance move
</member>
        <member name="T:nci_event_2566">
event bnci - tool linear 3d (mill)
</member>
        <member name="T:nci_event_2563">
event bnci - tool stock clearance move 2d (lathe)
</member>
        <member name="T:nci_event_2561">
event bnci - tool linear 2d
</member>
        <member name="T:nci_event_2543">
event bnci - bar feed
</member>
        <member name="T:nci_event_2540">
event bnci - bar feed lock/unlock
</member>
        <member name="T:nci_event_2533">
event bnci - steady rest advance/retract
</member>
        <member name="T:nci_event_2532">
event bnci - steady rest roller lock/unlock
</member>
        <member name="T:nci_event_2531">
event bnci - steady rest pin advance/retract
</member>
        <member name="T:nci_event_2530">
event bnci - steady rest open/close
</member>
        <member name="T:nci_event_2529">
event bnci - tailstock quill retract
</member>
        <member name="T:nci_event_2528">
event bnci - tailstock quill advance
</member>
        <member name="T:nci_event_2525">
event bnci - tailstock quill lock/unlock
</member>
        <member name="T:nci_event_2514">
event bnci - tailstock retract
</member>
        <member name="T:nci_event_2513">
event bnci - tailstock advance
</member>
        <member name="T:nci_event_2511">
event bnci - tailstock pin advance/retract
</member>
        <member name="T:nci_event_2510">
event bnci - tailstock lock/unlock
</member>
        <member name="T:nci_event_2500">
event bnci - axis motion
</member>
        <member name="T:nci_event_2240">
event bnci - dwell
</member>
        <member name="T:nci_event_2227">
event bnci - tool spindle air blast on/off
</member>
        <member name="T:nci_event_2226">
event bnci - tool spindle orient 
</member>
        <member name="T:nci_event_2224">
event bnci - tool spindle speed clamp 
</member>
        <member name="T:nci_event_2223">
event bnci - tool spindle live spindle enable/disable
</member>
        <member name="T:nci_event_2222">
event bnci - tool spindle direction with coolant
</member>
        <member name="T:nci_event_2221">
event bnci - tool spindle direction
</member>
        <member name="T:nci_event_2220">
event bnci - tool spindle speed
</member>
        <member name="T:nci_event_2208">
event bnci - part spindle rpm from css
</member>
        <member name="T:nci_event_2207">
event bnci - part spindle air blast on/off
</member>
        <member name="T:nci_event_2206">
event bnci - part orient 
</member>
        <member name="T:nci_event_2205">
event bnci - part spindle sync on/off
</member>
        <member name="T:nci_event_2204">
event bnci - part spindle speed clamp 
</member>
        <member name="T:nci_event_2203">
event bnci - part spindle mill axis enable/disable
</member>
        <member name="T:nci_event_2202">
event bnci - part spindle direction with coolant
</member>
        <member name="T:nci_event_2201">
event bnci - part spindle direction
</member>
        <member name="T:nci_event_2200">
event bnci - part spindle speed
</member>
        <member name="T:nci_event_2180">
event bnci - part catcher advance/retract
</member>
        <member name="T:nci_event_2170">
event bnci - eject pin advance/retract
</member>
        <member name="T:nci_event_2140">
event bnci - bar puller open/close
</member>
        <member name="T:nci_event_2110">
event bnci - chuck open/close
</member>
        <member name="T:nci_event_2104">
event bnci - retract coolant place holder
</member>
        <member name="T:nci_event_2103">
event bnci - approach coolant place holder
</member>
        <member name="T:nci_event_2102">
event bnci - coolant
</member>
        <member name="T:nci_event_2100">
event bnci - program stop
</member>
        <member name="T:nci_event_2099">
event bnci - event list header event
</member>
        <member name="T:nci_event_2002">
event bnci - tool change retract event list
</member>
        <member name="T:nci_event_2001">
event bnci - tool change approach event list
</member>
        <member name="T:nci_event_2000">
@defgroup custom ops event bnci lines 
@{ 
event bnci - custom op event list
</member>
        <member name="T:nci_nest_prm2">
nesting nci - miscellaneous parameters #2
</member>
        <member name="T:nci_nest_prm1">
nesting nci - miscellaneous parameters #1
</member>
        <member name="T:nci_wire_22001">
wire nci - Agie data
</member>
        <member name="T:nci_wire_20200">
wire nci - stock to leave
</member>
        <member name="T:nci_lathe_20112">
lathe nci - tool definition - custom tool geometry file name
</member>
        <member name="T:nci_lathe_20111">
lathe nci - tool definition - tool holder parameters
</member>
        <member name="T:nci_lathe_20110">
lathe nci - tool definition - tool holder name
</member>
        <member name="T:nci_lathe_20109">
lathe nci - tool definition - drilling tool parameters (cutting)
</member>
        <member name="T:nci_lathe_20108">
lathe nci - tool definition - drilling tool parameters (geometry)
</member>
        <member name="T:nci_lathe_20107">
lathe nci - tool definition - grooving/parting insert parameters
</member>
        <member name="T:nci_lathe_20106">
lathe nci - tool definition - threading insert parameters
</member>
        <member name="T:nci_lathe_20105">
lathe nci - tool definition - general turning/boring insert parameters
</member>
        <member name="T:nci_lathe_20104">
lathe nci - tool definition - tool insert general parameters
</member>
        <member name="T:nci_lathe_20103">
lathe nci - tool definition - tool insert name
</member>
        <member name="T:nci_lathe_20102">
lathe nci - tool definition - tool geometric parameters
</member>
        <member name="T:nci_lathe_20101">
lathe nci - tool definition - tool general cutting parameters
</member>
        <member name="T:nci_lathe_20100">
lathe nci - tool definition - tool programming parameters
</member>
        <member name="T:nci_mill_20800">
multiaxis comp in control value
</member>
        <member name="T:nci_mill_20017">
mill nci - matl comment
</member>
        <member name="T:nci_mill_20016">
mill nci - matl name
</member>
        <member name="T:nci_mill_20015">
mill nci - wcs comment
</member>
        <member name="T:nci_mill_20014">
mill nci - wcs name
</member>
        <member name="T:nci_mill_20013">
mill nci - tpln comment
</member>
        <member name="T:nci_mill_20012">
mill nci - tpln name
</member>
        <member name="T:nci_mill_20011">
mill nci - cpln comment
</member>
        <member name="T:nci_mill_20010">
mill nci - cpln name
</member>
        <member name="T:nci_mill_20009">
mill nci - tool definition - custom parameters
</member>
        <member name="T:nci_mill_20008">
mill nci - tool definition - head parameters
</member>
        <member name="T:nci_mill_20007">
mill nci - tool definition - holder parameters
</member>
        <member name="T:nci_mill_20006a">
mill nci - tool definition - mill type tool specific parameters
</member>
        <member name="T:nci_mill_20005">
mill nci - tool definition - drill type tool specific parameters
</member>
        <member name="T:nci_mill_20004">
mill nci - tool definition - tool parameters
</member>
        <member name="T:nci_mill_20003">
mill nci - tool definition - chuck name
</member>
        <member name="T:nci_lathe_20002">
lathe nci - tool definition - manufacturer
</member>
        <member name="T:nci_mill_20002a">
mill nci - tool definition - manufacturer
</member>
        <member name="T:nci_lathe_20001">
lathe nci - tool definition - tool comment (name)
</member>
        <member name="T:nci_mill_20001">
mill nci - tool definition - tool comment
</member>
        <member name="T:nci_lathe_20000">
lathe nci - tool definition - mc7 path for custom tool geometry
</member>
        <member name="T:nci_mill_20000">
mill nci - tool definition - mc7 path for tool reference
</member>
        <member name="T:nci_prm">
mill nci - operation parameters
</member>
        <member name="T:nci_mill_1055">
tool inspection comment
</member>
        <member name="T:nci_mill_1053">
machine group name
</member>
        <member name="T:nci_mill_1052">
machine group comment
</member>
        <member name="T:nci_mill_1051">
machine name
</member>
        <member name="T:nci_lathe_1050">
lathe nci - version, date and geometry file name
</member>
        <member name="T:nci_mill_1050">
mill nci - version, date and geometry file name
</member>
        <member name="T:nci_mill_1032">
mill nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1031">
mill nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1017">
lathe nci - construction plane 3x3 matrix
</member>
        <member name="T:nci_lathe_1020">
lathe nci - stock description
</member>
        <member name="T:nci_mill_1029">
Mill/Router nci - Multi head, block, station info part 2 
</member>
        <member name="T:nci_mill_1028">
Mill/Router nci - Multi head, block, station info part 1 -block tools/drills/aggregates 
</member>
        <member name="T:nci_wire_1025">
wire - canned text
</member>
        <member name="T:nci_lathe_1025">
lathe - canned text
</member>
        <member name="T:nci_lathe_1027">
lathe nci - working coordinate system
</member>
        <member name="T:nci_mill_1027">
mill nci - working coordinate system
</member>
        <member name="T:nci_mill_1025">
mill - canned text
</member>
        <member name="T:nci_wire_1020">
mill nci - stock description
</member>
        <member name="T:nci_mill_1020">
mill nci - stock description
</member>
        <member name="T:nci_mill_1019">
mill nci - end of sub program section
</member>
        <member name="T:nci_mill_1018">
mill nci - start of sub program section
</member>
        <member name="T:nci_mill_1017">
mill nci - construction plane 3x3 matrix
</member>
        <member name="T:nci_wire_1016">
wire nci - associative params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1016">
lathe nci - associative params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1016">
mill nci - associative params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1015">
wire nci - subroutine parameters
</member>
        <member name="T:nci_lathe_1014">
lathe nci - tool plane 3x3 matrix
</member>
        <member name="T:nci_mill_1014">
mill nci - tool plane 3x3 matrix
</member>
        <member name="T:nci_wire_1013">
wire nci - miscellaneous params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1013">
lathe nci - miscellaneous params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1013">
mill nci - miscellaneous params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1012">
wire nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1012">
lathe nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1012">
mill nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1011">
wire nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1011">
lathe nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1011">
mill nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1010">
wire nci - control settings change
</member>
        <member name="T:nci_wire_1009">
wire nci - wirepath length
</member>
        <member name="T:nci_wire_1008">
wire nci - operation comment
</member>
        <member name="T:nci_lathe_1008">
lathe nci - operation comment
</member>
        <member name="T:nci_mill_1008">
mill nci - operation comment
</member>
        <member name="T:nci_wire_1005">
wire nci - comment (manual entry)
</member>
        <member name="T:nci_lathe_1005">
lathe nci - comment (manual entry)
</member>
        <member name="T:nci_mill_1005">
mill nci - comment (manual entry)
</member>
        <member name="T:nci_wire_1004">
wire nci - cancel cutter comp in control
</member>
        <member name="T:nci_lathe_1004">
lathe nci - cancel cutter comp in control
</member>
        <member name="T:nci_mill_1004">
mill nci - cancel cutter comp in control
</member>
        <member name="T:nci_wire_1003">
wire nci - end of file
</member>
        <member name="T:nci_lathe_1003">
lathe nci - end of file
</member>
        <member name="T:nci_mill_1003">
mill nci - end of file
</member>
        <member name="T:nci_wire_1002">
wire nci - start of nci file and/or tool change
</member>
        <member name="T:nci_lathe_1002">
lathe nci - start of nci file and/or tool change
</member>
        <member name="T:nci_mill_1002">
mill nci - start of nci file and/or tool change
</member>
        <member name="F:nci_20701.pad">
for rent
</member>
        <member name="F:nci_20701.useAltTurretIndexPosn">
alternate turret position flag (turret lathe)
</member>
        <member name="F:nci_20701.toolNumber">
tool number
</member>
        <member name="F:nci_20701.toolStation">
tool station number
</member>
        <member name="F:nci_20701.mdSequentialIndex">
ATC tool pocket, turret index position, gang tool = station
</member>
        <member name="F:nci_20701.changerId">
ent_idn of tool changer component
</member>
        <member name="F:nci_20701.changerType">
tool changer type: 
ATC_COMPONENT, TURRET_COMPONENT, MT_TURRET_COMPONENT, GANG_TOOL_COMPONENT
</member>
        <member name="T:nci_20701">
nci enhanced tool change information
</member>
        <member name="T:nci_lathe_950">
lathe nci - axis combination
</member>
        <member name="T:nci_mt_turret">
turret operation
</member>
        <member name="T:nci_mt_tailstock">
tailstock operation
</member>
        <member name="T:nci_mt_spindle_sync">
spindle sync operation
</member>
        <member name="T:nci_mt_spindle_move">
spindle advance/retract operation
</member>
        <member name="T:nci_mt_spindle_grip">
chuck clamp/unclamp operation
</member>
        <member name="T:nci_mt_bar_feed">
bar feed operation
</member>
        <member name="T:nci_mt_bar_feeder">
bar feeder on/off
</member>
        <member name="T:nci_mt_bar_puller">
bar puller open/close
</member>
        <member name="T:nci_lathe_912">
lathe nci - miscops custom integer parameters
</member>
        <member name="T:nci_lathe_911">
lathe nci - miscops custom real parameters
</member>
        <member name="T:nci_lathe_906">
lathe nci - turret park operation - obsolete
</member>
        <member name="T:nci_lathe_905">
lathe nci - steady rest position operation
</member>
        <member name="T:nci_lathe_904">
lathe nci - tailstock position operation
</member>
        <member name="T:nci_lathe_903">
lathe nci - chuck clamp/un-clamp, reposition operation
</member>
        <member name="T:nci_lathe_902">
lathe nci - stock bar feed operation
</member>
        <member name="T:nci_lathe_901">
lathe nci - stock flip operation
</member>
        <member name="T:nci_lathe_900">
lathe nci - stock transfer operation
</member>
        <member name="T:nci_lathe_201">
lathe nci - start of threading cycle
</member>
        <member name="T:nci_lathe_200">
lathe nci - threading cycle
</member>
        <member name="T:nci_wire_100">
wire nci - canned cycle point position
</member>
        <member name="T:nci_mill_100">
mill nci - canned cycle point position
</member>
        <member name="T:nci_mill_83">
nci - drill block parameters
</member>
        <member name="T:nci_wire_81">
wire nci - start canned cycle
</member>
        <member name="T:nci_lathe_81">
lathe nci - start canned cycle
</member>
        <member name="T:nci_lathe_82">
lathe nci - custom drill parameters
</member>
        <member name="T:nci_mill_82">
mill nci - custom drill parameters
</member>
        <member name="T:nci_mill_81">
mill nci - start canned cycle
</member>
        <member name="T:nci_wire_80">
wire nci - cancel canned cycle
</member>
        <member name="T:nci_lathe_80">
lathe nci - cancel canned cycle
</member>
        <member name="T:nci_mill_80">
mill nci - cancel canned cycle
</member>
        <member name="T:nci_wire_22">
wire nci - 4axis direct arc XY or UV move (gcodes 22, 23, 32, 33)
</member>
        <member name="T:nci_wire_20">
wire nci - 4axis direct linear XY or UV move (gcodes 20, 21, 30, 31)
</member>
        <member name="T:nci_wire_11">
wire nci - 4axis longhand
</member>
        <member name="T:nci_mill_11">
mill nci - 5 axis move
</member>
        <member name="T:nci_wire_4">
wire nci - dwell
</member>
        <member name="T:nci_lathe_4">
mill nci - dwell
</member>
        <member name="T:nci_mill_4">
mill nci - dwell
</member>
        <member name="T:nci_wire_2">
wire nci - arc feed move
</member>
        <member name="T:nci_lathe_2">
lathe nci - arc feed move
</member>
        <member name="T:nci_mill_2">
mill nci - arc feed move
</member>
        <member name="T:nci_lathe_1">
lathe nci - linear feed move
</member>
        <member name="T:nci_mill_1">
mill nci - linear feed move
</member>
        <member name="T:nci_wire_0">
wire nci - rapid or feed move (depends on gcode 0 or 1)
</member>
        <member name="T:nci_mill_0">
mill nci - rapid move
</member>
        <member name="T:op_list">
for linked lists of operation entities 
</member>
        <member name="T:operation">
operation parameter definition
* @note If a operation member is added between version and u and the new
*		 member is not supposed to be part of the operation header, the define
*		 below must be changed to use the new member in place of u.

</member>
        <member name="T:op_smoothing_5d">
operation parameters - multiaxes smoothing parameters 
</member>
        <member name="T:arcFeedOverride">
            <summary> For Override Arc Feedrate on Arc Filter / Tolerance page. </summary>
        </member>
        <member name="T:op_feedrate_optimization">
operation parameters - Feedrate optimization 
</member>
        <member name="T:op_rotary">
operation parameters - common rotary parameters 
c-axis = polar conversion (3 axis)
y-axis = toolplane positioning (rotary positioning)
</member>
        <member name="T:op_tool_display">
operation parameters - common toolpath display parameters 
</member>
        <member name="T:op_lead_io">
operation parameters - contour lead in-out parameters 
</member>
        <member name="T:op_entry_exit">
operation parameters - contour entry-exit parameters 
</member>
        <member name="T:op_home_pos">
operation parameters - home position 
</member>
        <member name="T:op_multi_cuts">
operation parameters - pocket and contour multi cuts 
</member>
        <member name="T:op_depth_cuts">
operation parameters - pocket and contour depth cuts 
</member>
        <member name="T:op_depth_cuts_v7">
operation parameters - pocket and contour depth cuts 
</member>
        <member name="T:op_view">
operation parameters - tool and construction planes 
</member>
        <member name="T:op_cc">
operation parameters - cutter comp 
</member>
        <member name="T:op_cc_control">
operation parameters - cutter comp in control 
</member>
        <member name="T:op_cc_computer">
operation parameters - cutter comp in computer 
</member>
        <member name="T:op_filter">
operation parameters - toolpath filter settings 
</member>
        <member name="T:op_v8">
operation parameters - more room
</member>
        <member name="T:op_events">
operation events
</member>
        <member name="T:op_canned_text">
operation parameters - canned text 
</member>
        <member name="T:op_aux_file">
auxiliary file name - mill:msurf recut file, wire:material library
</member>
        <member name="T:op_common">
operation parameters - common parameters for all mill operation types 
</member>
        <member name="T:op_db">
operation parameters - database info 
</member>
        <member name="D:PlanePtr">
            <summary> Defines an alias representing the plane pointer. </summary>
        </member>
        <member name="M:Plane.DebugPlaneNameStr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calls DebugPlaneStr() with this plane's name. </summary>
            <param name="msg"> The message. </param>
        </member>
        <member name="M:Plane.SubtractMatrix33AndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between given matrix and origin and TOP and transform this plane by that amount. </summary>
            <param name="m33">	    3x3 matrix to subtract from this. </param>
            <param name="originPt"> Point in world coordinates to subtract from this. </param>
        </member>
        <member name="M:Plane.SubtractPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between given plane and TOP and transform this plane by that amount. </summary>
            <param name="thePlane"> Plane to subtract from this. </param>
        </member>
        <member name="M:Plane.AddMatrix33AndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between TOP and given matrix and origin and transform this plane by that amount. </summary>
            <param name="m33">	    3x3 matrix to add to this. </param>
            <param name="originPt"> Point in world coordinates to add to add to this. </param>
        </member>
        <member name="M:Plane.AddPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between TOP and given plane and transform this plane by that amount. </summary>
            <param name="thePlane"> Plane to add to this. </param>
        </member>
        <member name="M:Plane.AddOrSubtractMatrix33AndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Calculate the transformation matrix between TOP and given matrix and origin and transform this plane by
		  that amount. </summary>
            <param name="m33">	    3x3 matrix to add to this. </param>
            <param name="originPt"> Point in world coordinates to add to add to this. </param>
            <param name="add">	    True to add, false to subtract. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.InverseTransformMatrixAndOrigin(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inverse transform matrix and origin. </summary>
            <param name="xfm">			 The transform. </param>
            <param name="m33">			 The 3x3 matrix. </param>
            <param name="worldOriginPt"> The world origin point. </param>
        </member>
        <member name="M:Plane.UndoXformApplyNext(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between to views and origins. </summary>
            <param name="from33"> Source view. </param>
            <param name="fromPt"> Source origin in world coordinates. </param>
            <param name="to33">   Destination view. </param>
            <param name="toPt">   Destination origin in world coordinates. </param>
            <returns> transformation matrix. </returns>
        </member>
        <member name="M:Plane.CreationMethodRequiresValidSelectionIndex">
            <summary> See if m_CreationMethod requires a valid matrix option selection index. </summary>
            <returns> true if it it does, false if it doesn't. </returns>
        </member>
        <member name="M:Plane.InitOperationView(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Initialize an op_view to the contents of this plane. </summary>
            <param name="opView">	    op_view to initialize. </param>
            <param name="refPlanes">    A reference to a MastercamPlanes objcet to get the view # from. </param>
            <param name="doWorkOffset"> true = set op_view.woff_n, false = maintain current op_view.woff_n value. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Plane.Regenerate(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> / &lt;summary&gt;Create a geometry id/eptr map and regenerate the plane to its associated geometry.  This
		  should only be called if in the current db. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="regenMode"> The regen mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Regenerate(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> / &lt;summary&gt;Regenerate the plane to its associated geometry.  This should only
		  			 be called if in the current db. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="geomMap">   The geometry map. </param>
            <param name="regenMode"> The regen mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.ConstructorCheck">
            <summary> set m_RegenErrors from constructor values. </summary>
            <returns> returns true if okay. </returns>
        </member>
        <member name="M:Plane.EraseGnomon">
            <summary> create and draw the Plane's icon in the screen background color. </summary>
        </member>
        <member name="M:Plane.DrawGnomon(System.Boolean,System.Boolean,System.Boolean)">
            <summary> Create and draw the Plane's gnomon in its native color. </summary>
            <param name="includeName"> true to include the plane name. </param>
            <param name="selected">    (Optional) true if plane planel active and plane selected (default = false). </param>
            <param name="enable">      (Optional) true to draw as enabled; false to draw as disabled (default = true). </param>
        </member>
        <member name="M:Plane.CreateGnomon(System.Boolean)">
            <summary> Create a PlaneGnomon for this plane in m_spGnomon. </summary>
            <param name="singleInstance"> true to single instance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.GetGnomonPtr">
            <summary> Return const pointer to m_spGnomon. </summary>
            <returns> The gnomon pointer. </returns>
        </member>
        <member name="M:Plane.MakePlanePtr(PlaneClass,Plane!System.Runtime.CompilerServices.IsConst*)">
            <summary> Allocates for a plane based on type. </summary>
            <param name="planeClass"> The plane class (SystemMatrix, NamedPlane, etc). </param>
            <param name="pPlane">	  (Optional) ptr to plane to copy. </param>
            <returns> Base class ptr to newly allocated plane. </returns>
        </member>
        <member name="M:Plane.PlaneToWorld(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in plane coordinates to world coordinates (map from plane's view, add the plane origin). </summary>
            <param name="planePt"> The point in plane coordinates. </param>
            <returns> P3D of world point relative to the plane's view and origin. </returns>
        </member>
        <member name="M:Plane.WorldToPlane(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in world coordinates to plane coordinates (map to plane's view, subtract the plane origin). </summary>
            <param name="worldPt"> The point in world coordinates. </param>
            <returns> P3D of world point relative to the plane's view and origin. </returns>
        </member>
        <member name="M:Plane.GetTemporary">
            <summary> Return value of m_Temporary. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.SetTemporary(System.Boolean)">
            <summary> Set m_Temporary. </summary>
            <param name="temporary"> if true, temporary plane will not be listed in Planes Manager and will be deleted on file/save. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:Plane.GetLparam">
            <summary> Gets the lparam. </summary>
            <returns> Return value of m_Lparam. </returns>
        </member>
        <member name="M:Plane.SetLparam(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Set optional user value. </summary>
            <param name="lParam"> value to set. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:Plane.SetEntityRefs(System.Boolean)">
            <summary> Increment or decrement ent.vw_refs in associated entities.  Should only be called if in the current db. </summary>
            <param name="increment"> true = increment, false = decrement. </param>
            <returns> return # of entities updated. </returns>
        </member>
        <member name="M:Plane.SetEntityRefs(System.Boolean,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Increment or decrement ent.vw_refs in associated entities.  Should only be called if in the current db. </summary>
            <param name="increment"> true = increment, false = decrement. </param>
            <param name="geomMap">   reference to geometry entities eptr/ID map, NULL will create one if regenerate is set to true. </param>
            <returns> return # of entities updated. </returns>
        </member>
        <member name="M:Plane.GetConstructorMethod">
            <summary> Gets constructor method. </summary>
            <returns> The constructor method. </returns>
        </member>
        <member name="M:Plane.GetRegenErrorString">
            <summary> return CString of m_RegenErrors. </summary>
            <returns> The regen error string. </returns>
        </member>
        <member name="M:Plane.GetRegenErrors">
            <summary> return value of m_RegenErrors. </summary>
            <returns> The regen errors. </returns>
        </member>
        <member name="M:Plane.SetRegenErrors(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set regeneration errors. </summary>
            <param name="regenErrors"> error mask to add. </param>
            <returns> return previous error values. </returns>
        </member>
        <member name="M:Plane.SelectOriginPoint(System.Boolean,CWnd*)">
            <summary> Call up dialog to define new origin point for this plane. </summary>
            <param name="do_draw"> Erase plane icon on dialog startup, draw icon on dialog exit. </param>
            <param name="pWindow"> (Optional) CWnd to parent window of dialog. </param>
            <returns> return true if origin point has been redefined. </returns>
        </member>
        <member name="M:Plane.SwapEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> swap old entity ID for new ID. </summary>
            <param name="oldID">	 the old entity ID. </param>
            <param name="newID">	 the new entity ID. </param>
            <param name="markDirty"> true = mark plane dirty if any ID's were swapped. </param>
            <returns> returns # of ID's swapped. </returns>
        </member>
        <member name="M:Plane.Erase">
            <summary> Erase the Plane's from the graphics window. </summary>
        </member>
        <member name="M:Plane.Draw(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Create and draw the Plane's wireframe icon in its native color. </summary>
            <param name="forceDraw">   (Optional) true to force drawing (ignore m_DisplayMode). </param>
            <param name="includeName"> (Optional) true to include the plane name (default = true). </param>
            <param name="selected">    (Optional) true if plane planel active and plane selected (default = false). </param>
            <param name="enable">      (Optional) true to draw as enabled; false to draw as disabled (default = true). </param>
        </member>
        <member name="M:Plane.ClearSelectedEntities">
            <summary> clear the Plane's points and selected entity info used in it's creation. </summary>
        </member>
        <member name="M:Plane.ConvertNoWorkOffset(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 op_view structure without overriding the op_view's work offset value. </summary>
            <param name="opView"> reference to X6 op_view structure to fill in. </param>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view # from. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Convert(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 op_view structure. </summary>
            <param name="opView">    reference to X6 op_view structure to fill in. </param>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view # from. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Convert(group_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 group_view structure. </summary>
            <param name="groupView">	  reference to X6 group_view structure to fill in. </param>
        </member>
        <member name="M:Plane.Convert(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 view_ent structure. </summary>
            <param name="viewEnt">   reference to X6 view_ent structure to fill in. </param>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view # from. </param>
        </member>
        <member name="M:Plane.Convert(prm_xform_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 view_ent structure. </summary>
            <param name="xformView"> reference to prm_xform_view structure to fill in. </param>
        </member>
        <member name="M:Plane.RemoveAssoc(Plane.AssocMask)">
            <summary> Removes the associated described by mask. </summary>
            <param name="mask"> Remove geometry association for the origin, matrix or both. </param>
        </member>
        <member name="M:Plane.ValidRelativeType(Plane.RelativeType)">
            <summary> validate relative plane type. </summary>
            <param name="relType"> relative plane  (RelativeType::Front, etc) </param>
            <returns> return true if relative type is valid. </returns>
        </member>
        <member name="M:Plane.ValidCoordinateDisplayMask(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Validate coordinate display mask (lathe or mill). </summary>
            <param name="coordinateDisplayMask"> coordinate display mask type. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Plane.ValidCoordinateDisplayType(CoordinateDisplayType)">
            <summary> Validate coordinate display type. </summary>
            <param name="coordinateDisplay"> coordinate display type. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Plane.CompareForEditing(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> return true if the plane can be edited (not reserved, etc) </summary>
            <param name="obj">		 the Plane to check. </param>
            <param name="checkLock"> true = check if lock is on. </param>
            <returns> true if the plane can be edited. </returns>
        </member>
        <member name="M:Plane.CompareForNciChanges(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare oldPlane against newPlane to determine if the change can affect a toolpath operation. </summary>
            <param name="newPlane"> New plane values. </param>
            <returns> true if a member variable's change will affect a toolpath operation, false if it won't. </returns>
        </member>
        <member name="M:Plane.CompareForPlaneRegen(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare given plane to this, return true if differences are great enough to require a 
		  regeneration of this plane (i.e. matrix or origin changed, but not name, etc). </summary>
            <param name="obj"> The plane to compare. </param>
            <returns> Returns mask (COMPARISON_MATRIX, etc). </returns>
        </member>
        <member name="M:Plane.IsParallel(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Check if this plane is parallel to given view #. </summary>
            <param name="m33">		 SystemMatrix to compare with this. </param>
            <param name="oppZ">		 [in,out] reference to bool will be set to true if Z component is in the opposite direction. </param>
            <param name="allowOppZ"> (Optional) true = allow opposite Z component check, false = all opposite Z component views are ignored. </param>
            <returns> Return true if parallel. </returns>
        </member>
        <member name="M:Plane.UsesEntityIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check if entity ID is used in this plane. </summary>
            <param name="entIDs"> Entity IDs to check for. </param>
            <returns> return true if any entity ID in the given set is associated with this plane. </returns>
        </member>
        <member name="M:Plane.ValidPlaneType(PlaneType,System.Boolean)">
            <summary> Check validity of plane type. </summary>
            <param name="whichPlane"> PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE. </param>
            <param name="warn">		  (Optional) debug only warning. </param>
            <returns> Return false if any other value was given in whichPlane. </returns>
        </member>
        <member name="M:Plane.Validate(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong,EntityEptrMap!System.Runtime.CompilerServices.IsConst*)">
            <summary> check the Plane's data. </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="checkID">   check the assigned ID. </param>
            <param name="regenMode"> regeneration mode (REGEN_NATURAL, etc) </param>
            <param name="pGeomMap">  (Optional) pointer to geometry entities eptr/ID map, NULL will create one if regenerate is set to true. </param>
            <returns> returns true if all data is valid. </returns>
        </member>
        <member name="M:Plane.IsAssoc">
            <summary> return true if Plane is asscoiated to geometry. </summary>
            <returns> true if associated, false if not. </returns>
        </member>
        <member name="M:Plane.IsAssocCheck">
            <summary> Check to see if Plane can be associated to geometry and if it actually is, set m_IsAssoc to true. </summary>
            <returns> true if (m_IsAssoc == true), false if not. </returns>
        </member>
        <member name="M:Plane.CanBeAssoc">
            <summary> check to see if Plane is referencing any geometry by it's ID. </summary>
            <returns> returns who's assocaited to geometry, the origin and/or matrix </returns>
        </member>
        <member name="M:Plane.IsLatheCoordinateDisplay">
            <summary> Query if this object contains lathe coordinate display. </summary>
            <returns> true if lathe coordinate display, false if not. </returns>
        </member>
        <member name="M:Plane.IsReserved(System.Boolean)">
            <summary> return true if this plane is a reserved plane, false if it is not. </summary>
            <param name="warn"> (Optional) true to display warning. </param>
            <returns> return true if this plane is a reserved plane, false if it is not. </returns>
        </member>
        <member name="M:Plane.ValidCreationMethod(Plane.CreationMethod)">
            <summary> validate Plane creation method. </summary>
            <param name="creationMethod"> int representing creation method (CreationMethod::ThreePoints, etc) </param>
            <returns> returns true if valid. </returns>
        </member>
        <member name="M:Plane.IsTopAtZero">
            <summary> Return true if this plane is TOP at an origin of X0 Y0 Z0. </summary>
            <returns> true if top at zero, false if not. </returns>
        </member>
        <member name="M:Plane.MatrixAndOriginAreEqual(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Return true if this plane's matrix and origin match given plane's matrix and origin. </summary>
            <param name="thePlane"> a plane to compare this to. </param>
            <param name="warn">	    (Optional) true = debug only warning if not equal. </param>
            <returns> return true if equal within plane tolerance. </returns>
        </member>
        <member name="M:Plane.MatrixAndOriginAreEqual(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Return true if this plane's matrix and origin match given matrix and origin. </summary>
            <param name="m33">		 3x3 matrix to compare. </param>
            <param name="wOriginPt"> origin point in world coordinates to compare. </param>
            <param name="warn">		 (Optional) true = debug only warning if not equal. </param>
            <returns> return true if equal within plane tolerance. </returns>
        </member>
        <member name="M:Plane.GetIntersectionInView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate 3D intersection point within the given view for 2 entities. </summary>
            <param name="m33">		    view to calculate intersection in. </param>
            <param name="ent1">		    entity 1 of 2. </param>
            <param name="ent2">		    entity 2 of 2. </param>
            <param name="selPt1">	    2D selection point near entity 1. </param>
            <param name="selPt2">	    2D selection point near entity 2. </param>
            <param name="tVal">		    2D t value point for entity 1. </param>
            <param name="wIntersectPt"> calculated intersection point. </param>
            <returns> returns true if parallel. </returns>
        </member>
        <member name="M:Plane.LinesAreParallel(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> determine if the 2 given lines are parallel. </summary>
            <param name="line0"> line 1 of 2. </param>
            <param name="line1"> line 2 of 2. </param>
            <returns> returns true if parallel. </returns>
        </member>
        <member name="M:Plane.CheckFlat2lines(System.Boolean,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D)">
            <summary> determine the normal of the plane for two 3d lines. </summary>
            <param name="rejectIfSkew"> reject these lines (return false) if they do not lie in the same plane. </param>
            <param name="line0">	    line 1 of 2. </param>
            <param name="line1">	    line 2 of 2. </param>
            <param name="normXprd">	    normal of the plane that line0 and line1 lie in. </param>
            <returns> returns true if flat. </returns>
        </member>
        <member name="M:Plane.GetMatrixFrom2lines(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate a 3x3 matrixm view # and intersection point from 2 lines. </summary>
            <param name="line0">	    line 1 of 2. </param>
            <param name="line1">	    line 2 of 2. </param>
            <param name="m33">		    calculated 3x3 matrix. </param>
            <param name="wIntersectPt"> calculated intersection point. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.GetMatrixFrom2lines(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate a 3x3 matrix from 2 lines. </summary>
            <param name="line0"> line 1 of 2. </param>
            <param name="line1"> line 2 of 2. </param>
            <param name="m33">   calculated 3x3 matrix. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.GetMatrixFrom3points(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert 3 points into 2 lines and calculate a 3x3 matrix and an intersection point. </summary>
            <param name="pt1">		    point 1 of 3. </param>
            <param name="pt2">		    point 2 of 3. </param>
            <param name="pt3">		    point 3 of 3. </param>
            <param name="m33">		    calculated 3x3 matrix. </param>
            <param name="wIntersectPt"> calculated intersection point. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.RotateMatrix33(System.Double,System.Int32,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> rotate a Matrix33 about an axis by degrees. </summary>
            <param name="rotAngleDeg"> rotation amount in degrees. </param>
            <param name="rotAxis">	   the X, Y or Z axis to rotate about. </param>
            <param name="m33">		   the Matrix33 to rotate. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.RotateMatrix33Relative(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane.RelativeType)">
            <summary> rotate a Matrix33 by relative type. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="m33">		 [in,out] the Matrix33 to rotate. </param>
            <param name="relType">   the relative type (RelativeType::Front, etc) </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.MultiplyMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply this plane's matrix by the given matrix. </summary>
            <param name="m33"> a Matrix33 object to multiple this by. </param>
        </member>
        <member name="M:Plane.MultiplyMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply two 3x3 matrices. </summary>
            <param name="m1">	   a Matrix33 object. </param>
            <param name="m2">	   a Matrix33 object. </param>
            <param name="mResult"> the destination Matrix33 object ( m1 * m2) </param>
        </member>
        <member name="M:Plane.Transform(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Transform this plane by the given transformation matrix. </summary>
            <param name="xm">	    valid transformation matrix. </param>
            <param name="doOrigin"> transform plane origin too. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Rotate(System.Int32,System.Double)">
            <summary> Rotates an existing non-reserved, non-locked plane. </summary>
            <param name="axis">		   The axis to rotate about (X=0, Y=1, Z=2). </param>
            <param name="rotAngleDeg"> The rotation angle in degrees. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.RotateRelative(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane.RelativeType)">
            <summary> Transform this plane by a relative plane. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="relType">   RelativeType::Front, RelativeType::Back, etc. </param>
        </member>
        <member name="M:Plane.BnciCalcXmatrix(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XfmMatrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between to views and origins for bnci purposes. </summary>
            <param name="from33"> Source view. </param>
            <param name="fromPt"> Source origin in world coordinates. </param>
            <param name="to33">   Destination view. </param>
            <param name="toPt">   Destination origin in world coordinates. </param>
            <param name="xm">	  [in,out] Reference to transformation matrix to fill in. </param>
            <returns> Return true if calculation successful and contents of xm is valid. </returns>
        </member>
        <member name="M:Plane.BnciTransform(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Transform this for bnci purposes. </summary>
            <param name="xm">	    The transformation. </param>
            <param name="doOrigin"> True to do origin. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.CalcXmatrix(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between to views and origins. </summary>
            <param name="from33"> Source view. </param>
            <param name="fromPt"> Source origin in world coordinates. </param>
            <param name="to33">   Destination view. </param>
            <param name="toPt">   Destination origin in world coordinates. </param>
            <returns> Return transformation matrix. </returns>
        </member>
        <member name="M:Plane.TransformMatrixAndOrigin(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform a matrix and origin. </summary>
            <param name="xfm">			 The transform. </param>
            <param name="m33">			 [in,out] The matrix to transform. </param>
            <param name="worldOriginPt"> [in,out] The world origin point to transform. </param>
        </member>
        <member name="M:Plane.SetDependent(Plane.Dependent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the values in m_Dependent. </summary>
            <param name="depInfo"> Information describing the dependency. </param>
            <returns> Previous value of m_Dependent. </returns>
        </member>
        <member name="M:Plane.RemoveTransform">
            <summary> Inverse transform by m_Transform. </summary>
            <returns> Previous value of m_Transform. </returns>
        </member>
        <member name="M:Plane.SetTransform(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets our transform in m_Transform. </summary>
            <param name="xfm"> The transformation matrix. </param>
            <returns> Previous value of m_Transform. </returns>
        </member>
        <member name="M:Plane.InitTransform">
            <summary> Initializes the m_Transform. </summary>
            <returns> Previous value of m_Transform. </returns>
        </member>
        <member name="M:Plane.CopyNonReservedData(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy data that can be changed in a reserved Plane. </summary>
            <param name="thePlane"> The plane to copy from. </param>
        </member>
        <member name="M:Plane.SetDirty(System.Boolean)">
            <summary> Set plane's dirty flag. </summary>
            <param name="dirty"> true = dirty (requires regneration), false = clean. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:Plane.SetConstructorCoordinateDisplay(CoordinateDisplayType)">
            <summary> Sets coordinate display for all constructors.
		  This will be the default coordinate display value assigned to the Plane's upon instantiation. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.SetCoordinateDisplay(CoordinateDisplayType)">
            <summary> Set the plane's coordinate display mode. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> return previous value, -1 if invalid coordinateDisplay. </returns>
        </member>
        <member name="M:Plane.SetOutputCommentToNci(System.Boolean)">
            <summary> set the Plane's ouput comment to NCI mode. </summary>
            <param name="outputCommentToNci"> true = ouput Plane's comment to NCI. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetComment(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's comment string. </summary>
            <param name="comment"> a comment. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetDisplayMode(System.Int32)">
            <summary> set display (whether it will be drawn) to on or off. </summary>
            <param name="displayMode"> 1 = on, 0 = off. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetOriginPoint(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> set the Plane's origin. </summary>
            <param name="srcPt">	   the Plane's new origin in world coordinates. </param>
            <param name="removeAssoc"> true = remove info to associated geometry. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetOriginPoint(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's origin. </summary>
            <param name="srcPt"> the Plane's new origin in world coordinates. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetDestinationMatrixAndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets new matrix, origin and transform after removing old transform. </summary>
            <param name="m33">	    The Plane's new 3x3 matrix. </param>
            <param name="originPt"> The Plane's new origin point in world coordinates. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's 3x3 matrix (m_33) </summary>
            <param name="m33"> the Plane's new 3x3 matrix. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetType(PlaneType)">
            <summary> Set the plane type. </summary>
            <param name="whichPlane"> PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE. </param>
            <returns> Return previous value. </returns>
        </member>
        <member name="M:Plane.SetRelativeWcsID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set Plane relative to a WCS. </summary>
            <param name="relativeWcsID"> a Plane ID (whatever the active WCS was at the time of setting) </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetColor(System.Int32)">
            <summary> set the Plane's color. </summary>
            <param name="newColor"> the Plane's color. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetWorkOffset(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set the Plane's work offset value. </summary>
            <param name="work_offset"> the Plane's work offset value. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetName(System.UInt32)">
            <summary> set the Plane's name. </summary>
            <param name="resourceID"> resource string table ID. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's name. </summary>
            <param name="name"> the Plane's name. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetSelectedEntities(PlanePoint!System.Runtime.CompilerServices.IsConst*)">
            <summary> set the Plane's points and selected entity info used in it's definition. </summary>
            <param name="planePoints"> array of point info. </param>
            <returns> returns size of array. </returns>
        </member>
        <member name="M:Plane.SetID(System.Int32!System.Runtime.CompilerServices.IsLong,Plane.Dependent!System.Runtime.CompilerServices.IsConst*)">
            <summary> set the unique ID of the plane. </summary>
            <param name="newID">	  the new ID. </param>
            <param name="pDependent"> The dependent parent plane. </param>
            <returns> return the previous value of the ID. </returns>
        </member>
        <member name="M:Plane.SetVersion(System.Int32)">
            <summary> set the version. </summary>
            <param name="version"> The version. </param>
            <returns> return the previous version value. </returns>
        </member>
        <member name="M:Plane.SetSelected(System.Boolean)">
            <summary> set selected flag. </summary>
            <param name="selected"> true = selected. </param>
            <returns> return previous value of selected flag. </returns>
        </member>
        <member name="M:Plane.SetCreationMethod(Plane.CreationMethod)">
            <summary> set the creation method. </summary>
            <param name="creationMethod"> int representing creation method (CreationMethod::ThreePoints, etc) </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetSectionView(System.Boolean)">
            <summary> Sets the value of m_SectionView. </summary>
            <param name="on"> true = used as a section view. </param>
            <returns> The previous value of m_SectionView. </returns>
        </member>
        <member name="M:Plane.CastNamedPlanePtr(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Casts the Plane pointer from a PlaneBasePtr to a Plane * if the class is PlaneClass::NamedPlane. </summary>
            <param name="pBase"> The base. </param>
            <returns> nullptr if it fails, else a valid Plane *. </returns>
        </member>
        <member name="M:Plane.CastNamedPlanePtr(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Casts the Plane pointer from a PlaneBasePtr to a Plane * if the class is PlaneClass::NamedPlane. </summary>
            <param name="pBase"> The base. </param>
            <returns> nullptr if it fails, else a valid Plane *. </returns>
        </member>
        <member name="M:Plane.GetDirty">
            <summary> return the value of the 'dirty-needs regeneration' flag. </summary>
            <returns> return the value of the 'dirty-needs regeneration' flag. </returns>
        </member>
        <member name="M:Plane.GetDependent">
            <summary> get the Plane's dependency info (RelativeType::Front, etc), transform data </summary>
            <returns> The relative type. </returns>
        </member>
        <member name="M:Plane.CoordinateDisplayMatch(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return true if coordinate display and mask match value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <param name="coordDisplayMask"> plane coordinate display filter (COORD_MASK_MILL, COORD_MASK_LATHE_X, COORD_MASK_LATHE_D or COORD_MASK_ALL) </param>
            <returns> return true if coordinate display and mask match value. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplayDescription(CoordinateDisplayType)">
            <summary> get the active coordinate display description. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> return description. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplayMask">
            <summary> Gets coordinate display mask from the coordinate display value of this. </summary>
            <returns> The coordinate display mask. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplayMask(CoordinateDisplayType)">
            <summary> return correct mask value for coordinate display value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <param name="coordinateDisplay"> The coordinate display. </param>
            <returns> The coordinate display mask. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplay">
            <summary> return coordinate display value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <returns> The coordinate display. </returns>
        </member>
        <member name="M:Plane.GetDisplayMode">
            <summary> return icon display mode (0=off, 1=on) </summary>
            <returns> The display mode. </returns>
        </member>
        <member name="M:Plane.GetOutputCommentToNci">
            <summary> return comment output to NCI value. </summary>
            <returns> return comment output to NCI value. </returns>
        </member>
        <member name="M:Plane.GetComment">
            <summary> get the Plane's comment string. </summary>
            <returns> returns the Plane's comment string. </returns>
        </member>
        <member name="M:Plane.GetEntityIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> collect all the entity ID's used to make the Plane. </summary>
            <param name="entIDs"> set of entity ID's. </param>
            <returns> returns # of ID's collected in set. </returns>
        </member>
        <member name="M:Plane.GetColor">
            <summary> get the Plane's color. </summary>
            <returns> returns the Plane's color. </returns>
        </member>
        <member name="M:Plane.GetWorkOffset">
            <summary> get the Plane's work offset value. </summary>
            <returns> returns the Plane's work offset value. </returns>
        </member>
        <member name="M:Plane.GetDescription(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get a description of the Plane into a CStringArray. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="accuracy">  # of places behind the decimal point. </param>
            <param name="strArray">  CStringArray to stuff description into. </param>
            <returns> return size of strArray. </returns>
        </member>
        <member name="M:Plane.GetViewNo(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns the view # of the plane's matrix. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <returns> The view number. </returns>
        </member>
        <member name="M:Plane.GetDescription(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get a description of the Plane. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <returns> return Plane description. </returns>
        </member>
        <member name="M:Plane.GetDescription(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,PlaneType,System.Int32)">
            <summary> get a description of the Plane. </summary>
            <param name="refPlanes">	 A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="machineType">   machine type (MILL_MACHINE, LATHE_MACHINE, etc) </param>
            <param name="whichPlane">    plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or
							 PlaneType::WCSPLANE) </param>
            <param name="includeOrigin"> (Optional) type of origin description (-1=origin in view coords, 0=no origin,
							 1=origin in world coords) </param>
            <returns> return Plane description. </returns>
        </member>
        <member name="M:Plane.GetTypeDescription(PlaneType)">
            <summary> get a description of the given Plane type. </summary>
            <param name="whichPlane"> the plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE, PlaneType::WCSPLANE) </param>
            <returns> return Plane type description. </returns>
        </member>
        <member name="M:Plane.GetTypeDescription">
            <summary> get a description of the Plane type. </summary>
            <returns> return Plane type description. </returns>
        </member>
        <member name="M:Plane.IntToType(System.Int32)">
            <summary> Convert an int to a PlaneType. </summary>
            <param name="planeType"> int type of the plane. </param>
            <returns> PlaneType. </returns>
        </member>
        <member name="M:Plane.TypeToInt(PlaneType)">
            <summary> Convert PlaneType to an int for use as an array index. </summary>
            <param name="planeType"> Type of the plane. </param>
            <returns> int. </returns>
        </member>
        <member name="M:Plane.GetTypes">
            <summary> collect the 4 Plane types. </summary>
            <returns> The 4 types in CPLANE, TPLANE, GPLANE and WCS order. </returns>
        </member>
        <member name="M:Plane.GetSelected">
            <summary> return selected flag. </summary>
            <returns> return selected flag. </returns>
        </member>
        <member name="M:Plane.GetGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get both the origin geometry and the geometry entities used to create the Plane. </summary>
            <param name="originGeometry">   array to copy the origin geometry into. </param>
            <param name="selectedGeometry"> array to copy the geometry into. </param>
            <param name="geomMap">		    entity ID-eptr map to look thru and find and extract entity from db with. </param>
            <param name="entsNotFound">	    ID's entities that could not be found in geomMap. </param>
            <returns> returns true if any geometry was collected. </returns>
        </member>
        <member name="M:Plane.GetSelectedGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the geometry entities used to create the Plane. </summary>
            <param name="selectedGeometry"> array to copy the geometry into. </param>
            <param name="geomMap">		    entity ID-eptr map to look thru and find and extract entity from db with. </param>
            <param name="entsNotFound">	    ID's entities that could not be found in geomMap. </param>
            <returns> returns # of entities copied into the array. </returns>
        </member>
        <member name="M:Plane.GetOriginGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the Plane's point' origin geometry entity. </summary>
            <param name="originGeometry"> array to copy the geometry into. </param>
            <param name="geomMap">		  entity ID-eptr map to look thru and find and extract entity from db with. </param>
            <param name="entsNotFound">   ID's entities that could not be found in geomMap. </param>
            <returns> returns true if entity successfully retrieved form db. </returns>
        </member>
        <member name="M:Plane.GetSelectedEntities(PlanePoint*)">
            <summary> get the Plane's points and selected entity info used in it's definition. </summary>
            <param name="planePoints"> array to stuff the Plane's points info into. </param>
            <returns> returns size of array. </returns>
        </member>
        <member name="M:Plane.GetMatchingPointFromDb(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> read thru the current db and return a P_ID entity that matches the given origin. </summary>
            <param name="wOriginPt"> origin in world coordinates. </param>
            <param name="ptEnt">	 The point ent. </param>
            <returns> return geometry entity ID if successful. </returns>
        </member>
        <member name="M:Plane.GetOriginInViewCoordinates(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the Plane's origin in the Plane's view coordinates. </summary>
            <param name="p3d"> p_3d type to copy origin into. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Plane.GetOriginInViewCoordinates">
            <summary> return the Plane's origin in the Plane's view coordinates. </summary>
            <returns> The origin view coordinates. </returns>
        </member>
        <member name="M:Plane.GetOriginInWorldCoordinates(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the Plane's origin in world coordinates. </summary>
            <param name="p3d"> p_3d type to copy origin into. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Plane.GetOriginInWorldCoordinates">
            <summary> return the Plane's origin in world coordinates. </summary>
            <returns> The origin world coordinates. </returns>
        </member>
        <member name="M:Plane.GetTransform">
            <summary> Gets the value in m_Transform. </summary>
            <returns> the value in m_Transform. </returns>
        </member>
        <member name="M:Plane.GetOriginPoint">
            <summary> get the Plane's origin. </summary>
            <returns> returns the Plane's origin. </returns>
        </member>
        <member name="M:Plane.GetType">
            <summary> return Plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </summary>
            <returns> return Plane type. </returns>
        </member>
        <member name="M:Plane.GetRelativeWcsID">
            <summary> return the Plane's relative-to-a-WCS-Plane-ID. </summary>
            <returns> return the Plane's relative-to-a-WCS-Plane-ID. </returns>
        </member>
        <member name="M:Plane.GetParentID">
            <summary> get the unique ID of the plane's parent plane. </summary>
            <returns> returns the plane's parent plane's ID. </returns>
        </member>
        <member name="M:Plane.GetCreationMethod">
            <summary> return the creation method. </summary>
            <returns> returns the creation method. </returns>
        </member>
        <member name="M:Plane.GetSectionView">
            <summary> Gets the value of m_SectionView. </summary>
            <returns> The value of m_SectionView. </returns>
        </member>
        <member name="M:Plane.IsEqual(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'thePlane' is equal. </summary>
            <param name="obj">	    the plane to compare to this. </param>
            <param name="errorStr"> The string to fill in with the name of the non-matching member variable. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Plane.op_LessThan(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to another plane. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Plane.op_Inequality(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an group_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Inequality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to a Matrix33 object. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an group_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Inequality(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_SubtractionAssignment(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtraction-assignment operator. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_SubtractionAssignment(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtraction-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_AdditionAssignment(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> addition-assignment operator. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_AdditionAssignment(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> addition-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_Assign(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Assignment operator. </summary>
            <param name="pPlane"> The plane base raw pointer. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Assignment operator. </summary>
            <param name="pPlane"> The plane base shared pointer. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.#ctor(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:Plane.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:Plane.InitReserved">
            <summary> zero out all member variables that determine if a Plane is 'reserved'. </summary>
        </member>
        <member name="M:Plane.Init">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:Plane.#ctor(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="pPlane"> The plane. </param>
        </member>
        <member name="M:Plane.#ctor(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Constructor. </summary>
            <param name="pPlane"> The plane. </param>
        </member>
        <member name="M:Plane.#ctor(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for a normal. </summary>
            <param name="vNormLine">  the normal. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for a normal. </summary>
            <param name="vNorm">	  the normal. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
parameteritized constructor for an entity array.  It figures out the appropriate constructor to
call based on the number of entities it contains.
</summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="entArray">   array of entities. </param>
            <param name="selPt">	  location from original selection. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for a single entity types that contain their own matrix or normal info (like arcs) </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="theEnt">	  single entity (arc, spine, nurb, surface, cross-hatch, etc. </param>
            <param name="selPt">	  location from original selection. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for 3 point entities. </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="ptX">		  point entity lying on the X axis. </param>
            <param name="ptY">		  point entity lying on the Y axis. </param>
            <param name="ptZ">		  point entity defining Z axis and origin. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or
						  PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to 1 for successful intersection, 2 for successful endpoint, or 0 for
						  failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for 2 line entities. </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="ent1">		  line entity defining X axis. </param>
            <param name="ent2">		  line entity defining Y axis. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or
						  PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="opView">	  Mastercam op_view type. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="groupView">  Mastercam group_view type. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewEnt"> Mastercam view entity. </param>
        </member>
        <member name="M:Plane.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="m33">		  3x3 matrix. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="m33">		  3x3 matrix. </param>
            <param name="origin">	  Plane origin in world coordinates. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Plane.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:Plane.Dependent.Validate">
            <summary> Validates this object, zero-out if not. </summary>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Dependent.IsValid">
            <summary> Query if this object is valid. </summary>
            <returns> True if valid, false if not. </returns>
        </member>
        <member name="M:Plane.Dependent.op_Inequality(Plane.Dependent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.Dependent.op_Equality(Plane.Dependent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.Dependent.#ctor(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane.RelativeType)">
            <summary> Constructor. </summary>
            <param name="parentID"> Identifier for the parent plane. </param>
            <param name="relType">  Type of the relative (RelativeType::Off, RelativeType::Front, etc.) </param>
        </member>
        <member name="M:Plane.Dependent.#ctor(Plane.RelativeType)">
            <summary> Constructor. </summary>
            <param name="relType"> Type of the relative. </param>
        </member>
        <member name="T:Plane.Dependent">
            <summary> Class containing plane dependency to another plane info. </summary>
        </member>
        <member name="T:Plane.ConstructorMethod">
            <summary> Constructor method (saved in m_ConstructorMethod). </summary>
        </member>
        <member name="T:Plane.COORD_DISP_MASK">
            <summary> used when searching for matching planes. </summary>
        </member>
        <member name="T:Plane.COMPARISON_REGEN_MASK">
            <summary> comparison values to determine whether a regeneration of the plane is required. </summary>
        </member>
        <member name="T:Plane.PLANE_VALIDATION_MODE">
            <summary> validation and regeneration modes. </summary>
        </member>
        <member name="T:Plane.AssocMask">
            <summary> Values that represent whether the origin and/or matrix is associated to geometry. </summary>
        </member>
        <member name="T:Plane.IconDrawMode">
            <summary> Plane icon drawing modes. </summary>
        </member>
        <member name="T:Plane.RelativeType">
            <summary> relative plane types. </summary>
        </member>
        <member name="T:Plane.CreationMethod">
            <summary> Plane creation methods. </summary>
        </member>
        <member name="M:SystemPlanes.SetQuickCplaneID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the value of m_QuickCplaneID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> Previous value of m_QuickCplaneID. </returns>
        </member>
        <member name="M:SystemPlanes.GetQuickCplaneID">
            <summary> Gets the value of m_QuickCplaneID. </summary>
            <returns> the value of m_QuickCplaneID. </returns>
        </member>
        <member name="M:SystemPlanes.GetStatusBarPlaneLabel(System.Int32)">
            <summary> Gets status bar plane label from m_StatusBarPlaneLabels using an int. </summary>
            <param name="planeType"> Type of plane in int form. </param>
            <returns> The status bar plane label. </returns>
        </member>
        <member name="M:SystemPlanes.GetStatusBarPlaneLabel(PlaneType)">
            <summary> Gets status bar plane label from m_StatusBarPlaneLabels. </summary>
            <param name="planeType"> Type of plane. </param>
            <returns> The status bar plane label. </returns>
        </member>
        <member name="M:SystemPlanes.IsLatheCoordinateDisplay(CoordinateDisplayType)">
            <summary> Query if 'coordinateDisplay' is lathe coordinate display. </summary>
            <param name="coordinateDisplay"> The coordinate display. </param>
            <returns> true if lathe coordinate display, false if not. </returns>
        </member>
        <member name="M:SystemPlanes.GetViewportInfo">
            <summary> Gets viewport information. </summary>
            <returns> The viewport information. </returns>
        </member>
        <member name="M:SystemPlanes.SetViewportInfo(ViewportInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets viewport information. </summary>
            <param name="vpInfo"> Information describing the vp. </param>
            <returns> Returns previous value </returns>
        </member>
        <member name="M:SystemPlanes.GetLock(PlaneType)">
            <summary> Gets the lock status for the given plane </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <returns> The lock. </returns>
        </member>
        <member name="M:SystemPlanes.SetLock(PlaneType,SystemPlanes.PLANE_LOCK!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a lock on the given plane </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="lock">		  LOCK_ALL_OFF, LOCK_ORIGIN	or LOCK_MATRIX. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetPrevious(PlaneType)">
            <summary> Gets the previous matrix/origin pair. </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <returns> The previous matrix/origin pair. </returns>
        </member>
        <member name="M:SystemPlanes.SetPrevious(PlaneType,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set m_Previous[] matrix/origin pairs. </summary>
            <param name="whichPlane">  CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="m33">		   The matrix to set. </param>
            <param name="worldOrigin"> The origin in world coordinates. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetPlaneID(PlaneType)">
            <summary> Gets plane identifier. </summary>
            <param name="whichPlane"> CPLANE, TPLANE, GPLANE or WCSPLANE </param>
            <returns> The plane ID for the requested active plane. </returns>
        </member>
        <member name="M:SystemPlanes.SetPlaneID(PlaneType,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Set m_PlaneIDs[]. </summary>
            <param name="whichPlane"> The which plane. </param>
            <param name="planeID">    plane ID to set. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetUnnamedOrigin">
            <summary> return m_UnnamedOrigin. </summary>
            <returns> const reference to m_UnnamedOrigin. </returns>
        </member>
        <member name="M:SystemPlanes.SetUnnamedOrigin(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set m_UnnamedOrigin. </summary>
            <param name="origin"> origin to set. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetUnnamedM33">
            <summary> return a Matrix33. </summary>
            <returns> Copy of m_UnnamedM33. </returns>
        </member>
        <member name="M:SystemPlanes.SetUnnamedM33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set m_UnnamedM33. </summary>
            <param name="m33"> matrix to set. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="T:SystemPlanes.PLANE_LOCK">
            <summary> Values that represent PLANE_LOCK. </summary>
        </member>
        <member name="M:SystemPlanes.InitStatusBarPlaneLabels">
            <summary> Initialises the status bar plane labels in m_StatusBarPlaneLabels. </summary>
            <returns> size of m_StatusBarPlaneLabels. </returns>
        </member>
        <member name="M:SystemPlanes.Init(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Zero out member variables. </summary>
            <param name="defaultPlaneID"> (Optional) Initialize 4 system planes to this valid ID, or -1 to preserve the follow-rules. </param>
        </member>
        <member name="M:SystemPlanes.op_Assign(SystemPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:SystemPlanes.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:SystemPlanes.#ctor(SystemPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:SystemPlanes.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:SystemPlanes.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:SystemPlanes">
            <summary> SystemPlanes class contains current system construction, tool, WCS and graphics planes</summary>
        </member>
        <member name="M:ViewportInfo.SetCurrentGraphicsViewInfo">
            <summary> Sets current graphics view information. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ViewportInfo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ViewportInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ViewportInfo">
            <summary> Information about the active viewport. </summary>
        </member>
        <member name="D:PlaneBasePtr">
            <summary> Defines an alias representing the plane base class pointer. </summary>
        </member>
        <member name="M:PlaneBase.DeserializeStringToWide(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert an MBCS string to a wide string. </summary>
            <param name="archive"> The archive. </param>
            <param name="target">  If non-null, the wide character buffer. </param>
            <returns> The number of characters converted. </returns>
        </member>
        <member name="M:PlaneBase.SetMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's 3x3 matrix (m_33) </summary>
            <param name="m33"> the Plane's new 3x3 matrix. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:PlaneBase.ValidPlaneClass(PlaneClass,System.Boolean)">
            <summary> Validate plane class. </summary>
            <param name="planeClass"> The plane class. </param>
            <param name="warn">		  true for warning. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:PlaneBase.GetTemporary">
            <summary> Return value of m_Temporary. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlaneBase.SetTemporary(System.Boolean)">
            <summary> Set m_Temporary. </summary>
            <param name="temporary"> if true, temporary plane will not be listed in Planes Manager and will be deleted on file/save. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetSystemMatrixName(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Builds and returns system matrix name. </summary>
            <param name="m_ID"> The identifier. </param>
            <returns> The system matrix name. </returns>
        </member>
        <member name="M:PlaneBase.CorrectName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Enforce naming rules for this Plane's name. </summary>
            <param name="theName"> The name to check and alter. </param>
            <returns> return true if name has been altered. </returns>
        </member>
        <member name="M:PlaneBase.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's name. </summary>
            <param name="name"> the Plane's name. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:PlaneBase.SetLock(System.Boolean)">
            <summary> set Plane lock's state. </summary>
            <param name="lock"> true to lock, false to unlock. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneBase.SetReserved(System.Boolean)">
            <summary> set Plane as reserved (uneditable and unmovable) </summary>
            <param name="reserved"> true = reserved. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetLock">
            <summary> return Plane lock's state. </summary>
            <returns> return Plane lock's state. </returns>
        </member>
        <member name="M:PlaneBase.GetTol">
            <summary> return Plane tolerance value. </summary>
            <returns> The tolerance. </returns>
        </member>
        <member name="M:PlaneBase.GetName">
            <summary> get the Plane's name. </summary>
            <returns> returns the Plane's name. </returns>
        </member>
        <member name="M:PlaneBase.GetReserved">
            <summary> return true if the the Plane is a reserved Plane. </summary>
            <returns> return true if the the Plane is a reserved Plane. </returns>
        </member>
        <member name="M:PlaneBase.GetMatrix33(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the Plane's 3x3 matrix (m_33) </summary>
            <param name="m33"> 3x3 matrix to fill in. </param>
        </member>
        <member name="M:PlaneBase.GetMatrix33">
            <summary> get the Plane's 3x3 matrix (m_33) </summary>
            <returns> returns the Plane's 3x3 matrix. </returns>
        </member>
        <member name="M:PlaneBase.SetID(PlaneID)">
            <summary> set the unique ID of the plane. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> returns the previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetLongID">
            <summary> get the value of m_ID's m_ID. </summary>
            <returns> returns the value of m_ID's m_ID. </returns>
        </member>
        <member name="M:PlaneBase.GetShortID">
            <summary> get the value of m_ID's m_ID. </summary>
            <returns> returns the value of m_ID's m_ID. </returns>
        </member>
        <member name="M:PlaneBase.GetID">
            <summary> get the unique ID of the plane. </summary>
            <returns> returns the plane ID. </returns>
        </member>
        <member name="M:PlaneBase.SetGUID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets value of m_GUID. </summary>
            <param name="theGUID"> New value. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetGUID">
            <summary> Return value of m_GUID. </summary>
            <returns> Return value of m_GUID. </returns>
        </member>
        <member name="M:PlaneBase.SetVersion(System.Int32)">
            <summary> set the version. </summary>
            <param name="version"> The version. </param>
            <returns> return the previous version value. </returns>
        </member>
        <member name="M:PlaneBase.GetVersion">
            <summary> return the version. </summary>
            <returns> return the version. </returns>
        </member>
        <member name="M:PlaneBase.IsEqual(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj">	    The object. </param>
            <param name="errorStr"> The string to fill in with the name of the non-matching member variable. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:PlaneBase.op_Subscript(System.Int32)">
            <summary> Return reference to X, Y or Z component of m_33. </summary>
            <param name="XYorZ"> The X, Y or Z axis (0, 1 or 2). </param>
            <returns> const reference to X, Y or Z axis. </returns>
        </member>
        <member name="M:PlaneBase.op_LessThan(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to another plane. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlaneBase.op_Equality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to a Matrix33 object. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Equality(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Inequality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Equality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Inequality(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Assign(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneBase.op_Assign(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneBase.op_Assign(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneBase.SetClass(PlaneClass)">
            <summary> Sets the class. </summary>
            <param name="planeClass"> The plane class. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetClass">
            <summary> Gets the class. </summary>
            <returns> The class. </returns>
        </member>
        <member name="M:PlaneBase.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:PlaneBase.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:PlaneBase.#ctor(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:PlaneBase.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="m33">	   3x3 matrix. </param>
            <param name="planeID"> Identifier for the plane. </param>
            <param name="name">    The name. </param>
        </member>
        <member name="M:PlaneBase.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="m33"> 3x3 matrix. </param>
        </member>
        <member name="M:PlaneBase.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:PlaneBase">
            <summary> A macro that defines plane base version. </summary>
            <summary> Mastercam PlaneBase definition</summary>
        </member>
        <member name="M:PlaneID.GetDescription">
            <summary> Gets the description. </summary>
            <returns> The description. </returns>
        </member>
        <member name="M:PlaneID.IsValid(System.Boolean)">
            <summary> Query if this object is valid. </summary>
            <param name="warn"> true to warn. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:PlaneID.SetID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets an identifier. </summary>
            <param name="theID"> Identifier for the. </param>
            <returns> . </returns>
        </member>
        <member name="M:PlaneID.GetShortID">
            <summary> Gets the identifier. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneID.GetLongID">
            <summary> Gets the identifier. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneID.SetClass(PlaneClass)">
            <summary> Sets the class type. </summary>
            <param name="planeClass"> the class. </param>
            <returns> previous value. </returns>
        </member>
        <member name="M:PlaneID.GetClass">
            <summary> Gets the class type. </summary>
            <returns> The class type. </returns>
        </member>
        <member name="M:PlaneID.SetGUID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the GUID identifier. </summary>
            <param name="theGUID"> Unique identifier. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneID.GetGUID">
            <summary> Gets the GUID identifier. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneID.GetVersion">
            <summary> Gets the version. </summary>
            <returns> The version. </returns>
        </member>
        <member name="M:PlaneID.op_Inequality(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlaneID.op_Equality(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneID.op_GreaterThan(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlaneID.op_LessThan(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlaneID.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Assignment operator for a long.  Will create a NamedPlane type ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneID.op_Assign(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneID.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:PlaneID.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:PlaneID.#ctor(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewEnt"> A view entity. </param>
        </member>
        <member name="M:PlaneID.#ctor(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="grpView"> A group view. </param>
        </member>
        <member name="M:PlaneID.#ctor(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="opView"> An operation view. </param>
        </member>
        <member name="M:PlaneID.#ctor(ReservedPlanes.TypeID,PlaneClass)">
            <param name="typeID">	  Identifier for the plane. </param>
            <param name="planeClass"> (Optional) The plane class. </param>
        </member>
        <member name="M:PlaneID.#ctor(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:PlaneID.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,PlaneClass)">
            <summary> Constructor. </summary>
            <param name="planeID">    Identifier for the plane. </param>
            <param name="planeClass"> the plane class type. </param>
        </member>
        <member name="M:PlaneID.#ctor(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:PlaneID.#ctor(PlaneClass)">
            <summary> Default constructor. </summary>
            <param name="planeClass"> (Optional) the plane class. </param>
        </member>
        <member name="T:PlaneID">
            <summary> A macro that defines a null plane ID. </summary>
            <param name="PlaneID (PlaneClass::Undefined)"> The plane identifier ( plane class undefined) </param>
            <summary> Plane ID map key. </summary>
        </member>
        <member name="M:ScratchViewNo.op_Assign(ScratchViewType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ScratchViewNo.op_GreaterThanOrEqual(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_GreaterThan(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_LessThanOrEqual(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_LessThan(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_Inequality(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ScratchViewNo.op_Equality(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The view no. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ScratchViewNo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ScratchViewNo.#ctor(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:ScratchViewNo.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ScratchViewNo.#ctor(ScratchViewType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ScratchViewNo.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="M:ViewNo.IsValid">
            <summary> Query if this object is valid. </summary>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:ViewNo.IsViewportView">
            <summary> Query if this object is viewport view. </summary>
            <returns> true if scratch view, false if not. </returns>
        </member>
        <member name="M:ViewNo.IsScratchView">
            <summary> Query if this object is scratch view. </summary>
            <returns> true if scratch view, false if not. </returns>
        </member>
        <member name="M:ViewNo.GetShortViewNo">
            <summary> Gets short view no. </summary>
            <returns> The short view no. </returns>
        </member>
        <member name="M:ViewNo.GetViewNo">
            <summary> Gets view no. </summary>
            <returns> The view no. </returns>
        </member>
        <member name="M:ViewNo.op_GreaterThanOrEqual(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ViewNo.op_GreaterThan(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:ViewNo.op_LessThanOrEqual(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ViewNo.op_LessThan(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:ViewNo.op_Inequality(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Inequality(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Inequality operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Equality(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The view no. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Equality(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Equality operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Assignment operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ViewNo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ViewNo.#ctor(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:ViewNo.#ctor(ScratchViewType)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor(System.Int16)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor(System.Int32)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:ViewNo">
            <summary> Class to be used as view number parameter instead of a short. </summary>
        </member>
        <member name="T:ScratchViewType">
            <summary> Values that represent the 'scratch view' types. </summary>
        </member>
        <member name="M:CompareNci.TokenizeStrings(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tokenize the NCI strings. </summary>
            <param name="delimiter"> The delimiter. </param>
            <param name="str1">		 The first string. </param>
            <param name="str2">		 The second string. </param>
            <param name="array1">    The first array. </param>
            <param name="array2">    The second array. </param>
            <returns> An INT_PTR. </returns>
        </member>
        <member name="M:CompareNci.MakeSameLength(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes both NCI strings the same length. </summary>
            <param name="str1"> The first NCI string. </param>
            <param name="str2"> The second NCI string. </param>
        </member>
        <member name="M:CompareNci.MarkStart(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Mark start of the NCI lines. </summary>
            <param name="str1">  The first NCI string. </param>
            <param name="indx1"> The first indx. </param>
            <param name="str2">  The second NCI string. </param>
            <param name="indx2"> The second indx. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CompareNci.MarkDifferences(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Mark the differences in the NCI lines as compared to one another. </summary>
            <param name="str1"> The first NCI string. </param>
            <param name="str2"> The second NCI string. </param>
            <returns> An number of differences marked. </returns>
        </member>
        <member name="M:CompareNci.FormatLine(nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Format the NCI line. </summary>
            <param name="nciLine"> The binary NCI line. </param>
            <param name="nciStr">  The string to format. </param>
        </member>
        <member name="M:CompareNci.Run(CompareNci.RunPrm*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compares NCI of the 3 states to the given nci accuracy. </summary>
            <param name="prm"> The comparison parameters. </param>
        </member>
        <member name="M:CompareNci.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CompareNci.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:CompareNci.RunPrm.#ctor(System.Int16,CStringArray*,System.Boolean,CInterrogateMastercamFile*,CInterrogateMastercamFile*)">
            <summary> Constructor. </summary>
            <param name="nciAccuracy"> (Optional) the nci accuracy. </param>
            <param name="pTrailer">    (Optional) If non-null, list of strings for the report trailer. </param>
            <param name="modeComp2">   (Optional) comparison mode, false = select files, true = compare NCI in pComp1 to pComp2. </param>
            <param name="pComp1">	   (Optional) If non-null, the NCI to compare with pComp2. </param>
            <param name="pComp2">	   (Optional) If non-null, the NCI to compare with pComp1. </param>
        </member>
        <member name="T:CompareNci.RunPrm">
            <summary> Comparison parameters. </summary>
        </member>
        <member name="T:CompareNci">
            <summary> Utility class to compare NCI of previous version files in 3 states:
		  1 - from disk before file is read in  
		  2 - from disk immediately after file is read in  
		  3 - after regeneration </summary>
        </member>
        <member name="M:CStringArrayToFile(CStringArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Dump the contents of a CStringArray to a file and display in the default editor. </summary>
            <param name="strArray">	    The array to dump. </param>
            <param name="addTimeOfDay"> True to add time of day string on first line. </param>
            <param name="fname">	    [in,out] Filename of the file. </param>
            <param name="editFile">	    true to edit file. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetEptrsEmbeddedInAssocEnt(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collects pointers to DB_LIST_ENT_PTR types embedded in an operation or toolpath entity. </summary>
            <param name="theEnt">   the entity to look in. </param>
            <returns> Size of vecEptrs. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetEptrs">
            <summary> Builds a vector of all the eptrs in this. </summary>
            <returns> A shared ptr to a vector of eptrs in this. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetBnciCenterPoint(p_3d)">
            <summary> Setter for rectangle center </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBnciCenterPoint">
            <summary> Getter for rectangle center </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetBnciUpperRight(p_3d)">
            <summary> Setter for rectangle's upper right corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBnciUpperRight">
            <summary> Getter for rectangle's upper right corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetBnciLowerLeft(p_3d)">
            <summary> Setter for rectangle's lower left corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBnciLowerLeft">
            <summary> Getter for rectangle's lower left corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskNciGcodes(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for NCI gcodes (NCI_RAPID, NCI_CCW, etc) mask to collect from the source file  </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskNciGcodes">
            <summary> Getter for NCI gcodes (NCI_RAPID, NCI_CCW, etc) mask to collect from the source file  </summary>
            <returns> Returns IDArray </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskExcludeOpIDs(IDArray)">
            <summary> Setter for toolpath operation ID mask to exclude from the source file </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskExcludeOpIDs">
            <summary> Getter for toolpath operation ID mask to exclude from the source file </summary>
            <returns> Returns IDarray </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskIncludeOpIDs(IDArray)">
            <summary> Setter for toolpath operation ID mask to collect from the source file </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskIncludeOpIDs">
            <summary> Getter for toolpath operation ID mask to collect from the source file </summary>
            <returns> Returns IDArray </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskTpIDs(VArray&lt;TP_ENT_TYPE&gt;)">
            <summary> Setter for toolpath entity type (TP_CHN, TP_OPID, etc) mask to collect from the source file </summary>
            <param name="entitytypes"> VArray of TP_ENT_TYPEs </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskTpIDs">
            <summary> Getter for toolpath entity type (TP_CHN, TP_OPID, etc) mask to collect from the source file </summary>
            <returns> Returns VArray of TP_ENT_TYPEs </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskNci(System.Boolean)">
            <summary> Setter for toolpath operation's NCI mask. True to collect toolpath operation's NCI from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskNci">
            <summary> Getter for toolpath operation's NCI mask. True to collect toolpath operation's NCI from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskTpEnts(System.Boolean)">
            <summary> Setter for toolpath entities. True to collect toolpath entities from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskTpEnts">
            <summary> Getter for toolpath entities. True to collect toolpath entities from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskOperations(System.Boolean)">
            <summary> Setter for operations mask. True to collect toolpath operations from the source file  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskOperations">
            <summary> Getter for operations mask. True to collect toolpath operations from the source file  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskGroups(System.Boolean)">
            <summary> Setter for groups mask. True to collect machine and toolpath groups from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskGroups">
            <summary> Getter for groups mask. True to collect machine and toolpath groups from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskTools(System.Boolean)">
            <summary> Setter for tools mask. True to collect tools from the source file.  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskTools">
            <summary> Getter for tools mask. True to collect tools from the source file.  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskPlanes(System.Boolean)">
            <summary> Setter for planes mask. True to collect planes from the source file  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskPlanes">
            <summary> Getter for planes mask. True to collect planes from the source file  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskGeometry(System.Boolean)">
            <summary> Setter for true to collect geometry referenced by toolpath operations from source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMaskGeometry">
            <summary> Getter for true to collect geometry referenced by toolpath operations from source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetpToolMgr(std.shared_ptr&lt;Cnc.Tool.TlMgr&gt;)">
            <summary> Setter for Tool Manager </summary>
            <param name="toolmgr"> Pointer to the tool manager. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetpToolMgr">
            <summary> Getter for Tool Manager </summary>
            <returns> Returns ptr to Tool Manager. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetNciFpos(System.Int64)">
            <summary> Setter for the start of bnci fpos of the source file </summary>
            <param name="fpos"> The bnci fpos for the source file </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetNciFpos">
            <summary> Getter for the start of bnci fpos of the source file </summary>
            <returns> Returns long. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMinorVersion(System.Int32)">
            <summary> Sets minor file version of the source file </summary>
            <param name="version"> The major version as an int </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMinorVersion">
            <summary> Gets minor file version of the source file </summary>
            <returns> Returns int. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMajorVersion(System.Int32)">
            <summary> Sets major file version of the source file </summary>
            <param name="version"> The major version as an int </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMajorVersion">
            <summary> Gets major file version of the source file </summary>
            <returns> Returns int. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetpPlanes(System.Void*)">
            <summary> Setter for pointer to copy of MastercamPlanes from the source file </summary>
            <param name="planes"> void*, planes construct </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetpPlanes">
            <summary> Getter for pointer to copy of MastercamPlanes from the source file </summary>
            <returns> Returns void*</returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetOrphanedTpEnts(CFposEntArray)">
            <summary> Setter for array of toolpath entities that have no parent operation </summary>
            <param name="orphanedents"> The referenced array of toolpath entities with no parent operation </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOrphanedTpEnts">
            <summary> Getter for array of toolpath entities that have no parent operation </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetTools(CFposEntArray)">
            <summary>  Setter for array of tool copies from the source file </summary>
            <param name="tools"> The referenced array of tool copies </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetTools">
            <summary>  Getter for array of tool copies from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetGeometry(CFposEntArray)">
            <summary> Setter for array of geometry entity copies referenced by operations from the source file </summary>
            <param name="geometry"> The referenced array of geometry entities </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetGeometry">
            <summary> Getter for array of geometry entity copies referenced by operations from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetOperations(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;CLibraryOperation&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;&gt;)">
            <summary> Setter for Map of operation copies from the source file </summary>
            <param name="operations"> The reference to the OpMap </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOperations">
            <summary> Getter for Map of operation copies from the source file </summary>
            <returns> Returns OpMap </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetGroups(VArray&lt;std.shared_ptr&lt;op_group&gt;&gt;)">
            <summary> Setter for (Groups) vector of machine and toolpath group copies from the source file </summary>
            <param name="groupvector"> The reference to VArray of groups </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetGroups">
            <summary> Getter for (Groups) vector of machine and toolpath group copies from the source file </summary>
            <returns> Returns VArray of op_group pointers </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestNciOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading NCI into an operation. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading into m_Operations. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestTpEnt(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tp_net against masks before loading into m_Operations.m_TpEnts. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestOperation(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation against masks before loading into m_Operations. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestTool(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tool against masks before loading into m_Tools. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestViewEnt(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests view_ent against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestPlanes(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests planes against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestGeometry(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests geometry against masks before loading into m_Geometry. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.ValidOperationIterator(std._Tree_const_iterator&lt;std._Tree_val&lt;std._Tree_simple_types&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validate operation iterator from m_Operations (since m_Operations is public). </summary>
            <param name="iter"> The iterator. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.InitBnciExtents">
            <summary> Initializes the bnci extents. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.DependentOperationsExist">
            <summary> Return true if dependent operation types exist in m_Operaitons. </summary>
            <returns> Return true if dependent operation types exist in m_Operaitons. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetLoadCode">
            <summary> Gets const reference to m_LoadCode. </summary>
            <returns> const reference to m_LoadCode. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SwapEptrs(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Swap the entity ptrs. </summary>
            <param name="mapGeom">	    The map geometry entity ID, pair of old eptr and new eptr. </param>
            <param name="updateDB">	    true to rewrite the entities to the current database. </param>
            <param name="markOpsDirty"> true to mark affected toolpath operations dirty. </param>
            <returns> Number of substitutions that occurred. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.RemoveOperation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes the operation described by opID from the map m_Operations. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.ReplaceOrAddOperation(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds (and replaces if needed) an operation to the map m_Operations. </summary>
            <param name="filePos"> The file position in a external file, -1 for the current db. </param>
            <param name="opEnt">   The operation entity. </param>
            <returns> An OpMap::iterator where the operation was added. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOpIDsInOpMgrOrder">
            <summary> Returns a vector of all the operations' IDs in order of the global Operation Manager.</summary>
            <returns> A vector of all the dependent operations' IDs.</returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOperationPtrsByOpMgrOrder(std.vector&lt;std.shared_ptr&lt;CLibraryOperation&gt;,std.allocator&lt;std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets operation ptrs by operation manager order. </summary>
            <param name="opArray"> Array of operation map ptrs. </param>
            <returns> size of opArray. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetRootGroup(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the root group of a subgroup.ge </summary>
            <param name="groupID"> Identifier for the group. </param>
            <returns> Iterator to the root group in m_Groups. </returns>
        </member>
        <member name="D:CInterrogateMastercamFile.OpMap">
            <summary> Defines an alias representing the operation map (operation ID, copy of operation). </summary>
        </member>
        <member name="D:CInterrogateMastercamFile.OpMapPtr">
            <summary> Defines an alias representing the operation map pointer. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.GetFileName">
            <summary> Gets the file name of what's loaded. </summary>
            <returns> The file name. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskNciOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskNciOpcodes to filter which operation's NCI is loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskNciOpcodes array after setting. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskOpcodes to filter which operations are loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskOpcodes array after setting. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetDirtyOperationIDs(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets the dirty operation IDs. </summary>
            <param name="opIDs"> The dirty operation IDs. </param>
            <param name="dirty"> (Optional) the dirty flag to match. </param>
            <returns> The size of opIDs. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SortOperationIDsByOpMgrOrder(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sort operation IDs in opIDS by operation manager order. </summary>
            <param name="opIDs"> The operation IDs to sort. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetSelectedOperationIDs(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets selected operation IDs. </summary>
            <param name="opIDs">    The selected operation IDs. </param>
            <param name="selectON"> (Optional) the select flag to match. </param>
            <returns> The size of opIDs. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetGeometryEntityPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets geometry entity pointer. </summary>
            <param name="entID"> Identifier for the ent. </param>
            <returns> The geometry entity pointer. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the operation pointer by identifier. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetLibraryOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets library operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the library operation pointer by identifier. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.IsExternalFile">
            <summary> Query if this object was loaded from an external file. </summary>
            <returns> true if external file, false if not. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.IsLoaded">
            <summary> Query if this object is loaded (returns value of m_Loaded). </summary>
            <returns> true if loaded, false if not. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.CalcBnciExtents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Calculates the extents of the bnci in this object. </summary>
            <param name="relWcs"> (Optional) true to relative wcs. </param>
            <param name="adjTOS"> (Optional) true to adjust to TOS. </param>
            <param name="deleteToolRadius"> (Optional) true to delete the tool radius from "Z". </param>
            <param name="includeEndOfRapids"> (Optional) true to include the end of rapids in extents calc. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForPlanes(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with plane info from an external Mastercam file. </summary>
            <param name="mcxFileName"> Mastercam file name. </param>
            <returns> for planes. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForPlanes">
            <summary> Preset masks and loads this object with plane info from the current db. </summary>
            <returns> Number of planes loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with operations and their NCI from and external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the external Mastercam file. </param>
            <param name="gcodeMask">   List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci(System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*,IDArray!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object with operations and their NCI from the current db from just the
		  operations whose IDs match ones in the given pIncludeOpIDs parameter and not ones whose ID's match
		  ones in the given pExcludeOpIDs parameter. </summary>
            <param name="useCache">		 true = attempt to use NCI cache in global Planes. </param>
            <param name="gcodeMask">	 List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <param name="pIncludeOpIDs"> (Optional) the include operation ids. </param>
            <param name="pExcludeOpIDs"> (Optional) the exclude operation ids. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with operations and their NCI from an external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci">
            <summary> Preset masks and loads this object with operations and their NCI from the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForWorkOffsetInfo(System.Boolean,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with work offset information from just the operations whose IDs match
		  ones in the given includeOpIDs parameter and not ones whose ID's match ones in the given excludeOpIDs
		  parameter. </summary>
            <param name="useCache">	    true = use NCI cache, false = read from disk. </param>
            <param name="includeOpIDs"> The operations to include. </param>
            <param name="excludeOpIDs"> The operations to exclude. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForSingleOperation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object for just the 1 operation from the current db. </summary>
            <param name="opID">		  Identifier for the operation. </param>
            <param name="includeNci"> true to include NCI, false to exclude NCI. </param>
            <param name="pGcodeMask"> (Optional) if (includeNci == true), ptr to NCI gcode mask, nullptr to read in all. </param>
            <returns> pointer to operation, null if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities from an external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <param name="opIDs">	   The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntityCount(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities (no associated geometry or planes) from the current db. </summary>
            <param name="opIDs"> The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose opcodes match ones 
		  in the given opCodeMask parameter and their toolpath entities from the current db. </summary>
            <param name="opCodeMask"> Only collect operations with these opcodes. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities and associated geometry from the current db. </summary>
            <param name="opIDs"> The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just operations and toolpath entities from an external Mastercam
		  file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities">
            <summary> Preset masks and loads this object with just operations and toolpath entities 
		  from the current db.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForDependencies(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities from an
		  external Mastercam file. TP_OPID type toolpath entities are typically used in transform and nesting
		  operations. </summary>
            <param name="mcxFileName"> Mastercam file name. </param>
            <returns> for dependencies. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForDependencies">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities 
		  from the current db. TP_OPID type toolpath entities are typically used in transform
		  and nesting operations.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadJustOperations(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadJustOperations">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.Load">
            <summary> Loads this object using the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.Load(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads this object using the given mcx file name. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.InitMasks">
            <summary> Initializes the masks. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.EmptyPlanes">
            <summary> Empty the m_pPlanes object. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CInterrogateMastercamFile">
            <summary> Utility class to collect entities and info of the current db or an external Mastercam file. </summary>
        </member>
        <member name="M:InterrogateMCFileFactory.GetInterrogateMCFile">
            <summary> Creates pointer to initialized InterrogateMCFile object. </summary>
            <returns> Returns pointer to IInterrogateMastercamFile. </returns>
        </member>
        <member name="M:InterrogateMCFileFactory.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:InterrogateMCFileFactory.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:InterrogateMCFileFactory">
            <summary> Creates collection of entities and info of current db or external Mastercam files. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.GetEptrs">
            <summary> Builds a vector of all the eptrs in this. </summary>
            <returns> A shared ptr to a map of eptrs and all their matching locations and entity ID #'s in this. </returns>
        </member>
        <member name="D:IInterrogateMastercamFile.MapEptrInfo">
            <summary> Defines an alias representing the map eptrs.
eptr, spVector-&gt;{ ptr to matching eptr, entity ID }	</summary>
        </member>
        <member name="M:IInterrogateMastercamFile.MapInfo.#ctor(DB_LIST_ENT**,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="pEptr">		    pointer to an eptr in the entity. </param>
            <param name="ownerEntityID">    ent.ent_idn of entity that eptr resides in. </param>
            <param name="selectedEntityID"> ent.ent_idn of entity that m_pEptr points to. </param>
        </member>
        <member name="T:IInterrogateMastercamFile.MapInfo">
            <summary> Entity information for MapEptrs </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.SetBnciCenterPoint(p_3d)">
            <summary> Setter for rectangle center </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBnciCenterPoint">
            <summary> Getter for rectangle center </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetBnciUpperRight(p_3d)">
            <summary> Setter for rectangle's upper right corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBnciUpperRight">
            <summary> Getter for rectangle's upper right corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetBnciLowerLeft(p_3d)">
            <summary> Setter for rectangle's lower left corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBnciLowerLeft">
            <summary> Getter for rectangle's lower left corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskNciGcodes(std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for NCI gcodes (NCI_RAPID, NCI_CCW, etc) mask to collect from the source file  </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskNciGcodes">
            <summary> Getter for NCI gcodes (NCI_RAPID, NCI_CCW, etc) mask to collect from the source file  </summary>
            <returns> Returns IDArray </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskExcludeOpIDs(IDArray)">
            <summary> Setter for toolpath operation ID mask to exclude from the source file </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskExcludeOpIDs">
            <summary> Getter for toolpath operation ID mask to exclude from the source file </summary>
            <returns> Returns IDarray </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskIncludeOpIDs(IDArray)">
            <summary> Setter for toolpath operation ID mask to collect from the source file </summary>
            <param name="idmask"> IDArray of mask Ids </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskIncludeOpIDs">
            <summary> Getter for toolpath operation ID mask to collect from the source file </summary>
            <returns> Returns IDArray </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskTpIDs(VArray&lt;TP_ENT_TYPE&gt;)">
            <summary> Setter for toolpath entity type (TP_CHN, TP_OPID, etc) mask to collect from the source file </summary>
            <param name="entitytypes"> VArray of TP_ENT_TYPEs </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskTpIDs">
            <summary> Getter for toolpath entity type (TP_CHN, TP_OPID, etc) mask to collect from the source file </summary>
            <returns> Returns VArray of TP_ENT_TYPEs </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskNci(System.Boolean)">
            <summary> Setter for toolpath operation's NCI mask. True to collect toolpath operation's NCI from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskNci">
            <summary> Getter for toolpath operation's NCI mask. True to collect toolpath operation's NCI from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskTpEnts(System.Boolean)">
            <summary> Setter for toolpath entities. True to collect toolpath entities from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskTpEnts">
            <summary> Getter for toolpath entities. True to collect toolpath entities from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskOperations(System.Boolean)">
            <summary> Setter for operations mask. True to collect toolpath operations from the source file  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskOperations">
            <summary> Getter for operations mask. True to collect toolpath operations from the source file  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskGroups(System.Boolean)">
            <summary> Setter for groups mask. True to collect machine and toolpath groups from the source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskGroups">
            <summary> Getter for groups mask. True to collect machine and toolpath groups from the source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskTools(System.Boolean)">
            <summary> Setter for tools mask. True to collect tools from the source file.  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskTools">
            <summary> Getter for tools mask. True to collect tools from the source file.  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskPlanes(System.Boolean)">
            <summary> Setter for planes mask. True to collect planes from the source file  </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskPlanes">
            <summary> Getter for planes mask. True to collect planes from the source file  </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskGeometry(System.Boolean)">
            <summary> Setter for true to collect geometry referenced by toolpath operations from source file </summary>
            <param name="maskstatus"> True for 'on', False for 'off'. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMaskGeometry">
            <summary> Getter for true to collect geometry referenced by toolpath operations from source file </summary>
            <returns> Returns bool. True for 'on', False for 'off'. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetpToolMgr(std.shared_ptr&lt;Cnc.Tool.TlMgr&gt;)">
            <summary> Setter for Tool Manager </summary>
            <param name="toolmgr"> Pointer to the tool manager. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetpToolMgr">
            <summary> Getter for Tool Manager </summary>
            <returns> Returns ptr to Tool Manager. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetNciFpos(System.Int64)">
            <summary> Setter for the start of bnci fpos of the source file </summary>
            <param name="fpos"> The bnci fpos for the source file </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetNciFpos">
            <summary> Getter for the start of bnci fpos of the source file </summary>
            <returns> Returns long. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMinorVersion(System.Int32)">
            <summary> Sets minor file version of the source file </summary>
            <param name="version"> The major version as an int </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMinorVersion">
            <summary> Gets minor file version of the source file </summary>
            <returns> Returns int. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMajorVersion(System.Int32)">
            <summary> Sets major file version of the source file </summary>
            <param name="version"> The major version as an int </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMajorVersion">
            <summary> Gets major file version of the source file </summary>
            <returns> Returns int. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetpPlanes(System.Void*)">
            <summary> Setter for pointer to copy of MastercamPlanes from the source file </summary>
            <param name="planes"> void*, planes construct </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetpPlanes">
            <summary> Getter for pointer to copy of MastercamPlanes from the source file </summary>
            <returns> Returns void*</returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetOrphanedTpEnts(CFposEntArray)">
            <summary> Setter for array of toolpath entities that have no parent operation </summary>
            <param name="orphanedents"> The referenced array of toolpath entities with no parent operation </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOrphanedTpEnts">
            <summary>  Getter for array of entities without references from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetTools(CFposEntArray)">
            <summary>  Setter for array of tool copies from the source file </summary>
            <param name="tools"> The referenced array of tool copies </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetTools">
            <summary>  Getter for array of tool copies from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetGeometry(CFposEntArray)">
            <summary> Setter for array of geometry entity copies referenced by operations from the source file </summary>
            <param name="geometry"> The referenced array of geometry entities </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetGeometry">
            <summary> Getter for array of geometry entity copies referenced by operations from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetOperations(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;CLibraryOperation&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;&gt;)">
            <summary> Setter for Map of operation copies from the source file </summary>
            <param name="operations"> The reference to the OpMap </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOperations">
            <summary> Getter for Map of operation copies from the source file </summary>
            <returns> Returns OpMap </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetGroups(VArray&lt;std.shared_ptr&lt;op_group&gt;&gt;)">
            <summary> Setter for (Groups) vector of machine and toolpath group copies from the source file </summary>
            <param name="groupvector"> The reference to VArray of groups </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetGroups">
            <summary> Getter for (Groups) vector of machine and toolpath group copies from the source file </summary>
            <returns> Returns VArray of op_group pointers </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestNciOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading NCI into an operation. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading into m_Operations. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestTpEnt(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tp_net against masks before loading into m_Operations.m_TpEnts. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestOperation(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation against masks before loading into m_Operations. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestTool(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tool against masks before loading into m_Tools. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestViewEnt(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests view_ent against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestPlanes(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests planes against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.TestGeometry(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests geometry against masks before loading into m_Geometry. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.ValidOperationIterator(std._Tree_const_iterator&lt;std._Tree_val&lt;std._Tree_simple_types&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validate operation iterator from m_Operations (since m_Operations is public). </summary>
            <param name="iter"> The iterator. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.InitBnciExtents">
            <summary> Initializes the bnci extents. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.DependentOperationsExist">
            <summary> Return true if dependent operation types exist in m_Operaitons. </summary>
            <returns> Return true if dependent operation types exist in m_Operaitons. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SwapEptrs(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Swap the entity ptrs. </summary>
            <param name="mapGeom">	    The map geometry entity ID, pair of old eptr and new eptr. </param>
            <param name="updateDB">	    true to rewrite the entities to the current database. </param>
            <param name="markOpsDirty"> true to mark affected toolpath operations dirty. </param>
            <returns> Number of substitutions that occurred. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.RemoveOperation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes the operation described by opID from the map m_Operations. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.ReplaceOrAddOperation(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds (and replaces if needed) an operation to the map m_Operations. </summary>
            <param name="filePos"> The file position in a external file, -1 for the current db. </param>
            <param name="opEnt">   The operation entity. </param>
            <returns> An OpMap::iterator where the operation was added. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOperationPtrsByOpMgrOrder(std.vector&lt;std.shared_ptr&lt;CLibraryOperation&gt;,std.allocator&lt;std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets operation ptrs by operation manager order. </summary>
            <param name="opArray"> Array of operation map ptrs. </param>
            <returns> size of opArray. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetRootGroup(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the root group of a subgroup. </summary>
            <param name="groupID"> Identifier for the group. </param>
            <returns> Iterator to the root group in m_Groups. </returns>
        </member>
        <member name="D:IInterrogateMastercamFile.OpMap">
            <summary> Defines an alias representing the operation map (operation ID, copy of operation). </summary>
        </member>
        <member name="D:IInterrogateMastercamFile.OpMapPtr">
            <summary> Defines an alias representing the operation map pointer. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.GetFileName">
            <summary> Gets the file name of what's loaded. </summary>
            <returns> The file name. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskNciOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskNciOpcodes to filter which operation's NCI is loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskNciOpcodes array after setting. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskOpcodes to filter which operations are loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskOpcodes array after setting. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetDirtyOperationIDs(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets the dirty operation IDs. </summary>
            <param name="opIDs"> The dirty operation IDs. </param>
            <param name="dirty"> (Optional) the dirty flag to match. </param>
            <returns> The size of opIDs. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SortOperationIDsByOpMgrOrder(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sort operation IDs in opIDS by operation manager order. </summary>
            <param name="opIDs"> The operation IDs to sort. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetSelectedOperationIDs(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets selected operation IDs. </summary>
            <param name="opIDs">    The selected operation IDs. </param>
            <param name="selectON"> (Optional) the select flag to match. </param>
            <returns> The size of opIDs. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetGeometryEntityPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets geometry entity pointer. </summary>
            <param name="entID"> Identifier for the ent. </param>
            <returns> The geometry entity pointer. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the operation pointer by identifier. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetLibraryOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets library operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the library operation pointer by identifier. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.IsExternalFile">
            <summary> Query if this object was loaded from an external file. </summary>
            <returns> true if external file, false if not. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.IsLoaded">
            <summary> Query if this object is loaded (returns value of m_Loaded). </summary>
            <returns> true if loaded, false if not. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.CalcBnciExtents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Calculates the extents of the bnci in this object. </summary>
            <param name="relWcs"> (Optional) true to relative wcs. </param>
            <param name="adjTOS"> (Optional) true to adjust to TOS. </param>
            <param name="deleteToolRadius"> (Optional) true to delete the tool radius from "Z". </param>
            <param name="includeEndOfRapids"> (Optional) true to include the end of rapids in extents calc. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForPlanes(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with plane info from an external Mastercam file. </summary>
            <param name="mcxFileName"> Mastercam file name. </param>
            <returns> for planes. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForPlanes">
            <summary> Preset masks and loads this object with plane info from the current db. </summary>
            <returns> Number of planes loaded. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with operations and their NCI from and external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the external Mastercam file. </param>
            <param name="gcodeMask">   List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci(System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*,IDArray!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object with operations and their NCI from the current db from just the
		  operations whose IDs match ones in the given pIncludeOpIDs parameter and not ones whose ID's match
		  ones in the given pExcludeOpIDs parameter. </summary>
            <param name="useCache">		 true = attempt to use NCI cache in global Planes. </param>
            <param name="gcodeMask">	 List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <param name="pIncludeOpIDs"> (Optional) the include operation ids. </param>
            <param name="pExcludeOpIDs"> (Optional) the exclude operation ids. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with operations and their NCI from an external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci">
            <summary> Preset masks and loads this object with operations and their NCI from the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForWorkOffsetInfo(System.Boolean,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with work offset information from just the operations whose IDs match
		  ones in the given includeOpIDs parameter and not ones whose ID's match ones in the given excludeOpIDs
		  parameter. </summary>
            <param name="useCache">	    true = use NCI cache, false = read from disk. </param>
            <param name="includeOpIDs"> The operations to include. </param>
            <param name="excludeOpIDs"> The operations to exclude. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForSingleOperation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object for just the 1 operation from the current db. </summary>
            <param name="opID">		  Identifier for the operation. </param>
            <param name="includeNci"> true to include NCI, false to exclude NCI. </param>
            <param name="pGcodeMask"> (Optional) if (includeNci == true), ptr to NCI gcode mask, nullptr to read in all. </param>
            <returns> pointer to operation, null if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntityCount(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities (no associated geometry or planes) from the current db. </summary>
            <param name="opIDs"> The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities from an external Mastercam file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <param name="opIDs">	   The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose opcodes match ones 
		  in the given opCodeMask parameter and their toolpath entities from the current db. </summary>
            <param name="opCodeMask"> Only collect operations with these opcodes. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities from the current db. </summary>
            <param name="opIDs"> The IDs of operations to load. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just operations and toolpath entities from an external Mastercam
		  file. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForToolpathEntities">
            <summary> Preset masks and loads this object with just operations and toolpath entities 
		  from the current db.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForDependencies(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities from an
		  external Mastercam file. TP_OPID type toolpath entities are typically used in transform and nesting
		  operations. </summary>
            <param name="mcxFileName"> Mastercam file name. </param>
            <returns> for dependencies. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForDependencies">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities 
		  from the current db. TP_OPID type toolpath entities are typically used in transform
		  and nesting operations.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadJustOperations(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadJustOperations">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.Load">
            <summary> Loads this object using the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.Load(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads this object using the given mcx file name. </summary>
            <param name="mcxFileName"> Filename of the Mastercam file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.InitMasks">
            <summary> Initializes the masks. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.EmptyPlanes">
            <summary> Empty the m_pPlanes object. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="T:IInterrogateMastercamFile">
            <summary> Utility class to collect entities and info of the current db or an external Mastercam file. </summary>
        </member>
        <member name="M:CAssocUtils.Init(CInterrogateMastercamFile*)">
            <summary> Initializes this object. </summary>
            <param name="pInFile"> (Optional) If non-null, (Optional) the CInterrogateMastercamFile info object. </param>
        </member>
        <member name="M:CAssocUtils.GetOperationsByGeometry(ent!System.Runtime.CompilerServices.IsConst*,System.Int16,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets operation IDs by a geometry reference. </summary>
            <param name="pGeomEnt">  The geometry ent to search for. </param>
            <param name="solidOpID"> Identifier for the solid operation. </param>
            <param name="opIDs">	 The operation IDs that reference the geometry. </param>
            <returns> Size of opIDs array. </returns>
        </member>
        <member name="M:CAssocUtils.GetToolpathEntitiesByGeometry(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,CFposEntArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets toolpath entities that reference the given geometry entity. </summary>
            <param name="geomEnt">    the geometry entity. </param>
            <param name="solidOpID">  Identifier for the solid operation. </param>
            <param name="tpEntArray"> Array of toolpath entities that reference the geometry entity. </param>
            <returns> Size of tpEntArray. </returns>
        </member>
        <member name="M:CAssocUtils.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CAssocUtils.#ctor(CInterrogateMastercamFile*)">
            <summary> Constructor. </summary>
            <param name="pInFile"> (Optional) If non-null, (Optional) the CInterrogateMastercamFile info object. </param>
        </member>
        <member name="T:CAssocUtils">
            <summary> Utility class that collects operations by their referenced geometry. </summary>
        </member>
        <member name="M:CLibraryOperation.InitBnciExtents">
            <summary> Initializes the bnci extents. </summary>
        </member>
        <member name="M:CLibraryOperation.ReadNciSection(MCFile*,System.Int64,System.Int64,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Reads the operation's nci section from fposStartOfSection thru fposEndOfSection into m_spBnciRW. </summary>
            <param name="pOpenFile">		  [in,out] If non-null, the open file. </param>
            <param name="fposStartOfSection"> The file position to start reading. </param>
            <param name="fposEndOfSection">   The file end position of the last line to read. </param>
            <param name="pGcodeMask">		  The gcode mask. </param>
            <returns> The number of lines read into m_spBnciRW. </returns>
        </member>
        <member name="M:CLibraryOperation.ReadNciSection(System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Reads the operation's nci section into m_spBnciRW. </summary>
            <param name="useCache">   true = attempt to use NCI cache in global Planes. </param>
            <param name="pGcodeMask"> (Optional) The gcode mask. </param>
            <returns> The number of lines read into m_spBnciRW. </returns>
        </member>
        <member name="M:CLibraryOperation.CalcBnciExtents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Calculates the bnci extents. </summary>
            <param name="relWcs"> (Optional) true to relative wcs. </param>
            <param name="adjTOS"> (Optional) true to adjust to TOS. </param>
            <param name="deleteToolRadius"> (Optional) true to delete the tool radius from "Z". </param>
            <param name="includeEndOfRapids"> (Optional) true to include the end of rapids in extents calc. </param>
            <returns> true if successful. </returns>
        </member>
        <member name="M:CLibraryOperation.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:CLibraryOperation.GetOpPtr">
            <summary> Gets a ptr to the operation. </summary>
            <returns> null if it fails, else the operation pointer. </returns>
        </member>
        <member name="M:CLibraryOperation.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CLibraryOperation.#ctor(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="filePos"> The file position, -1 for current file. </param>
            <param name="opEnt">   The operation entity. </param>
        </member>
        <member name="M:CLibraryOperation.#ctor(CLibraryOperation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:CLibraryOperation.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CLibraryOperation.NciOpViewMismatchInfo.ModType">
            <summary> Values that represent the modification types needed or applied. </summary>
        </member>
        <member name="M:CLibraryOperation.NciOpViewMismatchInfo.#ctor(PlaneType,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Constructor. </summary>
            <param name="planeType">	    Type of the plane. </param>
            <param name="m33">			    The matrix of the Tplane, Cplane or WCS. </param>
            <param name="worldOrigin">	    The origin in world coords. </param>
            <param name="requestedPlaneID"> op's op_view's assigned plane ID. </param>
            <param name="planeReqd">	    Operation ID if a plane is required for this operation type, else a 0. </param>
            <param name="createIfNeeded">   true = create a new plane if needed. </param>
        </member>
        <member name="T:CLibraryOperation.NciOpViewMismatchInfo">
            <summary> Information about the operation's op_view data mismatch with its NCI. </summary>
        </member>
        <member name="T:CLibraryOperation">
            <summary> A toolpath operation's entity, associated toolpath entities and NCI information. </summary>
        </member>
        <member name="M:CFposEntArray.SetUseMultiMap(System.Boolean)">
            <summary> Sets value of m_UseMultiMap. </summary>
            <param name="on"> true = allow duplicate keys in m_Map, false = ensure unique keys (like std::map). </param>
            <returns> Previous value of m_UseMultiMap. </returns>
        </member>
        <member name="M:CFposEntArray.Add(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds theEntity to m_Map. </summary>
            <param name="mapKey">    The map key. </param>
            <param name="theEntity"> the entity. </param>
            <returns> A MapType::iterator to the item added. </returns>
        </member>
        <member name="M:CFposEntArray.op_Assign(CFposEntArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> Source for the object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:CFposEntArray.#ctor(CFposEntArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:CFposEntArray.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CFposEntArray.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="D:CFposEntArray.MapType">
            <summary> Defines an alias representing type of the map. </summary>
        </member>
        <member name="T:CFposEntArray">
            <summary> Array of entity information. </summary>
        </member>
        <member name="D:CFposEnt.ByteType">
            <summary> Defines an alias representing type of the byte. </summary>
        </member>
        <member name="M:CFposEnt.CopyFormulaeFile(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies the formulae file from m_FormulaeFile to theEnt. </summary>
            <param name="theEnt">	   the entity to copy to. </param>
            <param name="justZeroOut"> true to just zero out the ent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CFposEnt.CopyCriticalDepths(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies the critical depths from m_CriticalDepths to theEnt. </summary>
            <param name="theEnt">	   the entity to copy to. </param>
            <param name="justZeroOut"> true to just zero out the ent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CFposEnt.AllocMem(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Allocate memory to house the entity. </summary>
            <param name="sz"> The entity size. </param>
            <returns> nullptr if it fails, else an ent*. </returns>
        </member>
        <member name="M:CFposEnt.Kill">
            <summary> Initializes and frees memory of this object. </summary>
        </member>
        <member name="M:CFposEnt.Init">
            <summary> Initializes this object. </summary>
        </member>
        <member name="M:CFposEnt.Get(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets a copy of the ent defined in m_spBlock. </summary>
            <param name="theEnt">					    the entity to fill in. </param>
            <param name="copyVariableLengthParameters"> (Optional) true to copy variable length parameters (critical depths,
											formulae file, etc.). </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.GetPtr">
            <summary> Returns an ent* to m_spBlock. </summary>
            <returns>  Returns an ent* to m_spBlock. </returns>
        </member>
        <member name="M:CFposEnt.GetEntSize(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the size of theEnt. </summary>
            <param name="theEnt"> the entity. </param>
            <returns> The ent size. </returns>
        </member>
        <member name="M:CFposEnt.GetFromDb(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the entity stored in m_spBlock from the current database. </summary>
            <param name="entity"> The entity to fill in. </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.Replace(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces the given entity in m_spBlock. </summary>
            <param name="entity"> The entity. </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.Set(System.Int64,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Allocate memory and copy entity in member variable. </summary>
            <param name="fPos">   The file position if it's from an external file, -1 for the current file. </param>
            <param name="entity"> The entity to attach. </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CFposEnt.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CFposEnt">
            <summary> Entity information. </summary>
        </member>
        <member name="M:ManageVariableParameters.GetOperationVariableLengths(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Void!System.Runtime.CompilerServices.IsConst**,System.UInt64,std.less&lt;System.Void!System.Runtime.CompilerServices.IsConst**&gt;,std.allocator&lt;std.pair&lt;System.Void!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst,System.UInt64&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect ptrs and sizes ofr variable length fields in a toolpath operation. </summary>
            <param name="theOp">  the operation to test. </param>
            <param name="varMap"> the map to fill in. </param>
            <returns> The operation variable lengths. </returns>
        </member>
        <member name="M:ManageVariableParameters.EntityContainsVariableLengthData(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Test to see if an entity contains variable length data. </summary>
            <param name="theEnt"> the ent to test. </param>
            <returns> True if it does, false if it doesn't. </returns>
        </member>
        <member name="M:ManageVariableParameters.CopyDepths(prm_srf_depths!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,prm_srf_depths*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies critical depths from the source to the target. </summary>
            <param name="sourceDepths">	    List of depths of the sources. </param>
            <param name="targetDepths">	    List of depths of the targets. </param>
            <param name="freeTargetMemory"> true = first free target memory. </param>
            <returns> A CopyErrorFlag. </returns>
        </member>
        <member name="M:ManageVariableParameters.CopyDepths(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies critical depths from the source operation to the target operation. </summary>
            <param name="sourceOp">		    Source operation. </param>
            <param name="targetOp">		    Target operation. </param>
            <param name="freeTargetMemory"> true = first free target memory. </param>
            <returns> A CopyErrorFlag. </returns>
        </member>
        <member name="M:ManageVariableParameters.FreeDepthsPtr(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Free critical depths in the operation entity. </summary>
            <param name="opEnt"> The operation entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetDepthsPtr(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ManageVariableParameters.CheckCount,ManageVariableParameters.SupportedTypes)">
            <summary> Gets a pointer to the critical depths parameter in operations that have them. </summary>
            <param name="theOp">		  The operation to check in. </param>
            <param name="checkCount">	  true = also check that the count &gt; 0 before returning a ptr. </param>
            <param name="supportedTypes"> Check or don't check for supported operation types. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetDepthsPtr(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ManageVariableParameters.CheckCount,ManageVariableParameters.SupportedTypes)">
            <summary> Gets a pointer to the critical depths parameter in operations that have them. </summary>
            <param name="opEnt">		  The operation entity to look in. </param>
            <param name="checkCount">	  true = also check that the count &gt; 0 before returning a ptr. </param>
            <param name="supportedTypes"> Check or don't check for supported operation types. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ManageVariableParameters.CopyFormulaeFile(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies formulae file from the source operation to the target operation. </summary>
            <param name="sourceOp">		    Source operation. </param>
            <param name="targetOp">		    Target operation. </param>
            <param name="freeTargetMemory"> true to free target memory. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.FreeFormulaeFile(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Free formulae file allocation in an operation entity. </summary>
            <param name="opEnt"> The operation entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetFormulaeFile(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns a CString with the formulae file from the op. </summary>
            <param name="theOp"> the operation. </param>
            <returns> The formulae file, empty CString if not found. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetFormulaeFilePtr(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ManageVariableParameters.CheckCount,std.pair&lt;System.Int16**,System.Char****&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets formulae file size and pointer from the operation entity. </summary>
            <param name="opEnt">		    The operation entity. </param>
            <param name="checkCount">	    true = also check that the count &gt; 0 before returning a ptr. </param>
            <param name="formulaeFilePtrs"> Formulae file size and character ptr. </param>
            <param name="fileName">		    Full pathname of the formulae file with a null terminating character. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.GetFormulaeFilePtr(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ManageVariableParameters.CheckCount,std.pair&lt;System.Int16**,System.Char****&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets formulae file size and pointer from the operation entity. </summary>
            <param name="theOp">		    The operation. </param>
            <param name="checkCount">	    true = also check that the count &gt; 0 before returning a ptr. </param>
            <param name="formulaeFilePtrs"> Formulae file size and character ptr. </param>
            <param name="fileName">		    Full pathname of the formulae file with a null terminating character. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ManageVariableParameters.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ManageVariableParameters.CopyErrorFlag">
            <summary> Return values for CopyDepths (). </summary>
        </member>
        <member name="T:ManageVariableParameters.SupportedTypes">
            <summary> Check or don't check for supported operation types in GetPtr() 
		  before return ptr to critical depths. </summary>
        </member>
        <member name="T:ManageVariableParameters.CheckCount">
            <summary> Values that represent whether to check the depth counts in operations. </summary>
        </member>
        <member name="T:ManageVariableParameters">
            <summary> Class to manage the variable length surface depths parameter. </summary>
        </member>
        <member name="M:ReservedPlanes.IsLatheTplane(ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'typeID' is lathe Tplane. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe Tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.AddReservedNamePair(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary> Adds a reserved name by resource ID to m_Names. </summary>
            <param name="name">			  The reserved name. </param>
            <param name="typeID">		  The reserved type ID. </param>
            <param name="nameResourceID"> The resource ID of the reserved name. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ReservedPlanes.AddReservedNamePair(System.UInt32,ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a reserved name by resource ID to m_Names. </summary>
            <param name="nameResourceID"> The resource ID of the reserved name. </param>
            <param name="typeID">		  The reserved type ID. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ReservedPlanes.BuildLatheNames(System.Boolean)">
            <summary> Builds the lathe Tplane name map. </summary>
            <param name="forceReload"> true to first clear m_Names and m_LatheNames to force reload. </param>
            <returns> size of m_LatheNames. </returns>
        </member>
        <member name="M:ReservedPlanes.BuildNames(System.Boolean)">
            <summary> Builds the reserved name map. </summary>
            <param name="forceReload"> true to first clear m_Names and m_LatheNames to force reload. </param>
            <returns> size of m_Named. </returns>
        </member>
        <member name="M:ReservedPlanes.BuildStandardMatrices">
            <summary> Build the array of hard-coded matrices. </summary>
            <returns> Size of array m_StandardMatrices. </returns>
        </member>
        <member name="M:ReservedPlanes.IsIsoType(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if the long 'typeID' is a valid Iso type. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.WarnLatheTplaneSetAsReserved(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Warning that a special lathe tplane is set as reserved. </summary>
            <param name="planeID">  Identifier for the plane. </param>
            <param name="reserved"> true if being set as reserved. </param>
        </member>
        <member name="M:ReservedPlanes.IsLatheCplaneOnlyReservedID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return true if the plane ID is a reserved lathe construction plane ID. </summary>
            <param name="planeID"> the Plane ID to check. </param>
            <returns> return true if the plane ID is a default one. </returns>
        </member>
        <member name="M:ReservedPlanes.IsStandardReservedID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Return true if the ID is one of the first standard plane ID's. </summary>
            <param name="planeID">		 the Plane ID to check. </param>
            <param name="includeLatheZ"> true to include Lathe_Z_Equals_World_Z. </param>
            <returns> true if one of the first standard, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsLatheVTL(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if 'typeID' is VTL type. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> True if a VTL type, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsLatheID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if the long 'typeID' is a valid lathe TypeID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsLatheTplane(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if the long 'typeID' is a valid lathe Tplane TypeID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.GetLatheNames">
            <summary> Gets lathe names. </summary>
            <returns> The lathe names. </returns>
        </member>
        <member name="M:ReservedPlanes.GetNames">
            <summary> Gets the names. </summary>
            <returns> The names. </returns>
        </member>
        <member name="M:ReservedPlanes.GetStandardMatrices">
            <summary> Gets const reference to m_StandardMatrices. </summary>
            <returns> The standard matrices. </returns>
        </member>
        <member name="M:ReservedPlanes.GetLatheMap">
            <summary> Gets constant reference to m_LathePlaneMap. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:ReservedPlanes.GetMap">
            <summary> Gets constant reference to the map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:ReservedPlanes.GetSize">
            <summary> Gets the size of m_Map. </summary>
            <returns> The size. </returns>
        </member>
        <member name="M:ReservedPlanes.Build(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Builds the map m_Map. </summary>
            <param name="productMask"> AEB_MILL, AEB_LATHE, AEB_MT or a combination of all. </param>
            <param name="forceReload"> true to first clear m_Names and m_LatheNames to force reload. </param>
            <returns> Size of map. </returns>
        </member>
        <member name="M:ReservedPlanes.GetPtr(PlaneClass,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to a reserved plane with the matching class and matrix. </summary>
            <param name="planeClass"> PlaneClass::SystemMatrix or PlaneClass::NamedPlane. </param>
            <param name="m33">		  Matrix to match. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a reserved plane name. </summary>
            <param name="newName"> New name of the reserved plane. </param>
            <param name="typeID">  Identifier for the reserved plane type. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ReservedPlanes.GetName(ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a name by TypeID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> The name. </returns>
        </member>
        <member name="M:ReservedPlanes.GetPtr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to a reserved plane with the matching name (not case sensitive). </summary>
            <param name="name"> Name to match. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.GetLathePlanePtr(ReservedPlanes.TypeID)">
            <summary> Gets a pointer to a kinda-reserved super special lathe Tplane with the matching type ID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.GetPtr(ReservedPlanes.TypeID)">
            <summary> Gets a pointer to a reserved plane with the matching type ID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.GetIterator(ReservedPlanes.TypeID)">
            <summary> Gets a pointer to the reserved info. </summary>
            <param name="resType"> Identifier for the resource. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.IsReservedName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'name' is reserved name. </summary>
            <param name="name">		    The name. </param>
            <param name="caseMismatch"> set to true = same name, but the case is mismatched. </param>
            <returns> true if reserved name, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.TypeIdToLong(ReservedPlanes.TypeID,System.Boolean)">
            <summary> Casts a TypeID identifier to a long. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <param name="warn">   true for debug warning. </param>
            <returns> A long, 0 if invalid type. </returns>
        </member>
        <member name="M:ReservedPlanes.IsValidType(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Query if 'longType' is valid TypeID. </summary>
            <param name="longType">	TypeID as a long. </param>
            <param name="warn">		true for debug warning. </param>
            <returns> true if valid type, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsSystemMatrixType(ReservedPlanes.TypeID)">
            <summary> Query if 'resType' is system matrix identifier. </summary>
            <param name="resType"> Identifier for the resource. </param>
            <returns> true if system matrix identifier, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.GetStandardMatrix(System.Int32)">
            <summary> Return copy of hard-coded matrices if within range. </summary>
            <param name="viewNo"> Array index in m_StandardMatrices. </param>
            <returns> The standard matrix. </returns>
        </member>
        <member name="M:ReservedPlanes.op_Assign(ReservedPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ReservedPlanes.#ctor(ReservedPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="D:ReservedPlanes.LatheNames">
            <summary> Defines an alias representing list of names of the lathe tplanes. </summary>
        </member>
        <member name="D:ReservedPlanes.ReservedNamePair">
            <summary> Defines an alias representing the reserved name pair. </summary>
        </member>
        <member name="D:ReservedPlanes.ReservedNames">
            <summary> Defines an alias representing list of names of the reserved planes. </summary>
        </member>
        <member name="D:ReservedPlanes.ReservedPlanePair">
            <summary> Defines an alias representing the reserved plane pair. </summary>
        </member>
        <member name="D:ReservedPlanes.ReservedPlaneMap">
            <summary> Defines an alias representing the reserved plane map. </summary>
        </member>
        <member name="M:ReservedPlanes.NameInfo.#ctor(ReservedPlanes.TypeID,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary> Constructor. </summary>
            <param name="typeID">		Identifier for the type. </param>
            <param name="name">			The name. </param>
            <param name="resourceID">	(Optional) identifier for the resource ID. </param>
        </member>
        <member name="T:ReservedPlanes.NameInfo">
            <summary> Information about the name. </summary>
        </member>
        <member name="M:ReservedPlanes.ResInfo.#ctor(ReservedPlanes.TypeID,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,CoordinateDisplayType,System.Boolean)">
            <summary> Named view constructor. </summary>
            <param name="typeID">		Identifier for the resource. </param>
            <param name="m33">			The matrix. </param>
            <param name="product">		The product. </param>
            <param name="coordDisplay">	The coordinate display. </param>
            <param name="placeHolder">  true to place holder. </param>
        </member>
        <member name="M:ReservedPlanes.ResInfo.#ctor(ReservedPlanes.TypeID,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> SystemMatrix constructor. </summary>
            <param name="typeID"> Identifier for the resource. </param>
            <param name="m33">    The matrix. </param>
        </member>
        <member name="M:ReservedPlanes.ResInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ReservedPlanes.ResInfo">
            <summary> Information about the reserved plane. </summary>
        </member>
        <member name="T:ReservedPlanes.TypeID">
            <summary> Reserved ID's for standard planes that are non-editable. </summary>
        </member>
        <member name="M:ReservedPlanes.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ReservedPlanes.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ReservedPlanes">
            <summary> A to create and maintain the reserved planes. </summary>
        </member>
        <member name="M:PlaneGnomon.SetColor(System.Int32)">
            <summary> Sets the color of the plane. </summary>
            <param name="color"> Plane color. </param>
        </member>
        <member name="M:PlaneGnomon.IsValid">
            <summary> Return true if Set () was called and the gnomon contains valid info. </summary>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:PlaneGnomon.SetOrigin(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the origin of the gnomon. </summary>
            <param name="origin"> Origin. </param>
        </member>
        <member name="M:PlaneGnomon.Set(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Initialize this gnomon to the given parameters. </summary>
            <param name="thePlane"> a Mastercam Plane. </param>
            <param name="enable">   true to enable, false to disable. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlaneGnomon.GetID">
            <summary> Get the plane ID of this gnomon. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneGnomon.Erase(System.Boolean)">
            <summary> erase the Plane gnomon; free the memory. </summary>
            <param name="repaint"> (Optional) true = repaint. </param>
        </member>
        <member name="M:PlaneGnomon.Draw(System.Boolean,System.Boolean,System.Boolean)">
            <summary> draw the Plane gnomon. </summary>
            <param name="includeName"> (Optional) true to include the plane name (default = true). </param>
            <param name="selected">    (Optional) true if plane planel active and plane selected (default = false). </param>
            <param name="enable">      (Optional) true to draw as enabled; false to draw as disabled (default = true). </param>
        </member>
        <member name="M:PlaneGnomon.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:PlaneGnomon.#ctor(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> parameterized constructor. </summary>
            <param name="thePlane">		  the plane. </param>
            <param name="singleInstance"> true to single instance. </param>
        </member>
        <member name="M:PlaneGnomon.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:PlaneSelectGnomon">
            <summary> A plane select gnomon. </summary>
        </member>
        <member name="T:PlaneGnomon">
            <summary> Mastercam PlaneGnomon definition to be used for drawing plane gnomons. </summary>
        </member>
        <member name="M:PlanePoint.GetRegenErrorString(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return CString of m_RegenErrors. </summary>
            <param name="regenErrors"> The regen errors. </param>
            <returns> The regen error string. </returns>
        </member>
        <member name="M:PlanePoint.GetRegenErrors">
            <summary> return value of m_RegenErrors. </summary>
            <returns> The regen errors. </returns>
        </member>
        <member name="M:PlanePoint.GetSolidFaceInfo(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets solid face information. </summary>
            <param name="solidEntIdn"> 	[out] Solid entity id number. </param>
            <param name="selectionIdx">	[out] Selection index. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlanePoint.GetGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect copies of the geometry used to define this PlanePoint. </summary>
            <param name="geometryArray"> Array to copy geometry entities into. </param>
            <param name="geomMap">		 entity ID and eptr so we don't have to read thru the db. </param>
            <param name="entsNotFound">  ID's entities that could not be found in geomMap. </param>
            <returns> return # of entities copied into array. </returns>
        </member>
        <member name="M:PlanePoint.SwapEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Swap the associated geoemtry entity ID's. </summary>
            <param name="oldID"> old entity ID. </param>
            <param name="newID"> new entity ID. </param>
            <returns> # of IDs swapped. </returns>
        </member>
        <member name="M:PlanePoint.SetSelPt(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the tvalue CAD entry values. </summary>
            <param name="selPt"> array of 2 doubles represeting tvalues into. </param>
        </member>
        <member name="M:PlanePoint.GetSelPt(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the tvalue CAD entry values. </summary>
            <param name="selPt"> array of 2 doubles to insert tvalues into. </param>
        </member>
        <member name="M:PlanePoint.SetTval(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the tvalue CAD entry values. </summary>
            <param name="tVal"> array of 2 doubles represeting tvalues into. </param>
        </member>
        <member name="M:PlanePoint.GetTval(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the tvalue CAD entry values. </summary>
            <param name="tVal"> array of 2 doubles to insert tvalues into. </param>
        </member>
        <member name="M:PlanePoint.GetCreationMethod">
            <summary> get the point CAD entry method. </summary>
            <returns> returns method  if successful. </returns>
        </member>
        <member name="M:PlanePoint.CreationMethodRequiresCalculation">
            <summary> Return true if the creation method requires a recalculation to its geometry (like PEC_ENDPOINT) </summary>
            <returns> true if it method required recalculation, false if doesn't (like PEC_VALUES). </returns>
        </member>
        <member name="M:PlanePoint.SetPointCreationMethod(System.Byte)">
            <summary> set the point CAD entry method. </summary>
            <param name="creationMethod"> MC_BYTE representing CAD creation method (PEC_ORIGIN, etc) </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:PlanePoint.ValidPointCreationMethod(System.Byte)">
            <summary> validate creation method. </summary>
            <param name="creationMethod"> MC_BYTE representing CAD creation method (PEC_ORIGIN, etc) </param>
            <returns> returns true if valid. </returns>
        </member>
        <member name="M:PlanePoint.AssocPointCreationMethod(System.Byte)">
            <summary> validate creation method. </summary>
            <param name="creationMethod"> MC_BYTE representing CAD creation method (PEC_ORIGIN, etc) </param>
            <returns> returns true if valid. </returns>
        </member>
        <member name="M:PlanePoint.SetEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set up to two entity ID's that P3D is created with. </summary>
            <param name="entID1"> 1 of 2 entity ID's. </param>
            <param name="entID2"> 2 of 2 entity ID's. </param>
        </member>
        <member name="M:PlanePoint.GetEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> return up to two entity ID's that P3D was created with. </summary>
            <param name="entityIDs"> array to fill in with entity ID's. </param>
            <returns> return # of entity ID's found. </returns>
        </member>
        <member name="M:PlanePoint.Convert(assoc_pt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert a P3D to a Mastercam assoc_pt. </summary>
            <param name="thePt"> the Mastercam assoc_pt to convert into. </param>
        </member>
        <member name="M:PlanePoint.Convert(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert a P3D to a Mastercam p3d. </summary>
            <param name="thePt"> the Mastercam p_3d to convert into. </param>
        </member>
        <member name="M:PlanePoint.GetPointInViewCoordinates(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the P3D m_Point member variable in view coordinates. </summary>
            <param name="m33"> the Mastercam view to convert point from world coordinates into. </param>
            <returns> return the P3D m_Point member variable in view coordinates. </returns>
        </member>
        <member name="M:PlanePoint.GetPointInWorldCoordinates">
            <summary> return the P3D m_Point member variable in world coordinates. </summary>
            <returns> The point in world coordinates. </returns>
        </member>
        <member name="M:PlanePoint.SetZ(System.Double)">
            <summary> set the origin's Z value in world coordinates. </summary>
            <param name="zVal"> the value to set Z to. </param>
            <returns> return the previous Z value. </returns>
        </member>
        <member name="M:PlanePoint.SetY(System.Double)">
            <summary> set the origin's Y value in world coordinates. </summary>
            <param name="yVal"> the value to set Y to. </param>
            <returns> return the previous Y value. </returns>
        </member>
        <member name="M:PlanePoint.SetX(System.Double)">
            <summary> set the origin's X value in world coordinates. </summary>
            <param name="xVal"> the value to set X to. </param>
            <returns> return the previous X value. </returns>
        </member>
        <member name="M:PlanePoint.SetPoint(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> initialize and set P3D m_Point member variable. </summary>
            <param name="srcPt"> Source point. </param>
            <param name="init">  true to initialise. </param>
            <returns> . </returns>
        </member>
        <member name="M:PlanePoint.SetVersion(System.Int32)">
            <summary> set the version. </summary>
            <param name="version"> the version number. </param>
            <returns> return the previous version value. </returns>
        </member>
        <member name="M:PlanePoint.GetVersion">
            <summary> return the version. </summary>
            <returns> The version. </returns>
        </member>
        <member name="M:PlanePoint.Regenerate(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityEptrMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> recalculate the point position. </summary>
            <param name="m33">	   The third m 3. </param>
            <param name="geomMap"> entity ID and eptr map so it does not have to read thru the db to find geometry entities. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlanePoint.Regenerate(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> recalculate the point position. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlanePoint.GetEntryMethod">
            <summary> return the point entry method, 0 if not yet set. </summary>
            <returns> The entry method. </returns>
        </member>
        <member name="M:PlanePoint.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:PlanePoint.op_Subscript(System.Int64)">
            <summary> subscript operator. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:PlanePoint.Init">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:PlanePoint.op_Equality(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.op_Inequality(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.op_Assign(aPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using Mastercam aPoint. </summary>
            <param name="aPt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlanePoint.op_Assign(assoc_pt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using Mastercam assoc_pt. </summary>
            <param name="aPt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlanePoint.op_Assign(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlanePoint.#ctor(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:PlanePoint.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:PlanePoint.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary>	Constructor for solid face plane point. </summary>
            <param name="origin">  	The origin. </param>
            <param name="solidIdn">	The solid body entity id number. </param>
            <param name="faceIdx"> 	Solid face selection index. </param>
        </member>
        <member name="M:PlanePoint.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="wOriginPt"> the origin point in world coordinates. </param>
        </member>
        <member name="M:PlanePoint.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="entID1">		  unique entity ID (ent.en_idn) </param>
            <param name="entID2">		  unique entity ID (ent.en_idn) </param>
            <param name="creationMethod"> MC_BYTE defining CAD creation method (PEC_ORIGIN, etc) </param>
            <param name="tVal">			  tValues from CAD creation. </param>
            <param name="wOriginPt">	  the origin point in world coordinates. </param>
        </member>
        <member name="M:PlanePoint.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Plane">
            <summary> make Plane a friend. </summary>
            <summary> Forward declaration. </summary>
            <summary> A plane. </summary>
            <summary> A macro that defines no work offset. </summary>
            <summary> Mastercam Plane definition</summary>
        </member>
        <member name="T:PlanePoint.REGEN_ERROR">
            <summary> error code applied in validation and regeneration. </summary>
        </member>
        <member name="T:PlanePoint">
            <summary> PlanePoint class defines a point entity used in creating a Plane.  
		  A plane contains up to 4 PlanePoint's: 1 for the origin and up to 3 to define the 3 axes.</summary>
        </member>
        <member name="M:DbViewMap.clear">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:DbViewMap.MergeOldIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Merge old IDs from node to map element. </summary>
            <param name="targetIDs"> The set to merge into. </param>
            <param name="sourceIDs"> The set to merge from. </param>
            <returns> # of IDs added. </returns>
        </member>
        <member name="M:DbViewMap.Dump">
            <summary> Dumps this object. </summary>
        </member>
        <member name="M:DbViewMap.AddToPlanes(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds marked system views to refPlanes global. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to add to. </param>
            <returns> Number of system views added to refPlanes. </returns>
        </member>
        <member name="M:DbViewMap.GetOldIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the old plane / view_ent IDs from the map nodes. </summary>
            <param name="oldIDs"> The set to fill in. </param>
            <returns> Size of set. </returns>
        </member>
        <member name="M:DbViewMap.GetMap">
            <summary> Gets the map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:DbViewMap.GetSize">
            <summary> Gets the size of the m_Map. </summary>
            <returns> The size. </returns>
        </member>
        <member name="M:DbViewMap.GetMaxEntID">
            <summary> Gets the value of m_MaxEntID. </summary>
            <returns> The value of m_MaxEntID. </returns>
        </member>
        <member name="M:DbViewMap.GetNewViewNo(System.Int32)">
            <summary> Gets the new view no from the old. </summary>
            <param name="oldViewNo"> The old view no. </param>
            <returns> The new view no. </returns>
        </member>
        <member name="M:DbViewMap.FindByOldViewNo(System.Int32,Matrix33!System.Runtime.CompilerServices.IsConst*)">
            <summary> get the DbViewMapNode that corrosponds with oldViewNo. </summary>
            <param name="oldViewNo"> The old view number. </param>
            <param name="p33">		 (Optional) The matrix to match. </param>
            <returns> iterator to match if found. </returns>
        </member>
        <member name="M:DbViewMap.FindByMatrix(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DbViewMapNode.NodeType)">
            <summary> get the DbViewMapNode that corrosponds with m33. </summary>
            <param name="m33">	    the 3x3 matrix to match. </param>
            <param name="added">    [in,out] set to true if matrix added, false if it already exists. </param>
            <param name="nodeType"> (Optional) DbViewMapNode::NodeType::Undefined to not make new if match not found. </param>
            <returns> iterator to match if found. </returns>
        </member>
        <member name="M:DbViewMap.Add(DbViewMapNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a view node to the map. </summary>
            <param name="node"> The node. </param>
            <returns> pointer to newly added or matching node in m_Map, nullptr if it fails. </returns>
        </member>
        <member name="M:DbViewMap.Build(MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Populate the map directly from Planes global. </summary>
            <returns> Return size of m_Map. </returns>
        </member>
        <member name="M:DbViewMap.Build(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build a view map from the given open Mastercam file. </summary>
            <param name="mcFile">    [in,out] Already opened Mastercam file. </param>
            <param name="refPlanes"> [in,out] reference to planes object to set .m_InGetDb. </param>
            <returns> Return size of m_Map. </returns>
        </member>
        <member name="M:DbViewMap.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:DbViewMap.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="D:DbViewMap.Pair">
            <summary> Defines an alias representing the pair. </summary>
        </member>
        <member name="D:DbViewMap.Map">
            <summary> Defines an alias representing the map. </summary>
        </member>
        <member name="T:DbViewMap">
            <summary> DbViewMap class - used in get_db () to rebuild system views in the order they were saved. </summary>
        </member>
        <member name="M:DbViewMapNode.GetDescription">
            <summary> Gets the description. </summary>
            <returns> The description. </returns>
        </member>
        <member name="M:DbViewMapNode.FindNewViewNo(System.Boolean)">
            <summary> Return or create-and-return the new view # for this node. </summary>
            <param name="makeNew"> true to create and add a new system matrix. </param>
            <returns> The new view no. </returns>
        </member>
        <member name="M:DbViewMapNode.op_LessThan(DbViewMapNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:DbViewMapNode.op_Assign(DbViewMapNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:DbViewMapNode.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,DbViewMapNode.NodeType)">
            <summary> Constructor. </summary>
            <param name="oldID">	 The old view ent or plane ID. </param>
            <param name="m33">		 The matrix. </param>
            <param name="oldViewNo"> The old view no. </param>
            <param name="nodeType">  Type of the node. </param>
        </member>
        <member name="M:DbViewMapNode.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:DbViewMapNode.NodeType">
            <summary> Values that represent plane info source. </summary>
        </member>
        <member name="T:DbViewMapNode">
            <summary> DbViewMapNode class - used in DbViewMap.m_Map as an array element</summary>
        </member>
        <member name="M:EntityEptrMap.empty">
            <summary> Returns true if m_Map is empty. </summary>
            <returns> true if m_Map is empty. </returns>
        </member>
        <member name="M:EntityEptrMap.GetMultiMap">
            <summary> Gets multi map. </summary>
            <returns> The multi map. </returns>
        </member>
        <member name="M:EntityEptrMap.GetMap">
            <summary> Gets the entity map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:EntityEptrMap.GetEptr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets an eptr by entity ID. </summary>
            <param name="entID"> entity ID to match. </param>
            <returns> The eptr. </returns>
        </member>
        <member name="M:EntityEptrMap.GetID(DB_LIST_ENT*!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets entity identifier ID be the eptr. </summary>
            <param name="eptr"> The eptr to find. </param>
            <returns> The entity ID. </returns>
        </member>
        <member name="M:EntityEptrMap.GetSize">
            <summary> return number of elements. </summary>
            <returns> The size. </returns>
        </member>
        <member name="M:EntityEptrMap.GetMask">
            <summary> return value of entity mask. </summary>
            <returns> The mask. </returns>
        </member>
        <member name="M:EntityEptrMap.GetEntity(System.Int32!System.Runtime.CompilerServices.IsLong,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> find the entity with the given ID. </summary>
            <param name="entID">  entity ID (ent.ent_idn) to match. </param>
            <param name="theEnt"> the entity to copy into. </param>
            <returns> returns true if entity found and copied. </returns>
        </member>
        <member name="M:EntityEptrMap.Init(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> read thru the db and build the map. </summary>
            <param name="mask">			 entity type mask (GEOM_MASK, etc) </param>
            <param name="loadAssocEnts"> true to also load associative ents. </param>
            <returns> Return size of map. </returns>
        </member>
        <member name="D:EntityEptrMap.Pair">
            <summary> Defines an alias representing the pair. </summary>
        </member>
        <member name="D:EntityEptrMap.Map">
            <summary> Defines an alias representing the map. </summary>
        </member>
        <member name="M:EntityEptrMap.EntInfo.#ctor(DB_LIST_ENT*!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,ASSOC_ENT_TYPE)">
            <summary> Default constructor. </summary>
            <param name="ePtr">    (Optional) the ent's db pointer. </param>
            <param name="vw_refs"> (Optional) the # of plane references. </param>
            <param name="tp_refs"> (Optional) the # of toolpath references. </param>
        </member>
        <member name="T:EntityEptrMap.EntInfo">
            <summary> Information about the ent. </summary>
        </member>
        <member name="M:EntityEptrMap.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:EntityEptrMap.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Constructor. </summary>
            <param name="mask">			 The entity type mask (GEOM_MASK, etc). </param>
            <param name="loadAssocEnts"> (Optional) true to load associated ents. </param>
        </member>
        <member name="T:EntityEptrMap">
            <summary> EntityEptrMap class - read thru the current db once, create map of eptrs and 
		 entity ID's based on entity type mask</summary>
        </member>
        <member name="T:MCFile">
            <summary> A MCFile forward declaration. </summary>
            <summary> Mastercam File I/O class. </summary>
            <remarks> This class should be used for all file I/O operations on a Mastercam format file.
		  It maintains information about the file and how it is to being accessed.  Much of
		  this information had been maintained in global variables prior to implementation of
		  this class.  This class could be used to access files in other formats. </remarks>
        </member>
        <member name="D:MATRIX_CHOICES">
            <summary> Defines an alias representing array of matrix choices.
		  Base matrix in [0], CCW 90, 180, 270, CW 0, 90, 180, 270</summary>
        </member>
        <member name="M:XfmMatrix.GoingNowhere">
            <summary> Determines if transform matrix and origin are Top @ 0,0,0. </summary>
            <returns> True if it transform data doesn't result in any transformation, false if it does. </returns>
        </member>
        <member name="M:XfmMatrix.Convert(x_matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert this to a Mastercam x_matrix. </summary>
            <param name="xm"> valid X component. </param>
        </member>
        <member name="M:XfmMatrix.GetT">
            <summary> return value of m_r member variable. </summary>
            <returns> . </returns>
        </member>
        <member name="M:XfmMatrix.Get33">
            <summary> return value of m_33 member variable. </summary>
            <returns> The 33. </returns>
        </member>
        <member name="M:XfmMatrix.op_Equality(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:XfmMatrix.op_Inequality(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:XfmMatrix.op_Assign(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:XfmMatrix.Init">
            <summary> Initialize member variables. </summary>
        </member>
        <member name="M:XfmMatrix.op_Subscript(System.Int64)">
            <summary> subscript operator - return XCOORD, YCOORD or ZCOORD. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:XfmMatrix.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:XfmMatrix.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from 3 P3D's. </summary>
            <param name="X3"> valid X component. </param>
            <param name="Y3"> valid Y component. </param>
            <param name="Z3"> valid Z component. </param>
            <param name="T3"> valid T component. </param>
        </member>
        <member name="M:XfmMatrix.op_Assign(x_matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using Mastercam's x_matrix. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:XfmMatrix.#ctor(x_matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from matrix_33. </summary>
            <param name="xm"> the Mastercam x_matrix to copy from. </param>
        </member>
        <member name="M:XfmMatrix.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from matrix_33. </summary>
            <param name="m33"> the Matrix33 to copy from. </param>
            <param name="mT">  the P3D to copy from. </param>
        </member>
        <member name="M:XfmMatrix.#ctor(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:XfmMatrix.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:XfmMatrix.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:XfmMatrix">
            <summary> Constructs an XfmMatrix object to be used instead of Mastercam's x_matrix</summary>
        </member>
        <member name="M:Matrix33.AllZeros(System.Boolean)">
            <summary> Test matrix's components to see if they're all of zero value (like someone did a memset(0). </summary>
            <param name="warn"> True to display debug warning. </param>
            <returns> True if all zero, false if not. </returns>
        </member>
        <member name="M:Matrix33.CheckDotProduct(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check dot product of given Matrix33. </summary>
            <param name="m33"> The Matrix33 to check. </param>
            <returns> MatrixError::None for no error, MatrixError::DotProduct for bad dot product,. </returns>
        </member>
        <member name="M:Matrix33.CheckDotProduct(System.Boolean)">
            <summary> Check dot product of this. </summary>
            <param name="warn"> (Optional) the warning. </param>
            <returns> MatrixError::None for no error, MatrixError::DotProduct for bad dot product, 
		  MatrixError::DotProductOrthoNormalize for bad dot product that can be correct by re-orthonormalizing</returns>
        </member>
        <member name="M:Matrix33.ASSERT_MATRIX33(System.Boolean)">
            <summary> option to ASSERT. </summary>
            <param name="ok"> true if the operation was a success, false if it failed. </param>
        </member>
        <member name="M:Matrix33.ViewToView(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert a P3D in view coordinates to view coordinates in a different view. </summary>
            <param name="thePt">  the P3D in view coordinates to convert. </param>
            <param name="from33"> the view the point resides in. </param>
            <param name="to33">   the destination view. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.ViewToWorldSub(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert thePt in view coordinates to world coordinates then subtract wSubPt. </summary>
            <param name="thePt">  the P3D in view coordinates to convert. </param>
            <param name="wSubPt"> the point to subtract in world coords. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.ViewToWorldAdd(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert thePt in view coordinates to world coordinates then add wAddPt. </summary>
            <param name="thePt">  the P3D in view coordinates to convert. </param>
            <param name="wAddPt"> the point to add in world coords. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.WorldToViewAdd(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> add wAddPt from thePt, convert thePt to view coordinates. </summary>
            <param name="thePt">  the P3D in world coordinates to convert. </param>
            <param name="wAddPt"> point in world coordinates to subtract. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.WorldToViewSub(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtract wSubPt from thePt, convert thePt to view coordinates. </summary>
            <param name="thePt">  the P3D in world coordinates to convert. </param>
            <param name="wSubPt"> point in world coordinates to subtract. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.MultiplyMatrixVector(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply a 3x3 matrix by a 3 element vector. </summary>
            <param name="vec"> A column vector. </param>
            <returns> Result. </returns>
        </member>
        <member name="M:Matrix33.ViewToWorld(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point from view coordinates in the given matrix coordinates to world. </summary>
            <param name="vPoint"> The point in view coordiantes. </param>
            <returns> A point in world coordinates. </returns>
        </member>
        <member name="M:Matrix33.WorldToView(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point from world coordinates into given matrix coordinates. </summary>
            <param name="wPoint"> The point in world coordinates. </param>
            <returns> A point in view coordinates. </returns>
        </member>
        <member name="M:Matrix33.CheckAndFixMatrix(System.Boolean,System.Boolean)">
            <summary> check and correct bad matrix if needed. </summary>
            <param name="doK">  true = use MakeViewK() if all else fails. </param>
            <param name="warn"> (Optional) true = show debug warning if invalid. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Matrix33.OrthoNormalize(System.Int32)">
            <summary> re-orthonormalize via Gram-Schmidt algorithm. </summary>
            <param name="priorityAxis">    (Optional) Which axis (X, Y or Z) is priority.  Z is the default). </param>
            <returns> true if it passes dot product check, false if it fails. </returns>
        </member>
        <member name="M:Matrix33.RemoveNoise(System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set matrix values that are less than theTol to 0.0. </summary>
            <param name="theTol">   the tolerance. </param>
            <param name="nChanged"> [in,out] The number of components changed. </param>
            <returns> true if matrix valid. </returns>
        </member>
        <member name="M:Matrix33.FixMatrix(System.Boolean)">
            <summary> correct bad matrix. </summary>
            <param name="doK"> true = use MakeViewK() if all else fails. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Matrix33.GetDirty">
            <summary> Gets the dirty. </summary>
            <returns> return value of m_Dirty. </returns>
        </member>
        <member name="M:Matrix33.SetDirty(System.Boolean)">
            <summary> set value m_Dirty. </summary>
            <param name="isDirty"> true=dirty, false=clean. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:Matrix33.v_angle_3D(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate the axis rotation angle from this with to the m33. </summary>
            <param name="m33"> Matrix33 to compare to. </param>
            <returns> return P3D of axis rotations in radians. </returns>
        </member>
        <member name="M:Matrix33.MakeViewK(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this with a given k component. </summary>
            <param name="normXprd"> k component. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.MultiplyMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply two 3x3 matrices. </summary>
            <param name="m33"> a Matrix33 object. </param>
            <returns> return result. </returns>
        </member>
        <member name="M:Matrix33.FormatString(System.Int32)">
            <summary> return CString of coordinate values. </summary>
            <param name="nPlaces"> (Optional) number of places behind the decimal point. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="M:Matrix33.SetTol(System.Double)">
            <summary> set the tolerance. </summary>
            <param name="theTol"> the tolerance. </param>
            <returns> . </returns>
        </member>
        <member name="M:Matrix33.GetTol">
            <summary> return tolerance. </summary>
            <returns> The tolerance. </returns>
        </member>
        <member name="M:Matrix33.SetTop">
            <summary> set this to TOP. </summary>
        </member>
        <member name="M:Matrix33.SetZero">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:Matrix33.GetComponent(System.Int32)">
            <summary> Gets the X, Y or Z component. </summary>
            <param name="XYorZ"> The X, Y or Z component. </param>
            <returns> The component. </returns>
        </member>
        <member name="M:Matrix33.SetZ(System.Double,System.Double,System.Double)">
            <summary> set value of Z component. </summary>
            <param name="xVal"> new XCOORD value of Z component. </param>
            <param name="yVal"> new YCOORD value of Z component. </param>
            <param name="zVal"> new ZCOORD value of Z component. </param>
            <returns> return previous Z component. </returns>
        </member>
        <member name="M:Matrix33.SetZ(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set value of Z component. </summary>
            <param name="obj"> new Z component value. </param>
            <returns> return previous Z component. </returns>
        </member>
        <member name="M:Matrix33.GetZ">
            <summary> return P3D Z component. </summary>
            <returns> The z coordinate. </returns>
        </member>
        <member name="M:Matrix33.SetY(System.Double,System.Double,System.Double)">
            <summary> set value of Y component. </summary>
            <param name="xVal"> new XCOORD value of Y component. </param>
            <param name="yVal"> new YCOORD value of Y component. </param>
            <param name="zVal"> new ZCOORD value of Y component. </param>
            <returns> return previous Y component. </returns>
        </member>
        <member name="M:Matrix33.SetY(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set value of Y component. </summary>
            <param name="obj"> new Y component value. </param>
            <returns> return previous Y component. </returns>
        </member>
        <member name="M:Matrix33.GetY">
            <summary> return P3D Y component. </summary>
            <returns> The y coordinate. </returns>
        </member>
        <member name="M:Matrix33.SetX(System.Double,System.Double,System.Double)">
            <summary> set value of X component. </summary>
            <param name="xVal"> new XCOORD value of X component. </param>
            <param name="yVal"> new YCOORD value of X component. </param>
            <param name="zVal"> new ZCOORD value of X component. </param>
            <returns> return previous X component. </returns>
        </member>
        <member name="M:Matrix33.SetX(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set value of X component. </summary>
            <param name="obj"> new X component value. </param>
            <returns> return previous X component. </returns>
        </member>
        <member name="M:Matrix33.GetX">
            <summary> return P3D X component. </summary>
            <returns> The x coordinate. </returns>
        </member>
        <member name="M:Matrix33.AngleBetween(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate angle between this and another parallel matrix. </summary>
            <param name="m33">			  The parallel matrix to measure against. </param>
            <param name="angleInDegrees"> Angle in degrees. </param>
            <returns> true if parallel and calculation successful. </returns>
        </member>
        <member name="M:Matrix33.RotateAboutAxis(System.Int32,System.Double)">
            <summary> rotate a Matrix33 about an axis by degrees. </summary>
            <param name="rotAxis">	   the X, Y or Z axis to rotate about. </param>
            <param name="rotAngleDeg"> rotation amount in degrees. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.FlipZaxisAboutXaxis">
            <summary> Flip this matrix's Z axis about its X axis. </summary>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.FlipZaxisAboutYaxis">
            <summary> Flip this matrix's Z axis about its Y axis. </summary>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.FlipAxis(System.Int32,System.Int32)">
            <summary> Flip this matrix by an axis. </summary>
            <param name="axisNo">   XCOORD, YCOORD or ZCOORD. </param>
            <param name="zRotAxis"> (Optional) if flipping Z axis, rotate about X or Y axis. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.IsValid(System.Boolean,System.Boolean,Matrix33.MatrixError*)">
            <summary> Return true if all values in this are valid. </summary>
            <param name="warn">		    (Optional) true = debug only warning. </param>
            <param name="forceCheck">   (Optional) true = ignore m_Dirty value and check values. </param>
            <param name="pMatrixError"> [in,out] (Optional) If non-null, (Optional) the matrix error. </param>
            <returns> Return true if matrix is mathematically correct. </returns>
        </member>
        <member name="M:Matrix33.IsLeftHand(System.Boolean)">
            <summary> test Matrix33 for 'left-handed' defintion. </summary>
            <param name="warn"> (Optional) the warning. </param>
            <returns> returns true if invalid values exist within m33. </returns>
        </member>
        <member name="M:Matrix33.Convert(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert Matrix33 to matrix_33. </summary>
            <param name="m33"> the destination matrix_33. </param>
        </member>
        <member name="M:Matrix33.IsParallel(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> return true if Matrix33 is parallel with given Matrix33. </summary>
            <param name="m33">	    3x3 matrix to compare to this. </param>
            <param name="opposite"> set to true if component is in the opposite direction. </param>
            <param name="axis">	    (Optional) The axis to check. </param>
            <returns> return true if Matrix33 is parallel with given Matrix33. </returns>
        </member>
        <member name="M:Matrix33.AlignAxis(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> align axis of this to given matrix's axis. </summary>
            <param name="mDatum">	   3x3 matrix to align axis to. </param>
            <param name="axisToAlign"> X, Y or Z axis to align. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Matrix33.AxesAligned(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true if ALL view axes are aligned. </summary>
            <param name="m33">	    The matrix to compare. </param>
            <returns> true if axis aligned, false if not. </returns>
        </member>
        <member name="M:Matrix33.AxisAligned(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true if the requested axis is aligned with given axis. </summary>
            <param name="m33">	    The matrix to compare. </param>
            <param name="axisNo">   The axis no (XCOORD, YCOORD or ZCOORD). </param>
            <param name="opposite"> Allow opposite direction comparison. </param>
            <returns> true if axis aligned, false if not. </returns>
        </member>
        <member name="M:Matrix33.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:Matrix33.IsEqualNormalized(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Return true if ortho-normalized Matrix33 is equal within a tolerance. </summary>
            <param name="obj">	    another Matrix33 to compare this with. </param>
            <param name="matchTol"> (Optional) match tolerance. </param>
            <returns> Return true if equal. </returns>
        </member>
        <member name="M:Matrix33.IsEqual(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Return true if Matrix33 is equal within a tolerance. </summary>
            <param name="obj">	    another Matrix33 to compare this with. </param>
            <param name="matchTol"> (Optional) match tolerance. </param>
            <returns> Return true if equal. </returns>
        </member>
        <member name="M:Matrix33.op_GreaterThan(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. Use for std::map when a key. </summary>
            <param name="obj"> The matrix to compare. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:Matrix33.op_LessThan(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. Use for std::map when a key. </summary>
            <param name="obj"> The matrix to compare. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Matrix33.op_Inequality(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="m33"> The matrix to compare. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Equality(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="m33"> The matrix to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Equality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Inequality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Assign(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using a matrix_33. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Matrix33.op_Assign(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Matrix33.op_Subscript(System.Int64)">
            <summary> subscript operator - return XCOORD, YCOORD or ZCOORD. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:Matrix33.#ctor(a_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from a_3d. </summary>
            <param name="theArc"> arc info. </param>
        </member>
        <member name="M:Matrix33.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from 3 P3D's. </summary>
            <param name="normXprd"> k component. </param>
        </member>
        <member name="M:Matrix33.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from 3 P3D's. </summary>
            <param name="X3"> valid X component. </param>
            <param name="Y3"> valid Y component. </param>
            <param name="Z3"> valid Z component. </param>
        </member>
        <member name="M:Matrix33.#ctor(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from matrix_33. </summary>
            <param name="m33"> the matrix_33 to copy from. </param>
        </member>
        <member name="M:Matrix33.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:Matrix33.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:Matrix33.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Matrix33.MatrixError">
            <summary> Values that represent invalid components of a Matrix33. </summary>
        </member>
        <member name="T:Matrix33">
            <summary> Constructs a Matrix33 object to be used instead of Mastercam's matrix_33</summary>
        </member>
        <member name="M:L3D.Distance_P3D_L3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the 3D distance between a P3D and a L3D. </summary>
            <param name="pt">   the point. </param>
            <param name="line"> the line. </param>
            <returns> return the distance between to P3D's. </returns>
        </member>
        <member name="M:L3D.ConvertTo_l_3d">
            <summary> convert and return this L3D in l_3d format. </summary>
            <returns> object converted to a l 3D. </returns>
        </member>
        <member name="M:L3D.GetPoint2(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get point #2 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint2(System.Double*)">
            <summary> get point #2 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint2">
            <summary> get point #2 of this L3D. </summary>
            <returns> The point 2. </returns>
        </member>
        <member name="M:L3D.SetPoint2(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set point #2 of this L3D. </summary>
            <param name="pt2"> The second point. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:L3D.GetPoint1(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get point #1 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint1(System.Double*)">
            <summary> get point #1 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint1">
            <summary> get point #1 of this L3D. </summary>
            <returns> The point 1. </returns>
        </member>
        <member name="M:L3D.SetPoint1(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set point #1 of this L3D. </summary>
            <param name="pt1"> The first point. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:L3D.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:L3D.op_Equality(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:L3D.op_Inequality(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:L3D.op_Assign(l_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using a l_3d. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:L3D.op_Assign(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:L3D.#ctor(l_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:L3D.#ctor(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:L3D.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor from 2 P3D's. </summary>
            <param name="pt1"> The first point. </param>
            <param name="pt2"> The second point. </param>
        </member>
        <member name="M:L3D.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:L3D.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:L3D">
            <summary> Constructs a L3D object to be used instead of Mastercam's l_3d</summary>
        </member>
        <member name="M:P3DS.SetRelativeWcsID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set relative WCS ID. </summary>
            <param name="relativeWcsID"> Identifier for the relative wcs. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:P3DS.GetRelativeWcsID">
            <summary> return relative WCS ID. </summary>
            <returns> The relative wcs identifier. </returns>
        </member>
        <member name="M:P3DS.SetPlaneID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set parent plane ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:P3DS.GetPlaneID">
            <summary> return parent plane ID. </summary>
            <returns> The plane identifier. </returns>
        </member>
        <member name="M:P3DS.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> assignment operator for plane ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3DS.op_Assign(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator for P3D. </summary>
            <param name="pt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3DS.Dispose">
            <summary>destructor</summary>
        </member>
        <member name="M:P3DS.#ctor(P3DS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:P3DS.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> construct from P3D and a plane ID. </summary>
            <param name="pt">	   The point. </param>
            <param name="planeID"> (Optional) identifier for the plane. </param>
        </member>
        <member name="T:P3DS">
            <summary> Mastercam P3DS definition (same as P3D, but contains parent Plane ID and m_RelativeWcsID). </summary>
        </member>
        <member name="F:P3D.m_X">
            <summary> convert a P3D in world coordinates to world coordinates. </summary>
            <param name="thePt">  the P3D in world coordinates to convert. </param>
        </member>
        <member name="M:P3D.Distance_P3D_P3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> return the 3D distance between to P3D's. </summary>
            <param name="pt2">		    point #2 of 2. </param>
            <param name="do2Ddistance"> (Optional) return 2D distance instead of 3D. </param>
            <returns> return the distance between to P3D's. </returns>
        </member>
        <member name="M:P3D.FormatString(System.Int32)">
            <summary> return CString of coordinate values. </summary>
            <param name="nPlaces"> (Optional) number of places behind the decimal point. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="M:P3D.v_angle_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the angle formed by two 3d vectors. </summary>
            <param name="v2"> P3D representing a vector. </param>
            <returns> return the angle in radians between v2 and this. </returns>
        </member>
        <member name="M:P3D.v_scale_3D(System.Double)">
            <summary> apply a scalar to the values. </summary>
            <param name="scale"> the scalar. </param>

### <returns> return scaled P3D or this. </returns></member>
        <member name="M:P3D.v_neg_3D">
            <summary> negative of a 3D vector. </summary>
            <returns> return the negative of a 3D vector. </returns>
        </member>
        <member name="M:P3D.v_cross_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the cross product (vector product) of this and the given vector. </summary>
            <param name="v2"> the 2nd vector. </param>
            <returns> return the cross product. </returns>
        </member>
        <member name="M:P3D.v_dot_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the dot product (scalar product) of this and the given vector. </summary>
            <param name="v2"> the 2nd vector. </param>
            <returns> return the dot product. </returns>
        </member>
        <member name="M:P3D.v_norm_3D">
            <summary> normalize and return the vector. </summary>
            <returns> . </returns>
        </member>
        <member name="M:P3D.v_parallel_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determine if vector is parallel to this. </summary>
            <param name="v2"> The second P3D. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:P3D.v_length_3D">
            <summary> calculate and return the length of the vector. </summary>
            <returns> . </returns>
        </member>
        <member name="M:P3D.v_lincmb_3D(System.Double,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> find the linear combination of two 3d vectors. </summary>
            <param name="aFac"> The fac. </param>
            <param name="pt1">  The first point. </param>
            <param name="bFac"> The fac. </param>
            <param name="pt2">  The second point. </param>
            <returns> return the combination. </returns>
        </member>
        <member name="M:P3D.Convert(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the values in p_3d format. </summary>
            <param name="thePt"> the destination p_3d. </param>
        </member>
        <member name="M:P3D.RemoveNoise(System.Double)">
            <summary> Set values that are less than theTol to 0.0. </summary>
            <param name="theTol"> the tolerance. </param>
            <returns> Number of values changed. </returns>
        </member>
        <member name="M:P3D.Zero">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:P3D.SetTol(System.Double)">
            <summary> set value of tolerance. </summary>
            <param name="newTol"> new tolerance value. </param>
            <returns> return previous value of tolerance. </returns>
        </member>
        <member name="M:P3D.GetTol">
            <summary> return tolerance value. </summary>
            <returns> The tolerance. </returns>
        </member>
        <member name="M:P3D.SetXYZ(System.Double,System.Double,System.Double)">
            <summary> set XCOORD, YCOORD and ZCOORD values. </summary>
            <param name="newX"> new XCOORD component value. </param>
            <param name="newY"> new YCOORD component value. </param>
            <param name="newZ"> new ZCOORD component value. </param>
        </member>
        <member name="M:P3D.GetComponentPtr(System.Int32)">
            <summary> Gets a const pointer to the X, Y or Z component. </summary>
            <param name="XYorZ"> The X, Y or Z component. </param>
            <returns> The const pointer, nullptr if invalid XYorZ value. </returns>
        </member>
        <member name="M:P3D.GetComponent(System.Int32)">
            <summary> Gets the X, Y or Z component. </summary>
            <param name="XYorZ"> The X, Y or Z component. </param>
            <returns> The component. </returns>
        </member>
        <member name="M:P3D.SetZ(System.Double)">
            <summary> set value of ZCOORD component. </summary>
            <param name="newZ"> new ZCOORD component value. </param>
            <returns> return previous value of ZCOORD component. </returns>
        </member>
        <member name="M:P3D.GetZ">
            <summary> return ZCOORD component. </summary>
            <returns> return XCOORD component. </returns>
        </member>
        <member name="M:P3D.SetY(System.Double)">
            <summary> set value of YCOORD component. </summary>
            <param name="newY"> new YCOORD component value. </param>
            <returns> return previous value of YCOORD component. </returns>
        </member>
        <member name="M:P3D.GetY">
            <summary> return YCOORD component. </summary>
            <returns> return YCOORD component. </returns>
        </member>
        <member name="M:P3D.SetX(System.Double)">
            <summary> set value of XCOORD component. </summary>
            <param name="newX"> new XCOORD component value. </param>
            <returns> return previous value of XCOORD component. </returns>
        </member>
        <member name="M:P3D.GetX">
            <summary> return XCOORD component. </summary>
            <returns> return XCOORD component. </returns>
        </member>
        <member name="M:P3D.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:P3D.IsEqual(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Return true if P3D is equal within a tolerance. </summary>
            <param name="obj">	    another P3D to compare this with. </param>
            <param name="matchTol"> (Optional) match tolerance. </param>
            <returns> Return true if equal. </returns>
        </member>
        <member name="M:P3D.op_Subscript(System.Int64)">
            <summary> subscript operator. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> subscript operator. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:P3D.op_GreaterThan(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:P3D.op_LessThan(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. Use in std::map as a key. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:P3D.op_Equality(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:P3D.op_Inequality(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:P3D.op_Inequality(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> comparison operator. </summary>
            <param name="pObj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:P3D.op_Assign(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using a const a p_3d. </summary>
            <param name="pnt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3D.op_Assign(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> assignment operator using a const double * pointing to a p_3d. </summary>
            <param name="pObj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3D.op_Assign(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3D.op_AdditionAssignment(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> addition-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:P3D.op_SubtractionAssignment(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtraction-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:P3D.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:P3D.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:P3D.#ctor(System.Double,System.Double,System.Double)">
            <summary> construct from XCOORD, YCOORD &amp; ZCOORD. </summary>
            <param name="Xval"> The xval. </param>
            <param name="Yval"> The yval. </param>
            <param name="Zval"> The zval. </param>
        </member>
        <member name="M:P3D.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from p_3d. </summary>
            <param name="pnt"> The point. </param>
        </member>
        <member name="M:P3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> parameteritized constructor from double ptr pointing to a double[3]. </summary>
            <param name="pDouble"> The double. </param>
        </member>
        <member name="M:P3D.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:P3D">
            <summary> Mastercam P3D definition. </summary>
        </member>
        <member name="T:PlanesUpdated">
            <summary> Return value for Set() and Replace() </summary>
        </member>
        <member name="T:CoordinateDisplayType">
            <summary> Values that represent CoordinateDisplayType. </summary>
        </member>
        <member name="T:PlaneClass">
            <summary> Values that represent class of plane. </summary>
        </member>
        <member name="T:PlaneType">
            <summary> Plane types. </summary>
        </member>
        <member name="T:Cnc.Tool.ToolRef">
            <summary>	Tool reference information. </summary>
        </member>
        <member name="T:htl_list">
            <summary>	for linked lists of head tool entities. </summary>
        </member>
        <member name="T:BlockToolRecord">
            <summary>	Information about the block tool. </summary>
        </member>
        <member name="T:ltl_list">
for linked lists of lathe tool entities 
</member>
        <member name="T:tl_list">
for linked lists of mill tool entities 
</member>
        <member name="T:tp_holder">
holder segment definition *
</member>
        <member name="T:tp_tool">
tool definition 
</member>
        <member name="T:tool_attr_head">
tool parameters - Multi tool head specific -block tools/drills/aggregates 
</member>
        <member name="T:tool_attr_drill">
tool parameters - drill specific 
</member>
        <member name="T:tool_attr_mill">
tool parameters - mill specific 
</member>
        <member name="T:op_tool_info">
operation parameters - common tool parameters for all operation types 
</member>
        <member name="T:control_post_type">
Control Post ID
</member>
        <member name="T:control_component_type">
Control Component
</member>
        <member name="T:control_type">
Control Base ID
</member>
        <member name="T:ent_idn_ctrl">
Control link ent_idn
</member>
        <member name="T:wire_nc_path_ctrl">
Wire NC path values
</member>
        <member name="T:nc_wire_nocore_ctrl">
Wire nocore
</member>
        <member name="T:nc_wire_taper_ctrl">
Wire 4 axis
</member>
        <member name="T:nc_wire_aux_rev_ctrl">
Wire reverse auxiliary
</member>
        <member name="T:nc_wire_reverse_ctrl">
Wire reverse
</member>
        <member name="T:nc_wire_corner_ctrl">
Wire corners
</member>
        <member name="T:nc_wire_cuts_ctrl">
Wire cuts
</member>
        <member name="T:nc_wire_leads_ctrl">
Wire leads
</member>
        <member name="T:cycles_ctrl">
Machine Cycles
</member>
        <member name="T:nc_lathe_cycles_ctrl">
Lathe canned cycles
</member>
        <member name="T:nc_drill_cycles_ctrl">
Drill cycles
</member>
        <member name="T:nc_gen_cycles_ctrl">
General canned cycle
</member>
        <member name="T:nc_path_ctrl">
General NC path values
</member>
        <member name="T:nc_path_subs_ctrl">
Subprograms
</member>
        <member name="T:nc_path_comp_ctrl">
Cutter compensation
</member>
        <member name="T:nc_path_feed_ctrl">
Feed
</member>
        <member name="T:nc_path_rotary_ctrl">
Rotary
</member>
        <member name="T:nc_path_arc_ctrl">
Arc
</member>
        <member name="T:nc_path_linear_ctrl">
Linear
</member>
        <member name="T:nc_path_tool_ctrl">
Tool
</member>
        <member name="T:nc_path_worksys_ctrl">
Work system
</member>
        <member name="T:nc_output_ctrl">
NC Output
</member>
        <member name="T:nc_dialog_wire_ctrl">
NC Dialog Wire
</member>
        <member name="T:nc_dialog_lathe_ctrl">
NC Dialog Lathe
</member>
        <member name="T:nc_dialog_router_ctrl">
NC Dialog Router
</member>
        <member name="T:nc_dialog_mill_ctrl">
NC Dialog Mill
</member>
        <member name="T:file_postlist_ctrl">
Post file list element
</member>
        <member name="T:file_ctrl">
Files Common
</member>
        <member name="T:communication_ctrl">
Communication
</member>
        <member name="T:tolerance_ctrl">
DBvars_CH.h
@defgroup controldb_ch1 Control component union type 
@{ 
@} 
@defgroup controldb_ch2 Control post union type 
@{ 
@} 
@defgroup controldb_ch3 Control type defines 
@{ 
@} 
@defgroup controldb_ch5 Control class access types 
@{ 
@} 
@defgroup controldb_ch6 File status 
@{ 
@} 
@defgroup controldb_ch7 Pop menu selections 
@{ 
@} 
@defgroup controldb_ch8 CNCControl errors 
@{ 
@} 
@defgroup controldb_ch10 CNCControl file 
@{ 
@} 
@defgroup controldb_ch11 Multiple selection defines 
@{ 
@defgroup controldb_ch12 Control init option option 
@{ 
@} 
@defgroup controldb_ch13 Control misc option 
@{ 
@} 
@defgroup controldb_ch14 Control drill option 
@{ 
@} 
@defgroup controldb_ch15 snAddToToolRegister 
@{ 
@} 
@defgroup controldb_ch16 snTransOperParams 
@{ 
@} 
@defgroup controldb_ch17 snWorkOffsetNumberTPlane 
@{ 
@} 
@defgroup controldb_ch18 snWorkCoordinate 
@{ 
@} 
@defgroup controldb_ch19 snGetHomePosition 
@{ 
@} 
@defgroup controldb_ch20 snRapidDestination... 
@{ 
@} 
@defgroup controldb_ch21 snXYlinPlaneControl...\nsnXYbreakArc... 
@{ 
@} 
@defgroup controldb_ch22 snMoveEndOption 
@{ 
@} 
@defgroup controldb_ch23 snXYcenterType... 
@{ 
@} 
@defgroup controldb_ch24 snHelixType 
@{ 
@} 
@defgroup controldb_ch25 snThreeAxisFeed, snFourAxisFeed, snFourAxisRotFeed, snFiveAxisFeed, snFiveAxisRotFeed	
@{ 
@} 
@defgroup controldb_ch26 snInverseFeed 
@{ 
@} 
@defgroup controldb_ch27 snArcCheckEndPointType 
@{ 
@} 
@defgroup controldb_ch28 snSubLocationInNC 
@{ 
@} 
@defgroup controldb_ch30 snThreadType 
@{ 
@} 
@defgroup controldb_ch31 snLeadInType, snLeadOutType 
@{ 
@} 
@defgroup controldb_ch32 snRevPosCornerType..., snAuxRevPosReg1... 
@{ 
@} 
@defgroup controldb_ch33 snAuxRevModReg1 
@{ 
@} 
@defgroup controldb_ch34 snReturnDrill 
@{ 
@} 
@defgroup controldb_ch35 snInitAbsoluteMatching 
@{ 
@} 
@defgroup controldb_ch36 snRefAbsoluteMatching - snDepthAbsoluteMatching 
@{ 
@} 
@} 
Tolerances
 *
 *	Tolerance settings for posting, 'var' are MP variables

</member>
        <member name="F:cnc_machine_type.dataStreams_ent_idn">
data stream names
</member>
        <member name="F:cnc_machine_type.supportsEvents">
machine supports event-based programming - post must match
</member>
        <member name="F:cnc_machine_type.version">
version number major.minor starting with 11.2 (X2 MR2)
</member>
        <member name="F:cnc_machine_type.autoLoadTools">
automatically load tools when changing MGP machines
</member>
        <member name="F:cnc_machine_type.supportsRTCP">
does the machine support RTCP
</member>
        <member name="F:cnc_machine_type.id">
unique identifier for this machine
</member>
        <member name="F:cnc_machine_type.cplane">
default construction plane
</member>
        <member name="F:cnc_machine_type.maxWireTaperAngle">
maximum wire taper angle (deg)
</member>
        <member name="F:cnc_machine_type.holderCatalogFile">
holder catalog file
</member>
        <member name="F:cnc_machine_type.insertCatalogFile">
insert catalog file
</member>
        <member name="F:cnc_machine_type.machModeList_ent_idn">
ent_idn of list of machining modes
</member>
        <member name="F:cnc_machine_type.axisComboList_ent_idn">
ent_idn of list of axis combination entities
</member>
        <member name="F:cnc_machine_type.refPosList_ent_idn">
ent_idn of of list of machine reference positions
</member>
        <member name="F:cnc_machine_type.firstGroup_ent_idn">
ent_idn of 1st component group entity
</member>
        <member name="F:cnc_machine_type.machineBase_ent_idn">
ent_idn of machine base component entity
</member>
        <member name="F:cnc_machine_type.ctrlDef_ent_idn">
ent_idn of related control definition
</member>
        <member name="F:cnc_machine_type.ent_idn">
ent_idn for the cnc machine entity (this one!)
</member>
        <member name="F:cnc_machine_type.useTbState">
use the toolbar state
</member>
        <member name="F:cnc_machine_type.tbState">
name of tool bar state to load with machine
</member>
        <member name="F:cnc_machine_type.comment">
comment to describe the machine
</member>
        <member name="F:cnc_machine_type.matlLibFile">
material library file (inch, mm)
</member>
        <member name="F:cnc_machine_type.toolLibFile">
tool library files (inch, mm)
</member>
        <member name="F:cnc_machine_type.pstFile">
post-processor file
</member>
        <member name="F:cnc_machine_type.ctrlDefFile">
control definition file
</member>
        <member name="F:cnc_machine_type.coolant">
coolant
</member>
        <member name="F:cnc_machine_type.opFeedrates">
toolpath operation feedrate limits - inch, mm / min, deg/min, 1/sec
</member>
        <member name="F:cnc_machine_type.maxLinearFeedrates">
global maximum machine axis feedrates
</member>
        <member name="F:cnc_machine_type.pad1">
for rent
</member>
        <member name="F:cnc_machine_type.configurationId">
MT .machine configuration GUID - gets assigned when the machine is loaded into a machine group
</member>
        <member name="F:cnc_machine_type.macros">
macro event lists
</member>
        <member name="F:cnc_machine_type.eventDflts">
event defaults event list
</member>
        <member name="F:cnc_machine_type.dynamics">
machine dynamics information for high-feed machining
and operation timing calculations
</member>
        <member name="F:cnc_machine_type.multiAxMotion">
multi-axis motion control
</member>
        <member name="F:cnc_machine_type.dfltLatheWCS">
lathe default WCS - 0 = none, 1 = top, 2 = LATHEZ=WORLDZ
</member>
        <member name="F:cnc_machine_type.vtl">
Is this a VTL? (lathe only)
</member>
        <member name="F:cnc_machine_type.type">
machine type (mill, lathe, router, wire EDM currently supported)
</member>
        <member name="T:cnc_machine_type">
@} 
CNC machine definition
</member>
        <member name="T:post_axis_combo_type">
axis combo information in an MP friendly format
</member>
        <member name="F:machine_dynamics_type.machAccel">
machine motion acceleration value
</member>
        <member name="F:machine_dynamics_type.syncTimingStep">
@} 
@defgroup dynamic information NOT for high-feed 
@{ 
timing increment for MATSS sync-list
</member>
        <member name="F:machine_dynamics_type.centrip_accel">
cornering acceleration
</member>
        <member name="F:machine_dynamics_type.test_radius">
corner radius
</member>
        <member name="F:machine_dynamics_type.min_corner_fr">
feedrate to slow down to at sharp corners
</member>
        <member name="F:machine_dynamics_type.corner_angle">
minimum change in direction to slow down to min_corner_fr
</member>
        <member name="F:machine_dynamics_type.accel_seg_len_pct">
segment length as % of tool diameter
</member>
        <member name="F:machine_dynamics_type.accelerate">
apply acceleration
</member>
        <member name="F:machine_dynamics_type.max_fr_change">
maximum feedrate change per block
</member>
        <member name="F:machine_dynamics_type.look_ahead_pct">
look-ahead as a percentage of tool diameter
</member>
        <member name="F:machine_dynamics_type.recombine_pct">
@defgroup parameters taken from HighFeed_E.h 
@{ 
maximum change in feedrate to recombine segments (%)
</member>
        <member name="T:machine_dynamics_type">
Machine dynamic parameters
</member>
        <member name="F:coolant_type.submergedWire">
use coolant to control submerged wire
</member>
        <member name="F:coolant_type.useEventList">
use event list to activate coolant
</member>
        <member name="F:coolant_type.useCoolantFromPost">
use coolant commands in post-processor (provided for backward compatibility)
</member>
        <member name="F:coolant_type.firstCoolantOffShutsOffAll">
1st 'coolant off' command shuts off ALL coolant commands on the machine
</member>
        <member name="F:coolant_type.btnTxt">
coolant button text for tool page
</member>
        <member name="F:coolant_type.offTxt">
'coolant off' interface display text
</member>
        <member name="F:coolant_type.onTxt">
'coolant on' interface display text
</member>
        <member name="F:coolant_type.baseTxt">
'base' coolant interface display text
</member>
        <member name="T:coolant_type">
Coolant
</member>
        <member name="F:multiax_motion_type.maxCombinedAngle">
maximum combined angle before break is required
</member>
        <member name="F:multiax_motion_type.breakRotaryCombined">
break combined rotary axis motion
</member>
        <member name="T:multiax_motion_type">
@defgroup cnc_machine_parameters CNC machine parameters 
@{ 
Multi-axis motion control
</member>
        <member name="F:component_group_type.ent_idns">
ent_idns of this and related entities in database\n
ent_idns.thisEnt is used as the group reference stored with operations
</member>
        <member name="F:component_group_type.firstComponent_ent_idn">
ent_idn for 1st component in group
</member>
        <member name="F:component_group_type.firstParam_ent_idn">
ent_idn for 1st component group parameters entity in the list
</member>
        <member name="T:component_group_type">
            <summary>	 ! DEPRECATED ! Old Component group definition. Since 2020, replaced by CComponentGroup class members.  </summary>
        </member>
        <member name="D:machine_axis_data">
 @brief array for storing the number of each possible axis of motion for an operation

 Entry 0 isn't used, entries 1-&gt;LAST_AXIS_TYPE correspond to axis definitions
 The value identifies the number of each unique axis present

 endcode

</member>
        <member name="D:group_class_and_type">
 @brief single value to store group class and type for a set of component group parameters

 The value is represented as: (100000 x group class) + group type

</member>
        <member name="F:component_group_params.ent_idns">
ent_idns of this and related entities in database
</member>
        <member name="F:component_group_params.groupType">
specific group type (UL_TOOLS_GROUP, etc.)
</member>
        <member name="F:component_group_params.groupClass">
general component group class (PART_HOLDING_GROUP_TYPE, etc.)
</member>
        <member name="T:component_group_params">
Component group parameters
 @brief Component group parameters

 A linked list of these parameters is stored with a component group.
 This allows a group to have the parameters of more than one group type.
 For example, a component group can have both turret and spindle parameters.
 The turret and spindle specific parameters are stored in different entries
 in the list

</member>
        <member name="F:machine_component_type.u">
component type specific parameters
</member>
        <member name="F:machine_component_type.g">
geometry definition parameters (non-component specific)
</member>
        <member name="F:machine_component_type.geoType">
type of geometry used to define the component
</member>
        <member name="F:machine_component_type.machine_ent_idn">
ent_idn of owner machine
</member>
        <member name="F:machine_component_type.ent_idns">
ent_idns of this and related entities in database
</member>
        <member name="F:machine_component_type.curPos">
current position of anchorPt (world coordinates)
= anchorPt position on the machine at start of program most of the time... [REMOVE]
</member>
        <member name="F:machine_component_type.curXform">
transformation matrix to put component @ current NC position
= initXform initially [REMOVE]
</member>
        <member name="F:machine_component_type.initXform">
transformation matrix to put component on machine @ initial position
</member>
        <member name="F:machine_component_type.initPt">
position of reference point with component on machine @ initial position
in world coordinates
</member>
        <member name="F:machine_component_type.anchorPt">
point on component which is actually positioned in the NC program
(world coordinates)
</member>
        <member name="F:machine_component_type.refPt">
reference point on component in world coordinates,
</member>
        <member name="F:machine_component_type.color">
color to draw component
</member>
        <member name="F:machine_component_type.type">
type of component (machine base, chuck, turret, etc)
</member>
        <member name="F:machine_component_type.groupID">
component group id
</member>
        <member name="T:machine_component_type">
@} 
CNC machine component parameters
</member>
        <member name="F:multi_tool_component_type.aggHeadGeo">
aggregate head parametric geometry definition
</member>
        <member name="F:multi_tool_component_type.WCS_num">
work offset number
</member>
        <member name="F:multi_tool_component_type.tool_axis_length">
tool length
</member>
        <member name="F:multi_tool_component_type.z_angle">
tilt angle
</member>
        <member name="F:multi_tool_component_type.xy_angle">
machine view angle
</member>
        <member name="F:multi_tool_component_type.stationPosition">
X,Y,Z station position
</member>
        <member name="F:multi_tool_component_type.stationAnchor">
X,Y,Z block anchor position
</member>
        <member name="F:multi_tool_component_type.tc_type">
tool change type
</member>
        <member name="F:multi_tool_component_type.axis">
Orientation axis
</member>
        <member name="F:multi_tool_component_type.type">
Aggregate type
</member>
        <member name="F:multi_tool_component_type.idn">
station/block number
</member>
        <member name="T:multi_tool_component_type">
Aggregate head component parameters
</member>
        <member name="F:gang_tool_component_type.turretFace">
turret face number on which this gang is installed (if any...)
</member>
        <member name="F:gang_tool_component_type.slantAngle">
angle of slant bed that gang is installed on
used for determining tool alignment in tool location components
</member>
        <member name="F:gang_tool_component_type.spindleSpeeds">
min./max. spindle speed for live tools
</member>
        <member name="T:gang_tool_component_type">
Gang tool component parameters
</member>
        <member name="F:turret_component_type.useXStickout">
flags for applying the stickout values
</member>
        <member name="F:turret_component_type.xStickout">
default 'stickout' lengths for auto tooling the turret
</member>
        <member name="F:turret_component_type.slantAngle">
slant angle (deg.) - used for computing the axis of rotation and indexed tool vectors
</member>
        <member name="F:turret_component_type.spindleSpeeds">
min./max. spindle speed for live tools
</member>
        <member name="F:turret_component_type.geo">
turret parametric geometry definition
</member>
        <member name="F:turret_component_type.indexType">
CW, CCW, OPTIMIZE
</member>
        <member name="F:turret_component_type.numFaces">
number of tool stations defined
</member>
        <member name="F:turret_component_type.indexTime">
time to index between adjacent faces (sec.)
</member>
        <member name="F:turret_component_type.indexedToolAxis">
defines direction of tools in indexed position
must be perpendicular to rotaryAxis
</member>
        <member name="F:turret_component_type.rotaryAxis">
axis of turret rotation
defines CW/CCW direction for auto-face numbering
</member>
        <member name="T:turret_component_type">
Turret component parameters
</member>
        <member name="T:tool_spindle_component_type">
Tool spindle component parameters
This also applies to the turning tool device that works on machines that
use an ATC for turning tools
'standard' geometry types are supported
</member>
        <member name="F:atc_component_type.pad">
default tool in the spindle
</member>
        <member name="F:atc_component_type.indexTime">
time to index between adjacent ATC pockets
</member>
        <member name="F:atc_component_type.toolChgPos">
tool change machine position - not used
</member>
        <member name="F:atc_component_type.maxTools">
max. number of tools in carousel
</member>
        <member name="F:atc_component_type.timeToChange">
time to swap the tool in the spindle
</member>
        <member name="F:atc_component_type.indexMethod">
NO_INDEXING, +IVE, -IVE, MINIMIZE_TIME
</member>
        <member name="T:atc_component_type">
@} 
@defgroup multi_tool_component_types Multi-tool component types
@{ 
 @brief automatic tool changer (ATC) component parameters

 tool change kinematic simulation is not currently supported,
 this component is necessary:
 to provide tool change times
 so machine simulation knows where to send the tools for a tool change
 'standard' geometry types are supported

</member>
        <member name="T:tool_component_type">
Tool component type
</member>
        <member name="F:mh_piggyback_component_type.stationSpacing">
X,Y,Z spacing for the stations
</member>
        <member name="T:mh_piggyback_component_type">
Multi-head piggyback component parameters
</member>
        <member name="F:multi_head_component_type.stationSpacing">
X,Y,Z spacing for the stations
</member>
        <member name="T:multi_head_component_type">
Multi-head head component parameters
</member>
        <member name="F:drill_block_station_component_type.stationGeo">
station geometry definition
</member>
        <member name="F:drill_block_station_component_type.stationGeoType">
station geometry type
</member>
        <member name="F:drill_block_station_component_type.blockGeo">
block geometry definition
</member>
        <member name="F:drill_block_station_component_type.blockGeoType">
block geometry type
</member>
        <member name="F:drill_block_station_component_type.stationPosition">
X,Y,Z position for the stations
</member>
        <member name="F:drill_block_station_component_type.stationAnchor">
X,Y,Z block Anchor position
</member>
        <member name="F:drill_block_station_component_type.idn">
station/block number
</member>
        <member name="T:drill_block_station_component_type">
Router drill block station component parameters
</member>
        <member name="F:wire_lower_guide_component_type.geo">
guide geometry
</member>
        <member name="T:wire_lower_guide_component_type">
Wire lower guide component type
</member>
        <member name="F:wire_upper_guide_component_type.geo">
guide geometry
</member>
        <member name="F:wire_upper_guide_component_type.alignWithLower">
align guide vertically with lower guide at home position
</member>
        <member name="F:wire_upper_guide_component_type.threadTime">
thread time (sec)
</member>
        <member name="T:wire_upper_guide_component_type">
Wire upper guide component type
</member>
        <member name="F:wire_guide_geo_type.majorRad">
geometry
</member>
        <member name="T:wire_guide_geo_type">
wire guide geometry type
</member>
        <member name="F:tool_location_type.pad">
for rent
</member>
        <member name="F:tool_location_type.allowLatheDrills">
allow fixed (Lathe) drilling tools at this location
</member>
        <member name="F:tool_location_type.allowLiveTools">
allow live (Mill) tools at this station
</member>
        <member name="F:tool_location_type.allowInsertUpTools">
allow fixed (Lathe) tools at this location (NOT lathe drills!)
</member>
        <member name="F:tool_location_type.allowFaceTools">
allow face tools at this location
</member>
        <member name="F:tool_location_type.allowCrossTools">
allow cross tools at this location
</member>
        <member name="F:tool_location_type.anyStation">
use this locator for any tool, irregardless of the tool station #
</member>
        <member name="F:tool_location_type.toolStation">
tool station number to match on
</member>
        <member name="F:tool_location_type.allPositions">
use this locator for all turret index or gang tool positions
</member>
        <member name="F:tool_location_type.toolPosnType">
reference point on tool for this locator
TOOL_LOC_CENTER,	   TOOL_LOC_TOP_LEFT,	  TOOL_LOC_CENTER_LEFT,
TOOL_LOC_BOTTOM_LEFT,  TOOL_LOC_TOP_CENTER,	  TOOL_LOC_TOP_RIGHT,
TOOL_LOC_CENTER_RIGHT, TOOL_LOC_BOTTOM_RIGHT, TOOL_LOC_BOTTOM_CENTER,
TOOL_LOC_USER,	
</member>
        <member name="F:tool_location_type.toolXformType">
method by which the user defined the tool transformation view
TOOL_XFORM_CROSS_UPPER,	TOOL_XFORM_CROSS_LOWER,
TOOL_XFORM_FACE_LEFT,	TOOL_XFORM_FACE_RIGHT,
TOOL_XFORM_NAMED_VIEW
</member>
        <member name="F:tool_location_type.toolXformID">
tool transformation matrix named view v_idn
</member>
        <member name="F:tool_location_type.useStickout">
use the stickout value
</member>
        <member name="F:tool_location_type.stickout">
stickout length for the tool
</member>
        <member name="F:tool_location_type.gangToolPos">
gang tool position ID for a tool
</member>
        <member name="F:tool_location_type.turretFace">
turret face number for a tool
</member>
        <member name="F:tool_location_type.atcPocket">
ATC pocket for a tool
</member>
        <member name="F:tool_location_type.toolXform">
position and orientation tool for this location
used for pre-defined tool position and orientation for spindles, turrets,
and gangs
</member>
        <member name="T:tool_location_type">
@} 
@defgroup single_tool_component_types Single tool component types
@{ 
</member>
        <member name="T:steadyrest_component_type">
Steady rest component parameters
</member>
        <member name="T:steadyrest_geo_type">
Steady rest structure (X)
</member>
        <member name="T:tailstock_component_type">
Tailstock component parameters
</member>
        <member name="T:tailstock_geo_type">
Tailstock structure (X)
</member>
        <member name="T:lathe_center_component_type">
Centre component parameters (live or dead centre, no taper is modelled)
This is a special component added directly from the MGP stock setup page
</member>
        <member name="T:lathe_center_geo_type">
@} 
@defgroup programmable_misc_tooling_component_types Programmable misc tooling component types
@{ 
Centre component geometry (live or dead centre, no taper is modelled)
</member>
        <member name="T:guide_bushing_component_type">
Guide bushing component parameters
</member>
        <member name="F:collet_component_type.geo">
parametric geometry definition
</member>
        <member name="T:collet_component_type">
Collet component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:chuck_component_type">
Chuck component parameters
</member>
        <member name="T:chuck_geo_type">
Chuck geometry type
</member>
        <member name="T:chuckjaws_component_type">
Chuck jaw(s) component
This is a special component added directly from the MGP stock setup page
</member>
        <member name="T:chuckjaw_stock_stickout">
Chuck jaw stock stickout
</member>
        <member name="T:chuckjaw_geo_type">
Chuck jaw geometry
</member>
        <member name="T:vise_component_type">
Machine vise component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:vise_jaw_component_type">
@} 
@defgroup work_holding_comp_types Work Holding Component Types 
@{ 
Machine vise jaw component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:wire_table_component_type">
Wire EDM table component parameters
</member>
        <member name="T:round_table_component_type">
Round table component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:rect_table_component_type">
Rectangular table component parameters
</member>
        <member name="T:rect_table_geo_type">
Rectangular table geometry - not implemented currently in Mastercam X
</member>
        <member name="T:tslot_geo_type">
T slot parameters - not implemented currently in Mastercam X
</member>
        <member name="F:rotary_axis_component_type.disableEvFr">
disable feedrate programming for axis motion events
</member>
        <member name="F:rotary_axis_component_type.g28Angle">
simulation startup axis angle
</member>
        <member name="F:rotary_axis_component_type.travelLimits">
min/max rotational travel limits (deg.)
</member>
        <member name="F:rotary_axis_component_type.maxFeedrate">
maximum feedrate (deg/min)
</member>
        <member name="F:rotary_axis_component_type.maxAngularMove">
maximum angular move before breaking
</member>
        <member name="F:rotary_axis_component_type.breakWithChordal">
use chordal deviation to determine when to break
</member>
        <member name="F:rotary_axis_component_type.breakRotaryMoves">
break rotary move
</member>
        <member name="F:rotary_axis_component_type.axisOutputType">
signed continuous, signed direction (0-360 deg),
shortest direction (0 - 360 deg)
</member>
        <member name="F:rotary_axis_component_type.indexAngle">
must divide evenly into 360
</member>
        <member name="F:rotary_axis_component_type.indexingAxis">
is this an indexing axis?
</member>
        <member name="F:rotary_axis_component_type.reposAngles">
rotational reposition limits (deg)
</member>
        <member name="F:rotary_axis_component_type.rotAngle">
angle of rotation for nutated axis, right hand rule (degrees)
</member>
        <member name="F:rotary_axis_component_type.tiltAxis">
axis of rotation for axis out of plane (WCS axis!)\n
	  *		X_AXIS,		Y_AXIS,		Z_AXIS\n
	  * NEG_X_AXIS, NEG_Y_AXIS, NEG_Z_AXIS\n

</member>
        <member name="F:rotary_axis_component_type.isNutated">
nutated machine axis
</member>
        <member name="F:rotary_axis_component_type.cwAxis">
true = CW is +ive direction for this axis
</member>
        <member name="F:rotary_axis_component_type.zeroDegAxis">
axis '0 deg' vector WRT machine axes
lies in plane perpendicular to axis of rotation
</member>
        <member name="F:rotary_axis_component_type.wcsAxis">
axis of rotation wrt machine linear axes
</member>
        <member name="F:rotary_axis_component_type.machineAxis">
rotary axis to drive on the machine: A_AXIS, B_AXIS, C_AXIS, MACRO_AXIS
</member>
        <member name="T:rotary_axis_component_type">
Rotary axis component parameters
</member>
        <member name="F:linear_axis_component_type.disableEvFr">
disable feedrate programming for axis motion events
</member>
        <member name="F:linear_axis_component_type.maxFeedrates">
max. feed rates (rapid traverse rates)
</member>
        <member name="F:linear_axis_component_type.machineAxis">
axis to drive on the machine: X_AXIS, Y_AXIS, Z_AXIS, MACRO_AXIS
</member>
        <member name="F:linear_axis_component_type.common">
[0] = parameters for the physical axis direction on the machine
[1] = parameters for the programmed direction of machine motion for this axis, 
	  which may be in combination with other linear axes, if the machine axes are 
	  non-orthogonal
</member>
        <member name="T:linear_axis_component_type">
Linear axis component parameters
</member>
        <member name="F:axis_params_type.g28AxisPos">
simulation startup axis position
</member>
        <member name="F:axis_params_type.travelLimits">
min/max linear travel limits (in/mm) measured along axis direction from zeroPos
</member>
        <member name="F:axis_params_type.tiltAngle">
angle of rotation for tilt, right hand rule (degrees)
</member>
        <member name="F:axis_params_type.tiltAxis">
axis of rotation for axis out of plane (WCS axis!)\n
	  *		X_AXIS,		Y_AXIS,		Z_AXIS\n
	  * NEG_X_AXIS, NEG_Y_AXIS, NEG_Z_AXIS\n

</member>
        <member name="F:axis_params_type.isTilted">
tilt the axis
</member>
        <member name="F:axis_params_type.axisDir">
base axis direction WRT the WCS:
	X_AXIS,		Y_AXIS,		Z_AXIS
NEG_X_AXIS, NEG_Y_AXIS, NEG_Z_AXIS
</member>
        <member name="T:axis_params_type">
generic axis component parameters
The actual axis direction vector is computed by taking the wcsAxis
vector direction and rotating it about the tiltAxis by rotAngle
</member>
        <member name="T:travel_limits_type">
travel limits
</member>
        <member name="T:axis_feedrate_type">
Axis feed rates
</member>
        <member name="T:fixture_component_type">
General fixture component parameters
</member>
        <member name="T:machine_base_component_type">
Machine base component parameters
</member>
        <member name="T:misc_component_type">
Miscellaneous component parameters
</member>
        <member name="F:stock_component_type.barstockGeo">
round barstock geometry with stock margins
other stock types defined using standard solid types
</member>
        <member name="T:stock_component_type">
Stock component type
</member>
        <member name="T:barstock_geo_type">
@} 
@defgroup generic_comp_types Generic Component Types 
@{ 
Round bar stock (with optional hole) structure (X)
</member>
        <member name="T:tube_geo_type">
Cylinder with a hole in it (revolved component)
</member>
        <member name="T:polygon_geo_type">
Other specialized geometry geometry definitions
Filleted polygon
</member>
        <member name="T:solid_geo_dflts">
'Standard' solid component definition defaults
</member>
        <member name="T:revolved_component_def">
Parameters for a component definition from a revolved profile
</member>
        <member name="T:extruded_component_def">
Parameters for a component definition from an extruded profile
</member>
        <member name="T:cylinder_component_def">
Parameters for a component definition from a cylinder
</member>
        <member name="T:block_component_def">
Parameters for a component definition from a block
</member>
        <member name="T:stl_component_def">
Parameters for a component definition from a STL entity
</member>
        <member name="T:solid_component_def">
Component Geometry Definitions
Component geometry will provide the backbone for machine simulation in
future releases of Mastercam. It will also enable graphical descriptions
of CNC machines, currently provided via post-processor variables
Component geometry is NOT supported in the current version of Mastercam

@defgroup component_geometry_definitions Component Geometry Definitions 
@{ 
Parameters for a component definition from a solid entity
</member>
        <member name="D:eMachineTypes">
used to identify variables in the above enum
</member>
        <member name="D:eToolStorageIndexMethods">
used for turrets and tool changers
</member>
        <member name="D:eToolPosns">
used for tool location components
</member>
        <member name="D:eToolXforms">
used for tool location components
</member>
        <member name="D:eRotAxisOutputTypes">
used to identify variables in the above enum
</member>
        <member name="D:eComponentAxes">
used to identify variables in the above enum
</member>
        <member name="D:eComponentGeometryTypes">
used to identify variables in the above enum
</member>
        <member name="D:eComponentGroups">
used to identify variables in the above enum
</member>
        <member name="F:FIRST_CUSTOM_GROUP">
Custom groups, up to 99999
These will be used in future versions to cover groups that don't fit
into the pre-defined definitions
</member>
        <member name="F:START_WIRE_TOOLING_GROUPS">
Wire-specific miscellaneous tooling groups
</member>
        <member name="F:START_ROUTER_TOOLING_GROUPS">
Router-specific miscellaneous tooling groups
</member>
        <member name="F:START_LATHE_TOOLING_GROUPS">
Lathe-specific miscellaneous tooling groups
</member>
        <member name="F:START_MILL_TOOLING_GROUPS">
Miscellaneous tooling component groups
These groups contain auxiliary machine automation, not related to
holding/driving the part or tool
Mill-specific miscellaneous tooling groups
</member>
        <member name="F:START_WIRE_TOOL_STORAGE_GROUPS">
Wire-specific tool storage groups
</member>
        <member name="F:START_ROUTER_TOOL_STORAGE_GROUPS">
Router-specific tool storage groups
</member>
        <member name="F:START_LATHE_TOOL_STORAGE_GROUPS">
Lathe-specific tool storage groups
</member>
        <member name="F:START_MILL_TOOL_STORAGE_GROUPS">
Cutting tool storage component groups
Mill-specific tool storage groups
</member>
        <member name="F:START_WIRE_PART_HOLDING_GROUPS">
Wire-specific part holding groups
</member>
        <member name="F:START_ROUTER_PART_HOLDING_GROUPS">
Router-specific part holding groups
</member>
        <member name="F:START_LATHE_PART_HOLDING_GROUPS">
Lathe-specific part holding groups
</member>
        <member name="F:START_MILL_PART_HOLDING_GROUPS">
Part holding component groups
Mill-specific part holding groups
</member>
        <member name="D:eComponentGroupClasses">
used to identify variables in the above enum
</member>
        <member name="T:Cnc.MachineDef.ComponentTypes">
            <summary> Type codes for the machine components. </summary>
        </member>
        <member name="D:eComponentTypes">
            <summary>   Used to identify variables in the above enum. </summary>
        </member>
        <member name="F:FIRST_TOOLING_COMPONENT">
misc. tooling components, ATC included as tool components only
hold tools while cutting
</member>
        <member name="F:FIRST_MULTI_TOOL_COMPONENT">
Multi-cutting tool components
</member>
        <member name="F:FIRST_TOOL_COMPONENT">
Single tool holding components
</member>
        <member name="F:FIRST_WORK_HOLDING_COMPONENT">
Work holding components
(tables included, as the part can sit on a table)
</member>
        <member name="F:FIRST_GENERIC_COMPONENT">
Generic components
Components marked with an * aren't available currently in X2
</member>
        <member name="T:machining_mode_type">
Multi-tasking machining mode
</member>
        <member name="T:stream_info_type">
Multi-tasking data stream information for a machining mode
</member>
        <member name="F:axis_combination_type.compList_ent_idns">
ent_idn for lists of components (this list is stored in the database as an ent_idn_list)
</member>
        <member name="F:axis_combination_type.group_ent_idns">
component lists for this axis combination
- each list consists of components from 1 component group
- one list is for the tool holding components
- the other is for the part holding components
- miscop operations (ex. tailstock advance) may only require one list
- this list should be the first one
ent_idns of component groups to which all components belong
</member>
        <member name="F:axis_combination_type.toolChgPos">
Tool change (V9 home) position (inch, mm)
</member>
        <member name="F:axis_combination_type.name">
Axis combination name
</member>
        <member name="T:axis_combination_type">
 @par Machining mode axis combination

 @note Rules:
 - Any 'cutting' toolpath operation requires the interaction of 2
	 component groups and their components, hence 2 component lists.
 - Only one of each linear axis + 2 different rotary axes are allowed.
 - Tool and part holding components must NOT be stored in the same
	 component list. (Each list must have one or the other.)

</member>
        <member name="T:evl_list_info">
event list information
</member>
        <member name="D:stream_name_array">
array of data stream names
</member>
        <member name="D:stream_name_type">
@file MachiningMode_CH.h
machine/tool machining mode and axis combination information

@par Multi-tasking data stream parameters
@note MAX_DATA_STREAMS is defined in AssocTyp_ch.h

maximum length for a stream name
data stream name
</member>
        <member name="M:add_append_group(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Byte,System.Boolean*)">
@param[in]		parent_name		name of new group's parent group
@param[in]		group_name		name of new group
@param[in]		n_eptr			number of ents in eptr list, 0=use .sel ents
@param[in]		eptr			list of entity eptrs
@param[in]		product			PRODUCT_MILL, PRODUCT_LATHE, PRODUCT_ROUTER, PRODUCT_WIRE, or PRODUCT_MT
@param[out]		succf			true = group added

</member>
        <member name="M:list_grp_append_ents(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Boolean*)">
 @par Purpose:
			append ents to a group
 @param[in]		group_id group ID
 @param[in]		n_eptr	 number of ents in eptr list, 0=use .sel ents
 @param[in]		eptr	 list of entity eptrs
 @param[out]		succf	 true = group added

</member>
        <member name="M:list_grp_append_ents(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Boolean*)">
 @par Purpose:
			append ents to a group
 @param[in]		name	 group name
 @param[in]		n_eptr	 number of ents in eptr list, 0=use .sel ents
 @param[in]		eptr	 list of entity eptrs
 @param[out]		succf	 true = group added

</member>
        <member name="M:list_grp_add_ents(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Int16,System.Boolean*)">
 @par Purpose:
			add a new group to the list
 @param[in]		name	new group name
 @param[in]		n_eptr	number of ents in eptr list, 0=use .sel ents
 @param[in]		eptr	list of entity eptrs
 @param[in]		type	type of group
 @param[out]		succf	true = group added

</member>
        <member name="M:list_grp_remove_ents(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,DB_LIST_ENT**,System.Boolean,System.Boolean*)">
 @par Purpose:
			remove ents from a group
 @param[in]		name   new group name
 @param[in]		n_eptr	 number of ents in eptr list, 0=use .sel ents
 @param[in]		eptr   list of entity eptrs
 @param[in]		del_empty	true = delete group from list if 0 ents are left
 @param[out]		succf	true = group added

</member>
        <member name="M:EptrExistsInArray(CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*,DB_LIST_ENT*)">
 @par Purpose:
		Find first occurence of "eptr" in "EPTRs"

 @return				array index if already exists in array, -1 if not found	
 @param[in]	EPTRs	array to search.
 @param[in]	eptr	item to find.

</member>
        <member name="M:InitGroup(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Int16,System.Byte)">
 @par Purpose:
			Initializes a new group to whatever parameters are passed in.

 @param[in]		gpl			the group to be initialized
 @param[in]		name		new group name
 @param[in]		parent_idn	parent group id #
 @param[in]		hidden		true = if you want group marked hidden
 @param[in]		type		type of group
 @param[in]		product		PRODUCT_MILL, PRODUCT_LATHE, PRODUCT_ROUTER, PRODUCT_WIRE, or PRODUCT_MT

</member>
        <member name="M:list_grp_add_empty(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Int16,System.Byte,System.Boolean,System.Boolean*)">
 @par Purpose:
			add a new group (empty) to the list

 @param[in]		name				new group name
 @param[in]		parent_idn			parent group id #
 @param[in]		hidden				true = if you want group marked hidden
 @param[in]		type				type of group
 @param[in]		product				PRODUCT_MILL, PRODUCT_LATHE, PRODUCT_ROUTER, PRODUCT_WIRE, or PRODUCT_MT
 @param[in]		move_insert_arrow	move insert arrow after group in opmgr
 @param[out]		succf				true = group added

 @returns			A pointer to the group newly added to the list

</member>
        <member name="M:op_group.SetVariableStockRowNum(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the variable stock row number. </summary>
            <param name="val"> The new value. </param>
        </member>
        <member name="M:op_group.GetVariableStockRowNum">
            <summary> Gets the variable stock row number. </summary>
            <returns> The row number. </returns>
        </member>
        <member name="M:op_group.SetVariableStockFloorStock(System.Double)">
            <summary> Sets the variable stock floor stock value. </summary>
            <param name="val"> The new value. </param>
        </member>
        <member name="M:op_group.SetVariableStockWallStock(System.Double)">
            <summary> Sets the variable stock wall stock value. </summary>
            <param name="val"> The new value. </param>
        </member>
        <member name="M:op_group.GetVariableStockMachiningType">
            <summary> Gets the variable stock to leave group type. </summary>
            <returns> 0 for machining (drive), 1 for avoidance (check). </returns>
        </member>
        <member name="M:op_group.SetVariableStockTpOpIdn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the variable stock to leave toolpath operation id # parameter. </summary>
        </member>
        <member name="M:op_group.GetVariableStockTpOpIdn">
            <summary> Gets the variable stock to leave toolpath operation id # parameter. </summary>
        </member>
        <member name="F:group_pg3.min_ltool_clr">
@} 
@defgroup groups_ch3 PRODUCT_LATHE and PRODUCT_MT parameters 
@{ 
</member>
        <member name="F:group_pg3.x">
@} 
@defgroup groups_ch2 PRODUCT_MILL, PRODUCT_ROUTER, PRODUCT_WIRE parameters 
@{ 
</member>
        <member name="F:group_pg3.stock_fit">
@defgroup groups_ch1 common parameters 
@{ 
</member>
        <member name="T:group_pg3">
@note group_pg2 is meaningless without the
  * product type, which is in the op_group 
</member>
        <member name="T:group_pg2">
machine group tool settings
</member>
        <member name="T:group_pg1">
machine group file settings
</member>
        <member name="T:lathe_mc_extension_prm">
MCExtensions lathe machine parameters
</member>
        <member name="T:tplane_z">
Tplane Z information for MCExtensions lathe machine parameters used with the MT Platform machines.
</member>
        <member name="T:turn_profile_prm">
Turn profile parameters
</member>
        <member name="T:group_view">
group view structure
</member>
        <member name="T:emap">
entity map structure
</member>
        <member name="T:group_pg1_advanced_defaults">
advanced tool options structure
</member>
        <member name="T:steadyrest_type">
steady rest structure (v9)
</member>
        <member name="T:tailstock_type">
tailstock structure (v9)
</member>
        <member name="T:chuck_type">
chuck jaw structure (v9)
</member>
        <member name="T:barstock_type">
round bar stock (with optional hole) structure
</member>
        <member name="T:TPlaneZ">
            <summary> How to compute Tplane Z coordinate for MT Platform lathe MCExtensions extended data. </summary>
        </member>
        <member name="T:WorkType">
            <summary> Values that represent MT JobSetup Work Types. (Note: LATHE_WORK_BAR / CHUCK deprecated old values). </summary>
        </member>
        <member name="M:IDArray.GetLastID">
            <summary> Gets the last identifier, 0 on error. </summary>
            <returns> The last identifier. </returns>
        </member>
        <member name="M:IDArray.IsEqualContents(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal contents to this. </summary>
            <param name="obj"> The object to compare. </param>
            <returns> true if equal contents, false if not. </returns>
        </member>
        <member name="M:IDArray.GetExcludedIDs">
            <summary> Returns reference to m_ExcludeIDs. </summary>
            <returns> reference to m_ExcludeIDs. </returns>
        </member>
        <member name="M:IDArray.HasExcludedIDs">
            <summary> Query if this object has excluded operation IDs. </summary>
            <returns> true if excluded operation IDs exist, false if not. </returns>
        </member>
        <member name="M:IDArray.ExcludeThisOpID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Add the given ID to the exclude mask (exclude this ID from being added to or 
		  existing in the array. Any existing matching ID's will be removed from the array. </summary>
            <param name="theID">			 The ID to exclude. </param>
            <param name="clearExcludeArray"> (Optional) first empty exclude mask. </param>
        </member>
        <member name="M:IDArray.RemoveID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes all instances of the ID from the array. </summary>
            <param name="theID"> The ID to remove. </param>
            <returns> Size of array. </returns>
        </member>
        <member name="M:IDArray.SetSize(System.Int64)">
            <summary> Sets new size of array. </summary>
            <param name="newSize"> The new size. </param>
            <returns> Size of array. </returns>
        </member>
        <member name="M:IDArray.GetAllowNegatives">
            <summary> Gets value of m_AllowNegatives. </summary>
            <returns> value of m_AllowNegatives. </returns>
        </member>
        <member name="M:IDArray.GetAllowDuplicates">
            <summary> Gets value of m_AllowDuplicates. </summary>
            <returns> value m_AllowDuplicates. </returns>
        </member>
        <member name="M:IDArray.SetAllowDuplicates(System.Boolean,System.Boolean)">
            <summary> Sets m_AllowDuplicates and removed duplicate IDs from the array. </summary>
            <param name="allowDuplicates"> true to allow, false to deny duplicates. </param>
            <param name="ensureUnique">    (Optional) true to ensure contents are unique. </param>
            <returns> Previous value of m_AllowDuplicates. </returns>
        </member>
        <member name="M:IDArray.GetSortMode">
            <summary> Gets sort mode. </summary>
            <returns> The sort mode. </returns>
        </member>
        <member name="M:IDArray.Sort(VArray&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;.SortMode)">
            <summary> Sorts the array per the given sort mode. </summary>
            <param name="sortMode"> (Optional) the sort mode. </param>
        </member>
        <member name="M:IDArray.Copy(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Use this member function to copy the elements of one array to another. </summary>
            <param name="obj"> Source of the elements to be copied to an array. </param>
            <returns> Returns true if successful. </returns>
        </member>
        <member name="M:IDArray.Append(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Appends the given set to this. </summary>
            <param name="obj"> Source of the elements to be appended to an array. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:IDArray.Append(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Appends the array of long ID's at pOpIDs. </summary>
            <param name="pOpIDs"> The ptr to the operation IDs. </param>
            <param name="nOpIDs"> The number operation IDs. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:IDArray.Append(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Appends the given array to this. </summary>
            <param name="obj"> Source of the elements to be appended to an array. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:IDArray.Add(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Adds the ID to the array. </summary>
            <param name="theID"> the identifier to add. </param>
            <returns> . </returns>
        </member>
        <member name="M:IDArray.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:IDArray.op_Assign(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object to copy. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IDArray.op_Assign(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object to copy. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IDArray.op_Assign(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IDArray.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:IDArray.#ctor(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor that accepts a set of longs. </summary>
            <param name="theIDs"> std::set of longs. </param>
        </member>
        <member name="M:IDArray.#ctor(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor that accepts a set of longs. </summary>
            <param name="theIDs"> std::set of longs. </param>
        </member>
        <member name="M:IDArray.#ctor(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:IDArray.#ctor(System.Boolean,VArray&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;.SortMode)">
            <summary> Constructor. </summary>
            <param name="allowDuplicates"> (Optional) allow duplicates IDs in the array. </param>
            <param name="sortMode">		   (Optional) the sort mode. </param>
        </member>
        <member name="T:IDArray">
            <summary> A std::vector of long data types used for operation ID's. </summary>
        </member>
        <member name="T:IDmap">
cnc machine parameters
</member>
        <member name="T:prm_probe_cycle">
probe toolpath parameters
</member>
        <member name="T:prm_nesting">
toolpath nesting parameters
</member>
        <member name="T:prm_solid_drill">
solid drill toolpath parameters
</member>
        <member name="T:v9_SDETECT_DRILL_PARAMS">
V9 Solids drill detection parameters
</member>
        <member name="T:SDETECT_DRILL_PARAMS">
Solid drill detection parameters
</member>
        <member name="T:AutoDrillPrm">
automatic drilling parameters
</member>
        <member name="T:prm_trimmed">
trimmed toolpath parameters
</member>
        <member name="T:prm_manual_entry">
manual entry parameters
</member>
        <member name="T:prm_chook">
chook operation
</member>
        <member name="T:prm_coons">
coons parameters 
</member>
        <member name="T:prm_swept3d">
swept 3D parameters 
</member>
        <member name="T:prm_swept2d">
swept 2D parameters 
</member>
        <member name="T:prm_lofted">
lofted parameters 
</member>
        <member name="T:prm_revolved">
revolved parameters 
</member>
        <member name="T:prm_ruled">
ruled parameters 
</member>
        <member name="T:prm_helix_bore">
helix bore parameters 
</member>
        <member name="T:prm_slotmill">
slotmill parameters 
</member>
        <member name="T:prm_thdmill">
thread mill parameters 
</member>
        <member name="T:prm_adv_5ax">
operation parameters - ADV 5 axis 
</member>
        <member name="T:prm_circle_5ax">
operation parameters - circle 5axis specific parameters 
</member>
        <member name="T:prm_circmill">
circmill parameters 
</member>
        <member name="T:prm_port_5ax">
operation parameters - Port 5 axis 
</member>
        <member name="T:prm_slice_5ax">
operation parameters - slice 5 axis 
</member>
        <member name="F:prm_msurf_5ax.iteration_count">
no longer used but leave to retrieve values from older .mc9 files 
</member>
        <member name="T:prm_msurf_5ax">
operation parameters - Msurf 5 axis 
</member>
        <member name="T:prm_m5_box">
Box Pattern data
</member>
        <member name="T:prm_m5_sph">
Sphere Pattern data
</member>
        <member name="T:prm_m5_cyl">
Support structures for Msurf 5 axis 
Cylinder Pattern data
</member>
        <member name="T:prm_swarf_5ax">
operation parameters - swarf 5 axis 
</member>
        <member name="F:prm_curve_5ax.step_meth">
@} 
</member>
        <member name="F:prm_curve_5ax.OutputFormat">
@defgroup cc5dlg_parameters1 CC5dlg parameters 
@{ 
</member>
        <member name="T:prm_curve_5ax">
operation parameters - curve 5 axis 
</member>
        <member name="F:prm_srf_4ax.gen">
@} 
</member>
        <member name="F:prm_srf_4ax.OutputFormat">
@defgroup cm5dlg_parameters4 CM5dlg parameters 
@{ 
</member>
        <member name="T:prm_srf_4ax">
operation parameters - surface finish 4 axis 
</member>
        <member name="F:prm_srf_flow5ax.f4thaxis">
@} 
</member>
        <member name="F:prm_srf_flow5ax.OutputFormat">
@defgroup cm5dlg_parameters1 CM5dlg parameters 
@{ 
</member>
        <member name="T:prm_srf_flow5ax">
operation parameters - surface finish flowline 5 axis 
</member>
        <member name="T:multax_exit_blend">
Exit_Blend Parameters 
</member>
        <member name="T:pt_generator">
Point generators
</member>
        <member name="T:multax_overlap">
multiaxis overlap settings 
</member>
        <member name="T:multax_entry_exit">
multiaxis entry and exit 
</member>
        <member name="T:ent_exit">
multiaxis entry or exit 
</member>
        <member name="T:prm_srf_hmm">
operation parameters - surface hmm 
</member>
        <member name="T:prm_srf_fin_conscalop">
operation parameters - surface finish constant scallop 
</member>
        <member name="T:prm_srf_fin_shallow">
operation parameters - surface finish shallow 
</member>
        <member name="T:prm_srf_fin_steep">
operation parameters - surface finish steep 
</member>
        <member name="T:prm_srf_fin_leftover">
operation parameters - surface finish leftover 
</member>
        <member name="T:prm_srf_fin_pencil">
operation parameters - surface finish pencil 
</member>
        <member name="T:prm_srf_fin_contour">
operation parameters - surface finish contour 
</member>
        <member name="T:prm_srf_fin_flowline">
operation parameters - surface finish flowline 
</member>
        <member name="T:prm_srf_fin_blend">
operation parameters - surface finish blend 
</member>
        <member name="T:prm_srf_fin_project">
operation parameters - surface finish project 
</member>
        <member name="T:prm_srf_fin_radial">
operation parameters - surface finish radial 
</member>
        <member name="T:prm_srf_fin_parallel">
operation parameters - surface finish parallel 
</member>
        <member name="T:prm_srf_rgh_plunge">
operation parameters - surface rough plunge 
</member>
        <member name="T:prm_srf_rgh_pocket">
operation parameters - surface rough pocket 
</member>
        <member name="T:prm_srf_rgh_restmill">
operation parameters - surface rough rest mill 
</member>
        <member name="T:prm_srf_rgh_contour">
operation parameters - surface rough contour 
</member>
        <member name="T:prm_srf_rgh_flowline">
operation parameters - surface rough flowline 
</member>
        <member name="T:prm_srf_rgh_project">
operation parameters - surface rough project 
</member>
        <member name="T:prm_srf_rgh_radial">
operation parameters - surface rough radial 
</member>
        <member name="T:prm_srf_rgh_parallel">
operation parameters - surface rough parallel 
</member>
        <member name="T:prm_srf_limits">
operation parameters - surface operation's limit settings 
</member>
        <member name="T:prm_srf_rough_settings">
operation parameters - surface operation's roughing settings 
</member>
        <member name="T:prm_srf_depths">
operation parameters - surface operation's depth settings 
</member>
        <member name="T:prm_srf_hsopts">
operation parameters - surface high speed parameters 
</member>
        <member name="T:prm_srf_direction">
operation parameters - surface operation's direction settings 
</member>
        <member name="T:prm_srf_edge_settings">
operation parameters - surface operation's edge settings 
</member>
        <member name="T:prm_srf_gap_settings">
operation parameters - surface operation's gap settings 
</member>
        <member name="T:prm_srf_common">
operation parameters - common parameters for all surface operations 
</member>
        <member name="T:prm_chamfer">
operation parameters - model chamfering 
</member>
        <member name="T:prm_2d_hmm">
operation parameters - 2D toolpaths hmm 
</member>
        <member name="T:prm_pocket_v7">
operation parameters - V7 pocketing parameters 
</member>
        <member name="T:prm_facing">
Facing
</member>
        <member name="T:prm_pocket">
Pocket
</member>
        <member name="T:prm_hem">
HEM parameters 
</member>
        <member name="T:prm_thinwall">
Thinwall pocket
</member>
        <member name="T:prm_pkt_hsopts">
High speed pocket options
</member>
        <member name="T:prm_open_pock">
Open pockets
</member>
        <member name="T:prm_remach_pock">
Pocket remachining
</member>
        <member name="T:prm_pock_facing">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_rgh_entry">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_ramp">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_helix">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_taper">
operation parameters - pocket specific parameters 
</member>
        <member name="T:prm_lpark_turret">
lathe park turret operation
</member>
        <member name="T:prm_mt_turret">
turret operation
</member>
        <member name="T:prm_mt_center_point">
center point operation
</member>
        <member name="T:prm_mt_tailstock">
tailstock operation
</member>
        <member name="T:prm_mt_spindle_sync">
spindle sync operation
</member>
        <member name="T:ExactRotaryDirection">
            <summary> Exact rotary direction types. </summary>
            <remarks> Exact rotary type as in values that explicitly state the rotary direction.
		  A different way to specify rotary (or spindle) direction is to say "shortest",
		  but that should have its own enumeration to clearly differentiate between usages. </remarks>
        </member>
        <member name="T:SpindleSyncType">
            <summary> Spindle sync operation types. </summary>
        </member>
        <member name="T:prm_mt_spindle_move">
spindle advance/retract operation
</member>
        <member name="T:SpindleMoveType">
            <summary> Spindle move operation types. </summary>
        </member>
        <member name="T:prm_mt_spindle_grip">
chuck clamp/unclamp operation
</member>
        <member name="T:prm_mt_bar_feed">
bar feed operation
</member>
        <member name="T:axis_motion_type">
miscop axis motion description
</member>
        <member name="T:prm_lsteadyrest">
lathe steady rest position operation
</member>
        <member name="T:prm_ltailstock">
lathe tailstock position operation
</member>
        <member name="T:prm_lchuck_clamp">
lathe chuck clamp/un-clamp operation
</member>
        <member name="T:prm_lbarfeed">
lathe stock bar feed operation
</member>
        <member name="T:prm_lstock_flip">
lathe stock flip operation
</member>
        <member name="T:prm_lstock_xfer">
lathe stock transfer operation
</member>
        <member name="T:prm_lcan_pattern">
lathe pattern repeat toolpath 
</member>
        <member name="T:prm_lcan_finish">
lathe canned finish toolpath 
</member>
        <member name="T:prm_lcan_rough">
lathe canned rough toolpath 
</member>
        <member name="T:prm_lpoint">
lathe point toolpath parameters 
</member>
        <member name="T:prm_lthread">
lathe thread toolpath parameters 
</member>
        <member name="T:prm_thread_cut">
lathe thread cut parameters 
</member>
        <member name="T:prm_thread_shape">
lathe thread shape parameters 
</member>
        <member name="T:prm_lplunge">
lathe plunge and turn toolpath parameters 
</member>
        <member name="T:prm_plunge_finish">
lathe plunge and turn finish parameters 
</member>
        <member name="T:prm_plunge_rough">
lathe plunge and turn rough parameters 
</member>
        <member name="T:prm_lgroove">
lathe groove toolpath parameters 
</member>
        <member name="T:prm_groove_finish">
lathe groove finish parameters (not used with 2 boundary groove) 
</member>
        <member name="T:prm_groove_rough">
lathe groove rough parameters 
</member>
        <member name="T:prm_groove_step">
lathe groove roughing step removal parameters 
</member>
        <member name="T:PrmGrooveRibCutting">
Lathe groove rough rib cutting parameters. 
</member>
        <member name="T:prm_groove_depth">
lathe groove rough multiple depth cut parameters 
</member>
        <member name="T:prm_groove_shape">
lathe groove shape parameters (not used with 2 boundary groove) 
</member>
        <member name="F:prm_lcutoff.do_clearance">
clearance cut 
</member>
        <member name="T:prm_lcutoff">
lathe cutoff toolpath parameters 
</member>
        <member name="T:prm_lathe_corner">
lathe corner parameters 
</member>
        <member name="F:prm_lathe_peck.dwell_type">
dwell parameters 
</member>
        <member name="F:prm_lathe_peck.retract_type">
retract parameters 
</member>
        <member name="F:prm_lathe_peck.peck_type">
peck parameters 
</member>
        <member name="T:prm_lathe_peck">
lathe peck/dwell parameters 
</member>
        <member name="T:prm_pinch_turn">
lathe pinch turn operation
</member>
        <member name="T:PrmLathePrimeTurning">
            <summary> Lathe prime turning parameters. </summary>
        </member>
        <member name="T:PrmLathePrimeTurningFinish">
            <summary> Lathe prime turning finish parameters. </summary>
        </member>
        <member name="T:PrimeTurningFinishStrategy">
            <summary> Lathe prime turning finish strategies. </summary>
        </member>
        <member name="T:PrmLathePrimeTurningRough">
            <summary> Lathe prime turning rough parameters. </summary>
        </member>
        <member name="T:PrimeTurningRoughStrategy">
            <summary> Lathe prime turning rough strategies. </summary>
        </member>
        <member name="T:PrmLathePrimeTurningCommon">
            <summary> Lathe prime turning common parameters for rough and finish. </summary>
        </member>
        <member name="T:PrimeTurningFinishFeedSpeed">
            <summary> Feed rate and spindle speed parameters, used by prime turning finish. </summary>
        </member>
        <member name="T:PrimeTurningRoughFeedSpeed">
            <summary> Feed rate and spindle speed parameters, used by prime turning rough. </summary>
        </member>
        <member name="T:LatheFeedFromType">
            <summary> Lathe feed from types. </summary>
        </member>
        <member name="T:LatheFeedrateType">
            <summary> Lathe feed rate types. </summary>
        </member>
        <member name="T:prm_lcontour">
lathe contour rough toolpath parameters 
</member>
        <member name="T:prm_ldynamic">
lathe dynamic rough toolpath parameters 
</member>
        <member name="T:prm_lrough">
lathe rough toolpath parameters 
</member>
        <member name="T:LatheSemiFinishFeedSpeed">
            <summary> Lathe semi finish feed/speed parameters. </summary>
        </member>
        <member name="T:prm_pinch_params">
lathe pinch turn parameters 
</member>
        <member name="T:prm_lfinish">
lathe finish toolpath parameters 
</member>
        <member name="T:LatheCutDirection">
Lathe cut direction 
</member>
        <member name="T:prm_lathe_down_cutting">
lathe finish down cutting parameters 
</member>
        <member name="T:prm_lathe_corner_break">
lathe corner break parameters 
</member>
        <member name="T:prm_lathe_face">
lathe face toolpath parameters 
</member>
        <member name="T:SecondaryFeedSpeedPrm">
Lathe secondary feed/speed parameters. 
</member>
        <member name="T:prm_lathe_face_corner">
lathe face corner parameters 
</member>
        <member name="T:prm_lathe_plunge">
lathe plunge parameters 
</member>
        <member name="T:prm_lathe_ee">
lathe entry/exit parameters 
</member>
        <member name="T:prm_lathe_ee_vec">
individual lathe entry/exit parameters 
</member>
        <member name="T:prm_ldrill">
lathe drill toolpath parameters 
</member>
        <member name="T:prm_drill">
operation parameters - drilling specific parameters 
</member>
        <member name="T:prm_lathe_chip_break">
Lathe chip break parameters. 
</member>
        <member name="T:prm_ltool_inspect">
lathe tool inspection parameters 
</member>
        <member name="T:prm_5ax_limit">
Axis limit property page
</member>
        <member name="T:multax_limit">
@defgroup  Contour_Types Contour types 
@{ 
@} 
@defgroup  Pocket_Types Pocket types 
@{ 
@} 
multiaxis axis limit 
</member>
        <member name="T:prm_contour">
operation parameters - contour specific parameters 
</member>
        <member name="T:prm_oscillate_ctour">
Contour oscillate
</member>
        <member name="T:prm_tab">
Tab parameters
</member>
        <member name="T:prm_tp_common">
@} 
router common parameters 
</member>
        <member name="T:prm_ext_short">
Extend/shorten contour
</member>
        <member name="T:prm_ramp_ctour">
Contour ramp
</member>
        <member name="T:prm_chamfer_ctour">
Contour chamfer
</member>
        <member name="T:prm_ctourpock">
@defgroup operation_parameters_common_contour_and_pocket_parameters operation parameters - common contour and pocket parameters
*	@note get rid of this pathetic data structure for version 9.
*		  Move finish_all to op_multi_cuts.  Use op_common.cmp_to_tip

@{ 
Contour pocket
</member>
        <member name="T:prm_remach_ctour">
Contour remachining
</member>
        <member name="T:prm_xform">
operation parameters - xform toolpath 
</member>
        <member name="T:prm_xform_translate">
operation parameters - xform-translate (linear array) toolpath 
</member>
        <member name="T:prm_xform_rotate">
operation parameters - xform-rotate toolpath 
</member>
        <member name="T:prm_xform_mirror">
operation parameters - xform-mirror toolpath 
</member>
        <member name="T:prm_xform_view">
operation parameters - xform-view info 
</member>
        <member name="T:WireNewPowerSet">
wire new power set parameters 
</member>
        <member name="T:WireNewPowerPass">
wire new power pass parameters 
</member>
        <member name="T:WireAgieSet">
wire Agie parameters 
</member>
        <member name="T:prm_wire_4axis">
wire 4axis wirepath parameters 
</member>
        <member name="T:prm_wire_point">
wire point wirepath parameters 
</member>
        <member name="T:prm_wire_nocore">
wire nocore wirepath parameters 
</member>
        <member name="T:prm_wcan_cycle">
wire canned cycle wirepath parameters 
</member>
        <member name="T:prm_wire_contour">
wire contour wirepath parameters 
</member>
        <member name="T:prm_wire_tab">
Wire tab parameters
</member>
        <member name="T:prm_chain_sort">
wire window chain sorting parameters
</member>
        <member name="T:prm_wire_ee">
wire entry/exit parameters 
</member>
        <member name="T:prm_wire_common">
wire common parameters 
</member>
        <member name="T:op_misc">
@} 
operation parameters - miscellaneous integers and reals 
</member>
        <member name="T:tp_entity">
toolpath entity definition
* @note If a tp_entity member is added between flag and u and the new
*		  member is not supposed to be part of the tp_entity header, the define
*		  below must be changed to use the new member in place of u.

</member>
        <member name="T:tp_stock_model_result">
toolpath entity - Stock Model Result entity 
</member>
        <member name="T:tp_fbm_zone">
toolpath entity - FBM zone control entity 
</member>
        <member name="T:tp_fbm_chn">
toolpath entity - FBM chain control entity 
</member>
        <member name="T:tp_fbm_bnd">
toolpath entity - FBM chain boundary entity 
</member>
        <member name="T:tp_op_idn">
operation id entity
</member>
        <member name="T:tp_eptrs">
assoc info
</member>
        <member name="T:tp_nest_grp_info">
group info
</member>
        <member name="T:tp_nest_grp">
Group entity
</member>
        <member name="T:tp_nest_prt_opid">
Part operation id # entity
</member>
        <member name="T:tp_nest_prt">
Part entity
</member>
        <member name="T:tp_nest_sht">
@defgroup assoctyp_ch2412  Toolpath Nesting  
@{ 
Sheet entity
</member>
        <member name="T:tp_tab">
toolpath entity - Router tab entity 
</member>
        <member name="T:tp_chook">
CHook Toolpath Structure
</member>
        <member name="T:tp_group">
group entity 
</member>
        <member name="T:tp_surface">
surface entity - surface info 
</member>
        <member name="T:tp_arc_sld">
toolpath entity - arc from solid information 
</member>
        <member name="T:V8_SDETECT_DRILL_GEOM">
V8 SDetect Drill Geometry Structure
</member>
        <member name="T:tp_point_sld">
toolpath entity - drilling point from solid information 
</member>
        <member name="T:tp_line">
toolpath entity - 5axis position information 
</member>
        <member name="T:tp_point">
toolpath entity - drilling point information 
</member>
        <member name="T:LinkingParametersAssociativePointType">
            <summary> Linking parameters associative point type enumeration. </summary>
        </member>
        <member name="T:tp_grid">
toolpath entity - drilling grid information 
</member>
        <member name="T:tp_bolt_circle">
toolpath entity - drilling bolt circle information 
</member>
        <member name="T:tp_man_ent">
toolpath entity - manual entry 
</member>
        <member name="T:tp_chain">
toolpath entity - chain control entity 
</member>
        <member name="T:tp_boundary">
toolpath entity - chain boundary entity 
</member>
        <member name="T:tp_change">
toolpath entity - modify chain information 
</member>
        <member name="T:tp_thread_cut">
toolpath entity - thread cut entity (Used in Wire only) 
</member>
        <member name="T:tp_sync">
toolpath entity - chain sync entity 
</member>
        <member name="T:tp_density">
toolpath entity - chain boundary entity 
</member>
        <member name="T:wp_change_header">
Wire change at point header
</member>
        <member name="F:wp_change.list_index">
@} 
</member>
        <member name="F:wp_change.pass">
@} 
@defgroup pass-specific_data PASS-SPECIFIC DATA 
@{ 
</member>
        <member name="F:wp_change.taper">
@defgroup non-pass-specific_data NON-PASS-SPECIFIC DATA 
@{ 
</member>
        <member name="T:wp_change">
Wire change at point structure
</member>
        <member name="T:wp_cset_change">
Wire control settings change structure
</member>
        <member name="T:wp_cflag_change">
Wire control flag change structure
</member>
        <member name="T:wire_power_set_pass">
@} 
@defgroup wire_structures Wire Structures 
@{ 
Wire power set pass settings
</member>
        <member name="T:matl_list">
for linked lists of material entities 
</member>
        <member name="T:material">
material definition 
</member>
        <member name="T:matl_lathe">
lathe specific material specs 
</member>
        <member name="T:matl_mill">
@defgroup material_structures Material Structures 
@{ 
mill specific material specs 
</member>
        <member name="T:event_ent">
event entity
</member>
        <member name="T:event_prm_feed_type">
feed type event
</member>
        <member name="T:event_prm_feed_rate">
feed rate event
</member>
        <member name="T:event_prm_rotary_axis_master">
part rotary axis master event
</member>
        <member name="T:event_prm_spindle_speed_master">
part spindle speed master event
</member>
        <member name="T:event_prm_stock_transfer">
stock transfer event
</member>
        <member name="T:event_prm_tool_change">
tool change event
</member>
        <member name="T:event_prm_macro">
macro event
</member>
        <member name="T:event_prm_axis_clamp">
axis clamp event
</member>
        <member name="T:event_prm_quill">
quill event
</member>
        <member name="T:event_prm_steady_rest">
steady rest advance/retract event
</member>
        <member name="T:event_prm_axis_place_holder">
axis place holder event
</member>
        <member name="T:event_prm_axis_motion">
axis motion event
</member>
        <member name="T:event_prm_coolant_place_holder">
coolant place holder event
</member>
        <member name="T:event_prm_coolant">
coolant event
</member>
        <member name="T:event_prm_hidden_tc_marker">
hidden tool change marker event
</member>
        <member name="T:event_prm_sync">
sync event
</member>
        <member name="T:event_prm_string">
manual entry event
</member>
        <member name="T:event_prm_bar_feed">
bar feed event
</member>
        <member name="T:event_prm_spindle_move">
spindle move event (part spindle)
</member>
        <member name="T:event_prm_tool_grip">
tool grip length move event
</member>
        <member name="T:event_prm_tool_clear">
tool clearance move event
</member>
        <member name="T:event_prm_tool_linear">
tool linear move event
</member>
        <member name="T:event_prm_spindle_grip">
part spindle grip length move event 
</member>
        <member name="T:event_prm_spindle_clear">
part spindle clearance move event 
</member>
        <member name="T:event_prm_chuck">
chuck open/close event
</member>
        <member name="T:event_prm_tool_offset">
tool offset event
</member>
        <member name="T:event_prm_tool_stage">
tool stage event
</member>
        <member name="T:event_prm_tool_call">
tool call event 
</member>
        <member name="T:event_prm_tool_orient">
tool spindle orientation event 
</member>
        <member name="T:event_prm_part_orient">
part spindle orientation event 
</member>
        <member name="T:event_prm_tool_ss_clamp">
tool spindle speed clamp event 
</member>
        <member name="T:event_prm_part_ss_clamp">
part spindle speed clamp event 
</member>
        <member name="T:event_prm_tool_ss">
tool spindle speed event 
</member>
        <member name="T:event_prm_part_ss">
part spindle speed event 
</member>
        <member name="T:event_prm_dwell">
dwell event
</member>
        <member name="T:event_prm_custom">
custom event (canned text)
</member>
        <member name="T:event_prm_tool_rpm_css">
tool spindle rpm/css
</member>
        <member name="T:event_prm_tool_states">
tool spindle event with states
</member>
        <member name="T:event_prm_part_spindle_dir">
part spindle direction event
</member>
        <member name="T:event_prm_part_rpm_css">
part spindle rpm/css
</member>
        <member name="T:event_prm_part_states">
part spindle event with states
</member>
        <member name="T:event_prm_work_offset">
select event
</member>
        <member name="T:event_prm_select">
select event
</member>
        <member name="T:event_prm_comment_output">
comment output event
</member>
        <member name="T:event_prm_bar_puller_open">
bar puller open/close
</member>
        <member name="T:event_prm_tool_table">
tool table event
</member>
        <member name="T:event_prm_states">
event with multiple states, like on/off
</member>
        <member name="T:event_prm_spindle">
part spindle event
</member>
        <member name="T:event_prm_simple">
simple event
</member>
        <member name="T:event_prm_header">
event list header event
</member>
        <member name="D:GCODE_MASK">
            <summary> Defines an alias representing the gcode mask. </summary>
        </member>
        <member name="T:lathe_bdry">
lathe component boundary
</member>
        <member name="T:ltool_rec">
Lathe tool definition
</member>
        <member name="T:machine_position">
Machine reference position type and method of positioning
</member>
        <member name="T:ReferencePositionSource">
Reference position source (how it was created)
</member>
        <member name="T:ReferencePositionType">
For tool item id
For MT machine position data
Type of reference position
</member>
        <member name="F:TYPE_AXIS_COMBO_REFPT">
            <summary>	The next 2 members are used for axis combination reference POINTS and home position only. </summary>
        </member>
        <member name="T:view_ent">
View Entity Structure 
</member>
        <member name="T:WCSinfo">
WCS Information Structure 
</member>
        <member name="T:assoc_pt">
Named View Associative Geometry Selections 
</member>
        <member name="T:tp_ent">
for tp_ent type
</member>
        <member name="T:Cnc.Tool.V7LATHETOOL">
LATHE TOOL 
</member>
        <member name="T:Cnc.Tool.LATHETOOL">
LATHE TOOL 
</member>
        <member name="T:Cnc.Tool.CUSTOMLTOOL">
CUSTOM LATHE TOOL 
</member>
        <member name="T:Cnc.Tool.HOLDERCFG">
GENERAL HOLDER MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.LHOLDER">
GENERIC TOOL HOLDER (ALL UNITS ALWAYS IN INCHES!) 
</member>
        <member name="T:Cnc.Tool.INSERT">
LATHE INSERT/DRILLING TOOL DEFINITION 
</member>
        <member name="T:Cnc.Tool.LDRILLTOOLCFG">
DRILLING TOOL MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.LDRILLTOOL">
LATHE DRILLING TOOL DEFINITION 
</member>
        <member name="T:Cnc.Tool.GRVINSERTCFG">
GROOVING/PARTING INSERT MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.GRVINSERT">
GROOVING/PARTING INSERT 
</member>
        <member name="T:Cnc.Tool.THDINSERTCFG">
THREADING INSERT MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.THDINSERT">
THREADING INSERT 
</member>
        <member name="T:Cnc.Tool.GTBINSERTCFG">
GENERAL TURNING / BORING INSERT MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.GTBINSERT">
GENERAL TURNING/BORING INSERT (ALL UNITS ALWAYS IN INCHES!) 
</member>
        <member name="T:Cnc.Tool.LTOOLTYPECFG">
LATHE TOOL TYPE MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.DIMBMPINFO">
CONFIGURATION FOR DIMENSIONED BITMAP 
</member>
        <member name="T:Cnc.Tool.LISTINFO">
CONFIGURATION INFO FOR A LIST VIEW OR DROPDOWN 
</member>
        <member name="T:Cnc.Tool.MINMAXREAL">
@defgroup ltooldef_ch2 LIMITS 
@{ 
@} 
@defgroup ltooldef_ch3 LATHE TOOL TYPES 
@{ 
@} 
@defgroup ltooldef_ch4 CUSTOM GEOMETRY TOOL TYPES 
@{ 
@} 
@defgroup ltooldef_ch5 THREAD INSERT TYPES 
@{ 
@} 
@defgroup ltooldef_ch6 THREAD TYPES 
@{ 
@} 
@defgroup ltooldef_ch7 DRILLING TYPES 
@{ 
@} 
@defgroup ltooldef_ch8 TAP TYPES 
@{ 
@} 
@defgroup ltooldef_ch9 TOOL COMPENSATION TYPES 
@{ 
@} 
FLOATING POINT EDIT BOX LIMITS, DEFAULTS 
</member>
        <member name="M:Cnc.Tool.op_RightShift(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	CArchive read operator overload for the TlID class. </summary>
            <param name="ar">	The archive. </param>
            <param name="id">	The identifier. </param>
            <returns>	The archive. </returns>
        </member>
        <member name="M:Cnc.Tool.op_LeftShift(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID)">
            <summary>	CArchive write operator overload for the TlID class. </summary>
            <param name="ar">	The archive. </param>
            <param name="id">	The identifier. </param>
            <returns>	The adjusted archive. </returns>
        </member>
        <member name="F:Cnc.Tool.TlID.m_Guid">
            <summary>	Unique identifier. </summary>
        </member>
        <member name="F:Cnc.Tool.TlID.EmptyID">
            <summary>	Identifier for the empty tlid. </summary>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Implicit~_GUID">
            <summary>	GUID casting operator. </summary>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Implicit~ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;">
            <summary>	CString casting operator. </summary>
        </member>
        <member name="M:Cnc.Tool.TlID.op_LessThan(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Less-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_GreaterThan(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Greater-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Inequality(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Inequality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Equality(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Equality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Inequality(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Inequality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Equality(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Equality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Assign(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment guid operator. </summary>
            <param name="guidGUID">	Unique identifier. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Assign(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment string operator. </summary>
            <param name="stringGUID">	Unique identifier for the string. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.ToString">
            <summary>	Convert this object into a string representation. </summary>
            <returns>	This object as a CString. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary>	Parameterized blob constructor. </summary>
            <param name="blob">	   	The BLOB. </param>
            <param name="blobsize">	The blobsize. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Parameterized byte guid constructor. </summary>
            <param name="guidGUID">	Unique identifier. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*)">
            <summary>	Parameterized string constructor. </summary>
            <param name="stringGUID">	Unique identifier for the string. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Parameterized string constructor. </summary>
            <param name="stringGUID">	Unique identifier for the string. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlID">
            <summary> Class representing a tool identifier in the form of a GUID (Globally unique identifier) </summary>
        </member>
        <member name="T:TlDefinition">
            <summary>	Values that represent the insert definition. </summary>
        </member>
        <member name="T:TlCuttingSide">
            <summary>	Values that represent the handedness of a tool or tool item. </summary>
        </member>
        <member name="T:TlGraphicsFileFormat">
            <summary>	Values that represent tool graphics file formats. </summary>
        </member>
        <member name="T:TlLiveCenterTaperStyle">
            <summary> Values that represent the different Lathe Live Center taper styles. </summary>
        </member>
        <member name="T:TlLiveCenterPointStyle">
            <summary> Values that represent the different Lathe Live Center point styles. </summary>
        </member>
        <member name="T:TlThreadShape">
            <summary> Values that represent the different Thread Shapes. </summary>
        </member>
        <member name="T:TlShankType">
            <summary> Values that represent the different shank types on tools. </summary>
        </member>
        <member name="T:MCToolType">
            <summary> Values that represent the different tool types that Mastercam supports. </summary>
        </member>
        <member name="T:LowerConnectionType">
            <summary>	Enumeration representing the Holder Lower Connection Type. </summary>
        </member>
        <member name="T:UpperConnectionType">
            <summary>	Enumeration representing the Holder Upper Connection Type. </summary>
        </member>
        <member name="T:TlHelixType">
            <summary>	 Helix type for router tools </summary>
        </member>
        <member name="T:TlSpindleDir">
            <summary>	 Enumeration for spindle directions. </summary>
        </member>
        <member name="T:TlDisplayType">
            <summary>	 Enumeration representing the Tool Display Type </summary>
        </member>
        <member name="T:TlCornerType">
            <summary>	Enumeration that represent TlCornerType. </summary>
        </member>
        <member name="T:TlCutSource">
            <summary>	 Enumeration for source of cut params. </summary>
        </member>
        <member name="T:TlCutQuality">
            <summary>	Enumeration for cut quality. </summary>
        </member>
        <member name="T:TlRadiusType">
            <summary>	Enumeration for radius types </summary>
        </member>
        <member name="T:TlMaterialHardness">
            <summary>	Enumeration for different hardness scales. </summary>
        </member>
        <member name="T:TlMaterialISOValue">
            <summary>	Enumeration representing the different material ISO Group Values. </summary>
        </member>
        <member name="T:TlMaterialGroup">
@defgroup assocvar_ch26 tool radius types 
@{ 
@} 
@defgroup assocvar_ch27 canned cycle types 
@{ 
@} 
@defgroup assocvar_ch3 mill cutter capabilities 
@{ 
@}
<summary>	Enumeration for different material groups. </summary></member>
        <member name="T:Cnc.Tool.TlTurnHolder">
            <summary>	Declares the TlTurnHolder type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlBoundaryGenerationParams">
            <summary>	Declares the TlBoundaryGenerationParams type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlConnection">
            <summary>	Declares the TlConnection type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A connection between tool components. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGraphicsFileCollection">
            <summary>	Declares the TlGraphicsFileCollection type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a collection of tool graphics files. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGraphicsFile">
            <summary>	Declares the TlGraphicsFile type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a tool graphics file in memory. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAccessoryCollection">
            <summary>	Declares the TlAccessoryCollection type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a collection of tool accessory items. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAccessory">
            <summary>	Declares the TlAccessory type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	The tl accessory class for assembly accessory items. </summary>
        </member>
        <member name="T:Cnc.Tool.TlLocator">
            <summary>	Declares the TlLocator type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A class that provides standard tool class behavior on top of wrapping a transformation matrix. </summary>
        </member>
        <member name="T:Cnc.Tool.TransformationMatrixColumn">
            <summary>	Declares the TransformationMatrixColumn type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TransformationMatrix">
            <summary>	Declares the TransformationMatrix type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlXMLNode">
            <summary>	Declares the TlXMLNode type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlManufacturer">
            <summary>	Declares the TlManufacturer type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tool manufacturer. </summary>
        </member>
        <member name="T:Cnc.Tool.TlOpType">
            <summary>	Declares the TlOpType type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlOpGroup">
            <summary>	Declares the TlOpGroup type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolemakingOpParams">
            <summary>	Declares the TlHolemakingOpParams type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMillingOpParams">
            <summary>	Declares the TlMillingOpParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class defining Milling Tool Operation Parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlOpParams">
            <summary>	Declares the TlOpParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class defining Tool Operation Parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileArcSegment">
            <summary>	Declares the TlProfileArcSegment type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileLineSegment">
            <summary>	Declares the TlProfileLineSegment type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileSegment">
            <summary>	Declares the TlProfileSegment type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a segment on a 2d profile. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfile">
            <summary>	Declares the TlProfile type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a 2D profile comprised of instances of the TlProfileSegment class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMgr">
            <summary>	Declares the TlMgr type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class to maintain a list of tool items.  Can be added to the database to store a file tool item list, or
		  can be kept unattached to function as a "local" tool item list. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheLiveCenter">
            <summary>	Declares the TlHolderLatheLiveCenter type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheTurning">
            <summary>	Declares the TlHolderLatheTurning type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheThreading">
            <summary>	Declares the TlHolderLatheThreading type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheGrooving">
            <summary>	Declares the TlHolderLatheGrooving type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheDrill">
            <summary>	Declares the TlHolderLatheDrill type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheBoring">
            <summary>	Declares the TlHolderLatheBoring type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLathe">
            <summary>	Declares the TlHolderLathe type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertTurningBoring">
            <summary>	Declares the TlInsertTurningBoring type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertThreading">
            <summary>	Declares the TlInsertThreading type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertLatheDrill">
            <summary>	Declares the TlInsertLatheDrill type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertGrooving">
            <summary>	Declares the TlInsertGrooving type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsert">
            <summary>	Declares the TlInsert type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Base class for insert representation </summary>
        </member>
        <member name="T:Cnc.Tool.TlCoolant">
            <summary>	Declares the TlCoolant type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a collection of tool coolant settings. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCutParam">
            <summary>	Declares the TlCutParam type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolType">
            <summary>	Declares the TlToolType type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolGroup">
            <summary>	Declares the TlToolGroup type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolGrade">
            <summary>	Declares the TlToolGrade type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined tool grade. </summary>
        </member>
        <member name="T:Cnc.Tool.TlWorkMaterial">
            <summary>	Declares the TlWorkMaterial type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolMaterial">
            <summary>	Declares the TlToolMaterial type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tool material. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMaterial">
            <summary>	Declares the TlMaterial type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a basic material. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderTreeNode">
            <summary>	Declares the TlHolderTreeNode type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderComposite">
            <summary>	Declares the TlHolderComposite type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolder">
            <summary>	Declares the TlHolder type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a mill tool holder. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolBarrelMill">
            <summary>	Declares the TlToolBarrelMill type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolFeedMill">
            <summary>	Declares the TlToolFeedMill type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolThreading">
            <summary>	Declares the TlToolThreading type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolReamer">
            <summary>	Declares the TlToolReamer type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLatheCustom">
            <summary>	Declares the TlToolLatheCustom type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLatheISO">
            <summary>	Declares the TlToolLatheISO type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLathe">
            <summary>	Declares the TlToolLathe type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> The base lathe tool class.  This class contains data and functions that are common to every tool. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolEndmill">
            <summary>	Declares the TlToolEndmill type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolSlotMill">
            <summary>	Declares the TlToolSlotMill type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolDrill">
            <summary>	Declares the TlToolDrill type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolCenterDrill">
            <summary>	Declares the TlToolCenterDrill type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolCounterBore">
            <summary>	Declares the TlToolCounterBore type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolBoring">
            <summary>	Declares the TlToolBoring type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolMill">
            <summary>	Declares the TlToolMill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> The base mill tool class.  This class contains data and functions that are common to every mill tool. </summary>
        </member>
        <member name="T:Cnc.Tool.TlTool">
            <summary>	Declares the TlTool type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> The base tool class.  This class contains data and functions that are common to every tool. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssembly">
            <summary>	Declares the TlAssembly type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a mill tool assembly. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyItem">
            <summary>	Declares the TlAssemblyItem type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tool assembly item. </summary>
        </member>
        <member name="T:Cnc.Tool.TlObject">
            <summary>	Declares the TlObject type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Base class for all tool class objects. </summary>
        </member>
        <member name="D:Cnc.Tool.TlIDListIter">
            <summary>	Defines an alias representing A constant iterator through a TlIDList. </summary>
        </member>
        <member name="D:Cnc.Tool.TlIDList">
            <summary>	Defines an alias representing a vector of type TlID. </summary>
        </member>
        <member name="D:LPMEMFILESTRUCT">
POINTER TO MEMFILESTRUCT STRUCTURE 
</member>
        <member name="F:MEMFILESTRUCT.hFileMap">
MEMORY FILE BUFFER INFORMATION 
</member>
        <member name="F:MEMFILESTRUCT.hFile">
DISK FILE INFORMATION 
</member>
        <member name="T:MEMFILESTRUCT">
WIN32 FILE INFORMATION 
</member>
        <member name="D:lineoftext">
lathe tool types
DATA PROTOTYPES 
</member>
        <member name="T:tool_station_type">
Tool station
</member>
        <member name="T:tool_block_type">
Tool block component parameters
</member>
        <member name="T:tool_head_type">
Tool heads
@defgroup block_types Block Types  
@{ 
@} 
@defgroup head_types Head Types 
@{ 
@} 
maximum length of a name  TOOLHEAD
Tool head component parameters
</member>
        <member name="T:safety_zone">
safety zones
</member>
        <member name="T:ent_idn_list_ptrs">
ent_list_idn memory pointer info
</member>
        <member name="T:ent_idn_list">
misc. list of entities by ent_idn
</member>
        <member name="T:ent_idn_type">
ent_idns for machine components and component groups in the database
</member>
        <member name="T:AxisPositions">
Positions (coordinates + method of getting there) for all axes
</member>
        <member name="T:AxisCoordinate">
Axis coordinate
</member>
        <member name="T:AxisCoordinateType">
Axis coordinate types
</member>
        <member name="F:AXIS_COMBO_ABS_COORD">
            <summary>	The next 2 members are used for axis combination reference POINTS and home position only. </summary>
        </member>
        <member name="D:component_id_type">
@defgroup assoctyp_ch1	some system limits 
@{ 
@} 
@defgroup  assocvar_ch40 tool types 
@{ 
@} 
custom operation
MT work type
MT prototype version
Machine component unique identifier
</member>
        <member name="T:SDETECT_CONE_FACE">
Solid Detection - conical face structure
</member>
        <member name="T:SDETECT_CYL_FACE">
Solid Detection - cylindrical face structure
</member>
        <member name="T:SDETECT_DRILL_GEOM">
Solid Drill detection Data
</member>
        <member name="T:drw_point">
AssocTyp_ch.h
</member>
        <member name="M:SetMainLevel(System.Int32)">
@} 
 @par Purpose:
		Sets the main level number global "main_level".  Note: unless temporarily set and restored, do not set "main_level" directly, use this function instead!

 @param[in]		level		level number

</member>
        <member name="F:constr_view_is_3d">
@defgroup math_varuables math variables
*
* initialized in this module

Maximum number of views
</member>
        <member name="T:v8_dimension">
structure for dimensions  
</member>
        <member name="T:v8_tangent">
structure for tangent dimensions  
</member>
        <member name="T:v8_perp">
structure for linear dimensions  
</member>
        <member name="T:v8_pt_dim">
structure for point dimensions	
</member>
        <member name="T:v8_ord_dim">
structure for ordinate dimensions  
</member>
        <member name="T:v8_circular">
structure for circular dimensions (rad/dia)  
</member>
        <member name="T:v8_angular">
structure for angular dimensions  
</member>
        <member name="T:v8_linear">
structure for linear dimensions  
</member>
        <member name="T:v8_note">
structure for notes  
</member>
        <member name="T:v8_dim_txt">
structure for dimension text  
</member>
        <member name="T:v8_wit_ldr">
structure for leaders and witness lines  
</member>
        <member name="T:v8_wl_arc">
circular leader  
</member>
        <member name="T:v8_wl_line">
structure for standard non_assoc points  
</member>
        <member name="T:DB_LIST_ENT">
@} 
Database List Entity
</member>
        <member name="T:CHAIN">
A CHAIN is a single chain or the start of a linked list of chains

@defgroup dbvars_ch1 Sel bit constants 
@{ 
@} 
@defgroup dbvars_ch4 Surface IDs
*	@note used in surface header f.type  0 - 15  
@{ 
@} 
@defgroup dbvars_ch5 file types (used with FILE_ID, PMESH_ID, and STOCK_ID entities) 
@{ 
@} 
@defgroup dbvars_ch6 Database FN IDs
*	@note sub-types of DB_ID entities  
@{ 
@} 
@defgroup dbvars_ch7 Entity ID masks 
@{ 
@} 
@defgroup dbvars_ch8 'task' values for file i/o
* 'task' values for file input/output (see especially dbutil.c) 
@{ 
@} 
@defgroup dbvars_ch9 product codes 
@{ 
@} 
</member>
        <member name="T:CHAIN_HASH_REC">
@} 
 @defgroup chain_data_structures Chain Data Structures
 @note END_OF_CHAIN is used only for manual sync (only at the end of
		 the first chain).	Normally, the end of chain is determined from
		 next == NULL.

@{ 
</member>
        <member name="T:pock_bound">
pocket boundary.  This is the central data structure used by pocketing.
All boundaries and islands can be expressed in this structure.  It
is a linked list.

</member>
        <member name="T:pock_chn">
@defgroup pock_data_structures Pocket Data Structures 
@{ 
</member>
        <member name="T:relief_info_type">
Relief Information Type
</member>
        <member name="T:art_assoc_entry">
Art Associative Entry
</member>
        <member name="T:art_bbox">
Art Bounding Box
</member>
        <member name="T:ent_profile">
profile entity type  
</member>
        <member name="T:polygonal_mesh">
polygonal_mesh (enhanced file_ent with persistant DB storage, smart memory usage, masking, selection, etc.)
</member>
        <member name="T:file_ent">
file entity (when e.id = FILE_ID, data is in e.u.f)
</member>
        <member name="T:font_attr">
            <summary> Data structure for font attributes. </summary>
        </member>
        <member name="T:fonts_type">
Fonts Type
</member>
        <member name="T:font_style">
Font style
</member>
        <member name="T:copious_data">
@} 
 @note If a copious_data member is added between lathe_bdry_valid and pad1
		 and the new member is not supposed to be part of the copious_data
		 header, the define below must be changed to use the new member in place
		 of pad1.

Copius Data structure
</member>
        <member name="T:entattr_type">
Entity Attribute Type
</member>
        <member name="T:ea_type">
EA Type
</member>
        <member name="T:bitmap_type">
Bitmap type
</member>
        <member name="T:descr_type">
Description type
</member>
        <member name="T:worksheet_type">
The worksheets structure
</member>
        <member name="T:levels_type">
The level structure
</member>
        <member name="T:levelNameStruct">
Structure to hold names of levels
</member>
        <member name="T:globals_type">
Visible levels
</member>
        <member name="T:fileLockHistoryType">
File Lock History Type
</member>
        <member name="T:fileLockHistoryStruct">
File Lock History Structure
</member>
        <member name="T:fileLockType">
Fle Lock Type
</member>
        <member name="T:history_type">
History Type
</member>
        <member name="T:history_struct">
History Structure
</member>
        <member name="T:version_header">
Version Header
</member>
        <member name="T:rel_density_type">
@} 
Relative density (used in NCS files only)
</member>
        <member name="T:screen_info_type">
Screen Information Type
</member>
        <member name="T:v_matrix_type">
@} 
@defgroup screen_types Screen Types 
@{ 
View Matrix Type
</member>
        <member name="T:CONE_sf">
            <summary> Cone definition structure that corresponds to Parasolid's cone structure. </summary>
            <remarks> To convert to Mastercam units one simply uses mastercamValue = PS2MC (parasolidValue)
		  for a value like the radius, or PS2MCPT3D (parasolidPoint, mastercamPoint) for point values.
		  No conversion is required for unit vectors like the axis and ref_direction or for an angular value. </remarks>
        </member>
        <member name="T:CYLINDER_sf">
            <summary> Cylinder definition structure that corresponds to Parasolid's cylinder structure. </summary>
            <remarks> To convert to Mastercam units one simply uses mastercamValue = PS2MC (parasolidValue)
		  for a value like the radius, or PS2MCPT3D (parasolidPoint, mastercamPoint) for point values.
		  No conversion is required for unit vectors like the axis and ref_direction or for an angular value. </remarks>
        </member>
        <member name="T:PLANE_sf">
This corresponds to Parasolid's plane structure
and to STEP's axis2_placement structure.
</member>
        <member name="T:mc_solid_ent">
Solid
</member>
        <member name="T:mc_solid_xmt_ent">
Solid data header for storing .x_t in partfile
</member>
        <member name="T:mc_opfile_ent">
@defgroup solid_types Solid Types 
@{ 
Operations file header for storing history file in partfile
</member>
        <member name="T:surf_type">
Surface Type 
</member>
        <member name="T:trim_type">
Trimmed Surface
</member>
        <member name="T:offset_type">
Offset Surface
</member>
        <member name="T:plane_type">
Plane
</member>
        <member name="T:fillet_type">
Fillet
</member>
        <member name="T:tabcyl_type">
Draft Surface
</member>
        <member name="T:rev_type">
Revolved Surface
</member>
        <member name="T:loft_type">
Loft Surface
</member>
        <member name="T:nbs_type">
NURBS Surface
</member>
        <member name="T:pps_type">
piecewise polynomial surface 
</member>
        <member name="T:surf_header">
@defgroup surface_types Surface Types 
@{ 
</member>
        <member name="T:cc_type">
composite curve 
</member>
        <member name="T:cons_type">
Curve ON Surface  
</member>
        <member name="T:nb_ptrs">
NURBS pointer type
</member>
        <member name="T:nb_type">
 @note If a spline member is added between pad and ent_ptr and the new
		 member is not supposed to be part of the spline header, the define
		 below must be changed to use the new member in place of ent_ptr.

NURBS Spline
</member>
        <member name="T:spline">
@defgroup curve_types Curve Types 
@{ 
Parametric spline 
</member>
        <member name="T:attributes">
@} 
Attribute structure
</member>
        <member name="D:homogeneous_matrix">
Homogeneous matrix
</member>
        <member name="D:art_data">
pointer to art data
</member>
        <member name="M:CncGaf.UtObject.Serialize(CncGaf.UtArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this object's data to (or from) an archive. </summary>
            <param name="ar"> Reference to archive. </param>
        </member>
        <member name="M:CncGaf.UtObject.GetObjectClassId">
            <summary> Gets the runtime class ID of this object. </summary>
            <returns> Class runtime ID. </returns>
        </member>
        <member name="M:CncGaf.UtObject.GetObjectClassName">
            <summary> Gets the class name of this object. </summary>
            <returns> Class name. </returns>
        </member>
        <member name="M:CncGaf.UtObject.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CncGaf.UtObject.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:CncGaf.UtObject">
            <summary> Base object for classes requiring serialization support. </summary>
        </member>
        <member name="T:CncGaf.UtArchive">
\ingroup GafBase
@{
</member>
        <member name="T:TP_ENT_TYPE">
            <summary> Values that represent toolpath entity types 
		  (for ent.u.tp.tp_id when ent.id == ASSOC_ID and ent.assoc_id == TP_ID). </summary>
        </member>
        <member name="T:ASSOC_ENT_TYPE">
            <summary> Values that represent associative entity types 
		  (for ent.assoc_id when ent.id == ASSOC_ID). </summary>
        </member>
        <member name="M:P4dToP3d(p_4d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a p_4d reference to a p_3d reference. </summary>
            <param name="pnt"> 4D point to convert. </param>
            <returns> p_3d reference. </returns>
        </member>
        <member name="M:P3dToP2d(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a p_3d reference to a p_2d reference. </summary>
            <param name="pnt"> 3D point to convert. </param>
            <returns> p_2d reference. </returns>
        </member>
        <member name="M:P4dRef(System.Double*)">
            <summary> Convert a double pointer to a p_4d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> p_4d reference. </returns>
        </member>
        <member name="M:P4dRef(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Convert a constant double pointer to a constant p_4d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> Constant p_4d reference. </returns>
        </member>
        <member name="M:P3dRef(System.Double*)">
            <summary> Convert a double pointer to a p_3d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> p_3d reference. </returns>
        </member>
        <member name="M:P3dRef(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Convert a constant double pointer to a constant p_3d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> Constant p_3d reference. </returns>
        </member>
        <member name="M:P2dRef(System.Double*)">
            <summary> Convert a double pointer to a p_2d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> p_2d reference. </returns>
        </member>
        <member name="M:P2dRef(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Convert a constant double pointer to a constant p_2d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> Constant p_2d reference. </returns>
        </member>
        <member name="M:op_Inequality(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator overload for 4D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are not equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Equality(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator overload for 4D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Inequality(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator overload for 3D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are not equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Equality(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator overload for 3D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Inequality(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator overload for 2D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are not equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Equality(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator overload for 2D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:Cross(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the cross product of two 3D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Cross product. </returns>
        </member>
        <member name="M:Cross(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the cross product of two 2D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Cross product. </returns>
        </member>
        <member name="M:Dot(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the dot product of two 4D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Dot product. </returns>
        </member>
        <member name="M:Dot(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the dot product of two 3D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Dot product. </returns>
        </member>
        <member name="M:Dot(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the dot product of two 2D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Dot product. </returns>
        </member>
        <member name="M:DistanceSq(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance squared between two 4D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance squared. </returns>
        </member>
        <member name="M:DistanceSq(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance squared between two 3D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance squared. </returns>
        </member>
        <member name="M:DistanceSq(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance squared between two 2D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance squared. </returns>
        </member>
        <member name="M:Distance(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance between two 4D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance. </returns>
        </member>
        <member name="M:Distance(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance between two 3D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance. </returns>
        </member>
        <member name="M:Distance(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@} 
<summary> Computes the distance between two 2D points. </summary><param name="pnt1"> First pnt. </param><param name="pnt2"> Second pnt. </param><returns> Distance. </returns></member>
        <member name="T:TlProfileEnt">
3D line, point or arc
</member>
        <member name="D:matrix_44">
@} 
<summary> Defines an alias representing the matrix 44. </summary></member>
        <member name="T:x_matrix">
Transformation matrix
</member>
        <member name="M:mat_43.op_Subscript(System.Int32)">
            <summary> Array indexer operator. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="T:mat_43">
            <summary> 4x3 matrix. </summary>
        </member>
        <member name="M:matrix_33i.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="m00"> row 0 column 0. </param>
            <param name="m01"> row 0 column 1. </param>
            <param name="m02"> row 0 column 2. </param>
            <param name="m10"> row 1 column 0. </param>
            <param name="m11"> row 1 column 1. </param>
            <param name="m12"> row 1 column 2. </param>
            <param name="m20"> row 2 column 0. </param>
            <param name="m21"> row 2 column 1. </param>
            <param name="m22"> row 2 column 2. </param>
        </member>
        <member name="M:matrix_33i.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="xAxis"> X axis (row 0). </param>
            <param name="yAxis"> Y axis (row 1). </param>
            <param name="zAxis"> Z axis (row 2). </param>
        </member>
        <member name="M:matrix_33i.#ctor(Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="mat"> Math Library-style matrix to copy. </param>
        </member>
        <member name="M:matrix_33i.#ctor(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="mat"> Matrix to copy. </param>
        </member>
        <member name="M:matrix_33i.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:matrix_33i">
            <summary> 3x3 matrix (initialized). </summary>
            <remarks> By default, the matrix is initialized to the identity matrix. </remarks>
        </member>
        <member name="M:matrix_33.TransposeThis">
            <summary> Transposes this matrix. </summary>
            <returns> Reference to this matrix. </returns>
        </member>
        <member name="M:matrix_33.Transpose">
            <summary> Returns a matrix that is the transpose of this matrix. </summary>
            <returns> Transposed matrix. </returns>
        </member>
        <member name="M:matrix_33.IsIdentity">
            <summary> Checks if this object is the identity matrix. </summary>
            <returns> True if identity matrix, false if not. </returns>
        </member>
        <member name="M:matrix_33.SetIdentity">
            <summary> Sets this object to the identity matrix. </summary>
        </member>
        <member name="M:matrix_33.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:matrix_33.op_Implicit~Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;">
            <summary> Operator (Cnc::Math::Matrix33) overload. </summary>
            <returns> This object converted to a Math Library-style matrix. </returns>
        </member>
        <member name="M:matrix_33.op_Assign(Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="mat"> Math Library-style matrix to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="T:matrix_33">
@} 
@defgroup matrix_types Matrix Types 
@{ 
<summary> 3x3 matrix. </summary></member>
        <member name="T:gt">
2D line, point or arc
</member>
        <member name="T:a_3d">
3D Arc
</member>
        <member name="T:a_2d">
2D Arc
</member>
        <member name="T:l_3d">
3D Line
</member>
        <member name="T:l_2d">
2D Line
</member>
        <member name="M:p_4di.op_Assign(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_4di.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Constructor. </summary>
            <param name="pnt"> 3D point. </param>
            <param name="w">   w value. </param>
        </member>
        <member name="M:p_4di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y/Z/W values. </param>
        </member>
        <member name="M:p_4di.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
            <param name="w"> W value. </param>
        </member>
        <member name="M:p_4di.#ctor(Cnc.Math.Vector.VecBase&lt;0x4,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="vec"> Math Library-style vector to copy. </param>
        </member>
        <member name="M:p_4di.#ctor(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="pnt"> Point to copy. </param>
        </member>
        <member name="M:p_4di.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:p_4di">
            <summary> 4D point (initialized). </summary>
            <remarks> By default, the point is initialized to (0., 0., 0., 0.). </remarks>
        </member>
        <member name="M:op_Multiply(System.Double,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiplication operator overload for "scale * p_4d". </summary>
            <param name="scale"> Value to multiply by. </param>
            <param name="pnt">   4D point to scale. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_4d.Normalize">
            <summary> Gets a normalized (unitized) copy of this "vector". </summary>
            <returns> Normalized "vector". </returns>
        </member>
        <member name="M:p_4d.NormalizeThis">
            <summary> Normalizes (unitizes) this "vector". </summary>
            <returns> A reference to this "vector". </returns>
        </member>
        <member name="M:p_4d.LengthSq">
            <summary> Gets the length squared of this "vector". </summary>
            <returns> Vector length squared. </returns>
        </member>
        <member name="M:p_4d.Length">
            <summary> Gets the length of this "vector". </summary>
            <returns> Vector length. </returns>
        </member>
        <member name="M:p_4d.op_DivisionAssignment(System.Double)">
            <summary> Division assignment operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Division(System.Double)">
            <summary> Division operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide by. </param>
            <returns> A point which contains the result of the division. </returns>
        </member>
        <member name="M:p_4d.op_MultiplicationAssignment(System.Double)">
            <summary> Multiplication assignment operator overload. </summary>
            <param name="scale"> Value to multiply this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Multiply(System.Double)">
            <summary> Multiplication operator overload. </summary>
            <param name="scale"> Value to multiply by. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_4d.op_SubtractionAssignment(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction assignment operator overload. </summary>
            <param name="pnt"> Point to subtract from this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Subtraction(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction operator overload. </summary>
            <param name="pnt"> Point to subtract. </param>
            <returns> A point which contains the result of the subtraction. </returns>
        </member>
        <member name="M:p_4d.op_UnaryNegation">
            <summary> Unary minus operator overload. </summary>
            <returns> A point which contains this point negated. </returns>
        </member>
        <member name="M:p_4d.op_AdditionAssignment(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator overload. </summary>
            <param name="pnt"> Point to add to this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Addition(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition operator overload. </summary>
            <param name="pnt"> Point to add. </param>
            <returns> A point which contains the result of the addition. </returns>
        </member>
        <member name="M:p_4d.op_LessThan(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less than operator overload. </summary>
            <param name="pnt"> Point to compare against. </param>
            <returns> True if this point is less than specified point, false otherwise. </returns>
        </member>
        <member name="M:p_4d.DoublePtr">
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
        </member>
        <member name="M:p_4d.ConvertTo3d">
            <summary> Converts this object to a 3D point. </summary>
            <returns> 3D point. </returns>
        </member>
        <member name="M:p_4d.SetXYZ(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the X/Y/Z components of this object to the specified values. </summary>
            <param name="pnt"> 3D point. </param>
        </member>
        <member name="M:p_4d.Set(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="pnt"> 3D point. </param>
            <param name="w">   W value. </param>
        </member>
        <member name="M:p_4d.Set(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y/Z/W values. </param>
        </member>
        <member name="M:p_4d.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
            <param name="w"> W value. </param>
        </member>
        <member name="M:p_4d.Set">
            <summary> Sets this object to (0., 0., 0., 0.). </summary>
        </member>
        <member name="M:p_4d.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:p_4d.op_Implicit~Cnc.Math.Vector.VecBase&lt;0x4,System.Double&gt;">
            <summary> Operator (Cnc::Math::Vector4D) overload. </summary>
            <returns> This object converted to a math. </returns>
        </member>
        <member name="M:p_4d.op_Assign(Cnc.Math.Vector.VecBase&lt;0x4,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="T:p_4d">
            <summary> 4D point. </summary>
        </member>
        <member name="M:p_3di.op_Assign(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_3di.#ctor(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Constructor. </summary>
            <param name="pnt"> 2D point. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*,System.Double)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y values. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y/Z values. </param>
        </member>
        <member name="M:p_3di.#ctor(System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
        </member>
        <member name="M:p_3di.#ctor(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="vec"> Math Library-style vector to copy. </param>
        </member>
        <member name="M:p_3di.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="pnt"> Point to copy. </param>
        </member>
        <member name="M:p_3di.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:p_3di">
            <summary> 3D point (initialized). </summary>
            <remarks> By default, the point is initialized to (0., 0., 0.). </remarks>
        </member>
        <member name="M:op_Multiply(System.Double,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiplication operator overload for "scale * p_3d". </summary>
            <param name="scale"> Value to multiply by. </param>
            <param name="pnt">   3D point to scale. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_3d.Normalize">
            <summary> Gets a normalized (unitized) copy of this "vector". </summary>
            <returns> Normalized "vector". </returns>
        </member>
        <member name="M:p_3d.NormalizeThis">
            <summary> Normalizes (unitizes) this "vector". </summary>
            <returns> A reference to this "vector". </returns>
        </member>
        <member name="M:p_3d.LengthSq">
            <summary> Gets the length squared of this "vector". </summary>
            <returns> Vector length squared. </returns>
        </member>
        <member name="M:p_3d.Length">
            <summary> Gets the length of this "vector". </summary>
            <returns> Vector length. </returns>
        </member>
        <member name="M:p_3d.op_DivisionAssignment(System.Double)">
            <summary> Division assignment operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Division(System.Double)">
            <summary> Division operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide by. </param>
            <returns> A point which contains the result of the division. </returns>
        </member>
        <member name="M:p_3d.op_MultiplicationAssignment(System.Double)">
            <summary> Multiplication assignment operator overload. </summary>
            <param name="scale"> Value to multiply this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Multiply(System.Double)">
            <summary> Multiplication operator overload. </summary>
            <param name="scale"> Value to multiply by. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_3d.op_SubtractionAssignment(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction assignment operator overload. </summary>
            <param name="pnt"> Point to subtract from this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Subtraction(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction operator overload. </summary>
            <param name="pnt"> Point to subtract. </param>
            <returns> A point which contains the result of the subtraction. </returns>
        </member>
        <member name="M:p_3d.op_UnaryNegation">
            <summary> Unary minus operator overload. </summary>
            <returns> A point which contains this point negated. </returns>
        </member>
        <member name="M:p_3d.op_AdditionAssignment(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator overload. </summary>
            <param name="pnt"> Point to add to this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Addition(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition operator overload. </summary>
            <param name="pnt"> Point to add. </param>
            <returns> A point which contains the result of the addition. </returns>
        </member>
        <member name="M:p_3d.op_LessThan(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less than operator overload. </summary>
            <param name="pnt"> Point to compare against. </param>
            <returns> True if this point is less than specified point, false otherwise. </returns>
        </member>
        <member name="M:p_3d.DoublePtr">
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
        </member>
        <member name="M:p_3d.ConvertTo2d">
            <summary> Converts this object to a 2D point. </summary>
            <returns> 2D point. </returns>
        </member>
        <member name="M:p_3d.SetXY(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="val"> X/Y value. </param>
        </member>
        <member name="M:p_3d.SetXY(System.Double,System.Double)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
        </member>
        <member name="M:p_3d.SetXY(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="pnt"> 3D point. </param>
        </member>
        <member name="M:p_3d.SetXY(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="pnt"> 2D point. </param>
        </member>
        <member name="M:p_3d.Set(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="pnt"> 2D point. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3d.Set(System.Double!System.Runtime.CompilerServices.IsConst*,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y values. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3d.Set(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y/Z value. </param>
        </member>
        <member name="M:p_3d.Set(System.Double,System.Double,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
        </member>
        <member name="M:p_3d.Set">
            <summary> Sets this object to (0., 0., 0.). </summary>
        </member>
        <member name="M:p_3d.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:p_3d.op_Implicit~Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;">
            <summary> Operator (Cnc::Math::Vector3D) overload. </summary>
            <returns> This object converted to a math. </returns>
        </member>
        <member name="M:p_3d.op_Assign(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_2di.op_Assign(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_2di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y values. </param>
        </member>
        <member name="M:p_2di.#ctor(System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
        </member>
        <member name="M:p_2di.#ctor(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="vec"> Math Library-style vector to copy. </param>
        </member>
        <member name="M:p_2di.#ctor(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="pnt"> Point to copy. </param>
        </member>
        <member name="M:p_2di.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:p_2di">
            <summary> 2D point (initialized). </summary>
            <remarks> By default, the point is initialized to (0., 0.). </remarks>
        </member>
        <member name="M:op_Multiply(System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiplication operator overload for "scale * p_2d". </summary>
            <param name="scale"> Value to multiply by. </param>
            <param name="pnt">   2D point to scale. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_2d.Normalize">
            <summary> Gets a normalized (unitized) copy of this "vector". </summary>
            <returns> Normalized "vector". </returns>
        </member>
        <member name="M:p_2d.NormalizeThis">
            <summary> Normalizes (unitizes) this "vector". </summary>
            <returns> A reference to this "vector". </returns>
        </member>
        <member name="M:p_2d.LengthSq">
            <summary> Gets the length squared of this "vector". </summary>
            <returns> Vector length squared. </returns>
        </member>
        <member name="M:p_2d.Length">
            <summary> Gets the length of this "vector". </summary>
            <returns> Vector length. </returns>
        </member>
        <member name="M:p_2d.op_DivisionAssignment(System.Double)">
            <summary> Division assignment operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Division(System.Double)">
            <summary> Division operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide by. </param>
            <returns> A point which contains the result of the division. </returns>
        </member>
        <member name="M:p_2d.op_MultiplicationAssignment(System.Double)">
            <summary> Multiplication assignment operator overload. </summary>
            <param name="scale"> Value to multiply this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Multiply(System.Double)">
            <summary> Multiplication operator overload. </summary>
            <param name="scale"> Value to multiply by. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_2d.op_SubtractionAssignment(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction assignment operator overload. </summary>
            <param name="pnt"> Point to subtract from this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Subtraction(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction operator overload. </summary>
            <param name="pnt"> Point to subtract. </param>
            <returns> A point which contains the result of the subtraction. </returns>
        </member>
        <member name="M:p_2d.op_UnaryNegation">
            <summary> Unary minus operator overload. </summary>
            <returns> A point which contains this point negated. </returns>
        </member>
        <member name="M:p_2d.op_AdditionAssignment(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator overload. </summary>
            <param name="pnt"> Point to add to this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Addition(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition operator overload. </summary>
            <param name="pnt"> Point to add. </param>
            <returns> A point which contains the result of the addition. </returns>
        </member>
        <member name="M:p_2d.op_LessThan(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less than operator overload. </summary>
            <param name="pnt"> Point to compare against. </param>
            <returns> True if this point is less than specified point, false otherwise. </returns>
        </member>
        <member name="M:p_2d.DoublePtr">
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
        </member>
        <member name="M:p_2d.ConvertTo3d">
            <summary> Converts this object to a 3D point. </summary>
            <returns> 3D point. </returns>
        </member>
        <member name="M:p_2d.Set(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y values. </param>
        </member>
        <member name="M:p_2d.Set(System.Double,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
        </member>
        <member name="M:p_2d.Set">
            <summary> Sets this object to (0., 0.). </summary>
        </member>
        <member name="M:p_2d.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:p_2d.op_Implicit~Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;">
            <summary> Operator (Cnc::Math::Vector2D) overload. </summary>
            <returns> This object converted to a math. </returns>
        </member>
        <member name="M:p_2d.op_Assign(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="T:p_2d">
            <summary> 2D point. </summary>
        </member>
        <member name="T:p_3d">
@defgroup Points_Lines_Arcs Point, Line, and Arc Types 
@{ 
<summary> 3D point. </summary></member>
        <member name="D:Cnc.Math.Transform2D">
            <summary> Defines an alias representing a 2D transform object. </summary>
        </member>
        <member name="D:Cnc.Math.Transform3D">
            <summary> Defines an alias representing a 2D float or double vector. </summary>
            <summary> Defines an alias representing a 3D float or double vector. </summary>
            <summary> Defines an alias representing a 4D float or double vector. </summary>
            <summary> Defines an alias representing a 2x2 float or double matrix. </summary>
            <summary> Defines an alias representing a 3x3 float or double matrix. </summary>
            <summary> Defines an alias representing a 4x4 float or double matrix. </summary>
            <summary> Defines an alias representing a 3D transform object. </summary>
        </member>
        <member name="D:Cnc.Math.Vector4Df">
            <summary> Defines an alias representing a 4D float vector. </summary>
        </member>
        <member name="D:Cnc.Math.Vector3Df">
            <summary> Defines an alias representing a 3D float vector. </summary>
        </member>
        <member name="D:Cnc.Math.Vector2Df">
            <summary> Defines an alias representing a 2D float vector. </summary>
        </member>
        <member name="D:Cnc.Math.Matrix44">
            <summary> Defines an alias representing a 4x4 double matrix. </summary>
        </member>
        <member name="D:Cnc.Math.Matrix33">
            <summary> Defines an alias representing a 3x3 double matrix. </summary>
        </member>
        <member name="D:Cnc.Math.Matrix22">
            <summary> Defines an alias representing a 2x2 double matrix. </summary>
        </member>
        <member name="D:Cnc.Math.Vector4D">
            <summary> Defines an alias representing a 4D double vector. </summary>
        </member>
        <member name="D:Cnc.Math.Vector3D">
            <summary> Defines an alias representing a 3D double vector. </summary>
        </member>
        <member name="D:Cnc.Math.Vector2D">
            <summary> Defines an alias representing a 2D double vector. </summary>
        </member>
        <member name="F:nc_tol">
@} 
</member>
        <member name="F:main_level">
@defgroup math_varuables math variables
  *
  * initialized in this module

</member>
        <member name="F:tol">
@{ 
System Tolerance
</member>
        <member name="M:FormatMessageFromID(System.UInt32,BTEllipsis)">
            <summary> Write formatted (CString::FormatMessage style) data to a CString. </summary>
            <param name="nFormatID"> String resource identifier that contains the format-control string. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="M:FormatFromID(System.UInt32,BTEllipsis)">
            <summary> Write formatted (printf style) data to a CString. </summary>
            <param name="nFormatID"> String resource identifier that contains the format-control string. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="F:CBitmapRenderTarget.m_pBitmapRenderTarget">
            <summary>
A pointer to an ID2D1BitmapRenderTarget object.
</summary>
        </member>
        <member name="M:CBitmapRenderTarget.GetBitmap(CD2DBitmap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the bitmap for this render target. The returned bitmap can be used for drawing operations. </summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="bitmap">When this method returns, contains the valid bitmap for this render target. This bitmap can be used for drawing operations.</param>
        </member>
        <member name="M:CBitmapRenderTarget.op_Implicit~ID2D1BitmapRenderTarget*">
            <summary>
Returns ID2D1BitmapRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1BitmapRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.GetBitmapRenderTarget">
            <summary>
Returns ID2D1BitmapRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1BitmapRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.Attach(ID2D1BitmapRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CBitmapRenderTarget.#ctor">
            <summary>
Constructs a CBitmapRenderTarget object.</summary>
        </member>
        <member name="F:CDCRenderTarget.m_pDCRenderTarget">
            <summary>
A pointer to an ID2D1DCRenderTarget object.
</summary>
        </member>
        <member name="M:CDCRenderTarget.op_Implicit~ID2D1DCRenderTarget*">
            <summary>
Returns ID2D1DCRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1DCRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CDCRenderTarget.GetDCRenderTarget">
            <summary>
Returns ID2D1DCRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1DCRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CDCRenderTarget.BindDC(CDC!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Binds the render target to the device context to which it issues drawing commands</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="dc">The device context to which the render target issues drawing commands</param>
            <param name="rect">The dimensions of the handle to a device context (HDC) to which the render target is bound</param>
        </member>
        <member name="M:CDCRenderTarget.Create(D2D1_RENDER_TARGET_PROPERTIES!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a CDCRenderTarget.</summary>
            <returns>
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="props">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering.</param>
        </member>
        <member name="M:CDCRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CDCRenderTarget.Attach(ID2D1DCRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CDCRenderTarget.#ctor">
            <summary>
Constructs a CDCRenderTarget object.</summary>
        </member>
        <member name="T:CDCRenderTarget">
            <summary>
ID2D1DCRenderTarget wrapper.
</summary>
        </member>
        <member name="F:CHwndRenderTarget.m_pHwndRenderTarget">
            <summary>
A pointer to an ID2D1HwndRenderTarget object.
</summary>
        </member>
        <member name="M:CHwndRenderTarget.Resize(CD2DSizeU!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Changes the size of the render target to the specified pixel size</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="size">The new size of the render target in device pixels</param>
        </member>
        <member name="M:CHwndRenderTarget.CheckWindowState">
            <summary>
Indicates whether the HWND associated with this render target is occluded.</summary>
            <returns>
A value that indicates whether the HWND associated with this render target is occluded.</returns>
        </member>
        <member name="M:CHwndRenderTarget.GetHwnd">
            <summary>
Returns the HWND associated with this render target.</summary>
            <returns>
The HWND associated with this render target.</returns>
        </member>
        <member name="M:CHwndRenderTarget.op_Implicit~ID2D1HwndRenderTarget*">
            <summary>
Returns ID2D1HwndRenderTarget interface.</summary>
            <returns>
Pointer to an ID2D1HwndRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CHwndRenderTarget.GetHwndRenderTarget">
            <summary>
Returns ID2D1HwndRenderTarget interface.</summary>
            <returns>
Pointer to an ID2D1HwndRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CHwndRenderTarget.ReCreate(HWND__*)">
            <summary>
Re-creates a render target associated with the window</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="hWnd">The HWND associated with this render target</param>
        </member>
        <member name="M:CHwndRenderTarget.Create(HWND__*)">
            <summary>
Creates a render target associated with the window </summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="hWnd">The HWND associated with this render target</param>
        </member>
        <member name="M:CHwndRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CHwndRenderTarget.Attach(ID2D1HwndRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CHwndRenderTarget.#ctor(HWND__*)">
            <summary>
Constructs a CHwndRenderTarget object from HWND.</summary>
            <param name="hwnd">The HWND associated with this render target</param>
        </member>
        <member name="T:CHwndRenderTarget">
            <summary>
ID2D1HwndRenderTarget wrapper.
</summary>
        </member>
        <member name="F:CRenderTarget.m_pTextFormatDefault">
            <summary>
A pointer to CD2DTextFormat object that contains a default text format.
</summary>
        </member>
        <member name="F:CRenderTarget.m_lstResources">
            <summary>
A list of pointers to CD2DResource objects.
</summary>
        </member>
        <member name="F:CRenderTarget.m_pRenderTarget">
            <summary>
A pointer to an ID2D1RenderTarget object.
</summary>
        </member>
        <member name="M:CRenderTarget.VerifyResource(CD2DResource*)">
            <summary>
Verifies CD2DResource object validity; creates the object if it didn't already exist.</summary>
            <param name="pResource">Pointer to CD2DResource object.</param>
            <returns> 
TRUE is object if valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CRenderTarget.PopAxisAlignedClip">
            <summary>
Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
        </member>
        <member name="M:CRenderTarget.PushAxisAlignedClip(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D1_ANTIALIAS_MODE)">
            <summary>
Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
            <param name="rectClip">The size and position of the clipping area, in device-independent pixels.</param>
            <param name="mode">The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the PopAxisAlignedClip method is called, and does not apply to each primitive within the layer.</param>
        </member>
        <member name="M:CRenderTarget.RestoreDrawingState(ID2D1DrawingStateBlock*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.</summary>
            <param name="drawingStateBlock">The new drawing state of the render target.</param>
        </member>
        <member name="M:CRenderTarget.SaveDrawingState(ID2D1DrawingStateBlock*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Saves the current drawing state to the specified ID2D1DrawingStateBlock.</summary>
            <param name="drawingStateBlock">When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.</param>
        </member>
        <member name="M:CRenderTarget.Flush(System.UInt64*,System.UInt64*)">
            <summary>
Executes all pending drawing commands.</summary>
            <param name="tag1">Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
            <param name="tag2">Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:CRenderTarget.PopLayer">
            <summary>
Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.</summary>
        </member>
        <member name="M:CRenderTarget.PushLayer(D2D1_LAYER_PARAMETERS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DLayer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.</summary>
            <param name="layerParameters">The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.</param>
            <param name="layer">The layer that receives subsequent drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.CreateCompatibleRenderTarget(CBitmapRenderTarget*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF,CD2DSizeU,D2D1_PIXEL_FORMAT*,D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS)">
            <summary>
Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target .</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="bitmapTarget">When this method returns, contains the address of a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
            <param name="sizeDesired">The desired size of the new render target in device-independent pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.</param>
            <param name="sizePixelDesired">The desired size of the new render target in pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.</param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target, or NULL. If the pixel format is set to DXGI_FORMAT_UNKNOWN or if this parameter is null, the new render target uses the same pixel format as the original render target. If the alpha mode is D2D1_ALPHA_MODE_UNKNOWN or this parameter is NULL, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see Supported Pixel Formats and Alpha Modes.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
        </member>
        <member name="M:CRenderTarget.GetTransform(D2D_MATRIX_3X2_F*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.GetTextRenderingParams(IDWriteRenderingParams**)">
            <summary>
Retrieves the render target's current text rendering options.</summary>
            <param name="textRenderingParams">When this method returns, textRenderingParamscontains the address of a pointer to the render target's current text rendering options.</param>
        </member>
        <member name="M:CRenderTarget.SetTextRenderingParams(IDWriteRenderingParams*)">
            <summary>
Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.</summary>
            <param name="textRenderingParams">The text rendering options to be applied to all subsequent text and glyph drawing operations; NULL to clear current text rendering options.</param>
        </member>
        <member name="M:CRenderTarget.GetTextAntialiasMode">
            <summary>
Gets the current antialiasing mode for text and glyph drawing operations.</summary>
            <returns>
Current antialiasing mode for text and glyph drawing operations.</returns>
        </member>
        <member name="M:CRenderTarget.SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE)">
            <summary>
Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.</summary>
            <param name="textAntialiasMode">The antialiasing mode to use for subsequent text and glyph drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.GetAntialiasMode">
            <summary>
Retrieves the current antialiasing mode for nontext drawing operations.</summary>
            <returns>
Current antialiasing mode for nontext drawing operations.</returns>
        </member>
        <member name="M:CRenderTarget.SetAntialiasMode(D2D1_ANTIALIAS_MODE)">
            <summary>
Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.</summary>
            <param name="antialiasMode">The antialiasing mode for future drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.FillMesh(CD2DMesh*,CD2DBrush*)">
            <summary>
Paints the interior of the specified mesh.</summary>
            <param name="pMesh">The mesh to paint.</param>
            <param name="pBrush">The brush used to paint the mesh.</param>
        </member>
        <member name="M:CRenderTarget.DrawGlyphRun(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DWRITE_GLYPH_RUN!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,DWRITE_MEASURING_MODE)">
            <summary>
Draws the specified glyphs.</summary>
            <param name="ptBaseLineOrigin">The origin, in device-independent pixels, of the glyphs' baseline.</param>
            <param name="glyphRun">The glyphs to render.</param>
            <param name="pForegroundBrush">The brush used to paint the specified glyphs.</param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.</param>
        </member>
        <member name="M:CRenderTarget.FillGeometry(CD2DGeometry*,CD2DBrush*,CD2DBrush*)">
            <summary>
Paints the interior of the specified geometry.</summary>
            <param name="pGeometry">The geometry to paint.</param>
            <param name="pBrush">The brush used to paint the geometry's interior.</param>
            <param name="pOpacityBrush">The opacity mask to apply to the geometry;NULL for no opacity mask. If an opacity mask (the opacityBrush parameter) is specified, brush must be an ID2D1BitmapBrush that has its x- and y-extend modes set to D2D1_EXTEND_MODE_CLAMP. For more information, see the Remarks section.</param>
        </member>
        <member name="M:CRenderTarget.DrawGeometry(CD2DGeometry*,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified geometry using the specified stroke style.</summary>
            <param name="pGeometry">The geometry to draw.</param>
            <param name="pBrush">The brush used to paint the geometry's stroke.</param>
            <param name="fStrokeWidth">The thickness of the geometry's stroke. The stroke is centered on the geometry's outline.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry's outline, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.DrawBitmap(CD2DBitmap*,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,D2D1_BITMAP_INTERPOLATION_MODE,CD2DRectF!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            <param name="pBitmap">The bitmap to render.</param>
            <param name="rectDest">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.</param>
            <param name="fOpacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.</param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation.</param>
            <param name="pRectSrc">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw.</param>
        </member>
        <member name="M:CRenderTarget.DrawTextLayout(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DTextLayout*,CD2DBrush*,D2D1_DRAW_TEXT_OPTIONS)">
            <summary>
Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            <param name="ptOrigin">The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn.</param>
            <param name="textLayout">The formatted text to draw. Any drawing effects that do not inherit from ID2D1Resource are ignored. If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.</param>
            <param name="pBrushForeground">The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the IDWriteTextLayout::SetDrawingEffect method).</param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
        </member>
        <member name="M:CRenderTarget.DrawText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,CD2DTextFormat*,D2D1_DRAW_TEXT_OPTIONS,DWRITE_MEASURING_MODE)">
            <summary>
Draws the specified text using the format information provided by an IDWriteTextFormat object.</summary>
            <param name="strText">A pointer to an array of Unicode characters to draw.</param>
            <param name="rect">The size and position of the area in which the text is drawn.</param>
            <param name="pForegroundBrush">The brush used to paint the text.</param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.</param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.</param>
        </member>
        <member name="M:CRenderTarget.FillOpacityMask(CD2DBitmap*,CD2DBrush*,D2D1_OPACITY_MASK_CONTENT,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.</summary>
            <param name="pOpacityMask">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
            <param name="pBrush">The brush used to paint the region of the render target specified by destinationRectangle.</param>
            <param name="content">The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended.</param>
            <param name="rectDest">The region of the render target to paint, in device-independent pixels.</param>
            <param name="rectSrc">The region of the bitmap to use as the opacity mask, in device-independent pixels.</param>
        </member>
        <member name="M:CRenderTarget.DrawLine(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws a line between the specified points using the specified stroke style.</summary>
            <param name="ptFrom">The start point of the line, in device-independent pixels.</param>
            <param name="ptTo">The end point of the line, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the line's stroke.</param>
            <param name="fStrokeWidth">A value greater than or equal to 0.0f that specifies the width of the stroke. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid line.</param>
        </member>
        <member name="M:CRenderTarget.FillEllipse(CD2DEllipse!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified ellipse.</summary>
            <param name="ellipse">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
            <param name="pBrush">The brush used to paint the interior of the ellipse.</param>
        </member>
        <member name="M:CRenderTarget.DrawEllipse(CD2DEllipse!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified ellipse using the specified stroke style.</summary>
            <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the ellipse's outline.</param>
            <param name="fStrokeWidth">The thickness of the ellipse's stroke. The stroke is centered on the ellipse's outline.</param>
            <param name="strokeStyle">The style of stroke to apply to the ellipse's outline, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.FillRoundedRectangle(CD2DRoundedRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified rounded rectangle.</summary>
            <param name="rectRounded">The dimensions of the rounded rectangle to paint, in device independent pixels.</param>
            <param name="pBrush">The brush used to paint the interior of the rounded rectangle.</param>
        </member>
        <member name="M:CRenderTarget.DrawRoundedRectangle(CD2DRoundedRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified rounded rectangle using the specified stroke style.</summary>
            <param name="rectRounded">The dimensions of the rounded rectangle to draw, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the rounded rectangle's outline.</param>
            <param name="fStrokeWidth">The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.</param>
            <param name="strokeStyle">The style of the rounded rectangle's stroke, or NULL to paint a solid stroke. The default value is NULL.</param>
        </member>
        <member name="M:CRenderTarget.FillRectangle(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified rectangle.</summary>
            <param name="rect">The dimension of the rectangle to paint, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the rectangle's interior.</param>
        </member>
        <member name="M:CRenderTarget.DrawRectangle(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of a rectangle that has the specified dimensions and stroke style.</summary>
            <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels</param>
            <param name="pBrush">The brush used to paint the rectangle's stroke</param>
            <param name="fStrokeWidth">A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke. The stroke is centered on the rectangle's outline.</param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.Clear(_D3DCOLORVALUE)">
            <summary>
Clears the drawing area to the specified color.</summary>
            <param name="color">The color to which the drawing area is cleared.</param>
        </member>
        <member name="M:CRenderTarget.COLORREF_TO_D2DCOLOR(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary>
Converts GDI color and alpha values to the D2D1_COLOR_F object.</summary>
            <param name="color">RGB value.</param>
            <param name="nAlpha">Alpha value.</param>
            <returns>
D2D1_COLOR_F value.</returns>
        </member>
        <member name="M:CRenderTarget.EndDraw">
            <summary>
Ends drawing operations on the render target and indicates the current error state and associated tags.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:CRenderTarget.BeginDraw">
            <summary>
Initiates drawing on this render target.</summary>
        </member>
        <member name="M:CRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CRenderTarget.Attach(ID2D1RenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pRenderTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CRenderTarget.GetMaximumBitmapSize">
            <summary>
Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target</summary>
            <returns> 
The maximum size, in pixels, of any one bitmap dimension supported by the render target</returns>
        </member>
        <member name="M:CRenderTarget.IsSupported(D2D1_RENDER_TARGET_PROPERTIES!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Indicates whether the render target supports the specified properties</summary>
            <returns> 
TRUE if the specified render target properties are supported by this render target; otherwise, FALSE</returns>
            <param name="renderTargetProperties">The render target properties to test</param>
        </member>
        <member name="M:CRenderTarget.SetTags(System.UInt64,System.UInt64)">
            <summary>
Specifies a label for subsequent drawing operations.</summary>
            <param name="tag1">A label to apply to subsequent drawing operations.</param>
            <param name="tag2">A label to apply to subsequent drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.GetTags(System.UInt64*,System.UInt64*)">
            <summary>
Gets the label for subsequent drawing operations.</summary>
            <param name="tag1">Contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.</param>
            <param name="tag2">Contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.</param>
        </member>
        <member name="M:CRenderTarget.GetPixelSize">
            <summary>
Returns the size of the render target in device pixels</summary>
            <returns> 
The size of the render target in device pixels</returns>
        </member>
        <member name="M:CRenderTarget.GetPixelFormat">
            <summary>
Retrieves the pixel format and alpha mode of the render target</summary>
            <returns> 
The pixel format and alpha mode of the render target</returns>
        </member>
        <member name="M:CRenderTarget.GetDpi">
            <summary>
Returns the render target's dots per inch (DPI)</summary>
            <returns> 
The render target's dots per inch (DPI).</returns>
        </member>
        <member name="M:CRenderTarget.SetDpi(CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the dots per inch (DPI) of the render target.</summary>
            <param name="sizeDPI">A value greater than or equal to zero that specifies the horizontal/verticalDPI of the render target.</param>
        </member>
        <member name="M:CRenderTarget.GetSize">
            <summary>
Returns the size of the render target in device-independent pixels</summary>
            <returns> 
The current size of the render target in device-independent pixels</returns>
        </member>
        <member name="M:CRenderTarget.op_Implicit~ID2D1RenderTarget*">
            <summary>
Returns ID2D1RenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CRenderTarget.GetRenderTarget">
            <summary>
Returns ID2D1RenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CRenderTarget.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CRenderTarget.Destroy(System.Int32)">
            <summary>
Deletes one or more resources</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="bDeleteResources">If bDeleteResources is TRUE, all resources located in m_lstResources will be automatically destroyed.</param>
        </member>
        <member name="M:CRenderTarget.Dispose">
            <summary>
The destructor. Called when a render target object is being destroyed.
</summary>
        </member>
        <member name="M:CRenderTarget.#ctor">
            <summary>
Constructs a CRenderTarget object.</summary>
        </member>
        <member name="T:CRenderTarget">
            <summary>
ID2D1RenderTarget wrapper.
</summary>
        </member>
        <member name="F:CD2DMesh.m_pMesh">
            <summary>
A pointer to an ID2D1Mesh.
</summary>
        </member>
        <member name="M:CD2DMesh.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DMesh.Destroy">
            <summary>
Destroys a CD2DMesh object.</summary>
        </member>
        <member name="M:CD2DMesh.Create(CRenderTarget*)">
            <summary>
Creates a CD2DMesh.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DMesh.Open">
            <summary>
Opens the mesh for population.</summary>
            <returns>
A pointer to an ID2D1TessellationSink that is used to populate the mesh.</returns>
        </member>
        <member name="M:CD2DMesh.op_Implicit~ID2D1Mesh*">
            <summary>
Returns ID2D1Mesh interface</summary>
            <returns> 
Pointer to an ID2D1Mesh interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DMesh.Get">
            <summary>
Returns ID2D1Mesh interface</summary>
            <returns> 
Pointer to an ID2D1Mesh interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DMesh.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DMesh.Attach(ID2D1Mesh*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DMesh.Dispose">
            <summary>
The destructor. Called when a D2D mesh object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DMesh.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DMesh object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DMesh">
            <summary>
ID2D1Mesh wrapper.
</summary>
        </member>
        <member name="F:CD2DGeometrySink.m_pSink">
            <summary>
A pointer to an ID2D1GeometrySink.
</summary>
        </member>
        <member name="M:CD2DGeometrySink.SetSegmentFlags(D2D1_PATH_SEGMENT)">
            <summary>
Specifies stroke and join options to be applied to new segments added to the geometry sink.</summary>
            <param name="vertexFlags">Stroke and join options to be applied to new segments added to the geometry sink.</param>
        </member>
        <member name="M:CD2DGeometrySink.SetFillMode(D2D1_FILL_MODE)">
            <summary>
Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.</summary>
            <param name="fillMode">The method used to determine whether a given point is part of the geometry.</param>
        </member>
        <member name="M:CD2DGeometrySink.Close">
            <summary>
Closes the geometry sink</summary>
            <returns> 
Nonzero if successful; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometrySink.AddLines(CArray&lt;CD2DPointF,CD2DPointF&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a sequence of lines using the specified points and adds them to the geometry sink.</summary>
            <param name="points">An array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on. An array of a sequence of the end points of the lines to draw.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddLine(CD2DPointF)">
            <summary>
Creates a line segment between the current point and the specified end point and adds it to the geometry sink.</summary>
            <param name="point">The end point of the line to draw.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddQuadraticBeziers(CArray&lt;D2D1_QUADRATIC_BEZIER_SEGMENT,D2D1_QUADRATIC_BEZIER_SEGMENT&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a sequence of quadratic Bezier segments as an array in a single call.</summary>
            <param name="beziers">An array of a sequence of quadratic Bezier segments.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddQuadraticBezier(D2D1_QUADRATIC_BEZIER_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a quadratic Bezier curve between the current point and the specified end point.</summary>
            <param name="bezier">A structure that describes the control point and the end point of the quadratic Bezier curve to add.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddBeziers(CArray&lt;D2D1_BEZIER_SEGMENT,D2D1_BEZIER_SEGMENT&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a sequence of cubic Bezier curves and adds them to the geometry sink.</summary>
            <param name="beziers">An array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddBezier(D2D1_BEZIER_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a cubic Bezier curve between the current point and the specified end point.</summary>
            <param name="bezier">A structure that describes the control points and end point of the Bezier curve to add.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddArc(D2D1_ARC_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a single arc to the path geometry</summary>
            <param name="arc">The arc segment to add to the figure</param>
        </member>
        <member name="M:CD2DGeometrySink.EndFigure(D2D1_FIGURE_END)">
            <summary>
Ends the current figure; optionally, closes it.</summary>
            <param name="figureEnd">A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by BeginFigure.</param>
        </member>
        <member name="M:CD2DGeometrySink.BeginFigure(CD2DPointF,D2D1_FIGURE_BEGIN)">
            <summary>
Starts a new figure at the specified point.</summary>
            <param name="startPoint">The point at which to begin the new figure.</param>
            <param name="figureBegin">Whether the new figure should be hollow or filled.</param>
        </member>
        <member name="M:CD2DGeometrySink.op_Implicit~ID2D1GeometrySink*">
            <summary>
Returns ID2D1GeometrySink interface</summary>
            <returns> 
Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometrySink.Get">
            <summary>
Returns ID2D1GeometrySink interface</summary>
            <returns> 
Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometrySink.IsValid">
            <summary>
Checks geometry sink validity</summary>
            <returns> 
TRUE if geometry sink is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometrySink.Dispose">
            <summary>
The destructor. Called when a D2D geometry sink object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGeometrySink.#ctor(CD2DPathGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DGeometrySink object from CD2DPathGeometry object.</summary>
            <param name="pathGeometry">An existing CD2DPathGeometry object.</param>
        </member>
        <member name="T:CD2DGeometrySink">
            <summary>
ID2D1GeometrySink wrapper.
</summary>
        </member>
        <member name="F:CD2DPathGeometry.m_pPathGeometry">
            <summary>
A pointer to an ID2D1PathGeometry.
</summary>
        </member>
        <member name="M:CD2DPathGeometry.GetFigureCount">
            <summary>
Retrieves tthe number of figures in the path geometry.</summary>
            <returns> 
Returns the number of figures in the path geometry.</returns>
        </member>
        <member name="M:CD2DPathGeometry.GetSegmentCount">
            <summary>
Retrieves the number of segments in the path geometry.</summary>
            <returns> 
Returns the number of segments in the path geometry.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Stream(ID2D1GeometrySink*)">
            <summary>
Copies the contents of the path geometry to the specified ID2D1GeometrySink.</summary>
            <returns>
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="geometrySink">The sink to which the path geometry's contents are copied. Modifying this sink does not change the contents of this path geometry.</param>
        </member>
        <member name="M:CD2DPathGeometry.Open">
            <summary>
Retrieves the geometry sink that is used to populate the path geometry with figures and segments.</summary>
            <returns>
A pointer to the ID2D1GeometrySink that is used to populate the path geometry with figures and segments.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Attach(ID2D1PathGeometry*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DPathGeometry.Destroy">
            <summary>
Destroys a CD2DPathGeometry object.</summary>
        </member>
        <member name="M:CD2DPathGeometry.Create(CRenderTarget*)">
            <summary>
Creates a CD2DPathGeometry.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DPathGeometry.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DPathGeometry object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DPathGeometry">
            <summary>
ID2D1PathGeometry wrapper.
</summary>
        </member>
        <member name="F:CD2DGeometry.m_pGeometry">
            <summary>
A pointer to an ID2D1Geometry.
</summary>
        </member>
        <member name="M:CD2DGeometry.Widen(System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Widens the geometry by the specified stroke and writes the result to an ID2D1SimplifiedGeometrySink after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="worldTransform">The transform to apply to the geometry after widening it.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the widened geometry is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Tessellate(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1TessellationSink*,System.Single)">
            <summary>
Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry, or NULL.</param>
            <param name="tessellationSink">The ID2D1TessellationSink to which the tessellated is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Simplify(D2D1_GEOMETRY_SIMPLIFICATION_OPTION,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="worldTransform">The transform to apply to the simplified geometry.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the simplified geometry is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Outline(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Computes the outline of the geometry and writes the result to an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to the geometry outline.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the geometry transformed outline is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.StrokeContainsPoint(CD2DPointF,System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*,System.Single)">
            <summary>
Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="point">The point to test for containment.</param>
            <param name="strokeWidth">The thickness of the stroke to apply.</param>
            <param name="strokeStyle">The style of the stroke to apply.</param>
            <param name="worldTransform">The transform to apply to the stroked geometry.</param>
            <param name="contains">When this method returns, contains a boolean value set to TRUE if the geometry's stroke contains the specified point; otherwise, FALSE. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.FillContainsPoint(CD2DPointF,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*,System.Single)">
            <summary>
Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="point">The point to test.</param>
            <param name="worldTransform">The transform to apply to the geometry prior to testing for containment.</param>
            <param name="contains">When this method returns, contains a bool value that is TRUE if the area filled by the geometry contains point; otherwise, FALSE. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.GetWidenedBounds(System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline.</param>
            <param name="strokeStyle">The style of the stroke that widens the geometry.</param>
            <param name="worldTransform">A transform to apply to the geometry after the geometry is transformed and after the geometry has been stroked.</param>
            <param name="bounds">When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.GetBounds(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the bounds of the geometry.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry before calculating its bounds.</param>
            <param name="bounds">When this method returns, contains the bounds of this geometry. If the bounds are empty, this will be a rect where bounds.left is greater than bounds.right. You must allocate storage for this parameter.</param>
        </member>
        <member name="M:CD2DGeometry.ComputePointAtLength(System.Single,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry.</param>
            <param name="worldTransform">The transform to apply to the geometry before calculating the specified point and tangent.</param>
            <param name="point">The location at the specified distance along the geometry. If the geometry is empty, this point contains NaN as its x and y values.</param>
            <param name="unitTangentVector">When this method returns, contains a pointer to the tangent vector at the specified distance along the geometry. If the geometry is empty, this vector contains NaN as its x and y values. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.ComputeLength(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Calculates the length of the geometry as though each segment were unrolled into a line.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to the geometry before calculating its length.</param>
            <param name="length">When this method returns, contains a pointer to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.ComputeArea(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry before computing its area.</param>
            <param name="area">When this method returns, contains a pointer to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.CompareWithGeometry(CD2DGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Describes the intersection between this geometry and the specified geometry. The comparison is performed using the specified flattening tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="inputGeometry">The geometry to test.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
        </member>
        <member name="M:CD2DGeometry.CombineWithGeometry(CD2DGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D1_COMBINE_MODE,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Combines this geometry with the specified geometry and stores the result in an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry before combining.</param>
            <param name="geometrySink">The result of the combine operation.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometry.Destroy">
            <summary>
Destroys a CD2DGeometry object.</summary>
        </member>
        <member name="M:CD2DGeometry.op_Implicit~ID2D1Geometry*">
            <summary>
Returns ID2D1Geometry interface</summary>
            <returns> 
Pointer to an ID2D1Geometry interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometry.Get">
            <summary>
Returns ID2D1Geometry interface</summary>
            <returns> 
Pointer to an ID2D1Geometry interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometry.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DGeometry.Attach(ID2D1Geometry*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DGeometry.Dispose">
            <summary>
The destructor. Called when a D2D geometry object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGeometry.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DGeometry object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DGeometry">
            <summary>
ID2D1Geometry wrapper.
</summary>
        </member>
        <member name="F:CD2DTextLayout.m_pTextLayout">
            <summary>
A pointer to an IDWriteTextLayout.
</summary>
        </member>
        <member name="M:CD2DTextLayout.GetLocaleName(System.UInt32,DWRITE_TEXT_RANGE*)">
            <summary>
Gets the locale name of the text at the specified position.</summary>
            <returns>
CString object that contains the current locale name.</returns>
            <param name="currentPosition">The position of the text to inspect.</param>
            <param name="textRange">The range of text that has the same formatting as the text at the position specified by currentPosition. This means the run has the exact formatting as the position specified, including but not limited to the locale name.</param>
        </member>
        <member name="M:CD2DTextLayout.GetFontFamilyName(System.UInt32,DWRITE_TEXT_RANGE*)">
            <summary>
Copies the font family name of the text at the specified position.</summary>
            <returns>
CString object that contains the current font family name.</returns>
            <param name="currentPosition">The position of the text to examine.</param>
            <param name="textRange">The range of text that has the same formatting as the text at the position specified by currentPosition. This means the run has the exact formatting as the position specified, including but not limited to the font family name.</param>
        </member>
        <member name="M:CD2DTextLayout.SetLocaleName(System.Char!System.Runtime.CompilerServices.IsConst*,DWRITE_TEXT_RANGE)">
            <summary>
Sets the locale name for text within a specified text range</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="pwzLocaleName">A null-terminated locale name string</param>
            <param name="textRange">Text range to which this change applies</param>
        </member>
        <member name="M:CD2DTextLayout.SetFontFamilyName(System.Char!System.Runtime.CompilerServices.IsConst*,DWRITE_TEXT_RANGE)">
            <summary>
Sets null-terminated font family name for text within a specified text range</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="pwzFontFamilyName">The font family name that applies to the entire text string within the range specified by textRange</param>
            <param name="textRange">Text range to which this change applies</param>
        </member>
        <member name="M:CD2DTextLayout.op_Implicit~IDWriteTextLayout*">
            <summary>
Returns IDWriteTextLayout interface</summary>
            <returns>
Pointer to an IDWriteTextLayout interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextLayout.Get">
            <summary>
Returns IDWriteTextLayout interface</summary>
            <returns>
Pointer to an IDWriteTextLayout interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextLayout.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DTextLayout.Destroy">
            <summary>
Destroys a CD2DTextLayout object.</summary>
        </member>
        <member name="M:CD2DTextLayout.Create(CRenderTarget*)">
            <summary>
Creates a CD2DTextLayout.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextLayout.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DTextLayout.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextLayout.Dispose">
            <summary>
The destructor. Called when a D2D text layout object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DTextLayout.#ctor(CRenderTarget*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DTextFormat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
Constructs a CD2DTextLayout object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="strText">A CString object that contains the string to create a new CD2DTextLayout object from.</param>
            <param name="textFormat">A CString object that contains the format to apply to the string.</param>
            <param name="sizeMax">The size of the layout box.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DTextLayout">
            <summary>
IDWriteTextLayout wrapper.
</summary>
        </member>
        <member name="F:CD2DTextFormat.m_pTextFormat">
            <summary>
A pointer to an IDWriteTextFormat.
</summary>
        </member>
        <member name="M:CD2DTextFormat.GetLocaleName">
            <summary>
Gets a copy of the locale name.</summary>
            <returns>
CString object that contains the current locale name.</returns>
        </member>
        <member name="M:CD2DTextFormat.GetFontFamilyName">
            <summary>
Gets a copy of the font family name.</summary>
            <returns>
CString object that contains the current font family name.</returns>
        </member>
        <member name="M:CD2DTextFormat.op_Implicit~IDWriteTextFormat*">
            <summary>
Returns IDWriteTextFormat interface</summary>
            <returns>
Pointer to an IDWriteTextFormat interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextFormat.Get">
            <summary>
Returns IDWriteTextFormat interface</summary>
            <returns> 
Pointer to an IDWriteTextFormat interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextFormat.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DTextFormat.Destroy">
            <summary>
Destroys a CD2DTextFormat object.</summary>
        </member>
        <member name="M:CD2DTextFormat.Create(CRenderTarget*)">
            <summary>
Creates a CD2DTextFormat.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextFormat.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DTextFormat.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextFormat.Dispose">
            <summary>
The destructor. Called when a D2D text format object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DTextFormat.#ctor(CRenderTarget*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,DWRITE_FONT_WEIGHT,DWRITE_FONT_STYLE,DWRITE_FONT_STRETCH,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDWriteFontCollection*,System.Int32)">
            <summary>
Constructs a CD2DTextFormat object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="strFontFamilyName">A CString object that contains the name of the font family.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIPequals 1/96 inch.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object.</param>
            <param name="fontStyle">A value that indicates the font style for the text object.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object.</param>
            <param name="strFontLocale">A CString object that contains the locale name.</param>
            <param name="pFontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DTextFormat">
            <summary>
IDWriteTextFormat wrapper.
</summary>
        </member>
        <member name="F:CD2DRadialGradientBrush.m_pRadialGradientBrush">
            <summary>
A pointer to an ID2D1RadialGradientBrush.
</summary>
        </member>
        <member name="F:CD2DRadialGradientBrush.m_RadialGradientBrushProperties">
            <summary>
The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.
</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetRadiusY">
            <summary>
Retrieves the y-radius of the gradient ellipse</summary>
            <returns> 
The y-radius of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetRadiusX">
            <summary>
Retrieves the x-radius of the gradient ellipse</summary>
            <returns> 
The x-radius of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetGradientOriginOffset">
            <summary>
Retrieves the offset of the gradient origin relative to the gradient ellipse's center</summary>
            <returns> 
The offset of the gradient origin from the center of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetCenter">
            <summary>
Retrieves the center of the gradient ellipse</summary>
            <returns> 
The center of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetRadiusY(System.Single)">
            <summary>
Specifies the y-radius of the gradient ellipse, in the brush's coordinate space</summary>
            <param name="radiusY">The y-radius of the gradient ellipse. This value is in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetRadiusX(System.Single)">
            <summary>
Specifies the x-radius of the gradient ellipse, in the brush's coordinate space</summary>
            <param name="radiusX">The x-radius of the gradient ellipse. This value is in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetGradientOriginOffset(CD2DPointF)">
            <summary>
Specifies the offset of the gradient origin relative to the gradient ellipse's center</summary>
            <param name="gradientOriginOffset">The offset of the gradient origin from the center of the gradient ellipse</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetCenter(CD2DPointF)">
            <summary>
Specifies the center of the gradient ellipse in the brush's coordinate space</summary>
            <param name="point">The center of the gradient ellipse, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.op_Implicit~ID2D1RadialGradientBrush*">
            <summary>
Returns ID2D1RadialGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1RadialGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Get">
            <summary>
Returns ID2D1RadialGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1RadialGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Attach(ID2D1RadialGradientBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.Destroy">
            <summary>
Destroys a CD2DRadialGradientBrush object.</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DRadialGradientBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D radial gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DLinearGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="RadialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DRadialGradientBrush">
            <summary>
ID2D1RadialGradientBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DLinearGradientBrush.m_pLinearGradientBrush">
            <summary>
A pointer to an ID2D1LinearGradientBrush.
</summary>
        </member>
        <member name="F:CD2DLinearGradientBrush.m_LinearGradientBrushProperties">
            <summary>
The start and end points of the gradient.
</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.GetEndPoint">
            <summary>
Retrieves the ending coordinates of the linear gradient</summary>
            <returns> 
The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.GetStartPoint">
            <summary>
Retrieves the starting coordinates of the linear gradient</summary>
            <returns> 
The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.SetEndPoint(CD2DPointF)">
            <summary>
Sets the ending coordinates of the linear gradient in the brush's coordinate space</summary>
            <param name="point">The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.SetStartPoint(CD2DPointF)">
            <summary>
Sets the starting coordinates of the linear gradient in the brush's coordinate space</summary>
            <param name="point">The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.op_Implicit~ID2D1LinearGradientBrush*">
            <summary>
Returns ID2D1LinearGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1LinearGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Get">
            <summary>
Returns ID2D1LinearGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1LinearGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Attach(ID2D1LinearGradientBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.Destroy">
            <summary>
Destroys a CD2DLinearGradientBrush object.</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DLinearGradientBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D linear gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DLinearGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="LinearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DLinearGradientBrush">
            <summary>
ID2D1LinearGradientBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_pGradientStops">
            <summary>
A pointer to an array of D2D1_GRADIENT_STOP structures.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_extendMode">
            <summary>
The behavior of the gradient outside the [0,1] normalized range.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_colorInterpolationGamma">
            <summary>
The space in which color interpolation between the gradient stops is performed.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_arGradientStops">
            <summary>
Array of the D2D1_GRADIENT_STOP structures.
</summary>
        </member>
        <member name="M:CD2DGradientBrush.Destroy">
            <summary>
Destroys a CD2DGradientBrush object.</summary>
        </member>
        <member name="M:CD2DGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DGradientBrush">
            <summary>
The base class of CD2DLinearGradientBrush and CD2DRadialGradientBrush classes.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmapBrushProperties">
            <summary>
Bitmap brush properties.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmapBrush">
            <summary>
Stores a pointer to an ID2D1BitmapBrush object.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmap">
            <summary>
Stores a pointer to a CD2DBitmap object.
</summary>
        </member>
        <member name="M:CD2DBitmapBrush.CommonInit(D2D1_BITMAP_BRUSH_PROPERTIES*)">
            <summary>
Initializes the object</summary>
            <param name="pBitmapBrushProperties">A pointer to the bitmap brush properties.</param>
        </member>
        <member name="M:CD2DBitmapBrush.Destroy">
            <summary>
Destroys a CD2DBitmapBrush object.</summary>
        </member>
        <member name="M:CD2DBitmapBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DBitmapBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DBitmapBrush.GetInterpolationMode">
            <summary>
Gets the interpolation method used when the brush bitmap is scaled or rotated</summary>
            <returns> 
The interpolation method used when the brush bitmap is scaled or rotated</returns>
        </member>
        <member name="M:CD2DBitmapBrush.GetExtendModeY">
            <summary>
Gets the method by which the brush vertically tiles those areas that extend past its bitmap</summary>
            <returns> 
A value that specifies how the brush vertically tiles those areas that extend past its bitmap</returns>
        </member>
        <member name="M:CD2DBitmapBrush.GetExtendModeX">
            <summary>
Gets the method by which the brush horizontally tiles those areas that extend past its bitmap</summary>
            <returns> 
A value that specifies how the brush horizontally tiles those areas that extend past its bitmap</returns>
        </member>
        <member name="M:CD2DBitmapBrush.SetBitmap(CD2DBitmap*)">
            <summary>
Specifies the bitmap source that this brush uses to paint</summary>
            <param name="pBitmap">The bitmap source used by the brush</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetInterpolationMode(D2D1_BITMAP_INTERPOLATION_MODE)">
            <summary>
Specifies the interpolation mode used when the brush bitmap is scaled or rotated</summary>
            <param name="interpolationMode">The interpolation mode used when the brush bitmap is scaled or rotated</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetExtendModeY(D2D1_EXTEND_MODE)">
            <summary>
Specifies how the brush vertically tiles those areas that extend past its bitmap</summary>
            <param name="extendModeY">A value that specifies how the brush vertically tiles those areas that extend past its bitmap</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetExtendModeX(D2D1_EXTEND_MODE)">
            <summary>
Specifies how the brush horizontally tiles those areas that extend past its bitmap</summary>
            <param name="extendModeX">A value that specifies how the brush horizontally tiles those areas that extend past its bitmap</param>
        </member>
        <member name="M:CD2DBitmapBrush.GetBitmap">
            <summary>
Gets the bitmap source that this brush uses to paint</summary>
            <returns> 
Pointer to an CD2DBitmap object or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.op_Implicit~ID2D1BitmapBrush*">
            <summary>
Returns ID2D1BitmapBrush interface</summary>
            <returns> 
Pointer to an ID2D1BitmapBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Get">
            <summary>
Returns ID2D1BitmapBrush interface</summary>
            <returns> 
Pointer to an ID2D1BitmapBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Attach(ID2D1BitmapBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBitmapBrush.Dispose">
            <summary>
The destructor. Called when a D2D bitmap brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object from file.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="lpszImagePath">Pointer to a null-terminated string that contains the name of file.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,System.UInt32,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object from resource.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="uiResID">The resource ID number of the resource.</param>
            <param name="lpszType">Pointer to a null-terminated string that contains the resource type.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBitmapBrush">
            <summary>
ID2D1BitmapBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DSolidColorBrush.m_colorSolid">
            <summary>
Brush solid color.
</summary>
        </member>
        <member name="F:CD2DSolidColorBrush.m_pSolidColorBrush">
            <summary>
Stores a pointer to an ID2D1SolidColorBrush object.
</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.Destroy">
            <summary>
Destroys a CD2DSolidColorBrush object.</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DSolidColorBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DSolidColorBrush.GetColor">
            <summary>
Retrieves the color of the solid color brush</summary>
            <returns> 
The color of this solid color brush</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.SetColor(_D3DCOLORVALUE)">
            <summary>
Specifies the color of this solid color brush</summary>
            <param name="color">The color of this solid color brush</param>
        </member>
        <member name="M:CD2DSolidColorBrush.op_Implicit~ID2D1SolidColorBrush*">
            <summary>
Returns ID2D1SolidColorBrush interface</summary>
            <returns> 
Pointer to an ID2D1SolidColorBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Get">
            <summary>
Returns ID2D1SolidColorBrush interface</summary>
            <returns> 
Pointer to an ID2D1SolidColorBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Attach(ID2D1SolidColorBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DSolidColorBrush.Dispose">
            <summary>
The destructor. Called when a D2D solid brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.#ctor(CRenderTarget*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DSolidColorBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="color">The red, green, and blue values of the brush's color.</param>
            <param name="nAlpha">The opacity of the brush's color.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DSolidColorBrush.#ctor(CRenderTarget*,_D3DCOLORVALUE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DSolidColorBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DSolidColorBrush">
            <summary>
ID2D1SolidColorBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DBrush.m_pBrushProperties">
            <summary>
Brush properties.
</summary>
        </member>
        <member name="F:CD2DBrush.m_pBrush">
            <summary>
Stores a pointer to an ID2D1Brush object.
</summary>
        </member>
        <member name="M:CD2DBrush.GetTransform(D2D_MATRIX_3X2_F*)">
            <summary>
Gets the current transform of the render target</summary>
            <param name="transform">When this returns, contains the current transform of the render target. This parameter is passed uninitialized</param>
        </member>
        <member name="M:CD2DBrush.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space</summary>
            <param name="transform">The transform to apply to the render target</param>
        </member>
        <member name="M:CD2DBrush.GetOpacity">
            <summary>
Gets the degree of opacity of this brush</summary>
            <returns> 
A value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0 to 1 before they are multiplied together</returns>
        </member>
        <member name="M:CD2DBrush.SetOpacity(System.Single)">
            <summary>
Sets the degree of opacity of this brush</summary>
            <param name="opacity">A value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0 to 1 before they are multiplied together</param>
        </member>
        <member name="M:CD2DBrush.Destroy">
            <summary>
Destroys a CD2DBrush object.</summary>
        </member>
        <member name="M:CD2DBrush.op_Implicit~ID2D1Brush*">
            <summary>
Returns ID2D1Brush interface</summary>
            <returns> 
Pointer to an ID2D1Brush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBrush.Get">
            <summary>
Returns ID2D1Brush interface</summary>
            <returns> 
Pointer to an ID2D1Brush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBrush.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBrush.Attach(ID2D1Brush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBrush.Dispose">
            <summary>
The destructor. Called when a D2D brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBrush.#ctor(CRenderTarget*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBrush">
            <summary>
ID2D1Brush wrapper.
</summary>
        </member>
        <member name="M:CD2DBrushProperties.CommonInit">
            <summary>
Initializes the object</summary>
        </member>
        <member name="M:CD2DBrushProperties.#ctor(D2D_MATRIX_3X2_F,System.Single)">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
            <param name="_transform">The transformation to apply to the brush</param>
            <param name="_opacity">The base opacity of the brush. The default value is 1.0.</param>
        </member>
        <member name="M:CD2DBrushProperties.#ctor(System.Single)">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
            <param name="_opacity">The base opacity of the brush. The default value is 1.0.</param>
        </member>
        <member name="M:CD2DBrushProperties.#ctor">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
        </member>
        <member name="T:CD2DBrushProperties">
            <summary>
D2D1_BRUSH_PROPERTIES wrapper.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_bAutoDestroyHBMP">
            <summary>
TRUE if m_hBmpSrc should be destroyed; otherwise FALSE.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_hBmpSrc">
            <summary>
Source bitmap handle.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_sizeDest">
            <summary>
Bitmap destination size.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_strPath">
            <summary>
Botmap file path.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_lpszType">
            <summary>
Resource type.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_uiResID">
            <summary>
Bitmap resource ID.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_pBitmap">
            <summary>
Stores a pointer to an ID2D1Bitmap object.
</summary>
        </member>
        <member name="M:CD2DBitmap.Destroy">
            <summary>
Destroys a CD2DBitmap object.</summary>
        </member>
        <member name="M:CD2DBitmap.Create(CRenderTarget*)">
            <summary>
Creates a CD2DBitmap.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DBitmap.CommonInit">
            <summary>
Initializes the object</summary>
        </member>
        <member name="M:CD2DBitmap.op_Implicit~ID2D1Bitmap*">
            <summary>
Returns ID2D1Bitmap interface</summary>
            <returns> 
Pointer to an ID2D1Bitmap interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmap.Get">
            <summary>
Returns ID2D1Bitmap interface</summary>
            <returns> 
Pointer to an ID2D1Bitmap interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmap.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DBitmap.CopyFromMemory(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from memory into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="srcData">The data to copy</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding</param>
            <param name="destRect">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
        </member>
        <member name="M:CD2DBitmap.CopyFromRenderTarget(CRenderTarget!System.Runtime.CompilerServices.IsConst*,CD2DPointU!System.Runtime.CompilerServices.IsConst*,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from the specified render target into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">The render target that contains the region to copy</param>
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
            <param name="srcRect">The area of renderTarget to copy</param>
        </member>
        <member name="M:CD2DBitmap.CopyFromBitmap(CD2DBitmap!System.Runtime.CompilerServices.IsConst*,CD2DPointU!System.Runtime.CompilerServices.IsConst*,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from the specified bitmap into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pBitmap">The bitmap to copy from</param>
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
            <param name="srcRect">The area of bitmap to copy</param>
        </member>
        <member name="M:CD2DBitmap.GetDPI">
            <summary>
Return the dots per inch (DPI) of the bitmap</summary>
            <returns> 
The horizontal and vertical DPI of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.GetPixelFormat">
            <summary>
Retrieves the pixel format and alpha mode of the bitmap</summary>
            <returns> 
The pixel format and alpha mode of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.GetPixelSize">
            <summary>
Returns the size, in device-dependent units (pixels), of the bitmap</summary>
            <returns> 
The size, in pixels, of the bitmap..</returns>
        </member>
        <member name="M:CD2DBitmap.GetSize">
            <summary>
Returns the size, in device-independent pixels (DIPs), of the bitmap</summary>
            <returns> 
The size, in DIPs, of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBitmap.Attach(ID2D1Bitmap*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBitmap.Dispose">
            <summary>
The destructor. Called when a D2D bitmap object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DBitmap object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,HBITMAP__*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from HBITMAP.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="hbmpSrc">Handle to the bitmap.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from file.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="lpszPath">Pointer to a null-terminated string that contains the name of file.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.UInt32,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from resource.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="uiResID">The resource ID number of the resource.</param>
            <param name="lpszType">Pointer to a null-terminated string that contains the resource type.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBitmap">
            <summary>
ID2D1Bitmap wrapper.
</summary>
        </member>
        <member name="F:CD2DLayer.m_pLayer">
            <summary>
Stores a pointer to an ID2D1Layer object.
</summary>
        </member>
        <member name="M:CD2DLayer.Destroy">
            <summary>
Destroys a CD2DLayer object.</summary>
        </member>
        <member name="M:CD2DLayer.Create(CRenderTarget*)">
            <summary>
Creates a CD2DLayer.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DLayer.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DLayer.Attach(ID2D1Layer*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DLayer.op_Implicit~ID2D1Layer*">
            <summary>
Returns ID2D1Layer interface</summary>
            <returns> 
Pointer to an ID2D1Layer interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLayer.Get">
            <summary>
Returns ID2D1Layer interface</summary>
            <returns> 
Pointer to an ID2D1Layer interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLayer.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DLayer.GetSize">
            <summary>
Returns the size of the render target in device-independent pixels</summary>
            <returns> 
The current size of the render target in device-independent pixels</returns>
        </member>
        <member name="M:CD2DLayer.Dispose">
            <summary>
The destructor. Called when a D2D layer object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DLayer.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DLayer object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DLayer">
            <summary>
ID2D1Layer wrapper.
</summary>
        </member>
        <member name="F:CD2DResource.m_pParentTarget">
            <summary>
Pointer to the parent CRenderTarget)</summary>
        </member>
        <member name="F:CD2DResource.m_bIsAutoDestroy">
            <summary>
Resource will be destoyed by owner (CRenderTarget)</summary>
        </member>
        <member name="M:CD2DResource.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DResource.Destroy">
            <summary>
Destroys a CD2DResource object.</summary>
        </member>
        <member name="M:CD2DResource.Create(CRenderTarget*)">
            <summary>
Creates a CD2DResource.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DResource.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DResource.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DResource.IsAutoDestroy">
            <summary>
Check auto destroy flag.</summary>
            <returns>
TRUE if the object will be destroyed by its owner; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DResource.Dispose">
            <summary>
The destructor. Called when a D2D resource object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DResource.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DResource object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DResource">
            <summary>
An abstract class, which provides a interface for creating and managing D2D resources such as brushes, layers and texts.
</summary>
        </member>
        <member name="M:CD2DEllipse.#ctor(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse from CD2DPointF and CD2DSizeF objects.</summary>
            <param name="ptCenter">The center point of the ellipse.</param>
            <param name="sizeRadius">The X-radius and Y-radius of the ellipse.</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(D2D1_ELLIPSE!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DEllipse object from D2D1_ELLIPSE object.</summary>
            <param name="ellipse">source ellipse</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(D2D1_ELLIPSE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse object from D2D1_ELLIPSE object.</summary>
            <param name="ellipse">source ellipse</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse object from CD2DRectF object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DEllipse">
            <summary>
D2D1_ELLIPSE wrapper
</summary>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(D2D1_ROUNDED_RECT!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRoundedRect object from D2D1_ROUNDED_RECT object.</summary>
            <param name="rectIn">source rectangle</param>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(D2D1_ROUNDED_RECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRoundedRect object from D2D1_ROUNDED_RECT object.</summary>
            <param name="rectIn">source rectangle</param>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRoundedRect object from CD2DRectF object.</summary>
            <param name="rectIn">source rectangle</param>
            <param name="sizeRadius">radius size</param>
        </member>
        <member name="T:CD2DRoundedRect">
            <summary>
D2D1_ROUNDED_RECT wrapper
</summary>
        </member>
        <member name="M:CD2DRectU.op_Implicit~CRect">
            <summary>
Converts CD2DRectU to CRect object.</summary>
            <returns>
Current value of D2D rectangle.
</returns>
        </member>
        <member name="M:CD2DRectU.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if rectangle's top, left, bottom, and right values are all equal to 0; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DRectU.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DRectU object from four UINT32 values.</summary>
            <param name="uLeft">source left coordinate</param>
            <param name="uTop">source top coordinate</param>
            <param name="uRight">source right coordinate</param>
            <param name="uBottom">source bottom coordinate</param>
        </member>
        <member name="M:CD2DRectU.#ctor(D2D_RECT_U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRectU object from D2D1_RECT_U object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectU.#ctor(D2D_RECT_U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectU object from D2D1_RECT_U object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectU.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectU object from CRect object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DRectU">
            <summary>
D2D1_RECT_U wrapper
</summary>
        </member>
        <member name="M:CD2DRectF.op_Implicit~CRect">
            <summary>
Converts CD2DRectF to CRect object.</summary>
            <returns>
Current value of D2D rectangle.
</returns>
        </member>
        <member name="M:CD2DRectF.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if rectangle's top, left, bottom, and right values are all equal to 0; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DRectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Constructs a CD2DRectF object from four FLOAT values.</summary>
            <param name="fLeft">source left coordinate</param>
            <param name="fTop">source top coordinate</param>
            <param name="fRight">source right coordinate</param>
            <param name="fBottom">source bottom coordinate</param>
        </member>
        <member name="M:CD2DRectF.#ctor(D2D_RECT_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRectF object from D2D1_RECT_F object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectF.#ctor(D2D_RECT_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectF object from D2D1_RECT_F object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectF.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectF object from CRect object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DRectF">
            <summary>
D2D1_RECT_F wrapper
</summary>
        </member>
        <member name="M:CD2DSizeU.op_Implicit~CSize">
            <summary>
Converts CD2DSizeU to CSize object.</summary>
            <returns>
Current value of D2D size.
</returns>
        </member>
        <member name="M:CD2DSizeU.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if width and height are empty; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DSizeU.#ctor(System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DSizeU object from two UINT32 values.</summary>
            <param name="cx">source width</param>
            <param name="cy">source height</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(D2D_SIZE_U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DSizeU object from D2D1_SIZE_U object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(D2D_SIZE_U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeU object from D2D1_SIZE_U object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeU object from CSize object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="T:CD2DSizeU">
            <summary>
D2D1_SIZE_U wrapper
</summary>
        </member>
        <member name="M:CD2DSizeF.op_Implicit~CSize">
            <summary>
Converts CD2DSizeF to CSize object.</summary>
            <returns>
Current value of D2D size.
</returns>
        </member>
        <member name="M:CD2DSizeF.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if width and height are empty; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DSizeF.#ctor(System.Single,System.Single)">
            <summary>
Constructs a CD2DSizeF object from two FLOAT values.</summary>
            <param name="cx">source width</param>
            <param name="cy">source height</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(D2D_SIZE_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DSizeF object from D2D1_SIZE_F object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(D2D_SIZE_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeF object from D2D1_SIZE_F object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeF object from CSize object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="T:CD2DSizeF">
            <summary>
D2D1_SIZE_F wrapper
</summary>
        </member>
        <member name="M:CD2DPointU.op_Implicit~CPoint">
            <summary>
Converts CD2DPointU to CPoint object.</summary>
            <returns>
Current value of D2D point.
</returns>
        </member>
        <member name="M:CD2DPointU.#ctor(System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DPointU object from two UINT32 values.</summary>
            <param name="uX">source X</param>
            <param name="uY">source Y</param>
        </member>
        <member name="M:CD2DPointU.#ctor(D2D_POINT_2U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DPointU from object D2D1_POINT_2U object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointU.#ctor(D2D_POINT_2U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointU from object D2D1_POINT_2U object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointU.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointU object from CPoint object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="T:CD2DPointU">
            <summary>
D2D1_POINT_2U wrapper
</summary>
        </member>
        <member name="M:CD2DPointF.op_Implicit~CPoint">
            <summary>
Converts CD2DPointF to CPoint object.</summary>
            <returns>
Current value of D2D point.
</returns>
        </member>
        <member name="M:CD2DPointF.#ctor(System.Single,System.Single)">
            <summary>
Constructs a CD2DPointF object from two FLOAT values.</summary>
            <param name="fX">source X</param>
            <param name="fY">source Y</param>
        </member>
        <member name="M:CD2DPointF.#ctor(D2D_POINT_2F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DPointF object from D2D1_POINT_2F object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointF.#ctor(D2D_POINT_2F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointF object from D2D1_POINT_2F object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointF.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointF object from CPoint object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="T:CD2DPointF">
            <summary>
D2D1_POINT_2F wrapper
</summary>
        </member>
        <member name="M:CCustomTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <remarks>
This method also can set initial value and initial velocity to be applied to an animation variable, which is
associated with this transition. For this purpose you have to call SetInitialValue and SetInitialVelocity before
the framework creates the encapsulated transition COM object (it happens when you call CAnimationController::AnimateGroup).
</remarks>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="M:CCustomTransition.SetInitialVelocity(System.Double)">
            <summary>
Sets an initial velocity, which will be applied to an animation variable associated with this transition.
</summary>
        </member>
        <member name="M:CCustomTransition.SetInitialValue(System.Double)">
            <summary>
Sets an initial value, which will be applied to an animation variable associated with this transition.
</summary>
        </member>
        <member name="M:CCustomTransition.#ctor(CCustomInterpolator*)">
            <summary>
Constructs a custom transition object.
</summary>
            <param name="pInterpolator">A pointer to custom interpolator.</param>
        </member>
        <member name="F:CCustomTransition.m_initialVelocity">
            <summary>
Stores the initial velocity.
</summary>
        </member>
        <member name="F:CCustomTransition.m_initialValue">
            <summary>
Stores the initial value.
</summary>
        </member>
        <member name="F:CCustomTransition.m_bInitialVelocitySpecified">
            <summary>
Specifies whether the initial velocity was specified with SetInitialVelocity.
</summary>
        </member>
        <member name="F:CCustomTransition.m_bInitialValueSpecified">
            <summary>
Specifies whether the initial value was specified with SetInitialValue.
</summary>
        </member>
        <member name="F:CCustomTransition.m_pInterpolator">
            <summary>
Stores a pointer to a custom interpolator.
</summary>
        </member>
        <member name="T:CCustomTransition">
            <summary>
Implements custom transition.
</summary>
            <remarks>
The CCustomTransitions class allows developers to implement custom transitions. It's created and used
as a standard transition, but its constructor accepts as parameter a pointer to a custom interpolator.
Perform the following steps to use custom transitions:
1. Derive a class from CCustomInterpolator and implement at least InterpolateValue method.
2. Ensure that the lifetime of custom interpolator object must be longer than duration of animation where it's used.
3. Instantiate (using operator new) a CCustomTransition object and pass a pointer to custom interpolator in the constructor.
4. Call CCustomTransition::SetInitialValue and CCustomTransition::SetInitialVelocity if these parameters are required for custom interpolation.
5. Pass the pointer to custom transition to AddTransition method of animation object, whose value should be animated with the custom algorithm.
6. When the value of animation object should change Windows Animation API will call InterpolateValue (and other relevant methods) in CCustomInterpolator.
</remarks>
        </member>
        <member name="M:CInterpolatorBase.GetDependencies(__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*)">
            <summary>
Gets the interpolator's dependencies.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetDependencies method.
</returns>
            <param name="initialValueDependencies">Output. Aspects of the interpolator that depend on the initial value passed to SetInitialValueAndVelocity.</param>
            <param name="initialVelocityDependencies">Output. Aspects of the interpolator that depend on the initial velocity passed to SetInitialValueAndVelocity.</param>
            <param name="durationDependencies">Output. Aspects of the interpolator that depend on the duration passed to SetDuration.</param>
        </member>
        <member name="M:CInterpolatorBase.InterpolateVelocity(System.Double,System.Double*)">
            <summary>
Interpolates the velocity at a given offset
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the InterpolateVelocity method.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than or equal to the duration of the transition.
This method is not called if the duration of the transition is zero. </param>
            <param name="velocity">Output. The velocity of the variable at the offset.</param>
        </member>
        <member name="M:CInterpolatorBase.InterpolateValue(System.Double,System.Double*)">
            <summary>
Interpolates the value at a given offset
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the InterpolateValue method.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than the duration of the transition.
This method is not called if the duration of the transition is zero.</param>
            <param name="value">Output. The interpolated value.</param>
        </member>
        <member name="M:CInterpolatorBase.GetFinalValue(System.Double*)">
            <summary>
Gets the final value to which the interpolator leads.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetFinalValue method.
</returns>
            <param name="value">Output. The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.GetDuration(System.Double*)">
            <summary>
Gets the interpolator's duration.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetDuration method.
</returns>
            <param name="duration">Output. The duration of the transition, in seconds.</param>
        </member>
        <member name="M:CInterpolatorBase.SetDuration(System.Double)">
            <summary>
Sets the interpolator's duration
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the SetDuration method.
</returns>
            <param name="duration">The duration of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.SetInitialValueAndVelocity(System.Double,System.Double)">
            <summary>
Sets the interpolator's initial value and velocity.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the SetInitialValueAndVelocity method.
</returns>
            <param name="initialValue">The value of the variable at the start of the transition.</param>
            <param name="initialVelocity">The velocity of the variable at the start of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.CreateInstance(CCustomInterpolator*,IUIAnimationInterpolator**)">
            <summary>
Creates an instance of CInterpolatorBase and stores a pointer to custom interpolator, which will be handling events.
</summary>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
<param name="pInterpolator">A pointer to custom interpolator.</param><param name="ppHandler">Output. Contains a pointer to instance of CInterpolatorBase when the function returns.</param></member>
        <member name="M:CInterpolatorBase.SetCustomInterpolator(CCustomInterpolator*)">
            <summary>
Stores  a pointer to custom interpolator, which will be handling events.
</summary>
            <param name="pInterpolator">A pointer to custom interpolator.</param>
        </member>
        <member name="M:CInterpolatorBase.#ctor">
            <summary>
Constructs the CInterpolatorBase object.
</summary>
        </member>
        <member name="T:CInterpolatorBase">
            <summary>
Implements a callback, which is called by Animation API when it needs to calculate a new value of animation variable.
</summary>
            <remarks>
This handler is created and passed to IUIAnimationTransitionFactory::CreateTransition when a CCustomTransition
object is being created as a part of animation initialization process (started by CAnimationController::AnimateGroup).
Usually you don't need to use this class directly, it just routs all events to a CCustomInterpolator-derived class, whose
pointer is passed to constructor of CCustomTransition.
</remarks>
        </member>
        <member name="M:CCustomInterpolator.GetDependencies(__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*)">
            <summary>
Gets the interpolator's dependencies.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="initialValueDependencies">Output. Aspects of the interpolator that depend on the initial value passed to SetInitialValueAndVelocity.</param>
            <param name="initialVelocityDependencies">Output. Aspects of the interpolator that depend on the initial velocity passed to SetInitialValueAndVelocity.</param>
            <param name="durationDependencies">Output. Aspects of the interpolator that depend on the duration passed to SetDuration.</param>
        </member>
        <member name="M:CCustomInterpolator.InterpolateVelocity(System.Double,System.Double*)">
            <summary>
Interpolates the velocity at a given offset
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than or equal to the duration of the transition.
This method is not called if the duration of the transition is zero. </param>
            <param name="velocity">Output. The velocity of the variable at the offset.</param>
        </member>
        <member name="M:CCustomInterpolator.InterpolateValue(System.Double,System.Double*)">
            <summary>
Interpolates the value at a given offset.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than the duration of the transition.
This method is not called if the duration of the transition is zero.</param>
            <param name="value">Output. The interpolated value.</param>
        </member>
        <member name="M:CCustomInterpolator.GetFinalValue(System.Double*)">
            <summary>
Gets the final value to which the interpolator leads.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="value">Output. The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.GetDuration(System.Double*)">
            <summary>
Gets the interpolator's duration.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="duration">Output. The duration of the transition, in seconds.</param>
        </member>
        <member name="M:CCustomInterpolator.SetDuration(System.Double)">
            <summary>
Sets the interpolator's duration.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="duration">The duration of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.SetInitialValueAndVelocity(System.Double,System.Double)">
            <summary>
Sets the interpolator's initial value and velocity.
</summary>
            <returns>
The basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="initialValue">The value of the variable at the start of the transition.</param>
            <param name="initialVelocity">The velocity of the variable at the start of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.Init(System.Double,System.Double)">
            <summary>
Initializes duration and final value.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue">The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.#ctor(System.Double,System.Double)">
            <summary>
Constructs a custom interpolator object and initializes duration and velocity to specified values.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue" />
        </member>
        <member name="M:CCustomInterpolator.#ctor">
            <summary>
Constructs a custom interpolator object and sets all values to default 0.
</summary>
            <remarks>
Use CCustomInterpolator::Init to initialize duration and final value later in the code.
</remarks>
        </member>
        <member name="F:CCustomInterpolator.m_currentVelocity">
            <summary>
The interpolated velocity.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_currentValue">
            <summary>
The interpolated value.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_initialVelocity">
            <summary>
The velocity of the variable at the start of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_initialValue">
            <summary>
The value of the variable at the start of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_finalValue">
            <summary>
The final value of a variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="T:CCustomInterpolator">
            <summary>
Implements a basic interpolator.
</summary>
            <remarks>
Derive a class from CCustomInterpolator and override all necessary methods in order to implement a custom
interpolation algorithm. A pointer to this class should be passed as a parameter to CCustomTransition.
</remarks>
        </member>
        <member name="M:CSinusoidalTransitionFromVelocity.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSinusoidalTransitionFromVelocity.m_period">
            <summary>
The period of oscillation of the sinusoidal wave in seconds.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromVelocity.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CSinusoidalTransitionFromVelocity.#ctor(System.Double,System.Double)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="period">The period of oscillation of the sinusoidal wave in seconds. </param>
        </member>
        <member name="T:CSinusoidalTransitionFromVelocity">
            <summary>
Encapsulates a sinusoidal-velocity transition, with an amplitude determined by the animation variable's initial velocity..
</summary>
            <remarks>
The value of the animation variable oscillates around the initial value over the entire duration of a
sinusoidal-range transition. The amplitude of the oscillation is determined by the animation variable's velocity
when the transition begins.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CSinusoidalTransitionFromRange.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_slope">
            <summary>
The slope at the start of the transition.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_period">
            <summary>
The period of oscillation of the sinusoidal wave in seconds.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_dblMaximumValue">
            <summary>
The value of the animation variable at a peak of the sinusoidal wave.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_dblMinimumValue">
            <summary>
The value of the animation variable at a trough of the sinusoidal wave.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CSinusoidalTransitionFromRange.#ctor(System.Double,System.Double,System.Double,System.Double,__MIDL___MIDL_itf_UIAnimation_0000_0009_0001)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="dblMinimumValue">The value of the animation variable at a trough of the sinusoidal wave.</param>
            <param name="dblMaximumValue">The value of the animation variable at a peak of the sinusoidal wave.</param>
            <param name="period">The period of oscillation of the sinusoidal wave in seconds. </param>
            <param name="slope">The slope at the start of the transition. </param>
        </member>
        <member name="T:CSinusoidalTransitionFromRange">
            <summary>
Encapsulates a sinusoidal-range transition, with a given range of oscillation.
</summary>
            <remarks>
The value of the animation variable fluctuates between the specified minimum and maximum values over the entire
duration of a sinusoidal-range transition. The slope parameter is used to disambiguate between the two possible
sine waves specified by the other parameters.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CReversalTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CReversalTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CReversalTransition.#ctor(System.Double)">
            <summary>
Constructs a reversal transition object and initializes its duration.
</summary>
            <param name="duration">The duration of the transition. </param>
        </member>
        <member name="T:CReversalTransition">
            <summary>
Encapsulates a reversal transition.
</summary>
            <remarks>
A reversal transition smoothly changes direction over a given duration.
The final value will be the same as the initial value and the final velocity will be the negative of the initial velocity.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CParabolicTransitionFromAcceleration.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblAcceleration">
            <summary>
The acceleration of the animation variable during the transition.
</summary>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblFinalVelocity">
            <summary>
The velocity of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="M:CParabolicTransitionFromAcceleration.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a parabolic-acceleration transition and initializes it with specified parameters.
</summary>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition. </param>
            <param name="dblFinalVelocity">The velocity of the animation variable at the end of the transition. </param>
            <param name="dblAcceleration">The acceleration of the animation variable during the transition.</param>
        </member>
        <member name="T:CParabolicTransitionFromAcceleration">
            <summary>
Encapsulates a parabolic-acceleration transition.
</summary>
            <remarks>
During a parabolic-acceleration transition, the value of the animation variable changes from the initial value
to the final value ending at a specified velocity. You can control how quickly the variable reaches the final
value by specifying the rate of acceleration.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CSmoothStopTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSmoothStopTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CSmoothStopTransition.m_maximumDuration">
            <summary>
The maximum duration of the transition.
</summary>
        </member>
        <member name="M:CSmoothStopTransition.#ctor(System.Double,System.Double)">
            <summary>
Constructs a smooth-stop transition and initializes its maximum duration and final value.
</summary>
            <param name="maximumDuration">The maximum duration of the transition.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CSmoothStopTransition">
            <summary>
Encapsulates a smooth-stop transition.
</summary>
            <remarks>
A smooth-stop transition slows down as it approaches a given final value, and reaches it with a velocity of zero.
The duration of the transition is determined by the initial velocity, the difference between the initial and final values,
and the specified maximum duration. If there is no solution consisting of a single parabolic arc,
this method creates a cubic transition.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CLinearTransitionFromSpeed.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CLinearTransitionFromSpeed.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CLinearTransitionFromSpeed.m_dblSpeed">
            <summary>
The absolute value of the variable's velocity.
</summary>
        </member>
        <member name="M:CLinearTransitionFromSpeed.#ctor(System.Double,System.Double)">
            <summary>
Constructs a linear-speed transition object and initializes it with speed and final value.
</summary>
            <param name="dblSpeed">The absolute value of the variable's velocity.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CLinearTransitionFromSpeed">
            <summary>
Encapsulates a linear-speed transition.
</summary>
            <remarks>
During a linear-speed transition, the value of the animation variable changes at a specified rate.
The duration of the transition is determined by the difference between the initial value and the specified final value.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CLinearTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CLinearTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CLinearTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CLinearTransition.#ctor(System.Double,System.Double)">
            <summary>
Constructs a linear transition object and initializes it with duration and final value.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CLinearTransition">
            <summary>
Encapsulates a linear transition.
</summary>
            <remarks>
During a linear transition, the value of the animation variable transitions linearly from its initial value to a specified final value.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CInstantaneousTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CInstantaneousTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="M:CInstantaneousTransition.#ctor(System.Double)">
            <summary>
Constructs a transition object and initializes its final value.
</summary>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CInstantaneousTransition">
            <summary>
Encapsulates an instantaneous transition.
</summary>
            <remarks>
During an instantaneous transition, the value of the animation variable changes instantly from its current
value to a specified final value. The duration of this transition is always zero.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CDiscreteTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CDiscreteTransition.m_hold">
            <summary>
The amount of time by which to hold the variable at its final value.
</summary>
        </member>
        <member name="F:CDiscreteTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CDiscreteTransition.m_delay">
            <summary>
The amount of time by which to delay the instantaneous switch to the final value.
</summary>
        </member>
        <member name="M:CDiscreteTransition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a discrete transition object and initializes its parameters.
</summary>
            <param name="delay">The amount of time by which to delay the instantaneous switch to the final value.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition. </param>
            <param name="hold">The amount of time by which to hold the variable at its final value.</param>
        </member>
        <member name="T:CDiscreteTransition">
            <summary>
Encapsulates a discrete transition.
</summary>
            <remarks>
During a discrete transition, the animation variable remains at the initial value for a specified delay time,
then switches instantaneously to a specified final value and remains at that value for a given hold time.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CCubicTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CCubicTransition.m_dblFinalVelocity">
            <summary>
The velocity of the variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCubicTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCubicTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CCubicTransition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a transition object and initializes its parameters.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue">The value of the animation variable at the end of the transition.</param>
            <param name="finalVelocity">The velocity of the variable at the end of the transition.</param>
        </member>
        <member name="T:CCubicTransition">
            <summary>
Encapsulates a cubic transition.
</summary>
            <remarks>
During a cubic transition, the value of the animation variable changes from its initial value to a specified
final value over the duration of the transition, ending at a specified velocity.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CConstantTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CConstantTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CConstantTransition.#ctor(System.Double)">
            <summary>
Constructs a transition object and initializes its duration.
</summary>
            <param name="duration">The duration of the transition. </param>
        </member>
        <member name="T:CConstantTransition">
            <summary>
Encapsulates a constant transition.
</summary>
            <remarks>
During a constant transition, the value of an animation variable remains at the initial value over the duration
of the transition.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CAccelerateDecelerateTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_decelerationRatio">
            <summary>
The ratio of the time spent decelerating to the duration.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_accelerationRatio">
            <summary>
The ratio of the time spent accelerating to the duration.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_finalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CAccelerateDecelerateTransition.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition. </param>
            <param name="finalValue">The value of the animation variable at the end of the transition. </param>
            <param name="accelerationRatio">The ratio of the time spent accelerating to the duration.</param>
            <param name="decelerationRatio">The ratio of the time spent decelerating to the duration. </param>
        </member>
        <member name="T:CAccelerateDecelerateTransition">
            <summary>
Implements an accelerate-decelerate transition.
</summary>
            <remarks>
During an accelerate-decelerate transition, the animation variable speeds up and then slows down over the
duration of the transition, ending at a specified value. You can control how quickly the variable accelerates and
decelerates independently, by specifying different acceleration and deceleration ratios.
When the initial velocity is zero, the acceleration ratio is the fraction of the duration that the variable will
spend accelerating; likewise with the deceleration ratio. If the initial velocity is non-zero, it is the
fraction of the time between the velocity reaching zero and the end of transition. The acceleration ratio and
the deceleration ratio should sum to a maximum of 1.0.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnRenderingTooSlow(System.UInt32)">
            <summary>
Handles events that occur when the rendering frame rate for an animation falls below the minimum desirable frame rate.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnPostUpdate">
            <summary>
Handles events that occur after an animation update is finished.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnPreUpdate">
            <summary>
Handles events that occur before an animation update begins.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationTimerEventHandler.CreateInstance(CAnimationController*,IUIAnimationTimerEventHandler**)">
            <summary>
Creates an instance of CAnimationTimerEventHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppTimerEventHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
animation timer events.</param>
        </member>
        <member name="T:CAnimationTimerEventHandler">
            <summary>
Implements a call back, which is called by Animation API when timing events occur.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationTimer::SetTimerEventHandler when you call
CAnimationController::EnableAnimationTimerEventHandler.
</remarks>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.OnStoryboardUpdated(IUIAnimationStoryboard*)">
            <summary>
Handles OnStoryboardUpdated events, which occur when a storyboard is updated
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">A pointer to storyboard, which was updated.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.OnStoryboardStatusChanged(IUIAnimationStoryboard*,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001)">
            <summary>
Handles OnStoryboardStatusChanged events, which occur when a storyboard's status changes
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">A pointer to storyboard whose status has changed.</param>
            <param name="newStatus">Specifies new storyboard status.</param>
            <param name="previousStatus">Specifies previous storyboard status.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.CreateInstance(CAnimationController*,IUIAnimationStoryboardEventHandler**)">
            <summary>
Creates an instance of CAnimationStoryboardEventHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
storyboard events.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.#ctor">
            <summary>
Constructs a CAnimationStoryboardEventHandler object.
</summary>
        </member>
        <member name="T:CAnimationStoryboardEventHandler">
            <summary>
Implements a callback, which is called by Animation API when storyboard's status is changed or storyboard is updated.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationStoryboard::SetStoryboardEventHandler method,
when you call CAnimationController::EnableStoryboardEventHandler.
</remarks>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.OnIntegerValueChanged(IUIAnimationStoryboard*,IUIAnimationVariable*,System.Int32,System.Int32)">
            <summary>
Called when a value of an animation variable has changed.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">The storyboard that is animating the variable.</param>
            <param name="variable">The animation variable that was updated.</param>
            <param name="newValue">The new rounded value.</param>
            <param name="previousValue">The previous rounded value.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.CreateInstance(CAnimationController*,IUIAnimationVariableIntegerChangeHandler**)">
            <summary>
Creates an instance of CAnimationVariableIntegerChangeHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
variable integer change events.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.#ctor">
            <summary>
Constructs a CAnimationVariableIntegerChangeHandler object.
</summary>
        </member>
        <member name="T:CAnimationVariableIntegerChangeHandler">
            <summary>
Implements a call back, which is called by Animation API when the value of an animation variable changes.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationVariable::SetVariableIntegerChangeHandler method,
when you call CAnimationVariable::EnableIntegerValueChangedEvent or CAnimationBaseObject::EnableIntegerValueChangedEvent
(which enables this event for all animation variables encapsulated in an animation object).
</remarks>
        </member>
        <member name="M:CAnimationVariableChangeHandler.OnValueChanged(IUIAnimationStoryboard*,IUIAnimationVariable*,System.Double,System.Double)">
            <summary>
Called when a value of an animation variable has changed.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="storyboard">The storyboard that is animating the variable.</param>
            <param name="variable">The animation variable that was updated.</param>
            <param name="newValue">The new value.</param>
            <param name="previousValue">The previous value.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.CreateInstance(CAnimationController*,IUIAnimationVariableChangeHandler**)">
            <summary>
Creates an instance of CAnimationVariableChangeHandler object.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
variable change events.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.#ctor">
            <summary>
Constructs a CAnimationVariableChangeHandler object.
</summary>
        </member>
        <member name="T:CAnimationVariableChangeHandler">
            <summary>
Implements a call back, which is called by Animation API when the value of an animation variable changes.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationVariable::SetVariableChangeHandler method,
when you call CAnimationVariable::EnableValueChangedEvent or CAnimationBaseObject::EnableValueChangedEvent
(which enables this event for all animation variables encapsulated in an animation object).
</remarks>
        </member>
        <member name="M:CAnimationManagerEventHandler.OnManagerStatusChanged(__MIDL___MIDL_itf_UIAnimation_0000_0000_0002,__MIDL___MIDL_itf_UIAnimation_0000_0000_0002)">
            <summary>
Called when a status of animation manager has changed.
</summary>
            <returns>
Current implementation always returns S_OK;
</returns>
            <param name="newStatus">New status.</param>
            <param name="previousStatus">Previous status.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.CreateInstance(CAnimationController*,IUIAnimationManagerEventHandler**)">
            <summary>
Creates an instance of CAnimationManagerEventHandler object.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppManagerEventHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
status updates to an animation manager.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.#ctor">
            <summary>
Constructs a CAnimationManagerEventHandler object.
</summary>
        </member>
        <member name="T:CAnimationManagerEventHandler">
            <summary>
Implements a callback, which is called by Animation API when a status of animation manager changed.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationManager::SetManagerEventHandler method,
when you call CAnimationController::EnableAnimationManagerEvent.
</remarks>
        </member>
        <member name="M:CAnimationController.CleanUpGroup(CAnimationGroup*)">
            <summary>
A helper that cleans up the group.
</summary>
            <remarks>
This method removes all transitions and keyframes from the specified group.
</remarks>
            <param name="pGroup">A pointer to animation group to clean.</param>
        </member>
        <member name="M:CAnimationController.OnAfterSchedule(CAnimationGroup*)">
            <summary>
Called by the framework when an animation for the specified group has just been scheduled.
</summary>
            <remarks>
The default implementation removes keyframes from the specified group and transitions from animation variables that
belong to the specified group. Can be overridden in a derived class to take any additional actions upon animation schedule.
</remarks>
            <param name="pGroup">A pointer to an animation group, which has been scheduled.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerRenderingTooSlow(System.UInt32)">
            <summary>
Called by the framework when the rendering frame rate for an animation falls below a minimum desirable frame rate.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
The minimum desirable frame rate is specified by calling IUIAnimationTimer::SetFrameRateThreshold.
</remarks>
            <param name="fps">The current frame rate in frames per second. </param>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerPostUpdate">
            <summary>
Called by the framework after an animation update is finished.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerPreUpdate">
            <summary>
Called by the framework before an animation update begins.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
        </member>
        <member name="M:CAnimationController.OnHasPriorityCompress(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_COMPRESS.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityTrim(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_TRIM.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityConclude(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_CONCLUDE.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityCancel(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_CANCEL.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnStoryboardUpdated(CAnimationGroup*)">
            <summary>
Called by the framework when storyboard has been updated.
</summary>
            <remarks>
This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to a group that owns the storyboard.</param>
        </member>
        <member name="M:CAnimationController.OnStoryboardStatusChanged(CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001)">
            <summary>
Called by the framework when storyboard status has changed.
</summary>
            <remarks>
This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that owns the storyboard whose status has changed.</param>
            <param name="newStatus">Specifies the new status.</param>
            <param name="previousStatus">Specifies the previous status.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationIntegerValueChanged(CAnimationGroup*,CAnimationBaseObject*,IUIAnimationVariable*,System.Int32,System.Int32)">
            <summary>
Called by the framework when integer value of animation variable has changed.
</summary>
            <remarks>
This method is called if you enable animation variable events with EnableIntegerValueChangedEvent called for a specific
animation variable or animation object.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that holds an animation object whose value has changed.</param>
            <param name="pObject">A pointer to an animation object that contains an animation variable whose value has changed.</param>
            <param name="variable">A pointer to an animation variable.</param>
            <param name="newValue">Specifies new value.</param>
            <param name="prevValue">Specifies previous value.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationValueChanged(CAnimationGroup*,CAnimationBaseObject*,IUIAnimationVariable*,System.Double,System.Double)">
            <summary>
Called by the framework when value of animation variable has changed.
</summary>
            <remarks>
This method is called if you enable animation variable events with EnableValueChangedEvent called for a specific
animation variable or animation object.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that holds an animation object whose value has changed.</param>
            <param name="pObject">A pointer to an animation object that contains an animation variable whose value has changed.</param>
            <param name="variable">A pointer to an animation variable.</param>
            <param name="newValue">Specifies new value.</param>
            <param name="prevValue">Specifies previous value.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationManagerStatusChanged(__MIDL___MIDL_itf_UIAnimation_0000_0000_0002,__MIDL___MIDL_itf_UIAnimation_0000_0000_0002)">
            <summary>
Called by the framework in response to StatusChanged event from animation manager.
</summary>
            <remarks>
This method is called if you enable animation manager events with EnableAnimationManagerEvent.
It can be overridden in a derived class to take application-specific actions. The default implementation
updates a related window if it has been set with SetRelatedWnd.
</remarks>
            <param name="newStatus">New animation manager status.</param>
            <param name="previousStatus">Previous animation manager status.</param>
        </member>
        <member name="M:CAnimationController.OnBeforeAnimationStart(CAnimationGroup*)">
            <summary>
Called by the framework right before the animation is scheduled.
</summary>
            <remarks>
This call is routed to related CWnd and can be overridden in a derived class to perform any
additional actions before the animation starts for the specified group.
</remarks>
            <param name="pGroup">A pointer to an animation group whose animation is about to start.</param>
        </member>
        <member name="M:CAnimationController.CleanUpGroup(System.UInt32)">
            <summary>
Called by the framework to clean up the group when animation has been scheduled.
</summary>
            <remarks>
This method removes all transitions and keyframes from the specified group, because they are not relevant
after an animation has been scheduled.
</remarks>
            <param name="nGroupID">Specifies GroupID.</param>
        </member>
        <member name="M:CAnimationController.ScheduleGroup(System.UInt32,System.Double)">
            <summary>
Schedules an animation.
</summary>
            <returns>
TRUE if animation was scheduled successfully. FALSE if storyboard has not been created, or other error occurs.
</returns>
            <remarks>
You must call AnimateGroup with parameter bScheduleNow set to FALSE prior ScheduleGroup. You can specify the
desired animation time obtained from IUIAnimationTimer::GetTime. If the time parameter is 0.0, the animation is scheduled for the
current time.
</remarks>
            <param name="nGroupID">Specifies animation Group ID to schedule.</param>
            <param name="time">Specifies time to schedule.</param>
        </member>
        <member name="M:CAnimationController.AnimateGroup(System.UInt32,System.Int32)">
            <summary>
Prepares a group to run animation and optionally schedules it.
</summary>
            <returns>
TRUE if animation was successfully scheduled and run.
</returns>
            <remarks>
This method does the actual work creating storyboard, adding animation variables, applying transitions and setting keyframes.
It's possible to delay scheduling if you set bScheduleNow to FALSE. In this case the specified group
will hold a storyboard that has been set up for animation. At that point you can setup events for the storyboard and
animation variables. When you actually need to run the animation call CAnimationController::ScheduleGroup.
</remarks>
            <param name="nGroupID">Specifies GroupID.</param>
            <param name="bScheduleNow">Specifies whether to run animation right away.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationObject(IUIAnimationVariable*,CAnimationBaseObject**,CAnimationGroup**)">
            <summary>
Finds animation object containing a specified animation variable.
</summary>
            <returns>
TRUE if object was found; otherwise FALSE.
</returns>
            <remarks>
Called from event handlers when it's required to find an animation object from incoming animation variable.
</remarks>
            <param name="pVariable">A pointer to animation variable.</param>
            <param name="ppObject">Output. Contains a pointer to animation object or NULL. </param>
            <param name="ppGroup">Output. Contains a pointer to animation group that holds the animation object, or NULL.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationGroup(IUIAnimationStoryboard*)">
            <summary>
Finds an animation group by its storyboard.
</summary>
            <returns>
A pointer to animation group if succeeds, or NULL if no group plays the specified storyboard.
</returns>
            <remarks>
This method is usually called from event handlers to find a group by pointer to storyboard that comes as a parameter to an event handler.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationGroup(System.UInt32)">
            <summary>
Finds an animation group by its Group ID.
</summary>
            <returns>
A pointer to animation group or NULL if the group with specified ID is not found.
</returns>
            <remarks>
Use this method to find an animation group at runtime. A group is created and added to the internal list of animation groups
when a first animation object with particular GroupID is being added to animation controller.
</remarks>
            <param name="nGroupID">Specifies a GroupID.</param>
        </member>
        <member name="M:CAnimationController.AddKeyframeToGroup(System.UInt32,CBaseKeyFrame*)">
            <summary>
Adds a keyframe to group.
</summary>
            <returns>
TRUE if the function succeeds; otherwise FALSE.
</returns>
            <remarks>
Usually you don't need to call this method, use CAnimationController::CreateKeyframe instead, which creates
and adds the created keyframe to a group automatically.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="pKeyframe">A pointer to a keyframe.</param>
        </member>
        <member name="M:CAnimationController.CreateKeyframe(System.UInt32,CBaseKeyFrame*,System.Double)">
            <summary>
Creates a keyframe that depends on other keyframe with optional offset in seconds and adds it to the specified group.
</summary>
            <returns>
A pointer to newly created keyframe if the function succeeds.
</returns>
            <remarks>
You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload).
It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes.
You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups.
Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.
</remarks>
            <param name="nGroupID">Specifies Group ID for which keyframe is created.</param>
            <param name="pKeyframe">A  pointer to base keyframe for this keyframe.</param>
            <param name="offset">Offset in seconds from the base keyframe specified by pKeyframe.</param>
        </member>
        <member name="M:CAnimationController.CreateKeyframe(System.UInt32,CBaseTransition*)">
            <summary>
Creates a keyframe that depends on transition and adds it to the specified group.
</summary>
            <returns>
A pointer to newly created keyframe if the function succeeds.
</returns>
            <remarks>
You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload).
It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes.
You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups.
Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.
</remarks>
            <param name="nGroupID">Specifies Group ID for which keyframe is created.</param>
            <param name="pTransition">A pointer to transition. Keyframe will be inserted to storyboard after this transition.</param>
        </member>
        <member name="M:CAnimationController.RemoveTransitions(System.UInt32)">
            <summary>
Removes transitions from animation objects that belong to the specified group.
</summary>
            <remarks>
The group loops over its animation objects and calls ClearTransitions(FALSE) for each animation object.
This method is called by the framework after animation has been scheduled.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
        </member>
        <member name="M:CAnimationController.RemoveAllAnimationGroups">
            <summary>
Removes all animation groups from animation controller.
</summary>
            <remarks>
All groups will be deleted, their pointer, if stored at the application level, must be invalidated.
If CAnimationGroup::m_bAutodestroyAnimationObjects for a group being deleted is TRUE,
all animation objects that belong to that group will be deleted; otherwise their references to parent animation
controller will be set to NULL and they can be added to another controller.
</remarks>
        </member>
        <member name="M:CAnimationController.RemoveAnimationGroup(System.UInt32)">
            <summary>
Removes an animation group with specified ID from animation controller.
</summary>
            <remarks>
This method removes an animation group from the internal list of groups and deletes it, therefore if you stored
a pointer to that animation group, it must be invalidated. If CAnimationGroup::m_bAutodestroyAnimationObjects is TRUE,
all animation objects that belong to that group will be deleted; otherwise their references to parent animation
controller will be set to NULL and they can be added to another controller.
</remarks>
            <param name="nGroupID">Specifies animation group ID.</param>
        </member>
        <member name="M:CAnimationController.RemoveAnimationObject(CAnimationBaseObject*,System.Int32)">
            <summary>
Remove an animation object from animation controller.
</summary>
            <remarks>
Removes an animation object from animation controller and animation group. Call this function if
a particular object should not be animated anymore, or if you need to move the object to another animation controller.
In the last case bNoDelete must be TRUE.
</remarks>
            <param name="pObject">A pointer to an animation object.</param>
            <param name="bNoDelete">If this parameter is TRUE the object will not be deleted upon remove.</param>
        </member>
        <member name="M:CAnimationController.AddAnimationObject(CAnimationBaseObject*)">
            <summary>
Adds an animation object to a group that belongs to the animation controller.
</summary>
            <returns>
A pointer to existing or new animation group where pObject has been added if function succeeds; NULL if
pObject has already been added to a group that belongs to another animation controller.
</returns>
            <remarks>
Call this method to add an animation object to the animation controller. An object will be added to a group
according to object's GroupID (see CAnimationBaseObject::SetID). The animation controller will create a new
group if it's the first object being added with the specified GroupID. An animation object can be added to
one animation controller only. If you need to add an object to another controller, call RemoveAnimationObject first.
If you call SetID with new GroupID for an object that has been already added to a group, the object will be removed
from the old group and added to another group with specified ID.
</remarks>
            <param name="pObject">A pointer to an animation object.</param>
        </member>
        <member name="M:CAnimationController.SetRelatedWnd(CWnd*)">
            <summary>
Establishes a relationship between animation controller and a window.
</summary>
            <remarks>
If a related CWnd object is set, the animation controller can automatically update it (send WM_PAINT message) when
the status of animation manager has changed or timer post update event has occurred.
</remarks>
            <param name="pWnd">A pointer to window object to set.</param>
        </member>
        <member name="M:CAnimationController.IsAnimationInProgress">
            <summary>
Tells whether at least one group is playing animation.
</summary>
            <returns>
TRUE if there is an animation in progress for this animation controller; otherwise FALSE.
</returns>
            <remarks>
Checks status of animation manager and returns TRUE if the status is UI_ANIMATION_MANAGER_BUSY.
</remarks>
        </member>
        <member name="M:CAnimationController.UpdateAnimationManager">
            <summary>
Directs the animation manager to update the values of all animation variables.
</summary>
            <remarks>
Calling this method advances the animation manager to current time, changing statuses of storyboards as necessary
and updating any animation variables to appropriate interpolated values. Internally this method calls
IUIAnimationTimer::GetTime(timeNow) and IUIAnimationManager::Update(timeNow). Override this method in a derived
class to customize this behavior.
</remarks>
        </member>
        <member name="M:CAnimationController.EnableAnimationTimerEventHandler(System.Int32,__MIDL___MIDL_itf_UIAnimation_0000_0012_0001)">
            <summary>
Sets or releases a handler for timing events and handler for timing updates.
</summary>
            <returns>
TRUE if handlers were successfully set or released; FALSE if this method is called for a second time without
releasing the handlers first, or if any other error occurs.
</returns>
            <remarks>
When the handlers are set (enabled) Windows Animation API calls OnAnimationTimerPreUpdate, OnAnimationTimerPostUpdate,
OnRenderingTooSlow methods.
You need to enable animation timers to allow Windows Animation API update storyboards. Otherwise you'll need to
call CAnimationController::UpdateAnimationManager in order to direct the animation manager to update the values
of all animation variables.
</remarks>
            <param name="bEnable">Specifies whether to set or release the handlers.</param>
            <param name="idleBehavior">Specifies idle behavior for timer update handler.</param>
        </member>
        <member name="M:CAnimationController.EnableStoryboardEventHandler(System.UInt32,System.Int32)">
            <summary>
Sets or releases a handler for storyboard status and update events.
</summary>
            <returns>
TRUE if the handler was successfully set or released; FALSE if the specified animation group is now found or
animation for the specified group has not been initiated and its internal storyboard is NULL.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation API calls OnStoryboardStatusChanges and OnStoryboardUpdated virtual methods.
A handler must be set after CAnimationController::Animate has been called for the specified animation group, because
it creates encapsulated IUIAnimationStoryboard object.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="bEnable">Specifies whether to set or release a handler.</param>
        </member>
        <member name="M:CAnimationController.EnablePriorityComparisonHandler(System.UInt64)">
            <summary>
Sets or releases the priority comparison handler to call to determine whether a scheduled storyboard can be cancelled,
concluded, trimmed or compressed.
</summary>
            <returns>
TRUE if the handler was successfully set or released.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation calls the following virtual methods depending on dwHandlerType:
OnHasPriorityCancel, OnHasPriorityConclude, OnHasPriorityTrim, OnHasPriorityCompress.
dwHandler can be a combination of the following flags:
UI_ANIMATION_PHT_NONE - release all handlers
UI_ANIMATION_PHT_CANCEL - set Cancel comparison handler
UI_ANIMATION_PHT_CONCLUDE - set Conclude comparison handler
UI_ANIMATION_PHT_COMPRESS - set Compress comparison handler
UI_ANIMATION_PHT_TRIM - set Trim comparison handler
UI_ANIMATION_PHT_CANCEL_REMOVE - remove Cancel comparison handler
UI_ANIMATION_PHT_CONCLUDE_REMOVE - remove Conclude comparison handler
UI_ANIMATION_PHT_COMPRESS_REMOVE - remove Compress comparison handler
UI_ANIMATION_PHT_TRIM_REMOVE - remove Trim comparison handler
</remarks>
            <param name="dwHandlerType">A combination of UI_ANIMATION_PHT_ flags (see remarks), which specifies what handlers to set or release.</param>
        </member>
        <member name="M:CAnimationController.EnableAnimationManagerEvent(System.Int32)">
            <summary>
Sets or releases a handler to call when animation manager's status changes.
</summary>
            <returns>
TRUE if the handler was successfully set or released.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation calls OnAnimationManagerStatusChanged when animation manager's status changes.
</remarks>
            <param name="bEnable">Specifies whether to set or release a handler.</param>
        </member>
        <member name="M:CAnimationController.GetKeyframeStoryboardStart">
            <summary>
Returns a keyframe that identifies start of storyboard.
</summary>
            <returns>
A pointer to base keyframe, which identifies start of storyboard.
</returns>
            <remarks>
Obtain this keyframe to base any other keyframes or transitions on the moment in time when a storyboard starts.
</remarks>
        </member>
        <member name="M:CAnimationController.IsValid">
            <summary>
Tells whether animation controller is valid.
</summary>
            <returns>
TRUE if animation controller is valid; otherwise FALSE.
</returns>
            <remarks>
This method returns FALSE only if Windows Animation API is not supported on the current OS and creation of
animation manager failed because it's not registered. You need to call GetUIAnimationManager at least once after initialization of
COM libraries to cause setting of this flag.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUITransitionFactory">
            <summary>
A pointer to IUIAnimationTransitionFactory interface or NULL, if creation of transition library failed.
</summary>
            <returns>
A pointer to IUIAnimationTransitionFactory or NULL, if creation of transition factory failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUIAnimationTimer">
            <summary>
Provides access to encapsulated IUIAnimationTimer object.
</summary>
            <returns>
A pointer to IUIAnimationTimer interface or NULL, if creation of animation timer failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUITransitionLibrary">
            <summary>
Provides access to encapsulated IUIAnimationTransitionLibrary object.
</summary>
            <returns>
A pointer to IUIAnimationTransitionLibrary interface or NULL, if creation of transition library failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUIAnimationManager">
            <summary>
Provides access to encapsulated IUIAnimationManager object.
</summary>
            <returns>
A pointer to IUIAnimationManager interface or NULL, if creation of animation manager failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
You may need to access IUIAnimationManager in order to call its interface methods, which are not wrapped by
animation controller.
</remarks>
        </member>
        <member name="M:CAnimationController.Dispose">
            <summary>
The destructor. Called when animation controller object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationController.#ctor">
            <summary>
Constructs an animation controller.
</summary>
        </member>
        <member name="F:CAnimationController.g_KeyframeStoryboardStart">
            <summary>
A keyframe that represents start of storyboard.
</summary>
        </member>
        <member name="F:CAnimationController.m_lstAnimationGroups">
            <summary>
A list of animation groups that belong to this animation controller.
</summary>
        </member>
        <member name="F:CAnimationController.m_pRelatedWnd">
            <summary>
A pointer to a related CWnd object, which can be automatically redrawn when
the status of animation manager has changed, or post update event has occurred. Can be NULL.
</summary>
        </member>
        <member name="F:CAnimationController.m_pTransitionFactory">
            <summary>
Stores a pointer to Transition Factory COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pAnimationTimer">
            <summary>
Stores a pointer to Animation Timer COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pTransitionLibrary">
            <summary>
Stores a pointer to Transition Library COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pAnimationManager">
            <summary>
Stores a pointer to Animation Manager COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_bIsValid">
            <summary>
Specifies whether an animation controller is valid or not.
This member is set to FALSE if current OS does not support Windows Animation API.
</summary>
        </member>
        <member name="T:CAnimationController">
            <summary>
Implements the animation controller, which provides a central interface for creating and managing UI animations.
</summary>
            <remarks>
The CAnimationController class is the key class that manages animations.
You may create one or more instances of animation controller in an application and, optionally, connect an instance of
animation controller to a CWnd object using CAnimationController::SetRelatedWnd. This connection is required to send WM_PAINT messages
to the related window automatically when animation manager status has changed or animation timer has been updated.
If you do not enable this relation, you must redraw a window that displays an animation manually. For this purpose you can derive a class
from CAnimationController and override OnAnimationManagerStatusChanged and/or OnAnimationTimerPostUpdate and invalidate one or
more windows when necessary.
</remarks>
        </member>
        <member name="F:CAnimationGroup.m_bAutodestroyAnimationObjects">
            <summary>
Specifies how to destroy animation objects. If this parameter is TRUE, animation objects will be destroyed automatically
when the group is destroyed. Otherwise animation objects must be destroyed manually. The default value is FALSE.
Set this value to TRUE only if all animation objects that belong to group are allocated dynamically with operator new.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_bAutoclearTransitions">
            <summary>
Specifies how to clear transitions from animation objects that belong to group. If this member is TRUE,
transitions are removed automatically when an animation has been scheduled. Otherwise you need to remove
transitions manually.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_bAutodestroyKeyframes">
            <summary>
Specifies how to destroy keyframes. If this value is TRUE, all keyframes are removed and destroyed;
otherwise they are removed from the list only. The default value is TRUE.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_pStoryboard">
            <summary>
Points to animation storyboard. This pointer is valid only after call on Animate.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_lstKeyFrames">
            <summary>
Contains a list of keyframes.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_lstAnimationObjects">
            <summary>
Contains a list of animation objects.
</summary>
        </member>
        <member name="M:CAnimationGroup.SetAutodestroyTransitions(System.Int32)">
            <summary>
Directs all animation objects that belong to group automatically destroy transitions.
</summary>
            <remarks>
Set this value to FALSE only if you allocate transitions on the stack. The default value is TRUE, therefore
it's highly recommended to allocate transition objects using operator new.
</remarks>
            <param name="bAutoDestroy">Specifies how to destroy transitions.</param>
        </member>
        <member name="M:CAnimationGroup.Schedule(IUIAnimationTimer*,System.Double)">
            <summary>
Schedules an animation at the specified time.
</summary>
            <returns>
TRUE if the method succeeds; FALSE if the method fails or if Animate has not been called with bScheduleNow set to FALSE.
</returns>
            <remarks>
Call this function to schedule an animation at the specified time. You must call Animate with bScheduleNow set to FALSE first.
</remarks>
            <param name="pTimer">A pointer to animation timer.</param>
            <param name="time">Specifies time to schedule the animation.</param>
        </member>
        <member name="M:CAnimationGroup.Animate(IUIAnimationManager*,IUIAnimationTimer*,System.Int32)">
            <summary>
Animates a group.
</summary>
            <returns>
TRUE if the method succeeds; otherwise FALSE.
</returns>
            <remarks>
This method creates an internal storyboard, creates and applies transitions and schedules an animation
if bScheduleNow is TRUE. If bScheduleNow is FALSE, you need to call Schedule to start animation at the
specified time.
</remarks>
            <param name="pManager" />
            <param name="pTimer" />
            <param name="bScheduleNow" />
        </member>
        <member name="M:CAnimationGroup.FindAnimationObject(IUIAnimationVariable*)">
            <summary>
Finds an animation object that contains the specified animation variable.
</summary>
            <returns>
A pointer to animation object, or NULL if animation object is not found.
</returns>
            <param name="pVariable">A pointer to animation variable.</param>
        </member>
        <member name="M:CAnimationGroup.RemoveKeyframes">
            <summary>
Removes and optionally destroys all keyframes that belong to an animation group.
</summary>
            <remarks>
If m_bAutodestroyKeyframes member is TRUE then keyframes are removed and destroyed, otherwise keyframes are
just removed from the internal list of keyframes.
</remarks>
        </member>
        <member name="M:CAnimationGroup.RemoveTransitions">
            <summary>
Removes transitions from animation objects that belong to an animation group.
</summary>
            <remarks>
If m_bAutoclearTransitions flag is set to TRUE, this method loops over all animation objects that belong to the group
and calls CAnimationObject::ClearTransitions(FALSE).
</remarks>
        </member>
        <member name="M:CAnimationGroup.ApplyTransitions">
            <summary>
Applies transitions to animation objects.
</summary>
            <remarks>
This method ASSERTS in debug mode if storyboard has not been created.
It creates all transitions first, then adds "static" keyframes (keyframes that depend on offsets),
adds transitions that do not depend on keyframes, adds keyframes depending on transitions and other keyframes,
and at last adds transitions that depend on keyframes.
</remarks>
        </member>
        <member name="M:CAnimationGroup.GetGroupID">
            <summary>
Returns GroupID.
</summary>
            <returns>
A group identifier.
</returns>
        </member>
        <member name="M:CAnimationGroup.Dispose">
            <summary>
The destructor. Called when an animation group is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationGroup.#ctor(CAnimationController*,System.UInt32)">
            <summary>
Constructs an animation group.
</summary>
            <param name="pParentController">A pointer to animation controller that creates a group.</param>
            <param name="nGroupID">Specifies GroupID.</param>
        </member>
        <member name="M:CAnimationGroup.CreateTransitions">
            <summary>
A helper that creates COM transition objects.
</summary>
            <returns>
TRUE is the method succeeds, otherwise FALSE.
</returns>
        </member>
        <member name="M:CAnimationGroup.AddTransitions(IUIAnimationStoryboard*,System.Int32)">
            <summary>
A helper that adds transitions to a storyboard.
</summary>
            <param name="pStoryboard">A pointer to a storyboard COM object.</param>
            <param name="bDependOnKeyframes">Specifies whether this method should add to the storyboard transitions that depend on other keyframes.</param>
        </member>
        <member name="M:CAnimationGroup.AddKeyframes(IUIAnimationStoryboard*,System.Int32)">
            <summary>
A helper that adds keyframes to a storyboard.
</summary>
            <param name="pStoryboard">A pointer to a storyboard COM object.</param>
            <param name="bAddDeep">Specifies whether this method should add to the storyboard keyframes that depend on other keyframes.</param>
        </member>
        <member name="F:CAnimationGroup.m_pParentController">
            <summary>
A pointer to animation controller this group belongs to.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_nGroupID">
            <summary>
A unique identifier of animation group.
</summary>
        </member>
        <member name="T:CAnimationGroup">
            <summary>
Implements an animation group, which combines an animation storyboard, animation objects and transitions
to define an animation.
</summary>
            <remarks>
Animation groups are created automatically by animation controller (CAnimationController) when you add animation
objects using CAnimationController::AddAnimationObject.
An animation group is identified by GroupID, which is usually taken as a parameter to manipulate animation groups.
The GroupID is taken from the first animation object being added to a new animation group.
An encapsulated animation storyboard is created after you call CAnimationController::AnimateGroup and can be
accessed via public member m_pStoryboard.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to four CAnimationVariable objects
representing coordinates of rectangle.</param>
        </member>
        <member name="F:CAnimationRect.m_bFixedSize">
            <summary>
Specifies whether the rectangle has fixed size.
</summary>
            <remarks>
If this member is true, then the size of rectangle is fixed and right and bottom values
are recalculated each time the top-left corner is  moved according to the fixed size.
Set this value to TRUE to easily move the rectangle around the screen. In this case transitions applied to
right and bottom coordinates are ignored. The size is stored internally when you construct the object and/or
call SetDefaultValue. By default this member is set to FALSE.
</remarks>
        </member>
        <member name="M:CAnimationRect.AddTransition(CBaseTransition*,CBaseTransition*,CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for left, top, right and bottom coordinates.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for each rectangle sides.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of the rectangle sides, you can pass NULL.
</remarks>
            <param name="pLeftTransition">Specifies transition for the left side.</param>
            <param name="pTopTransition">Specifies transition for the top side.</param>
            <param name="pRightTransition">Specifies transition for the right side.</param>
            <param name="pBottomTransition">Specifies transition for the bottom side.</param>
        </member>
        <member name="M:CAnimationRect.op_Implicit~tagRECT">
            <summary>
Converts a CAnimationRect to RECT.
</summary>
            <returns>
Current value of animation rectangle as RECT.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned RECT will contain default values for all rectangle coordinates.
</remarks>
        </member>
        <member name="M:CAnimationRect.op_Assign(tagRECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns rect to CAnimationRect.
</summary>
            <remarks>
It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for color components if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="rect">The new value of animation rectangle.</param>
        </member>
        <member name="M:CAnimationRect.GetBottom">
            <summary>
Provides access to CAnimationVariable representing bottom coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing bottom coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the bottom coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetRight">
            <summary>
Provides access to CAnimationVariable representing right coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing right coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the right coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetTop">
            <summary>
Provides access to CAnimationVariable representing top coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing top coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the top coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetLeft">
            <summary>
Provides access to CAnimationVariable representing left coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing left coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the left coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetValue(CRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation rectangle. If this method fails or underlying COM objects for
left, top, right and bottom have not been initialized, rect contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="rect">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationRect.GetDefaultValue">
            <summary>
Returns the default values for rectangle's bounds.
</summary>
            <returns>
A CRect value containing defaults for left, right, top and bottom.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationRect.SetDefaultValue(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to rectangle's bounds.
It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="rect">Specifies new default values for left, top, right and bottom.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified coordinates of each side, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="nLeft">Specifies coordinate of left bound.</param>
            <param name="nTop">Specifies coordinate of top bound.</param>
            <param name="nRight">Specifies coordinate of right bound.</param>
            <param name="nBottom">Specifies coordinate of bottom bound.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified top-left corner coordinates and size of rectangle, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="pt">Coordinate of top-left corner.</param>
            <param name="sz">Size of rectangle.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified rect coordinates, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="rect">Specifies default rectangle.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor">
            <summary>
Constructs a CAnimationRect object.
</summary>
            <remarks>
The object is constructed with default values for left, top, right and bottom, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationRect.m_szInitial">
            <summary>
Specifies initial size of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_bottomValue">
            <summary>
The encapsulated animation variable that represents Bottom bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_rightValue">
            <summary>
The encapsulated animation variable that represents Right bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_topValue">
            <summary>
The encapsulated animation variable that represents Top bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_leftValue">
            <summary>
The encapsulated animation variable that represents Left bound of animation rectangle.
</summary>
        </member>
        <member name="T:CAnimationRect">
            <summary>
Implements the functionality of a rectangle whose top, left, right and bottom sides can be animated.
</summary>
            <remarks>
The CAnimationRect class encapsulates four CAnimationVariable objects and can represent in applications
a rectangle.
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to left, right top and bottom coordinates.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to three CAnimationVariable objects
representing red, green and blue components.</param>
        </member>
        <member name="M:CAnimationColor.AddTransition(CBaseTransition*,CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for Red, Green and Blue components.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables representing color components.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of the color components, you can pass NULL.
</remarks>
            <param name="pRTransition">Transition for Red component.</param>
            <param name="pGTransition">Transition for Green component.</param>
            <param name="pBTransition">Transition for Blue component.</param>
        </member>
        <member name="M:CAnimationColor.op_Implicit~System.UInt32!System.Runtime.CompilerServices.IsLong">
            <summary>
Converts a CAnimationColor to COLORREF.
</summary>
            <returns>
Current value of animation color object as COLORREF.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned COLORREF will contain default values for all color components.
</remarks>
        </member>
        <member name="M:CAnimationColor.op_Assign(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Assigns color to CAnimationColor.
</summary>
            <remarks>
It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for color components if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="color">Specifies new value Animation Color.</param>
        </member>
        <member name="M:CAnimationColor.GetB">
            <summary>
Provides access to CAnimationVariable representing Blue component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Blue component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Blue component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetG">
            <summary>
Provides access to CAnimationVariable representing Green component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Green component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Green component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetR">
            <summary>
Provides access to CAnimationVariable representing Red component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Red component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Red component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetValue(System.UInt32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation color. If this method fails or underlying COM objects for
color components have not been initialized, color contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="color">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationColor.GetDefaultValue">
            <summary>
Returns the default values for color components.
</summary>
            <returns>
A COLORREF value containing defaults for RGB components.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationColor.SetDefaultValue(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to color components
of animation color. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="color">Specifies new default values for red, green and blue components.</param>
        </member>
        <member name="M:CAnimationColor.#ctor(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation color object.
</summary>
            <remarks>
The object is constructed with specified values for RGB components, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="color">Specifies default color.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationColor.#ctor">
            <summary>
Constructs a CAnimationColor object.
</summary>
            <remarks>
The object is constructed with default values for red, green, blue, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationColor.m_bValue">
            <summary>
The encapsulated animation variable that represents Blue component of animation color.
</summary>
        </member>
        <member name="F:CAnimationColor.m_gValue">
            <summary>
The encapsulated animation variable that represents Green component of animation color.
</summary>
        </member>
        <member name="F:CAnimationColor.m_rValue">
            <summary>
The encapsulated animation variable that represents Red component of animation color.
</summary>
        </member>
        <member name="T:CAnimationColor">
            <summary>
Implements the functionality of a color whose red, green and blue components can be animated.
</summary>
            <remarks>
The CAnimationColor class encapsulates three CAnimationVariable objects and can represent in applications
a color. For example, you can use this class to animate colors of any object on the screen (like text color, background color etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to Red, Green and Blue components.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to two CAnimationVariable objects
representing the width and height.</param>
        </member>
        <member name="M:CAnimationSize.AddTransition(CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for Width and Height.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for Width and Height.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of dimensions, you can pass NULL.
</remarks>
            <param name="pCXTransition">A pointer to transition for Width.</param>
            <param name="pCYTransition">A pointer to transition for Height.</param>
        </member>
        <member name="M:CAnimationSize.op_Implicit~CSize">
            <summary>
Converts a CAnimationSize to a CSize.
</summary>
            <returns>
Current value of animation size as CSize.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned size will contain default values for Width and Height.
</remarks>
        </member>
        <member name="M:CAnimationSize.op_Assign(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns szSrc to CAnimationSize.
</summary>
            <remarks>
Assigns szSrc to CAnimationSize. It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for Width and Height if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="szSrc">Refers to CSize or SIZE.</param>
        </member>
        <member name="M:CAnimationSize.GetCY">
            <summary>
Provides access to CAnimationVariable representing Height.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Height.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Height.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetCX">
            <summary>
Provides access to CAnimationVariable representing Width.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Width.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Width.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetValue(CSize*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation size. If this method fails or underlying COM objects for
Width and Size have not been initialized, szValue contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="szValue">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationSize.GetDefaultValue">
            <summary>
Returns the default values for Width and Height.
</summary>
            <returns>
A CSize object containing default values.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationSize.SetDefaultValue(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to Width and Height
of animation size. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="szDefault">Specifies new default size.</param>
        </member>
        <member name="M:CAnimationSize.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation size object.
</summary>
            <remarks>
The object is constructed with specified values for width, height, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="szDefault">Specifies default size.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationSize.#ctor">
            <summary>
Constructs an animation size object.
</summary>
            <remarks>
The object is constructed with default values for width, height, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationSize.m_cyValue">
            <summary>
The encapsulated animation variable that represents height of animation size.
</summary>
        </member>
        <member name="F:CAnimationSize.m_cxValue">
            <summary>
The encapsulated animation variable that represents width of animation size.
</summary>
        </member>
        <member name="T:CAnimationSize">
            <summary>
Implements the functionality of a size object whose dimensions can be animated.
</summary>
            <remarks>
The CAnimationSize class encapsulates two CAnimationVariable objects and can represent in applications
a size. For example, you can use this class to animate a size of any two dimensional object on the screen (like rectangle, control etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to Width and/or Height.
</remarks>
        </member>
        <member name="M:CAnimationPoint.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to two CAnimationVariable objects
representing the X and Y coordinates.</param>
        </member>
        <member name="M:CAnimationPoint.AddTransition(CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for X and Y coordinates.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for X and Y coordinates.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of coordinates, you can pass NULL.
</remarks>
            <param name="pXTransition">A pointer to transition for X coordinates.</param>
            <param name="pYTransition">A pointer to transition for Y coordinate.</param>
        </member>
        <member name="M:CAnimationPoint.GetY">
            <summary>
Provides access to CAnimationVariable for Y coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Y coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Y coordinate.
</remarks>
        </member>
        <member name="M:CAnimationPoint.GetX">
            <summary>
Provides access to CAnimationVariable for X coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing X coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing X coordinate.
</remarks>
        </member>
        <member name="M:CAnimationPoint.op_Implicit~CPoint">
            <summary>
Converts a CAnimationPoint to a CPoint.
</summary>
            <returns>
Current value of CAnimationPoint as CPoint.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned point will contain default values for X and Y coordinates.
</remarks>
        </member>
        <member name="M:CAnimationPoint.op_Assign(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns ptSrc to CAnimationPoint.
</summary>
            <remarks>
Assigns ptSrc to CAnimationPoint. It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for X and Y coordinates if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="ptSrc">Refers to CPoint or POINT.</param>
        </member>
        <member name="M:CAnimationPoint.GetValue(CPoint*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation point. If this method fails or underlying COM objects for
X and Y coordinates have not been initialized, ptValue contains default
value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="ptValue">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationPoint.GetDefaultValue">
            <summary>
Returns the default values for X and Y coordinates.
</summary>
            <returns>
A point containing default value.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationPoint.SetDefaultValue(tagPOINT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to X and Y
coordinates of animation point. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="ptDefault">Specifies the default point value.</param>
        </member>
        <member name="M:CAnimationPoint.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs CAnimationPoint object.
</summary>
            <remarks>
Constructs CAnimationPoint object with specified properties.
</remarks>
            <param name="ptDefault">Specifies default point coordinates.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationPoint.#ctor">
            <summary>
Constructs CAnimationPoint object.
</summary>
            <remarks>
Constructs CAnimationPoint object with default properties: default point coordinates, Group ID and Object ID are set to 0.
</remarks>
        </member>
        <member name="F:CAnimationPoint.m_yValue">
            <summary>
The encapsulated animation variable that represents Y coordinate of animation point.
</summary>
        </member>
        <member name="F:CAnimationPoint.m_xValue">
            <summary>
The encapsulated animation variable that represents X coordinate of animation point.
</summary>
        </member>
        <member name="T:CAnimationPoint">
            <summary>
Implements the functionality of a point whose coordinates can be animated.
</summary>
            <remarks>
The CAnimationPoint class encapsulates two CAnimationVariable objects and can represent in applications
a point. For example, you can use this class to animate a position of any object on the screen (like text string, circle, point etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to X and/or Y coordinates.
</remarks>
        </member>
        <member name="M:CAnimationValue.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variable into a list.
</summary>
            <param name="lst">When the function returns, it contains a pointer to CAnimationVariable representing the animated value.</param>
        </member>
        <member name="M:CAnimationValue.AddTransition(CBaseTransition*)">
            <summary>
Adds a transition to be applied to a value.
</summary>
            <remarks>
Call this function to add a transition to internal list of transitions to be applied to an animation variable.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
</remarks>
            <param name="pTransition">A pointer to transition object.</param>
        </member>
        <member name="M:CAnimationValue.GetVariable">
            <summary>
Provides access to encapsulated animation variable.
</summary>
            <returns>
A reference to encapsulated animation variable.
</returns>
            <remarks>
Use this method to access the encapsulated animation variable. From CAnimationVariable you get access
to underlying IUIAnimationVariable object, whose pointer can be NULL if animation variable has not been created.
</remarks>
        </member>
        <member name="M:CAnimationValue.op_Assign(System.Int32)">
            <summary>
Assigns an INT32 value to CAnimationValue.
</summary>
            <remarks>
Assigns an INT32 value to CAnimationValue. This value is set as a default value for encapsulated animation variable.
If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="nVal">Specifies the value to be assigned to Animation Value.</param>
        </member>
        <member name="M:CAnimationValue.op_Assign(System.Double)">
            <summary>
Assigns a DOUBLE value to CAnimationValue.
</summary>
            <remarks>
Assigns a DOUBLE value to CAnimationValue. This value is set as a default value for encapsulated animation variable.
If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="dblVal">Specifies the value to be assigned to Animation Value.</param>
        </member>
        <member name="M:CAnimationValue.op_Implicit~System.Int32">
            <summary>
Provides conversion between CAnimationValue and INT32.
</summary>
            <returns>
Current value of Animation Value as integer.
</returns>
            <remarks>
Provides conversion between CAnimationValue and INT32. This method internally calls GetValue and doesn't check for
errors. If GetValue fails, the returned value will contain a default value previously set in constructor or with SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationValue.op_Implicit~System.Double">
            <summary>
Provides conversion between CAnimationValue and DOUBLE.
</summary>
            <returns>
Current value of Animation Value.
</returns>
            <remarks>
Provides conversion between CAnimationValue and DOUBLE. This method internally calls GetValue and doesn't check for
errors. If GetValue fails, the returned value will contain a default value previously set in constructor or with SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationValue.GetValue(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the current value.
</summary>
            <returns>
TRUE if the current value was retrieved successfully; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value. This implementation calls the encapsulated COM object, and if
the call fails, this method returns the default value that was previously set in constructor or with SetDefaultValue.
</remarks>
            <param name="nValue">Output. When the function returns it contains a current value of animation variable.</param>
        </member>
        <member name="M:CAnimationValue.GetValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the current value.
</summary>
            <returns>
TRUE if the current value was retrieved successfully; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value. This implementation calls the encapsulated COM object, and if
the call fails, this method returns the default value that was previously set in constructor or with SetDefaultValue.
</remarks>
            <param name="dblValue">Output. When the function returns it contains a current value of animation variable.</param>
        </member>
        <member name="M:CAnimationValue.SetDefaultValue(System.Double)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this method to set a default value. A default value is returned to application when animation has not been started
and/or underlying COM object has not been created. If the underlying COM object encapsulated in CAnimationVarible
was already created, this method recreates it, therefore you might need to call EnableValueChanged/EnableIntegerValueChanged
methods again.
</remarks>
            <param name="dblDefaultValue">Specifies the default value.</param>
        </member>
        <member name="M:CAnimationValue.#ctor(System.Double,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs a CAnimationValue object.
</summary>
            <remarks>
Constructs CAnimationValue object with specified properties.
</remarks>
            <param name="dblDefaultValue">Specifies default value.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationValue.#ctor">
            <summary>
Constructs a CAnimationValue object.
</summary>
            <remarks>
Constructs CAnimationValue object with default properties: default value, Group ID and Object ID are set to 0.
</remarks>
        </member>
        <member name="F:CAnimationValue.m_value">
            <summary>
The encapsulated animation variable that represents animation value.
</summary>
        </member>
        <member name="T:CAnimationValue">
            <summary>
Implements the functionality of animation object with one value.
</summary>
            <remarks>
The CAnimationValue class encapsulates a single CAnimationVariable object and can represent in applications
a single animated value. For example, you can use this class for animated transparency (fade effect), angle (to rotate objects),
or for any other case when you need to create an animation depending on a single animated value.
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to the value.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetParentAnimationObjects">
            <summary>
Establishes relationship between animation variables, contained in an animation object, and their container.
</summary>
            <remarks>
This is a helper that can be used to establish relationship between animation variables, contained in an animation object,
and their container. It loops over animation variables and sets a back pointer to a parent animation object
to each animation variable.
In the current implementation the actual relationship is established in CAnimationBaseObject::ApplyTransitions, therefore
back pointers are not set until you call CAnimationGroup::Animate.
Knowing the relationship may be helpful when you processing events and need to get a parent animation object
from CAnimationVariable (use CAnimationVariable::GetParentAnimationObject).
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Collects pointers to contained animation variables.
</summary>
            <remarks>
This is a pure virtual method that must be overridden in a derived class.
An animation object, depending on its type, contains one or more animation variables. For example, CAnimationPoint
contains two variables, for X and Y coordinates respectively. The base class CAnimationBaseObject implements
some generic methods, which act on a list of animation variables: ApplyTransitions, ClearTransitions,
EnableValueChangedEvent, EnableIntegerValueChangedEvent. These methods call GetAnimationVariableList, which is filled
in a derived class with actual animation variables contained in a particular animation object, then loop over the
list and perform necessary actions.
If you create a custom animation object, you must add to lst all animation variables contained in that object.
</remarks>
            <param name="lst">A list that must be filled with animation variables contained in an animation object.</param>
        </member>
        <member name="M:CAnimationBaseObject.ContainsVariable(IUIAnimationVariable*)">
            <summary>
Determines whether an animation object contains a particular animation variable.
</summary>
            <returns>
TRUE if the animation variable is contained in the animation object; otherwise FALSE.
</returns>
            <remarks>
This method can be used to determine whether an animation variable specified by pVariable is contained
within an animation object. An animation object, depending on its type, may contain several animation variables.
For example, CAnimationColor contains three variables, one for each color component (red, green and blue). When a
value of animation variable has changed, Windows Animation API sends ValueChanged or IntegerValueChanged events (if enabled),
and the parameter of this event is a pointer to interface IUIAnimationVariable of animation variable.
This method helps to obtain a pointer to animation from a pointer to contained COM object.
</remarks>
            <param name="pVariable">A pointer to animation variable.</param>
        </member>
        <member name="M:CAnimationBaseObject.EnableIntegerValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Sets up Integer Value Changed event handler.
</summary>
            <remarks>
If the Integer Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationIntegerValueChanged method,
which should be overridden in a CAnimationController-derived class. This method is called every time the animation integer value has changed.
</remarks>
            <param name="pController">A pointer to a parent controller.</param>
            <param name="bEnable">Specifies whether to enable, or disable Integer Value Changed event.</param>
        </member>
        <member name="M:CAnimationBaseObject.EnableValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Sets up Value Changed event handler.
</summary>
            <remarks>
If the Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationValueChanged method,
which should be overridden in a CAnimationController-derived class. This method is called every time the animation value has changed.
</remarks>
            <param name="pController">A pointer to a parent controller.</param>
            <param name="bEnable">Specifies whether to enable, or disable Value Changed event.</param>
        </member>
        <member name="M:CAnimationBaseObject.ClearTransitions(System.Int32)">
            <summary>
Removes all related transitions.
</summary>
            <remarks>
Removes all related transitions and destroys them if bAutodestroy or m_bAutodestroyTransitions flag is TRUE.
Transitions should be destroyed automatically only if they are not allocated on the stack.
If the above flags are FALSE, transitions are just removed from the internal list of related transitions.
</remarks>
            <param name="bAutodestroy">Specifies whether to destroy transition objects automatically, or just remove them from the related list.</param>
        </member>
        <member name="M:CAnimationBaseObject.ApplyTransitions(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds transitions to storyboard with encapsulated animation variable.
</summary>
            <returns>
TRUE if transitions were added successfully.
</returns>
            <remarks>
Adds related transitions, that have been added with AddTransition (overloaded methods in derived classes), to storyboard.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDependOnKeyframes">With FALSE this method adds only those transitions that do not depend on keyframes.</param>
        </member>
        <member name="M:CAnimationBaseObject.GetAutodestroyTransitions">
            <summary>
Tells whether related transition are destroyed automatically.
</summary>
            <returns>
If TRUE, related transitions are destroyed automatically; if FALSE, transition objects should be deallocated by calling application.
</returns>
            <remarks>
By default this flag is TRUE. Set this flag only if you allocated transition on the stack and/or transitions should be deallocated by
the calling application.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetAutodestroyTransitions(System.Int32)">
            <summary>
Sets a flag that orders to automatically destroy transitions.
</summary>
            <remarks>
Set this flag only if you allocated transition objects using operator new. If for some reason transition
objects are allocated on the stack, the auto destroy flag should be FALSE. By default this flag is TRUE.
</remarks>
            <param name="bValue">Specifies the auto destroy flag.</param>
        </member>
        <member name="M:CAnimationBaseObject.GetUserData">
            <summary>
Returns user defined data.
</summary>
            <returns>
A value of custom data.
</returns>
            <remarks>
Call this method to retrieve the custom data at runtime. The returned value will be 0 if it was not explicitly initialized in constructor or with SetUserData.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetGroupID">
            <summary>
Returns current Group ID.
</summary>
            <returns>
Current Group ID.
</returns>
            <remarks>
Use this method to retrieve Group ID. It's 0 if Group ID has not been set explicitly in constructor or with SetID.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetObjectID">
            <summary>
Returns current Object ID.
</summary>
            <returns>
Current Object ID.
</returns>
            <remarks>
Use this method to retrieve Object ID. It's 0 if Object ID has not been set explicitly in constructor or with SetID.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.DetachFromController">
            <summary>
Detaches an animation object from parent animation controller.
</summary>
            <remarks>
This method is used internally.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetUserData(System.UInt64)">
            <summary>
Sets user-defined data.
</summary>
            <remarks>
Use this method to associate a custom data with an animation object. This data may be retrieved later at runtime by GetUserData.
</remarks>
            <param name="dwUserData">Specifies the custom data.</param>
        </member>
        <member name="M:CAnimationBaseObject.SetID(System.UInt32,System.UInt32)">
            <summary>
Sets new IDs.
</summary>
            <remarks>
Allows to change Object ID and Group ID. If the new Group ID differs from the current ID, an animation object
is moved to another group (a new group will be created, if necessary).
</remarks>
            <param name="nObjectID">Specifies new Object ID.</param>
            <param name="nGroupID">Specifies new Group ID.</param>
        </member>
        <member name="M:CAnimationBaseObject.CreateTransitions">
            <summary>
Creates transitions associated with an animation object.
</summary>
            <returns>
TRUE if transitions were created successfully; otherwise FALSE.
</returns>
            <remarks>
Loops over list of animation variables encapsulated in a derived animation object and creates transitions
associated with each animation variable.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.Dispose">
            <summary>
The destructor. Called when an animation object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationBaseObject.#ctor(System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation object.
</summary>
            <remarks>
Constructs an animation object with specified Object ID and Group ID.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">User-defined data, which can be associated with animation object and retrieved later at runtime.</param>
        </member>
        <member name="M:CAnimationBaseObject.#ctor">
            <summary>
Constructs an animation object.
</summary>
            <remarks>
Constructs an animation objects and assigns default Object ID (0) and Group ID (0).
</remarks>
        </member>
        <member name="F:CAnimationBaseObject.m_pParentController">
            <summary>
A pointer to the parent animation controller.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_bAutodestroyTransitions">
            <summary>
Specifies whether related transitions should be automatically destroyed.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_dwUserData">
            <summary>
Stores user-defined data.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_nObjectID">
            <summary>
Specifes the Object ID of the animation object.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_nGroupID">
            <summary>
Specifies the Group ID of the animation object.
</summary>
        </member>
        <member name="T:CAnimationBaseObject">
            <summary>
The base class for all animation objects.
</summary>
            <remarks>
This class implements basic methods for all animation objects. An animation object can represent a value, point,
size, rectangle or color in an application, as well as any custom entity. Animation objects are stored in animation groups
(see CAnimationGroup). Each group can be animated separately and can be treated as an analogue of storyboard.
An animation object encapsulates one or more animation variables (see CAnimationVariable), depending on its logical
representation. For example, CAnimationRect contains four animation variables - one variable for each side of rectangle.
Each animation object class exposes overloaded AddTransition method, which should be used to apply transitions to
encapsulated animation variables.
An animation object can be identified by Object ID (optionally) and by Group ID. A Group ID is necessary in order
to place an animation object to correct group, but if a Group ID is not specified, an object is placed in the default group with ID 0.
If you call SetID with different GroupID, an animation object will be moved to another group (a new group is created if necessary).
</remarks>
        </member>
        <member name="F:CAnimationVariable.m_bAutodestroyTransitions">
            <summary>
Specifies whether related transition objects should be deleted.
</summary>
            <remarks>
Set this value to TRUE to force deletion of transition objects when they are being removed from the internal list
of transitions. If this value is FALSE the transitions should be deleted by calling application.
The list of transitions is always cleared after an animation has been scheduled. The default value is FALSE.
</remarks>
        </member>
        <member name="M:CAnimationVariable.GetDefaultValue">
            <summary>
Returns default value.
</summary>
            <returns>
The default value.
</returns>
            <remarks>
Use this function to obtain default value of animation variable. The default value can be set in constructor or by
SetDefaultValue method.
</remarks>
        </member>
        <member name="M:CAnimationVariable.EnableIntegerValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Enables or disables the IntegerValueChanged event.
</summary>
            <remarks>
When ValueChanged event is enabled, the framework calls virtual method CAnimationController::OnAnimationIntegerValueChanged.
You need to override it in a class derived from CAnimationController in order to process this event. This method is called every time
the integer value of animation variable is changed.
</remarks>
            <param name="pController">A pointer to parent controller.</param>
            <param name="bEnable">TRUE - enable event, FALSE - disable event.</param>
        </member>
        <member name="M:CAnimationVariable.EnableValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Enables or disables the ValueChanged event.
</summary>
            <remarks>
When ValueChanged event is enabled, the framework calls virtual method CAnimationController::OnAnimationValueChanged.
You need to override it in a class derived from CAnimationController in order to process this event. This method is called every time
the value of animation variable is changed.
</remarks>
            <param name="pController">A pointer to parent controller.</param>
            <param name="bEnable">TRUE - enable event, FALSE - disable event.</param>
        </member>
        <member name="M:CAnimationVariable.ApplyTransitions(CAnimationController*,IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds transitions from the internal list to storyboard.
</summary>
            <remarks>
This method adds transitions from the internal list to storyboard. It's called from the
top level code several times to add transitions that do not depend on keyframes and add
transitions that depend on keyframes. If the underlying animation variable
COM object has not been created, this method creates it at this stage.
</remarks>
            <param name="pController">A pointer to parent animation controller.</param>
            <param name="pStoryboard">A pointer to storyboard.</param>
            <param name="bDependOnKeyframes">TRUE, if this method should add transitions that depend on keyframes.</param>
        </member>
        <member name="M:CAnimationVariable.ClearTransitions(System.Int32)">
            <summary>
Clears transitions.
</summary>
            <remarks>
This method removes all transitions from the internal list of transitions. If bAutodestroy is TRUE, or
m_bAutodestroyTransitions is TRUE, then transitions are deleted. Otherwise the caller should deallocate
the transition objects.
</remarks>
            <param name="bAutodestroy">Specifies whether this method should delete transition objects.</param>
        </member>
        <member name="M:CAnimationVariable.AddTransition(CBaseTransition*)">
            <summary>
Adds a transition.
</summary>
            <remarks>
This method is called to add a transition to the internal list of transitions to be applied to the animation variable.
This list should be cleared when an animation has been scheduled.
</remarks>
            <param name="pTransition">A pointer to a transition to add.</param>
        </member>
        <member name="M:CAnimationVariable.GetValue(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the current value of animation variable.
</summary>
            <returns>
S_OK if the value was obtained successfully, or underlying animation variable has not been created. Otherwise
HRESULT error code.
</returns>
            <remarks>
This method can be called to retrieve the current value of animation variable. If the underlying COM object
has not been created, dblValue will contain a default value, when the function returns.
</remarks>
            <param name="nValue">The current value of the animation variable.</param>
        </member>
        <member name="M:CAnimationVariable.GetValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the current value of animation variable.
</summary>
            <returns>
S_OK if the value was obtained successfully, or underlying animation variable has not been created. Otherwise
HRESULT error code.
</returns>
            <remarks>
This method can be called to retrieve the current value of animation variable. If the underlying COM object
has not been created, dblValue will contain a default value, when the function returns.
</remarks>
            <param name="dblValue">The current value of the animation variable.</param>
        </member>
        <member name="M:CAnimationVariable.CreateTransitions(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Creates all transitions to be applied to this animation variable.
</summary>
            <returns>
TRUE if transitions were created successfully; otherwise FALSE.
</returns>
            <remarks>
This method is called by the framework when it needs to create transitions that have been added
to the variable's internal list of transitions.
</remarks>
            <param name="pLibrary">A pointer to transition library.</param>
            <param name="pFactory">A pointer to transition factory.</param>
        </member>
        <member name="M:CAnimationVariable.Create(IUIAnimationManager*)">
            <summary>
Creates the underlying animation variable COM object.
</summary>
            <returns>
TRUE if the animation variable was successfully created; otherwise FALSE.
</returns>
            <remarks>
This method creates the underlying animation variable COM object and sets its default value.
</remarks>
            <param name="pManager">A pointer to animation manager.</param>
        </member>
        <member name="M:CAnimationVariable.SetDefaultValue(System.Double)">
            <summary>
Sets default value and releases IUIAnimationVariable COM object.
</summary>
            <remarks>
Use this method to reset the default value. This method releases the internal IUIAnimationVariable COM object,
therefore when animation variable is recreated, the underlying COM object gets the new default value.
The default value is returned by GetValue if the COM object representing the animation variable is not created,
or if the variable has not been animated.
</remarks>
            <param name="dblDefaultValue">Specifies the new default value.</param>
        </member>
        <member name="M:CAnimationVariable.GetVariable">
            <summary>
Returns a pointer to IUIAnimationVariable COM object.
</summary>
            <returns>
A valid pointer to IUIAnimationVariable COM object, or NULL if animation variable was not created, or can't be created.
</returns>
            <remarks>
Use this function to access the underlying IUIAnimationVariable COM object and call its methods directly if needed.
</remarks>
        </member>
        <member name="M:CAnimationVariable.GetParentAnimationObject">
            <summary>
Returns the parent animation object.
</summary>
            <returns>
A pointer to parent animation object, if relationship was established, otherwise NULL.
</returns>
            <remarks>
This method can be called to retrieve a pointer to a parent animation object (a container).
</remarks>
        </member>
        <member name="M:CAnimationVariable.Dispose">
            <summary>
The destructor. Called when a CAnimationVariable object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationVariable.#ctor(System.Double)">
            <summary>
Constructs an animation variable object.
</summary>
            <remarks>
Constructs an animation variable object and sets its default value. A default value is used when
a variable is not animated, or can't be animated.
</remarks>
            <param name="dblDefaultValue">Specifies the default value.</param>
        </member>
        <member name="M:CAnimationVariable.SetParentAnimationObject(CAnimationBaseObject*)">
            <summary>
Sets the relationship between an animation variable and an animation object.
</summary>
            <remarks>
This method is called internally to establish one-to-one relationship between an animation variable and an animation object that encapsulates it.
</remarks>
            <param name="pParentObject">A pointer to an animation object that contains this variable.</param>
        </member>
        <member name="F:CAnimationVariable.m_pParentObject">
            <summary>
A pointer to an animation object that encapsulates this animation variable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_lstTransitions">
            <summary>
Contains a list of transitions that animate this animation variable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_dblDefaultValue">
            <summary>
Specifies the default value, which is propagated to IUIAnimationVariable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_variable">
            <summary>
Stores a pointer to IUIAnimationVariable COM object. NULL if the COM object has not been created yet, or if creation failed.
</summary>
        </member>
        <member name="T:CAnimationVariable">
            <summary>
Represents an animation variable.
</summary>
            <remarks>
The CAnimationVariable class encapsulates IUIAnimationVariable COM object. It also holds a list of transitions
to be applied to the animation variable in a storyboard. CAnimationVariable objects are embedded to
animation objects, which can represent in an application an animated value, point, size, color and rectangle.
</remarks>
        </member>
        <member name="M:CKeyFrame.AddToStoryboardAtOffset(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard at offset.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This function is called by the framework to add a keyframe to storyboard at offset.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add a keyframe this keyframe depend on recursively.</param>
        </member>
        <member name="M:CKeyFrame.AddToStoryboardAfterTransition(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard after transition.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This function is called by the framework to add a keyframe to storyboard after transition.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add a transition recursively.</param>
        </member>
        <member name="M:CKeyFrame.AddToStoryboard(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to a storyboard.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This method adds a keyframe to storyboard. If it depends on other keyframe or transition and bDeepAdd is TRUE,
this method tries to add them recursively.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add keyframe or transition recursively.</param>
        </member>
        <member name="M:CKeyFrame.GetOffset">
            <summary>
Returns an offset from other keyframe.
</summary>
            <returns>
An offset in seconds from other keyframe.
</returns>
            <remarks>
This method should be called to determine an offset in seconds from other keyframe.
</remarks>
        </member>
        <member name="M:CKeyFrame.GetExistingKeyframe">
            <summary>
Returns a pointer to a keyframe this keyframe depends on.
</summary>
            <returns>
A valid pointer to keyframe, or NULL if this keyframe does not depend on other keyframe.
</returns>
            <remarks>
This is an accessor to a keyframe this keyframe depends on.
</remarks>
        </member>
        <member name="M:CKeyFrame.GetTransition">
            <summary>
Returns a pointer to a transition this keyframe depends on.
</summary>
            <returns>
A valid pointer to transition, or NULL if this keyframe does not depend on transition.
</returns>
            <remarks>
This is an accessor to a transition this keyframe depends on.
</remarks>
        </member>
        <member name="M:CKeyFrame.#ctor(CBaseKeyFrame*,System.Double)">
            <summary>
Constructs a keyframe that depends on other keyframe.
</summary>
            <remarks>
The constructed keyframe will represent a moment in time within a storyboard, which has a specified offset from pKeyframe.
</remarks>
            <param name="pKeyframe">A pointer to keyframe.</param>
            <param name="offset">Offset, in seconds, from keyframe specified by pKeyframe.</param>
        </member>
        <member name="M:CKeyFrame.#ctor(CBaseTransition*)">
            <summary>
Constructs a keyframe that depends on a transition.
</summary>
            <remarks>
The constructed keyframe will represent a moment in time within a storyboard when the specified transition ends.
</remarks>
            <param name="pTransition">A pointer to a transition.</param>
        </member>
        <member name="F:CKeyFrame.m_pExistingKeyFrame">
            <summary>
Stores a pointer to an existing keframe. This keyframe is added to storyboard with m_offset to the existing keyframe.
</summary>
        </member>
        <member name="F:CKeyFrame.m_offset">
            <summary>
Specifies offset of this keyframe from a keyframe stored in m_pExistingKeyFrame.
</summary>
        </member>
        <member name="F:CKeyFrame.m_pTransition">
            <summary>
Stores a pointer to transtion that begins at this keyframe.
</summary>
        </member>
        <member name="T:CKeyFrame">
            <summary>
Represents an animation keyframe.
</summary>
            <remarks>
This class implements an animation keyframe. A keyframe represents a moment in time within a
storyboard and can be used to specify the start and end times of transitions.
A keyframe may be based on other keyframe and have an offset (in seconds) from it, or may be based on a transition and
represent a moment in time when this transition ends.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.AddToStoryboard(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard.
</summary>
            <returns>
TRUE if keyframe was added to storyboard successfully; otherwise FALSE.
</returns>
            <remarks>
This method is called to add a keyframe to storyboard.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">If this parameter is TRUE and the keyframe being added depends on some other keyframe or transition, this method tries
to add this keyframe or transition to storyboard first.</param>
        </member>
        <member name="M:CBaseKeyFrame.IsKeyframeAtOffset">
            <summary>
Specifies whether the keyframe should be added to storyboard at offset, or after transition.
</summary>
            <returns>
TRUE if the keyframe should be added to storyboard at some specified offset.
FALSE if the keyframe should be added to storyboard after some transition.
</returns>
            <remarks>
Specifies whether the keyframe should be added to storyboard at offset.
The offset or transition must be specified in a derived class.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.IsAdded">
            <summary>
Tells whether a keyframe has been added to storyboard.
</summary>
            <returns>
TRUE if a keyframe is added to a storyboard; otehrwise FALSE.
</returns>
            <remarks>
In the base class IsAdded always returns TRUE, but it's overridden in derived classes.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.GetAnimationKeyframe">
            <summary>
Returns the underlying keyframe value.
</summary>
            <returns>
A current keyframe. The default value is UI_ANIMATION_KEYFRAME_STORYBOARD_START.
</returns>
            <remarks>
This is an accessor to the underlying keyframe value.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.#ctor">
            <summary>
Constructs a keyframe object.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_bIsKeyframeAtOffset">
            <summary>
Specifies whether this keyframe should be added to storyboard at an offset from
another existing keyframe, or at the end of some transition.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_bAdded">
            <summary>
Specifies whether this keyframe has been added to a storyboard.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_keyframe">
            <summary>
Represents a Windows Animation API keyframe. When a keyframe is not initialized
it is set to the predefined value UI_ANIMATION_KEYFRAME_STORYBOARD_START.
</summary>
        </member>
        <member name="T:CBaseKeyFrame">
            <summary>
Implements basic functionality of keyframe.
</summary>
            <remarks>
Encapsulates UI_ANIMATION_KEYFRAME variable. Serves as a base class for any keyframe implementation.
A keyframe represents a moment in time within a storyboard and can be used to specify the start and end times of transitions.
There are two types of keyframes - keyframes added to storyboard at the specified offset (in time), or keyframes added
after specified transition. Because durations of some transitions can't be known before animation starts, the actual values
of some keyframes are determined at runtime only.
Because keyframes may depend on transitions, which in their turn depend on keyframes, it's important to prevent
infinite recursions when building keyframe chains.
</remarks>
        </member>
        <member name="F:CBaseTransition.m_bAdded">
            <summary>
Specifies whether a transition has been added to a storyboard.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pRelatedVariable">
            <summary>
A pointer to an animation variable, which is animated with the transition stored in m_transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pEndKeyframe">
            <summary>
Stores a pointer to the keyframe that specifies the end of the transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pStartKeyframe">
            <summary>
Stores a pointer to the keyframe that specifies the beginning of the transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_transition">
            <summary>
Stores a pointer to IUIAnimationTransition. NULL if a COM transition object has not been created.
</summary>
        </member>
        <member name="F:CBaseTransition.m_type">
            <summary>
Stores the transition type.
</summary>
        </member>
        <member name="M:CBaseTransition.AddToStoryboardAtKeyframes(IUIAnimationStoryboard*)">
            <summary>
Adds a transition to a storyboard.
</summary>
            <returns>
TRUE, if transition was successfully added to a storyboard.
</returns>
            <remarks>
Applies the transition to the related variable in the storyboard. If the start keyframe was specified, the transition
begins at that keyframe. If the end keyframe was specified, the transition begins at the start keyframe and
and stops at the end keyframe. If the transition was created with a duration parameter specified, that duration is
overwritten with the duration of time between the start and end keyframes.
If no keyframe was specified, the transition is appended to the transition added most recently to the variable.
</remarks>
            <param name="pStoryboard">A pointer to storyboard, which will animate the related variable.</param>
        </member>
        <member name="M:CBaseTransition.AddToStoryboard(IUIAnimationStoryboard*)">
            <summary>
Adds a transition to a storyboard.
</summary>
            <returns>
TRUE, if transition was successfully added to a storyboard.
</returns>
            <remarks>
Applies the transition to the related variable in the storyboard.  If this is the first transition
applied to this variable in this storyboard, the transition begins at the start of the storyboard.
Otherwise, the transition is appended to the transition added most recently to the variable.
</remarks>
            <param name="pStoryboard">A pointer to storyboard, which will animate the related variable.</param>
        </member>
        <member name="M:CBaseTransition.GetRelatedVariable">
            <summary>
Returns a pointer to related variable.
</summary>
            <returns>
A valid pointer to animation variable, or NULL if an animation variable has not been set by SetRelatedVariable.
</returns>
            <remarks>
This is an accessor to related animation variable.
</remarks>
        </member>
        <member name="M:CBaseTransition.SetRelatedVariable(CAnimationVariable*)">
            <summary>
Establishes a relationship between animation variable and transition.
</summary>
            <remarks>
Establishes a relationship between animation variable and transition. A transition can be applied only to one variable.
</remarks>
            <param name="pVariable">A pointer to related animation variable.</param>
        </member>
        <member name="M:CBaseTransition.GetEndKeyframe">
            <summary>
Returns start keyframe.
</summary>
            <returns>
A valid pointer to a keyframe, or NULL if a transition should not be inserted between keyframes.
</returns>
            <remarks>
This method can be used to access a keyframe object that was previously set by SetKeyframes.
It's called by top level code when transitions are being added to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.GetStartKeyframe">
            <summary>
Returns start keyframe.
</summary>
            <returns>
A valid pointer to a keyframe, or NULL if a transition should not start after a keyframe.
</returns>
            <remarks>
This method can be used to access a keyframe object that was previously set by SetKeyframes.
It's called by top level code when transitions are being added to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.IsAdded">
            <summary>
Tells whether a transition has been added to a storyboard.
</summary>
            <returns>
Returns TRUE if a transition has been added to a storyboard, otherwise FALSE.
</returns>
            <remarks>
This flag is set internally when the top level code adds transitions to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.SetKeyframes(CBaseKeyFrame*,CBaseKeyFrame*)">
            <summary>
Sets keyframes for a transition.
</summary>
            <remarks>
This method tells the transition to start after specified keyframe and, optionally, if pEnd is not NULL, end
before the specified keyframe.
If the transition was created with a duration parameter specified, that duration is overwritten with the duration of time between the start and end keyframes.
</remarks>
            <param name="pStart">A keyframe that specifies the beginning of the transition. </param>
            <param name="pEnd">A keyframe that specifies the end of the transition.</param>
        </member>
        <member name="M:CBaseTransition.GetTransition">
            <summary>
Returns a pointer to underlying COM transition object.
</summary>
            <returns>
A valid pointer to IUIAnimationTransition or NULL if underlying transition can't be created.
</returns>
            <remarks>
It's an accessor method to underlying COM transition object. It doesn't instantiates the underlying IUIAnimationTransition COM
object if it wasn't created.
</remarks>
        </member>
        <member name="M:CBaseTransition.GetTransition(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Returns a pointer to underlying COM transition object.
</summary>
            <returns>
A valid pointer to IUIAnimationTransition or NULL if underlying transition can't be created.
</returns>
            <remarks>
This method returns a pointer to underlying COM transition object and creates it if necessary.
</remarks>
            <param name="pLibrary">A pointer to transition library, which creates standard transitions. It can be NULL for custom transitions.</param>
            <param name="pFactory">A pointer to transition factory, which creates custom transitions. It can be NULL for standard transitions.</param>
        </member>
        <member name="M:CBaseTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Creates a COM transition.
</summary>
            <returns>
TRUE if a transition COM object was created successfully; otherwise FALSE.
</returns>
            <remarks>
This is a pure virtual function that must be overridden in a derived class.
It's called by the framework to instantiate the underlying COM transition object.
</remarks>
            <param name="pLibrary">A pointer to transition library, which creates standard transitions. It can be NULL for custom transitions.</param>
            <param name="pFactory">A pointer to transition factory, which creates custom transitions. It can be NULL for standard transitions.</param>
        </member>
        <member name="M:CBaseTransition.GetType">
            <summary>
Returns transition type.
</summary>
            <returns>
One of TRANSITION_TYPE enumerated values.
</returns>
            <remarks>
This method can be used to identify a transition object by its type.
The type is set in a constructor in a derived class.
</remarks>
        </member>
        <member name="M:CBaseTransition.Clear">
            <summary>
Releases encapsulated IUIAnimationTransition COM object.
</summary>
            <remarks>
This method should be called from a derived class's Create method in order to prevent
IUITransition interface leak.
</remarks>
        </member>
        <member name="M:CBaseTransition.Dispose">
            <summary>
The destructor. Called when a transition object is being destroyed.
</summary>
        </member>
        <member name="M:CBaseTransition.#ctor">
            <summary>
Constructs a base transtion object.
</summary>
        </member>
        <member name="T:CBaseTransition.TRANSITION_TYPE">
            <summary>
Defines the transition types currently supported by the MFC implementation of Windows Animation API.
</summary>
            <remarks>
A transition type is set in the constructor of specific transition.
For example, CSinusoidalTransitionFromRange sets its type to SINUSOIDAL_FROM_RANGE.
</remarks>
        </member>
        <member name="T:CBaseTransition">
            <summary>
Represents a basic transition.
</summary>
            <remarks>
This class encapsulates IUIAnimationTransition interface and serves as a base class for all transitions.
</remarks>
        </member>
        <member name="M:Mastercam.Database.ToolHolder.BuildHolderDataPackage(tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Mastercam.Database.ToolHolder.Holder)">
            <summary> Takes the data from an unmanaged Mastercam 'tp_holder' structure and loads it
          into the managed 'ToolHolder::Holder' object.
          </summary>
            <param name="mcHolder"> The Mastercam 'tp_holder' struct containing the holder data to transfer.
                        </param>
            <param name="holder">   The managed ToolHolder::Holder to be filled in. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Database.ToolHolder.GetMillHolderFromOperation(System.Int32,Mastercam.Database.ToolHolder.Holder@)">
            <summary> Retrieve the (HST-style) Mill Tool Holder from the specified operation. </summary>
            <param name="opID">   The ID of the operation to read from. </param>
            <param name="holder"> [out] The filled in Holder object. </param>
            <returns> true if a Holder was found in the Operation, else false. </returns>
        </member>
        <member name="M:Mastercam.Database.ToolHolder.Holder.#ctor">
            <summary> Initializes a new instance of a Holder structure. </summary>
        </member>
        <member name="F:Mastercam.Database.ToolHolder.Holder.MaxDiameter">
            <summary> The maximum diameter of the holder. </summary>
        </member>
        <member name="F:Mastercam.Database.ToolHolder.Holder.OverallHeight">
            <summary> Overall height of the holder. </summary>
        </member>
        <member name="F:Mastercam.Database.ToolHolder.Holder.HolderLibName">
            <summary> Name of the holder library. </summary>
        </member>
        <member name="F:Mastercam.Database.ToolHolder.Holder.HolderName">
            <summary> Name of the holder. </summary>
        </member>
        <member name="F:Mastercam.Database.ToolHolder.Holder.HolderSegments">
            <summary> The list of holder segments. </summary>
        </member>
        <member name="F:Mastercam.Database.ToolHolder.Holder.HolderSegmentsCount">
            <summary> The number of segments in the holder. </summary>
        </member>
        <member name="T:Mastercam.Database.ToolHolder.Holder">
            <summary> A (Mill) Holder. </summary>
        </member>
        <member name="F:Mastercam.Database.ToolHolder.HolderSegment.Height">
            <summary> The height of the segment. </summary>
        </member>
        <member name="F:Mastercam.Database.ToolHolder.HolderSegment.DiaLower">
            <summary> The lower diameter of the segment. </summary>
        </member>
        <member name="F:Mastercam.Database.ToolHolder.HolderSegment.DiaUpper">
            <summary> The upper diameter of the segment. </summary>
        </member>
        <member name="T:Mastercam.Database.ToolHolder.HolderSegment">
            <summary> A HolderSegment (a triplet of double values). </summary>
        </member>
        <member name="M:Mastercam.Database.ToolHolder.#ctor">
            <summary> Private Constructor.
          So as not to allow anyone to create an instance of this class.
          </summary>
        </member>
        <member name="T:Mastercam.Database.ToolHolder">
            <summary>
This class handles (HST style) Tool Holder object interaction between
the NET-Hook operation objects and Mastercam operations.
</summary>
        </member>
        <member name="M:Mastercam.IO.PromptManager.WriteDouble(System.Double)">
            <summary> This method writes a double value to the Mastercam prompt display area. </summary>
            <param name="DisplayValue"> The double value to output to the prompt display. </param>
        </member>
        <member name="M:Mastercam.IO.PromptManager.WriteInteger(System.Int32)">
            <summary> This method writes an integer value to the Mastercam prompt display area. </summary>
            <param name="DisplayValue"> The integer to output to the prompt display. </param>
        </member>
        <member name="M:Mastercam.IO.PromptManager.WriteString(System.String)">
            <summary> This method writes a string to the Mastercam prompt display area. </summary>
            <param name="DisplayText"> The text string to output to the prompt display. </param>
        </member>
        <member name="M:Mastercam.IO.PromptManager.Clear">
            <summary> This method clears the Mastercam prompt display area. </summary>
        </member>
        <member name="M:Mastercam.IO.PromptManager.#ctor">
            <summary> Initializes a new instance of the PromptManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.IO.PromptManager">
            <summary> This class is used for adding and removing information to the Mastercam prompt display area.
          </summary>
        </member>
        <member name="M:Mastercam.Tools.DrillTool.Commit">
            <summary> This method commits a Drill tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.DrillTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the DrillTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.DrillTool.#ctor">
            <summary> Initializes a new instance of the DrillTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.DrillTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the DrillTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.DrillTool">
            <summary> This class is for modifying and using Drill tools in Mastercam. </summary>
        </member>
        <member name="F:Mastercam.Operations.DrillOperation.CustomParameters">
            <summary> Gets or sets the values of the (10) additional 'custom' parameters. </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillOperation.UseCustomParameters">
            <summary> Gets or sets or set a value indicating if the (10) additional 'custom' parameters
          are to be used.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillOperation.BreakThrough">
            <summary> Gets or sets the additional Break Through distance. </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillOperation.ShiftDistance">
            <summary> Gets or sets the Bore Shift distance. </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillOperation.Dwell">
            <summary> Gets or sets the Dwell time. </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillOperation.ChipBreak">
            <summary> Gets or sets the Chip Break retraction distance. </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillOperation.PeckClearance">
            <summary> Gets or sets the Peck Clearance. </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillOperation.Peck2">
            <summary> Gets or sets the Subsequent Peck increment. </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillOperation.Peck1">
            <summary> Gets or sets the First Peck increment. </summary>
        </member>
        <member name="M:Mastercam.Operations.DrillOperation.Commit(System.Boolean)">
            <summary> This method commits the current Drill operation to the Mastercam database. </summary>
            <param name="includePoints"> true to update any points assigned to the operation. </param>
            <remarks> If you know that you've not altered the points used by this operation,
		  you may wish to used this &gt;.Commit(false). </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillOperation.Commit">
            <summary> This method commits the current Drill operation to the Mastercam database.
          </summary>
            <remarks> This commit also updates any the points used by this operation.
		   If you know that do not want the points touched during the commit,
		   you may wish to use the .Commit(false) method overload. </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillOperation.#ctor">
            <summary> Initializes a new instance of the DrillOperation class. </summary>
            <remarks> This creates a new drilling toolpath operation with default settings.
          </remarks>
        </member>
        <member name="M:Mastercam.Operations.DrillOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation
                  object.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.DrillOperation.CommitOperation(System.Boolean)">
            <summary> Commits the operation. </summary>
            <param name="includePoints"> true to include, false to exclude touching the points during the commit. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the DrillOperation class. </summary>
            <remarks>  Attempts to retrieve an operation entity with the given ID from the Mastercam
           database and use that to initialize this operation object.
           If no matching operation entity is found in the Mastercam database,
           the object is initialized to default values.
           </remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database.
               </param>
        </member>
        <member name="M:Mastercam.Operations.DrillOperation.LoadDefaults">
            <summary> Loads the default values for a given operation object. </summary>
        </member>
        <member name="T:Mastercam.Operations.DrillOperation">
            <summary> This class is used for working with drilling toolpath operations. </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillCustomParameters.default(System.Int32)">
            <summary> Gets or sets the individual custom parameter values. </summary>
            <remarks> There are 10 values in the array, accessed as usual - zero-based. </remarks>
        </member>
        <member name="M:Mastercam.Operations.DrillCustomParameters.#ctor">
            <summary> Initializes a new instance of the DrillCustomParameters class. </summary>
        </member>
        <member name="T:Mastercam.Operations.DrillCustomParameters">
            <summary> Drill Cycle operation custom parameter values. </summary>
        </member>
        <member name="M:Mastercam.Surfaces.PiecewisePolynomialSurface.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given surface geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The surface geometry entity to use as defaults for this
                   surface geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Surfaces.PiecewisePolynomialSurface.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a surface geometry entity to the Mastercam database. </summary>
            <param name="Ent"> [in,out] The surface geometry entity to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Surfaces.PiecewisePolynomialSurface.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the PiecewisePolynomialSurface class. </summary>
            <remarks> Attempts to retrieve a surface geometry entity with the given ID from the Mastercam
          database and use that to initialize this surface geometry object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the surface geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="T:Mastercam.Surfaces.PiecewisePolynomialSurface">
            <summary> This class is used for working with piecewise polynomial surfaces within Mastercam.
          </summary>
            <remarks> Due to the complex nature of working with piecewise polynomial surfaces, the internal data
          of a piecewise polynomial surface is unavailable in this version of the NET-Hook API.
          </remarks>
        </member>
        <member name="M:Mastercam.IO.FileManager.LibrarySaveAs(System.String,System.Boolean)">
            <summary> Performs a Save As for a library file. </summary>
            <param name="FilePath">               The name and path of the library file to save.
                                      </param>
            <param name="SaveWithThumbnailImage"> If true, then a thumbnail image will be saved along
                                      with the file.
                                      </param>
            <returns> True if the save was successful, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.LibrarySave(System.Boolean)">
            <summary> Performs a Save on a library file. </summary>
            <param name="SaveWithThumbnailImage"> If true, then a thumbnail image will be saved along
                                      with the file.
                                      </param>
            <returns> True if the save was successful, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.IsLibraryFile(System.String)">
            <summary> Tests a file to see if it's a library file or not. </summary>
            <param name="FilePath"> The name and path of the file to check as to whether or
                        not it's a library file.
                        </param>
            <returns> True if the file is a library file, else false if not. </returns>
        </member>
        <member name="P:Mastercam.IO.FileManager.PartExtension">
            <summary> Gets the Mastercam part file extension based on the user's installed
          version information.
          </summary>
        </member>
        <member name="P:Mastercam.IO.FileManager.CurrentFileName">
            <summary> Gets or sets the currently opened file's name.
          'get' retrieves the active file name from Mastercam.
          If it is a new (unsaved) file, this will be the "default" name,
          as defined in System-Configuration - Start/Exit page - "Default Mastercam file name",
          and it will just that "name" with no path.
          </summary>
        </member>
        <member name="M:Mastercam.IO.FileManager.RecentFilesListRemove(System.String)">
            <summary> Remove a single file entry from the Recent Open Files List. </summary>
            <param name="filePath"> The (full path) name of the file to remove. </param>
            <returns> True if it succeeds (a match was found and removed), false if it fails. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.RecentFilesListAdd(System.Collections.Generic.List`1{System.String})">
            <summary> Add the list of file entries to the Recent Open Files List. </summary>
            <param name="filePaths"> A list of the (full path) name of the files to add. </param>
        </member>
        <member name="M:Mastercam.IO.FileManager.RecentFilesListAdd(System.String)">
            <summary> Add a file entry to the Recent Open Files List. </summary>
            <param name="filePath"> The (full path) name of the file to add. </param>
        </member>
        <member name="M:Mastercam.IO.FileManager.ClearRecentFilesList">
            <summary> Clears Mastercam's Recent Open Files List. </summary>
        </member>
        <member name="M:Mastercam.IO.FileManager.GetRecentFilesList">
            <summary> Gets the file name entries in the Recent Open Files List. </summary>
            <returns> A list of filename entries from the Recent Open Files List. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.WriteSTL(System.String,System.Int32!System.Runtime.CompilerServices.IsLong,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Writes out a STL file. </summary>
            <param name="filename">       The full path filename of the file to write to. </param>
            <param name="entityID">       Specific entity to output or if '0' to output all, or if '-1' to output only 'selected' entities. </param>
            <param name="tolerance">      The tolerance (0 = use the current system tolerance). </param>
            <param name="ascii">          true to output in ASCII text format, else false for a binary STL. </param>
            <param name="silent">         true to set for no warnings, progress report of message are to presented to the user. </param>
            <param name="useWCS">         true to output the data relative to the WCS, else false for world coordinates. </param>
            <param name="okIfNotVisible"> true to allow if then entity is not on a currently visible level. </param>
            <param name="okIfBlanked">    true to allow if the entity is currently blanked. </param>
            <remarks> A 'true' result from this function does NOT necessarily mean that everything worked OK!</remarks>
            <returns> true if it succeeds (the file was successfully opened), false if it fails. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.PrintDirect">
            <summary> This method prints the active Mastercam view directly, without displaying the
          Mastercam Print dialog.
          </summary>
            <remarks> Note that while the method may return true because the file was sent to the OS
          level to be printed, that does not necessarily mean that the file was
          printed successfully.
          </remarks>
            <returns> True if the view was successfully sent for printing, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.Print">
            <summary> This is used to open the File Print dialog within Mastercam. </summary>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveMCamDataToFile(System.String)">
            <summary> This is used to save the mcam data to a SolidWorks sldprt file.
          </summary>
            <param name="FilePath"> This should be the full, backslash-delimited path of the file
                        you wish to create.
                        </param>
            <returns> True if the file was created successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.Save(System.Boolean)">
            <summary> This is used to save the currently opened file. </summary>
            <param name="SaveWithThumbnailImage"> If true, then a thumbnail image will be saved along
                                      with the file.
                                      </param>
            <returns> True if the file was saved successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.Save">
            <summary> This is used to save the currently opened file. </summary>
            <remarks> The default behavior with this method is to not save a thumbnail image along
           with the file.
           </remarks>
            <returns> True if the file was saved successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveSome(System.String,System.Boolean)">
            <summary> This is used to 'save some' of the currently opened file to a new path and file name.
          </summary>
            <param name="FilePath">               This is the full, backslash-delimited path of the
                                      new Mastercam file you wish to create.
                                      If this is an empty string the standard Save As dialog will be displayed,
                                      allowing the user to select the output of the SaveSome operation.
                                      </param>
            <param name="SaveWithThumbnailImage"> If true, then a thumbnail image will be saved along
                                      with the file.
                                      </param>
            <returns> True if the new file was created successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveAs(System.String,System.Boolean)">
            <summary> This is used to save the currently opened file to a new path and file name.
          </summary>
            <param name="FilePath">               This is the full, backslash-delimited path of the
                                      new Mastercam file you wish to create.
                                      </param>
            <param name="SaveWithThumbnailImage"> If true, then a thumbnail image will be saved along
                                      with the file.
                                      </param>
            <returns> True if the new file was created successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveAs(System.String)">
            <summary> This is used to save the currently opened file to a new path and file name.
          </summary>
            <remarks> The default behavior with this method is to not save a thumbnail image along
          with the file.
          </remarks>
            <param name="FilePath"> This is the full, backslash-delimited path of the new
                        Mastercam file you wish to create.
                        </param>
            <returns> True if the new file was created successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveAsDefaultName(System.String)">
            <summary> This is used to prompt the user to save the currently opened file to a new name and path.
          </summary>
            <param name="FilePath"> This is the full, backslash-delimited path of 'default' name
                        you want to appear on the SaveAs dialog.
                        </param>
            <returns> The full path and file name of the new file if the user successfully chose one,
          else a null value if not.
          </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveAs">
            <summary> This is used to prompt the user to save the currently opened file to a new name and path. </summary>
            <returns> The full path and file name of the new file if the user successfully chose one and a null value if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveGraphicScreenToBitmap(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Saves a snapshot of the graphics screen to a bitmap file. </summary>
            <param name="FilePath">     The full path of the bitmap file you wish to create. </param>
            <param name="Color">        If true, produce a color image, else just black on white. </param>
            <param name="showViewAxes"> true to show, false to hide the view axes. </param>
            <param name="showWCSAxes">  true to show, false to hide the WCS axes. </param>
            <returns>True if the bitmap file was created successfully and false if not.</returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveGraphicScreenToBitmap(System.String,System.Boolean)">
            <summary> This is used to save the graphics view of the currently opened file to a (full size) bitmap file. </summary>
            <param name="FilePath"> The full path of the bitmap file you wish to create. </param>
            <param name="Color">    If true, produce a color image, else just black on white. </param>
            <returns>True if the bitmap file was created successfully and false if not.</returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveToBitmap(System.String,System.Boolean)">
            <summary> This is used to save the graphics view of the currently opened file to a bitmap file.
          </summary>
            <param name="FilePath">  This should be the full, backslash-delimited path of the
                         bitmap file you wish to create.
                         </param>
            <param name="ThumbNail"> True = Generate a 256x256 "thumbnail" bitmap, else capture a
                         full-size graphics screen image.
                         </param>
            <returns> True if the bitmap file was created successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SaveToBitmap(System.String)">
            <summary> This is used to save the graphics view of the currently opened file to a bitmap file.
          </summary>
            <param name="FilePath"> This should be the full, backslash-delimited path of the bitmap file
                        you wish to create.
                        </param>
            <returns> True if the bitmap file was created successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.Open(System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary> This is used to close the current file and open a new file within Mastercam.
          </summary>
            <param name="PromptUserToSaveCurrentFile"> If true, then the user will be prompted as to
                                           whether they want to save the current file
                                           before opening the new one.
                                           </param>
            <param name="FilePath">                    [in,out] This should be the full, backslash-
                                           delimited path of the file to open.
                                           </param>
            <param name="MergeWithCurrent">            If true, then instead of opening the new file
                                           outright it will instead have it's contents
                                           merged with the currently open file.
                                           </param>
            <param name="OpenAsText">                  If true, then instead of opening the specified
                                           file as a Mastercam file it will be opened with
                                           the Mastercam editor as a text-based file.
                                           </param>
            <returns> True if the current file was closed and the new file was opened successfully ,
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.Open(System.Boolean,System.String,System.Boolean)">
            <summary> This is used to close the current file and open a new file within Mastercam.
          </summary>
            <param name="PromptUserToSaveCurrentFile"> If true, then the user will be prompted as to
                                           whether they want to save the current file
                                           before opening the new one.
                                           </param>
            <param name="FilePath">                    [in,out] This should be the full, backslash-
                                           delimited path of the file to open.
                                           </param>
            <param name="MergeWithCurrent">            If true, then instead of opening the new file
                                           outright it will instead have it's contents
                                           merged with the currently open file.
                                           </param>
            <returns> True if the current file was closed and the new file was opened successfully,
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.Open(System.Boolean,System.String)">
            <summary> This is used to close the current file and open a new file within Mastercam.
          </summary>
            <param name="PromptUserToSaveCurrentFile"> If true, then the user will be prompted as to
                                           whether they want to save the current file
                                           before opening the new one.
                                           </param>
            <param name="FilePath">                    [in,out] This should be the full, backslash-
                                           delimited path of the file to open.
                                           </param>
            <returns> True if the current file was closed and the new file was opened successfully.
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.Open(System.String)">
            <summary> This is used to close the current file and open a new file within Mastercam.
          </summary>
            <remarks> By default this method will not prompt the user to save their current file nor
          will it save the current part file before opening the new one.
          </remarks>
            <param name="FilePath"> This should be the full, backslash-delimited path of the file to open.
                        </param>
            <returns> True if the current file was closed and the new file was opened successfully and
          false if not.
          </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.Open(System.Boolean)">
            <summary> This is used to prompt the user to select a file to open within Mastercam.
          </summary>
            <param name="getFileNameOnly"> true to get file name only 
                               The file is NOT opened, just the selected filename is returned. </param>
            <returns> nullptr if it fails, else the ful path of the file that was selected. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.Open">
            <summary> This is used to prompt the user to select a file to open within Mastercam.
          </summary>
            <returns> The full path of the opened file if the user successfully chose a file to open and
          a null value if not.
          </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.New(System.Boolean,System.Boolean)">
            <summary> This is used to close the current file and open a new file within Mastercam.
          </summary>
            <param name="PromptUserToSaveCurrentFile"> If this is set to true and the current file has
                                           unsaved changes in it, the user will be
                                           prompted to save off those changes before the
                                           new file is created.
                                           </param>
            <param name="OnlyResetToolpaths">          If true, then instead of actually creating a
                                           brand new file, the current file will just be
                                           re-initialized.
                                           </param>
            <returns> True if the current file was closed and the new file was opened successfully,
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.New(System.Boolean)">
            <summary> This is used to close the current file and open a new file within Mastercam.
          </summary>
            <param name="PromptUserToSaveCurrentFile"> If this is set to true and the current file has
                                           unsaved changes in it, the user will be
                                           prompted to save off those changes before the
                                           new file is created.
                                           </param>
            <returns> True if the current file was closed and the new file was opened successfully,
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.New">
            <summary> This is used to close the current file and open a new file within Mastercam. </summary>
            <remarks> By default, this method will not prompt the user to save their current file,
           nor will it save the current file before closing it.
          </remarks>
            <returns> True if the current file was closed and the new file was opened successfully,
          else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.SetFileDescriptor(System.String)">
            <summary> Sets the file descriptor. </summary>
            <remarks> This does not save the change "to disk". 
		  You make this change permanent using an API save method such as
		  these, or just save the file via Mastercam's user interface. 
		  Mastercam.IO.FileManager.Save();
		  Mastercam.IO.FileManager.SaveAs(...); </remarks>
            <param name="descriptor"> The new file descriptor text. </param>
        </member>
        <member name="M:Mastercam.IO.FileManager.GetFileDescriptor">
            <summary> Gets the file descriptor. </summary>
            <returns> The file descriptor text in the active part file. </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.MastercamFileVersion(System.String)">
            <summary> Gets the major version number of a Mastercam type file. </summary>
            <remarks> The returned "major" version number denotes:
          16 = Mastercam X7,
          17 = Mastercam X8,
          18 = Mastercam X9,
          19 = Mastercam 2017,
          20 = Mastercam 2018,
          Etc. </remarks>
            <param name="file"> The full path of the file to be queried. </param>
            <returns> The major version if successful, else 0 if it fails (not a Mastercam file?). </returns>
        </member>
        <member name="M:Mastercam.IO.FileManager.#ctor">
            <summary> Initializes a new instance of the FileManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.IO.FileManager">
            <summary> This class handles file interactions between the NET-Hook and Mastercam. </summary>
        </member>
        <member name="M:Cnc.MeshHelper.CreateCurvesAllMeshEdges(DB_LIST_ENT*,System.Boolean,System.Boolean,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Creates curves on all mesh edges. </summary>
            <param name="meshEptr">		 The mesh eptr. </param>
            <param name="addUndo">		 True to add undo capability, false otherwise. </param>
            <param name="fitArcs">		 True to fit arcs, false otherwise. </param>
            <param name="eptrArray">	 Returned array of curve eptrs. </param>
            <param name="edgeTolerance"> The edge tolerance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:MarkerType">
Marker types
</member>
        <member name="M:gl_display_list.GetNext">
            <summary>	Get the next gl display list item. </summary>
            <returns>	null if it fails, else the next item. </returns>
        </member>
        <member name="M:gl_display_list.GetPrev">
            <summary>	Get the previous gl display list item. </summary>
            <returns>	null if it fails, else the previous item. </returns>
        </member>
        <member name="M:gl_display_list.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="T:GLDisplayListManager">
            <summary>	Make GLDisplayListManager a friend, so the list pointers can be managed (only
			this class can manipulate the list now). </summary>
        </member>
        <member name="T:gl_display_list">
OpenGL Display List Structure
</member>
        <member name="T:gl_surf_prop">
OpenGL Surface Properties Structure
</member>
        <member name="T:sel_grid_struct">
Selection Grid Structure
</member>
        <member name="T:gl_light_prop">
OpenGL Light Property Structure
</member>
        <member name="T:DL_DB_POS">
Display List Database Position
</member>
        <member name="D:float_3d">
@}
</member>
        <member name="T:display_list">
Element in the displaylist (a double linked list) 
</member>
        <member name="T:p_l">
Polyline header
</member>
        <member name="T:pl_surf_pt">
Surface point in polyline 
</member>
        <member name="T:pl_curve_pt">
Curve point in polyline 
</member>
        <member name="T:pl_line_pt">
Line point in polyline 
</member>
        <member name="D:p_3d_float">
@defgroup display_list_types Display List Types
@{ 
</member>
        <member name="M:create_polygon_ents(polygonOp_params_tag*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,DB_LIST_ENT***,std.vector&lt;std.shared_ptr&lt;ent&gt;,std.allocator&lt;std.shared_ptr&lt;ent&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method adds a polygon to the database. </summary>
            <param name="op_params">  Structure storing desired parameters of the polygon. </param>
            <param name="center_pt">  Location of the desired center of the polygon in world coordinates. </param>
            <param name="store_ents"> A boolean indicating whether the polygon should be stored. </param>
            <param name="eptrs">	  An array of pointers indicating the location of the created entities. </param>
            <param name="ents">		  (Optional) the entities if not stored. </param>
            <returns> Returns a short indicating the number of entities created. </returns>
        </member>
        <member name="T:polygonOp_params_tag">
            <summary>Structure used to store information relating to a polygon.</summary>
            <param name="sides">The number of the polygon's sides.</param>
            <param name="radius">The length of the polygon's radius.</param>
            <param name="radius_lock">A boolean indicating whether or not the size of the polygon's radius is fixed.</param>
            <param name="fillet_rad">A boolean indicating whether the polygon will have fillets.</param>
            <param name="start_angle">The rotation of the polygon.</param>
            <param name="meas_corner">A boolean indicates that the radius is measured to the corners if true, to the midpoints if false.</param>
            <param name="surface">Indicates whether a trimmed surface is added to the polygon.</param>
            <param name="center_pt">A boolean indicating whether or not a point will be created at the center.</param>
            <param name="expanded">A boolean indicating whether or not all of the dialog options are being viewed.</param>
        </member>
        <member name="M:SldSelSolidSurfsToTempFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Select some faces and save the surface entity data. </summary>
            <remarks> If enhanced face selection is used, the return value is a status: -1 = okay, 0 = error. </remarks>
            <param name="msg">     Prompt. </param>
            <param name="entMask"> Enhanced face selection entity mask or zero for normal solids selection. </param>
            <returns> Number of faces saved as surfaces or enhanced face selection status. </returns>
        </member>
        <member name="M:SldFacesToTempFile(CncGaf.UtArray&lt;System.Int32,System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CncGaf.UtArray&lt;System.Int32,System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Write solid faces to temporary file. </summary>
            <param name="bodies"> Bodies (all faces) </param>
            <param name="faces">  Faces. </param>
            <returns> Number in temp file. </returns>
        </member>
        <member name="M:sld_toolp_surfs_to_temp_file_whole_or_partial(DB_LIST_ENT*,System.Int32,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Double,System.Boolean*,System.Boolean,System.Boolean*,System.Boolean)">

 @par Purpose: Select some faces and save the surface entity data

 @return			Number of surfs selected

 @param[in]		sld_eptr		pointer to solid
 @param[in]		toolp_id		toolpath id
 @param[in]		chkSurfFlag		allow check surface selecton
 @param[in]		use_vis_test	use visibility test
 @param[out]		n_chksrf		number of check surfaces selected
 @param[out]		n_gougesrf		number of gouge surfaces selected
 @param[in]		perf_toler		prefered tolerance
 @param[out]		trim_failure	true: one or more surfaces failed to trim
 @param[in,out]	active			true/false
 @param[out]		wholeBodySelected	true=the entire solid body was selected (body pick), false=individual faces were selected (face pick)
 @param[in]		addSurfs		true: add surfs to tmp file; false don't add surfs to tmp file


</member>
        <member name="M:sld_convert_tag_to_edges(System.Int32,CncGaf.UtArray&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,SldLoopType)">
            <summary> Convert solid tag's edges to Mastercam wireframe entities. </summary>
            <param name="nTag">			 The solid tag (body, face, or edge). </param>
            <param name="mc_eptrs">		 The Mastercam eptrs created. </param>
            <param name="openEdgesOnly"> Only include open edges (surfaces and sheet bodies). </param>
            <param name="loopType">		 (Optional) include outer, inner, or both types of loop edges (solid body or face). </param>
        </member>
        <member name="M:GetSolidTempFileDataVersion">
            <summary> Get the Solid Temp File Data Version. </summary>
            <returns> The Solid Temp File Data Version. </returns>
        </member>
        <member name="T:SldLoopType">
            <summary> Solid curve all edges - types of loops for which to generate wireframe. </summary>
        </member>
        <member name="T:sldTpSurfInfo">
 *
 * @par Purpose: Helper function used by surf_sel_bits_MM() and surf_sel_bits_c5_MM() (B-08741/B-09168)
 *
 * @return			true if successful
 *
 * @param[in]		sld_eptr		pointer to solid
 * @param[in]		toolp_id		toolpath id
 * @param[in]		use_vis_test	use visibility test
 * @param[out]		*wholeBody,		whole solid body selected
 * @param[out]		*bodyTag,		solid body tag
  *@param[out]		*nChkSrf,		number of check faces
  *@param[out]		*nGougeSrf,		number of gouge faces
 * @param[out]		arr				tp sld face info
 *

</member>
        <member name="M:HideAllTempFileSurfs">

 @par Purpose: Make all faces in temporary solid surface file invisible

 @retirm			number of faces hidden


</member>
        <member name="M:hide_temp_file_surf_by_type(System.Boolean)">

 @par Purpose: Make faces in temporary solid surface file invisible

 @retirm			number of faces hidden

 @param[in]		driveSurfs		hide T- drive surfaces F- check surfaces


</member>
        <member name="M:remove_solid_surf_from_temp_file_set(System.Int16)">

 @par Purpose: Remove set of surfaces from solid surfs temp file

 @param[in]		set_no			set number


</member>
        <member name="M:sld_get_temp_file_pos">

 @par Purpose: Get file position in solid surfs temp file

 @return			file position


</member>
        <member name="M:sld_set_temp_file_pos(System.Int32!System.Runtime.CompilerServices.IsLong)">

 @par Purpose: Set file position in solid surfs temp file

 @param[in]		file_pos		file position


</member>
        <member name="M:sld_temp_file_find_extreme(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose: Find the extremes of ents in solid temp file

 @return			true if successful

 @param[in]		dir				direction vector
 @param[out]		maxz			Max Z in direction
 @param[out]		maxPt			One pt (of possibly many) at max Z
 @param[out]		minz			optional - may be NULL) Min Z in direction
 @param[out]		minPt			optional - may be NULL) One pt at min Z


</member>
        <member name="M:sld_toolp_surfs_to_temp_file_whole_or_partial(DB_LIST_ENT*,System.Int32,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Double,System.Boolean*,System.Boolean,System.Boolean*)">

 @par Purpose: Select some faces and save the surface entity data

 @return			Number of surfs selected

 @param[in]		sld_eptr		pointer to solid
 @param[in]		toolp_id		toolpath id
 @param[in]		chkSurfFlag		allow check surface selecton
 @param[in]		use_vis_test	use visibility test
 @param[out]		n_chksrf		number of check surfaces selected
 @param[out]		n_gougesrf		number of gouge surfaces selected
 @param[in]		perf_toler		prefered tolerance
 @param[out]		trim_failure	true: one or more surfaces failed to trim
 @param[in,out]	active			true/false
 @param[out]		wholeBodySelected	true=the entire solid body was selected (body pick), false=individual faces were selected (face pick)


</member>
        <member name="M:sld_toolp_surfs_to_temp_file(DB_LIST_ENT*,System.Int32,System.Boolean,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Double,System.Boolean*,System.Boolean)">

 @par Purpose: Select some faces and save the surface entity data

 @return			Number of surfs selected

 @param[in]		sld_eptr		pointer to solid
 @param[in]		toolp_id		toolpath id
 @param[in]		chkSurfFlag		allow check surface selecton
 @param[in]		use_vis_test	use visibility test
 @param[out]		n_chksrf		number of check surfaces selected
 @param[in]		perf_toler		prefered tolerance
 @param[out]		trim_failure	true: one or more surfaces failed to trim
 @param[in,out]	active			true/false


</member>
        <member name="M:sld_count_temp_file(System.Int16)">

 @par Purpose: Return count ents in solid surfs temp file

 @return			number of selected ents in temp file

 @param[in]		set_no			selection set to count


</member>
        <member name="M:solid_temp_draw_ent(DB_LIST_ENT*,System.Byte)">

 @par Purpose: draw a chain temp file edge

 @param[in]		eptr			pointer to entity to draw
 @param[in]		local_color		color


</member>
        <member name="M:hilight_temp_file_by_type(System.Boolean,System.Int16)">

 @par Purpose: highlight the selected faces based on surface usage (drive, project,...)

 @return			number of surfaces highlighted

 @param[in]		set_on			true = highlight, false = unhighlight
 @param[in]		srfType			DRIVE_FLAG, PROJECT_FLAG, ..., CHECK_SURF_FLAG, or 0 for drive surfaces


</member>
        <member name="M:hilight_temp_file(System.Boolean)">

 @par Purpose: highlight the selected faces

 @param[in]		set_on			true = highlight, false = unhighlight


</member>
        <member name="M:sld_sel_a_solid_surf_to_temp_file">

 @par Purpose: Select a face and save the surface entity data

 @return			true if successful


</member>
        <member name="M:read_next_solid_surf_from_temp_file_no_sel_check(ent*)">

 @par Purpose: Read the surface entity data for the next face without checking for selectability

 @return			true if successful

 @param[out]		entity		  entity to fill out


</member>
        <member name="M:sld_all_solid_surfs_to_temp_file(System.Boolean)">

 @par Purpose: Save the surface entity data for all visible solid faces

 @param[in]		visibleOnly			true = visible solids only (default), false = all solids

 @return			Number of faces saved as surfaces


</member>
        <member name="M:sld_sel_solid_surfs_to_temp_file(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose: Select some faces and save the surface entity data

 @return			Number of faces saved as surfaces

 @param[in]		msg				Selection prompt


</member>
        <member name="M:sld_sel_solid_surfs_to_temp_file(System.Char*)">

 @par Purpose: Select some faces and save the surface entity data. A non-MFC alternative to the original function.

 @return			Number of faces saved as surfaces

 @param[in]		pCharMsg		Selection prompt


</member>
        <member name="M:read_a_solid_from_temp_file(DB_LIST_ENT*,ent*)">

 @par Purpose: Read a certain entity from the file of selected faces or chains

 @return			true if successful

 @param[in]		input_ptr	  entity to fetch
 @param[out]		entity		  entity to fill out


</member>
        <member name="M:read_next_header_from_temp_file(SLD_TMP_E_HEADER*)">

 @par Purpose: Read the surface entity data for the next faces

 @return			true if successful

 @param[out]		ret_header			header


</member>
        <member name="M:read_next_solid_surf_from_temp_file_with_solid_info_and_no_sel_check(ent*,DB_LIST_ENT**,System.Int32*)">

 @par Purpose: Read the surface entity data for the next face without checking for selectability (and pointer to solid)

 @return			true if successful

 @param[out]		entity			entity to fill out
 @param[out]		solid_eptr		pointer to solid
 @param[out]		face_index		face index


</member>
        <member name="M:read_next_solid_surf_from_temp_file_with_solid_info(ent*,DB_LIST_ENT**,System.Int32*)">

 @par Purpose: Read the surface entity data for the next 'visible' selected face (and pointer to solid)

 @return			true if successful

 @param[out]		entity			entity to fill out
 @param[out]		solid_eptr		pointer to solid
 @param[out]		face_index		face index


</member>
        <member name="M:read_next_solid_surf_from_temp_file(ent*)">

 @par Purpose: Read the next surface entity from the file of selected faces

 @return			true if successful

 @param[out]		entity			entity to fill out


</member>
        <member name="M:close_solid_chains_temp_file">

 @par Purpose: Close the file containing the selected chain entities


</member>
        <member name="M:close_solid_surfs_temp_file">

 @par Purpose: Close the file containing the selected face surface entities


</member>
        <member name="M:SolidAllowHighlightTempFile(System.Boolean)">
            <summary> Solid allow highlight temporary file. </summary>
            <param name="allowHighlightTempFile"> true to allow. </param>
            <returns> Old highlight temporary file state. </returns>
        </member>
        <member name="M:solid_surfs_temp_file_exists">

 @par Purpose: Check if the file containing the selected face surface entities exists

 @return			true if file exists


</member>
        <member name="M:solid_temp_file_exists">

 @par Purpose: Check if any solid temp file exists

 @return			true if file exists


</member>
        <member name="M:rewind_solid_surfs_temp_file">
@}

 @par Purpose: Rewind the file containing the selected face surface entities


</member>
        <member name="F:allow_solid_surfaces">
@defgroup gr_grp8 Graphics View Settings
@{
</member>
        <member name="M:CCloset.DeactivateDb">
            <summary> Deactivate database. </summary>
        </member>
        <member name="M:CCloset.InitializeDb">
            <summary> Initializes the database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CCloset.StoreEnt(ent*)">
            <summary> Stores an entity. </summary>
            <param name="pEntity"> Entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CCloset.FindEptr(DB_LIST_ENT*)">
            <summary> Searches for the first eptr. </summary>
            <param name="eptr"> Eptr. </param>
            <returns> true if it is found. </returns>
        </member>
        <member name="M:CCloset.GetEnd">
            <summary> Gets the end of this closet. </summary>
            <returns> End of closet. </returns>
        </member>
        <member name="M:CCloset.GetStart">
            <summary> Gets the start of this closet. </summary>
            <returns> Start of closet. </returns>
        </member>
        <member name="M:CCloset.MapArcToStandardView(DB_LIST_ENT*,System.Boolean)">
            <summary> Map arc to standard view. </summary>
            <param name="eptr">	    Eptr. </param>
            <param name="userView"> Search for standard view pointing towards user then standard views. </param>
            <returns> true if it mapped. </returns>
        </member>
        <member name="M:CCloset.FillInEnt(ent*,DB_LIST_ENT*,System.Boolean)">
            <summary> Fill in entity. </summary>
            <param name="pEntity">	    Entity. </param>
            <param name="eptr">		    Eptr. </param>
            <param name="allowDeleted"> true to allow, false to deny deleted. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CCloset.EptrValid(DB_LIST_ENT*,System.Boolean)">
            <summary> Eptr valid. </summary>
            <param name="eptr">		    Eptr. </param>
            <param name="allowDeleted"> true to allow, false to deny deleted. </param>
            <returns> true if it is valid. </returns>
        </member>
        <member name="M:CCloset.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CCloset.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:store_ent_nodraw(ent*,System.Int16,System.Int32,attributes,System.Boolean*)">
            <summary> Save any type of entity in the database without drawing it. </summary>
            <param name="entity">	  The pointer to the entity. </param>
            <param name="new_sel">    The entity selection bits. </param>
            <param name="new_level">  The entity level. </param>
            <param name="new_attrib"> The entity attributes. </param>
            <param name="succf">	  true = Success; false = Failed. </param>
        </member>
        <member name="M:store_ent(ent*,System.Int16,System.Byte,System.Int32,attributes,System.Boolean*)">
            <summary> Save any type of entity in the database. </summary>
            <param name="entity">	  The pointer to the entity. </param>
            <param name="new_sel">    The entity selection bits. </param>
            <param name="new_color">  The entity color. </param>
            <param name="new_level">  The entity level. </param>
            <param name="new_attrib"> The entity attributes. </param>
            <param name="succf">	  true = Success; false = Failed. </param>
        </member>
        <member name="M:WriteEntSel(DB_LIST_ENT*,System.Int16,System.Int16)">
            <summary> Sets and/or clears the selection bit(s) of an entity. </summary>
            <remarks> Call this function to set or clear an entity's selection bits.  If the state of either ALIVE_BIT or
		  BLANK_BIT changes, the database will be dirtied.  The argument "mask" identifies which bits are to
		  be modified whereas "sel" contains the values of those bits.  Examples:

		  WriteEntSel (eptr, SELECT_BIT, SELECT_BIT)			// Set SELECT_BIT 
		  WriteEntSel (eptr, SELECT_BIT, 0)						// Clear SELECT_BIT 
		  WriteEntSel (eptr, SELECT_BIT | TEMP_BIT, TEMP_BIT)	// Set TEMP_BIT and clear SELECT_BIT </remarks>
            <param name="eptr"> Entity eptr. </param>
            <param name="mask"> Mask of selection bits to set and/or clear. </param>
            <param name="sel">  Value of selection bits identified by mask. </param>
        </member>
        <member name="M:GetUpdatedOpcodeMW(operation!System.Runtime.CompilerServices.IsConst)">
            <summary> Gets updated multiaxis opcode to replace existing 440 opcodes.
		  For Moduleworks toolpaths only. </summary>
            <param name="op"> The operation. </param>
            <returns> The updated multiaxis opcode. </returns>
        </member>
        <member name="M:ClosetGetEnd">
            <summary> Get end of current closet. </summary>
            <returns> End of current closet. </returns>
        </member>
        <member name="M:ClosetGetStart">
            <summary> Get start of current closet. </summary>
            <returns> Start of current closet. </returns>
        </member>
        <member name="M:ClosetFind(DB_LIST_ENT*)">
            <summary> Find entity pointer in current closet. </summary>
            <param name="ptr"> Entity pointer to search for. </param>
            <returns> true, if successful. </returns>
        </member>
        <member name="M:ClosetStore(ent*)">
            <summary> Store entity in current closet. </summary>
            <param name="pEntity"> The entity. </param>
            <returns> true, if successful. </returns>
        </member>
        <member name="M:CDbAllocation.FreeDbMachineDefClassEntObjects">
            <summary> Release memory for machine definition classEnt objects in the database. </summary>
        </member>
        <member name="M:CDbAllocation.GetDbEnd">
            <summary> Gets end of database. </summary>
            <returns> End of database. </returns>
        </member>
        <member name="M:CDbAllocation.GetDbStart">
            <summary> Gets start of database. </summary>
            <returns> Start of database. </returns>
        </member>
        <member name="M:Mastercam.Support.UndoManager.IsTransactionActive">
            <summary> This method is used to determine if an Undo transaction is currently active.
          </summary>
            <returns> True if there is an Undo transaction currently active, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.UndoManager.ResetTransaction">
            <summary>This method resets the current transaction and restarts it.</summary>
        </member>
        <member name="M:Mastercam.Support.UndoManager.CancelTransaction">
            <summary> This method cancels an undo transaction and rolls back any changes that have occurred.
          </summary>
        </member>
        <member name="M:Mastercam.Support.UndoManager.CommitTransaction">
            <summary> This method commits a completed transaction to Mastercam's Undo stack. </summary>
        </member>
        <member name="M:Mastercam.Support.UndoManager.StartTransaction">
            <summary> This method starts an undo transaction. All database transactions from this point
         forward will be undo-able.
          </summary>
            <returns> true if it succeeds, else false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.UndoManager.#ctor">
            <summary> Initializes a new instance of the UndoManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.UndoManager">
            <summary> This class is used to manage Undo transactions in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateBoundingBox(Mastercam.GeometryUtility.Types.BoundingBoxCommonParams,Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams,BBOX_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Handles the common code for internally creating the bounding box. </summary>
            <param name="CommonData">      The common data needed to construct this cylindrical
                               bounding box.
                               </param>
            <param name="CylindricalData"> The cylindrical data needed to construct this cylindrical
                               bounding box.
                               </param>
            <param name="MCamData">        Information describing the camera. </param>
            <returns> The new bounding box geometry. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateBoundingBox(Mastercam.GeometryUtility.Types.BoundingBoxCommonParams,Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams,BBOX_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Handles the common code for internally creating the bounding box. </summary>
            <param name="CommonData">      The common data needed to construct this rectangular
                               bounding box.
                               </param>
            <param name="RectangularData"> The rectangular data needed to construct this rectangular
                               bounding box.
                               </param>
            <param name="MCamData">        Information describing the camera. </param>
            <returns> The new bounding box geometry. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateEdgeCurves(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary> Creates all edge curves on the selected Surfaces and/or Solids and/or Polygonal Meshes. </summary>
            <remarks> It is OK if more than Surfaces are in the selection, 
		  this method will ignore any non-Surface/Solid/PMesh entities. </remarks>
            <param name="tolerance">	   The tolerance (Maximum allowable gap between open edges). </param>
            <param name="breakAngle">      The break angle. (Not used on PMesh type entities). </param>
            <param name="meshEdgeAngle">   The mesh edge angle. (Only used on PMesh type entities). </param>
            <param name="fitArcsAndLines"> true to fit arcs and lines, false for splines </param>
            <param name="onlyOpenEdges">   true to only do the open edges. </param>
            <returns> nullptr if it fails, else the new edge curves. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateEdgeCurves(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary> Creates all edge curves on the selected Surfaces and/or Solids and/or Polygonal Meshes. </summary>
            <remarks> It is OK if more than Surfaces or Solids are in the selection,
		   this method will ignore any non-Surface/Solid/PMesh entities.
		   This method used the current system tolerance. </remarks>
            <param name="breakAngle">      The break angle. (Not used on PMesh type entities). </param>
            <param name="meshEdgeAngle">   The mesh edge angle. (Only used on PMesh type entities). </param>
            <param name="fitArcsAndLines"> true to fit arcs and lines, false for splines </param>
            <param name="onlyOpenEdges">   true to only do the open edges. </param>
            <returns> nullptr if it fails, else the new edge curves. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CylindricalBoundingBox(Mastercam.GeometryUtility.Types.BoundingBoxCommonParams,Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams,Mastercam.Database.Geometry[])">
            <summary> Creates a cylindrical boundary box around the specified entities. </summary>
            <remarks> Because the bounding box mechanism makes use of the Mastercam selection
            mechanism, any selected geometry may be marked as unselected upon
            completion of the bounding process.
          </remarks>
            <param name="CommonData">      The common data needed to construct this cylindrical
                               bounding box.
                               </param>
            <param name="CylindricalData"> The cylindrical data needed to construct this cylindrical
                               bounding box.
                               </param>
            <param name="GeometryToBound"> The entities that the bounding box will surround.
                               </param>
            <returns> An array containing the newly created boundary geometry if successful,
          else a null reference if not.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CylindricalBoundingBox(Mastercam.GeometryUtility.Types.BoundingBoxCommonParams,Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams)">
            <summary> Creates a cylindrical boundary box. </summary>
            <remarks> Because the bounding box mechanism makes use of the Mastercam selection
            mechanism, any selected geometry may be marked as unselected upon
            completion of the bounding process.
          </remarks>
            <param name="CommonData">      The common data needed to construct this cylindrical
                               bounding box.
                               </param>
            <param name="CylindricalData"> The cylindrical data needed to construct this cylindrical
                               bounding box.
                               </param>
            <returns> An array containing the newly created boundary geometry if successful,
          else a null reference if not.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.RectangularBoundingBox(Mastercam.GeometryUtility.Types.BoundingBoxCommonParams,Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams,Mastercam.Database.Geometry[])">
            <summary> Creates a rectangular boundary box around the specified entities. </summary>
            <remarks> Because the bounding box mechanism makes use of the Mastercam selection
          mechanism, any selected geometry may be marked as unselected upon
          completion of the bounding process.
          </remarks>
            <param name="CommonData">      The common data needed to construct this rectangular
                               bounding box.
                               </param>
            <param name="RectangularData"> The rectangular data needed to construct this rectangular
                               bounding box.
                               </param>
            <param name="GeometryToBound"> The entities that the bounding box will surround.
                               </param>
            <returns> An array containing the newly created boundary geometry if successful, else a null
          reference if not.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.RectangularBoundingBox(Mastercam.GeometryUtility.Types.BoundingBoxCommonParams,Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams)">
            <summary> Creates a rectangular boundary box around all geometry in the part file. </summary>
            <remarks> Because the bounding box mechanism makes use of the Mastercam selection
           mechanism, any selected geometry may be marked as unselected upon
           completion of the bounding process.
          </remarks>
            <param name="CommonData">      The common data needed to construct this rectangular
                               bounding box.
                               </param>
            <param name="RectangularData"> The rectangular data needed to construct this rectangular
                               bounding box.
                               </param>
            <returns> An array containing the newly created boundary geometry if successful,
          else a null reference if not.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateParametricSplineFromChain(Mastercam.Database.Chain,System.Double,Mastercam.GeometryUtility.Types.OriginalCurvesDisposition,System.Int32)">
            <summary> Creates Parametric Spline from a chain. </summary>
            <remarks> This is Mastercam's Create Spline - Curves Spline functionality. </remarks>
            <param name="chain">						  The chain. </param>
            <param name="maxError">						  The maximum error deviation allowed. </param>
            <param name="originalCurvesDisposition">	  The original curves disposition. </param>
            <param name="originalCurvesDispositionLevel"> The original curves disposition level. </param>
            <returns> The Parametric Spline if it succeeds, else a null reference if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateNURBSSplineFromChain(Mastercam.Database.Chain,System.Double,Mastercam.GeometryUtility.Types.OriginalCurvesDisposition,System.Int32)">
            <summary> Creates NURBS Spline from a chain. </summary>
            <remarks> This is Mastercam's Create Spline - Curves Spline functionality. </remarks>
            <param name="chain">						  The chain. </param>
            <param name="maxError">						  The maximum error deviation allowed. </param>
            <param name="originalCurvesDisposition">	  The original curves disposition. </param>
            <param name="originalCurvesDispositionLevel"> The original curves disposition level. </param>
            <returns> The NURBS Spline if it succeeds, else a null reference if it fails. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateHelix(Mastercam.GeometryUtility.Types.HelixGeometryParams)">
            <summary> Creates a 3D helix in the current construction plane. </summary>
            <param name="HelixGeometryData"> The data needed to construct the helix. </param>
            <returns> An array of NURBS curve geometry objects representing the helix if successful,
          else a null array reference if not.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateSpiral(Mastercam.GeometryUtility.Types.SpiralGeometryParams)">
            <summary> Creates a 3D spiral in the current construction plane. </summary>
            <param name="SpiralGeometryData"> The data needed to construct the spiral. </param>
            <returns> An array of NURBS curve geometry objects representing the spiral if successful,
          else a null array reference if not.
          </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateEllipse(Mastercam.Math.Point3D,System.Double,System.Double,System.Double)">
            <summary> Creates 2D ellipse geometry in the current construction plane. </summary>
            <param name="CenterPoint">   The point representing the center of the 2D ellipse. </param>
            <param name="XRadius">       The distance from the center of the ellipse to the edge of the
                             ellipse along the X axis.
                             </param>
            <param name="YRadius">       The distance from the center of the ellipse to the edge of the
                             ellipse along the Y axis.
                             </param>
            <param name="RotationAngle"> The degree to which the ellipse is rotated around it's center
                             point.
                             </param>
            <returns> An arc geometry object representing the new ellipse if successful,
          else a null reference if not.
          </returns>
            <remarks> In the case of an unsuccessful geometry creation,
          check the CreationReturnCode flag to see why the creation process failed.
          </remarks>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreatePolygon(Mastercam.GeometryUtility.Types.PolygonCreationParams)">
            <summary> Creates a polygon in the current construction plane. </summary>
            <param name="PolygonCreationData"> The data needed to construct the polygon. </param>
            <returns> An array of line geometry objects representing the polygon if successful,
          else a null reference if not.
          </returns>
            <remarks> In the case of an unsuccessful geometry creation,
          check the CreationReturnCode flag to see why the creation process failed.
          </remarks>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.CreateRectangle(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> Creates a rectangle in the current construction plane. </summary>
            <param name="Point1"> The lower left corner of the rectangle. </param>
            <param name="Point2"> The upper right corner of the rectangle. </param>
            <returns> An array of line geometry objects representing the rectangle if successful,
          else a null reference if not.
          </returns>
            <remarks> In the case of an unsuccessful geometry creation,
           check the CreationReturnCode flag to see why the creation process failed.
           </remarks>
        </member>
        <member name="M:Mastercam.GeometryUtility.GeometryCreationManager.#ctor">
            <summary> Initializes a new instance of the GeometryCreationManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.GeometryUtility.GeometryCreationManager">
            <summary> This class is used for performing geometry related tasks. </summary>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Distance(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This method calculates the distance between two 3D points. </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> The distance between the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Length(Mastercam.Math.Point3D)">
            <summary> This method calculates the length of a 3D vector or the distance of a 3D point from
          the origin.
          </summary>
            <param name="Point"> The point to perform the operation with. </param>
            <returns> The length of the input vector. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Dot(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This method performs a dot product on two 3D points. </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> The dot product value of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Cross(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This method performs a cross product on two 3D points. </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> A new point representing the cross product between the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Rotate(Mastercam.Math.Point3D,Mastercam.Math.Point3D,Mastercam.Math.Point3D,System.Double)">
            <summary> This method performs a rotation operation on a 3D point. </summary>
            <param name="Point">         The point to be rotated. </param>
            <param name="AnchorPoint">   The point to anchor the rotation operation from. </param>
            <param name="Axis">          The vector representing the axis to perform the rotation around.
                             </param>
            <param name="RotationAngle"> The value of the angle, in radians, to perform the rotation
                             operation with.
                             </param>
            <returns> A new point representing the rotation operation on the input point. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Rotate(Mastercam.Math.Point3D,Mastercam.Math.Point3D,System.Double)">
            <summary> This method performs a rotation operation on a 3D point. </summary>
            <param name="Point">         The point to be rotated. </param>
            <param name="Axis">          The vector representing the axis to perform the rotation around.
                             </param>
            <param name="RotationAngle"> The value of the angle, in radians, to perform the rotation
                             operation with.
                             </param>
            <returns> A new point representing the rotation operation on the input point. </returns>
            <remarks> The anchor point for the rotation operation in this method is assumed to be the
          origin; in other words, the point (0.0, 0.0, 0.0).
          </remarks>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Normalize(Mastercam.Math.Point3D)">
            <summary> This method performs a vector normalize operation on a 3D vector. </summary>
            <param name="Point"> The vector to be normalized. </param>
            <returns> A new point representing the normal vector of the input vector. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Scale(Mastercam.Math.Point3D,System.Double)">
            <summary> This method performs a scaling operation on a 3D point. </summary>
            <param name="Point">      The point to be scaled. </param>
            <param name="ScaleValue"> The value to scale the input point by. </param>
            <returns> A new point representing the input point after it's been appropriately scaled.
          </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.LinearCombination(Mastercam.Math.Point3D,System.Double,Mastercam.Math.Point3D,System.Double)">
            <summary> This method performs a linear combination on two 3D points. </summary>
            <param name="Point1">      The first point to perform the operation with. </param>
            <param name="ScalePoint1"> The value with which to scale the first point. </param>
            <param name="Point2">      The second point to perform the operation with. </param>
            <param name="ScalePoint2"> The value with which to scale the second point. </param>
            <returns> A new point representing the linear combination of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Subtract(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This method performs vector subtraction on two 3D points. </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> A new point representing the vector subtraction of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Add(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This method performs vector addition on two 3D points. </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> A new point representing the vector addition of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Distance(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This method calculates the distance between two 2D points. </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> The distance between the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.RadiansToDegrees(System.Double)">
            <summary> This method calculates the degree value of a given angle in radians. </summary>
            <param name="Radians"> The angle value in radians to be converted to degrees. </param>
            <returns> The angle value in degrees. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.DegreesToRadians(System.Double)">
            <summary>This method calculates the radian value of a given angle in degrees.</summary>
            <param name="Degrees">The angle value in degrees to be converted to radians.</param>
            <returns>The angle value in radians.</returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.AngleRadians(Mastercam.Math.Point2D)">
            <summary> This method calculates the angle of a 2D vector about the origin in radians.
          </summary>
            <param name="Point"> The point to perform the operation with. </param>
            <returns> The angle of the input vector. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.AngleDegrees(Mastercam.Math.Point2D)">
            <summary>This method calculates the angle of a 2D vector about the origin in degrees.</summary>
            <param name="Point">The point to perform the operation with.</param>
            <returns>The angle of the input vector.</returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Length(Mastercam.Math.Point2D)">
            <summary> This method calculates the length of a 2D vector or the distance of a 2D point from
          the origin.
          </summary>
            <param name="Point"> The point to perform the operation with. </param>
            <returns> The length of the input vector. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Dot(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This method performs a dot product on two 2D points. </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> The dot product value of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.CrossZComponent(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This method performs a cross product on two 2D points and returns the resulting Z
          component.
          </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> The Z component of the cross product operation. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Rotate(Mastercam.Math.Point2D,Mastercam.Math.Point2D,System.Double,System.Double)">
            <summary> This method performs a rotation operation on a 2D point. </summary>
            <param name="Point">       The point to be rotated. </param>
            <param name="AnchorPoint"> The point to anchor the rotation operation from. </param>
            <param name="Cosine">      The value of the cosine to perform the rotation operation with.
                           </param>
            <param name="Sine">        The value of the sine to perform the rotation operation with.
                           </param>
            <returns> A new point representing the rotation operation on the input point. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Normalize(Mastercam.Math.Point2D)">
            <summary>This method performs a vector normalize operation on a 2D vector.</summary>
            <param name="Point">The vector to be normalized.</param>
            <returns>A new point representing the normal vector of the input vector.</returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Scale(Mastercam.Math.Point2D,System.Double)">
            <summary> This method performs a scaling operation on a 2D point. </summary>
            <param name="Point">      The point to be scaled. </param>
            <param name="ScaleValue"> The value to scale the input point by. </param>
            <returns> A new point representing the input point after it's been appropriately scaled.
          </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.LinearCombination(Mastercam.Math.Point2D,System.Double,Mastercam.Math.Point2D,System.Double)">
            <summary> This method performs a linear combination on two 2D points. </summary>
            <param name="Point1">      The first point to perform the operation with. </param>
            <param name="ScalePoint1"> The value with which to scale the first point. </param>
            <param name="Point2">      The second point to perform the operation with. </param>
            <param name="ScalePoint2"> The value with which to scale the second point. </param>
            <returns> A new point representing the linear combination of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Subtract(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This method performs vector subtraction on two 2D points. </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> A new point representing the vector subtraction of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.Add(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This method performs vector addition on two 2D points. </summary>
            <param name="Point1"> The first point to perform the operation with. </param>
            <param name="Point2"> The second point to perform the operation with. </param>
            <returns> A new point representing the vector addition of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.VectorManager.#ctor">
            <summary> Initializes a new instance of the VectorManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Math.VectorManager">
            <summary> This class handles vector operations between different mathematical objects. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.SeparateByLevel">
            <summary> Gets or sets a value indicating whether to separate each instance on a different level. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Level">
            <summary> Gets or sets the level to place the new geometry on (if UseNewAttributes = true). </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Color">
            <summary> Gets or sets the color to create the new geometry in (if UseNewAttributes = true). </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.UseNewAttributes">
            <summary> Gets or sets a value indicating whether to use the specified Color/Level attributes. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.MaximumDepth">
            <summary> Gets or sets the maximum depth value. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Tolerance">
            <summary> Gets or sets the tolerance value. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.UseInfiniteLookAhead">
            <summary> Gets or sets a value indicating whether infinite look ahead should be used. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.CornerStyle">
            <summary> Gets or sets the corner style (Sharp/All) option. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.ModifyCorners">
            <summary> Gets or sets a value indicating whether the corners should be modified. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Direction">
            <summary> Gets or sets the offset direction option. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Style">
            <summary> Gets or sets the offset style (Incremental or Absolute) option. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Angle">
            <summary> Gets or sets the offset angle value (value is in degrees). </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Depth">
            <summary> Gets or sets the offset depth value. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Distance">
            <summary> Gets or sets the offset distance value.
		  Positive Distance = Offset to the right of the Chain.
		  Negative Distance = Offset to the left of the Chain. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Number">
            <summary> Gets or sets the number of offset instances to create. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.OffsetChainParameters.Method">
            <summary> Gets or sets the Move/Copy/Join/Slot result option. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.OffsetChainParameters.#ctor">
            <summary> Initializes a new instance of the OffsetChainParameters class. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.OffsetChainParameters">
            <summary> The parameters used for Offset Chains. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.FilletCornerStyle">
            <summary> Values that represent method of fillet modification for Offset Chain. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.FilletCornerStyle.All">
            <summary> Creates arcs at all corners to connect the entities when offsetting the boundary outward. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.FilletCornerStyle.Sharp">
            <summary> Creates arcs at sharp corners to connect the entities when offsetting the boundary outward. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.TranslateDirection">
            <summary> Values that represent direction of translation for Offset Chain. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.TranslateDirection.BothSides">
            <summary> Translate towards both sides. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.TranslateDirection.OppositeSide">
            <summary> Translate towards opposite side. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.TranslateDirection.DefinedSide">
            <summary> Translate towards defined side. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.DepthMethod">
            <summary> Values that represent method of calculating depth for Offset Chain. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.DepthMethod.Incremental">
            <summary> Calculates offset depth relative to the actual depth of the entities in the boundary. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.DepthMethod.Absolute">
            <summary> Calculates offset depth relative to the construction plane. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.ResultMethod">
            <summary> Values that represent method of translating for Offset Chain. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.ResultMethod.Slot">
            <summary> Transforms a copy of the selected entities to a new position in to create a slot 
		  and maintains the position of the original entities. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.ResultMethod.Join">
            <summary> Copies the original entities and creates geometry between them. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.ResultMethod.Copy">
            <summary> Copies the original entities. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.ResultMethod.Move">
            <summary> Moves the original entities. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters.Dispose">
            <summary> Gets or sets the post break (Delete/Keep/Blank) option. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters.RoundedDistance">
            <summary> Gets or sets the rounded distance value. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters.ExactDistance">
            <summary> Gets or sets the exact distance value. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters.Tolerance">
            <summary> Gets or sets the tolerance value. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters.Number">
            <summary> Gets or sets the number of pieces to break the entity into. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters.Method">
            <summary> Gets or sets the Number/Tolerance/ExactDistance/RoundedDistance option. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters.Curves">
            <summary> Gets or sets a value indicating whether to create curves or lines. </summary>
            <value> True for curves, false for lines. </value>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters.#ctor(System.Boolean,System.Double)">
            <summary> Initializes a new instance of the BreakManyPiecesParameters class. </summary>
            <param name="metric"> Metric flag. </param>
            <param name="tol">    The tolerance. </param>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters.#ctor">
            <summary> Initializes a new instance of the BreakManyPiecesParameters class. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.BreakManyPiecesParameters">
            <summary> The parameters used for Break Many Pieces. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.SegmentationMethod">
            <summary> Values that represent the segmentation methods for Break Many Pieces. </summary>
            <remarks> This is used with the GeometryManipulationManager.BreakManyPieces method. </remarks>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.SegmentationMethod.RoundedDistance">
            <summary> Specifying to allow change of the entered Number and/or Distance values so that the function creates segments of all equal lengths. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.SegmentationMethod.ExactDistance">
            <summary> Specifying to create segments of the exact length specified in the Distance field. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.SegmentationMethod.Tolerance">
            <summary> Specifying the chord height tolerance you want to use when breaking an arc or spline. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.SegmentationMethod.Number">
            <summary> Specifying the number of new arc or line segments you want to create by breaking the entity. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.PostBreakAction">
            <summary> Values that represent the post break action to take for Break Many Pieces. </summary>
            <remarks> This is used with the GeometryManipulationManager.BreakManyPieces method. </remarks>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.PostBreakAction.Blank">
            <summary> Specifying to blank the original curves. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.PostBreakAction.Keep">
            <summary> Specifying to keep the original curves. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.PostBreakAction.Delete">
            <summary> Specifying to delete the original curves. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.OriginalCurvesDisposition">
            <summary> Values that represent original curves dispositions. </summary>
            <remarks> This is used with the GeometryCreationManager::CreateNURBSSplineFromChain method. </remarks>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.OriginalCurvesDisposition.MoveToLevel">
            <summary> An enum representing the option to move the original curves to the specified level. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.OriginalCurvesDisposition.Delete">
            <summary> An enum representing the option to delete the original curves. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.OriginalCurvesDisposition.Blank">
            <summary> An enum representing the option to blank the original curves. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.OriginalCurvesDisposition.Keep">
            <summary> An enum representing the option to keep the original curves. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.ExpandZPlus">
            <summary> Gets or sets the extra amount to expand the bounding box along the +Z axis. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.ExpandZMinus">
            <summary> Gets or sets the extra amount to expand the bounding box along the -Z axis. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.ExpandYPlus">
            <summary> Gets or sets the extra amount to expand the bounding box along the +Y axis. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.ExpandYMinus">
            <summary> Gets or sets the extra amount to expand the bounding box along the -Y axis. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.ExpandXPlus">
            <summary> Gets or sets the extra amount to expand the bounding box along the +X axis. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.ExpandXMinus">
            <summary> Gets or sets the extra amount to expand the bounding box along the -X axis. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.op_Inequality(Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams,Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.op_Equality(Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams,Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams.Equals(Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams,Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.BoundingBoxRectangularParams">
            <summary> This class represents the data needed to create a rectangular bounding box. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams.CenterOnAxis">
            <summary> Gets or set a value indicating if the cylinder will be created in such a way that it
          will be centered along it's primary axis.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams.AxisDirection">
            <summary> Gets or sets the direction to lay the lengthwise axis of the bounding cylinder to be created.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams.ExpandLengthPlus">
            <summary> Gets or sets the extra amount to expand the +length of the bounding cylinder. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams.ExpandLengthMinus">
            <summary> Gets or sets the extra amount to expand the -length of the bounding cylinder. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams.ExpandRadius">
            <summary> Gets or set the extra amount to expand the radius of the bounding cylinder. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams.op_Inequality(Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams,Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams.op_Equality(Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams,Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams.Equals(Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams,Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.BoundingBoxCylindricalParams">
            <summary> This class represents the data needed to create a cylindrical bounding box. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.CylindricalBoundingBoxAxisType">
            <summary> This class represents the data needed to indicate a 3-dimensional axis for cylindrical
          bounding box creation.
          </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.CylindricalBoundingBoxAxisType.XAxis">
            <summary>The X axis.</summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.CylindricalBoundingBoxAxisType.YAxis">
            <summary>The Y axis.</summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.CylindricalBoundingBoxAxisType.ZAxis">
            <summary>The Z axis.</summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxCommonParams.CreateSolid">
            <summary> Gets or sets a value indicating the option to make the bounding box a solid. Only available for 3D geometries.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxCommonParams.CreateCenterPoint">
            <summary> Gets or set a value indicating the option to create a point at the center of the bounding box. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxCommonParams.CreatePoints">
            <summary> Gets or sets a value indicating the option to create points at the corners or the extents of the bounding box.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.BoundingBoxCommonParams.CreateLinesArcs">
            <summary> Gets or sets a value indicating the option to create a closed boundary of lines/arcs. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxCommonParams.op_Inequality(Mastercam.GeometryUtility.Types.BoundingBoxCommonParams,Mastercam.GeometryUtility.Types.BoundingBoxCommonParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxCommonParams.op_Equality(Mastercam.GeometryUtility.Types.BoundingBoxCommonParams,Mastercam.GeometryUtility.Types.BoundingBoxCommonParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxCommonParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.BoundingBoxCommonParams.Equals(Mastercam.GeometryUtility.Types.BoundingBoxCommonParams,Mastercam.GeometryUtility.Types.BoundingBoxCommonParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.BoundingBoxCommonParams">
            <summary> This class represents the data needed to create a bounding box. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.LetterCreationData.FontFolder">
            <summary> Gets or sets the font folder containing the Mastercam files for the "other' font option. </summary>
            <remarks> Note that is used only when the FontMode is set to 'MastercamOther'. </remarks>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.LetterCreationData.StartingPoint">
            <summary> Gets or sets the anchor point of the letters to be created if the font alignment is
          horizontal or vertical -or- The center point of the curve if the letters are to be
          created on a curve.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.LetterCreationData.FontSpacing">
            <summary> Gets or sets the distance between letters in screen units. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.LetterCreationData.FontRadius">
            <summary> Gets or sets the radius from the starting point if the letters are to be created on a curve.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.LetterCreationData.FontHeight">
            <summary> Gets or sets the height in screen units of the letters to be created. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.LetterCreationData.FontAlignment">
            <summary> Gets or sets the text font alignment of the letters. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.LetterCreationData.FontMode">
            <summary> Gets or sets the font type to use in creating these letters. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.LetterCreationData.LetterText">
            <summary> Gets or sets the text to be turned into letters. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.LetterCreationData.op_Inequality(Mastercam.GeometryUtility.Types.LetterCreationData,Mastercam.GeometryUtility.Types.LetterCreationData)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.LetterCreationData.op_Equality(Mastercam.GeometryUtility.Types.LetterCreationData,Mastercam.GeometryUtility.Types.LetterCreationData)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.LetterCreationData.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.LetterCreationData.Equals(Mastercam.GeometryUtility.Types.LetterCreationData,Mastercam.GeometryUtility.Types.LetterCreationData)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.LetterCreationData">
            <summary> This class represents the data needed to create letters in the current file. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.FontModeType">
            <summary> This class represents the different types of fonts that can be used during letter creation.
          </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.FontAlignmentType">
            <summary> This class represents the different font alignment types when creating letters. </summary>
            <remarks> Note that the Horizontal alignment option is the only one available when using the Drafting
          font modes.
          </remarks>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.FontAlignmentType.CurveBottom">
            <summary> Positing the letters on the bottom of a curve around a center point.</summary>
            <remarks> Note that this alignment option is only available when using one of the Mastercam font modes. </remarks>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.FontAlignmentType.CurveTop">
            <summary> Positing the letters on the top of a curve around a center point.</summary>
            <remarks> Note that this alignment option is only available when using one of the Mastercam font modes. </remarks>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.FontAlignmentType.Vertical">
            <summary> Vertical letter positioning. </summary>
            <remarks> Note that this alignment option is only available when using one of the Mastercam font modes. </remarks>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.FontAlignmentType.Horizontal">
            <summary> Horizontal letter positioning. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.CurveGeomEndpointFlag">
            <summary> This class represents the data needed to indicate the endpoints of a curve.
          </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.CurveGeomEndpointFlag.Endpoint2">
            <summary> The second endpoint of a curve. </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.CurveGeomEndpointFlag.Endpoint1">
            <summary> The first endpoint of a curve. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.HelixGeometryParams.ClockwiseRotation">
            <summary> Gets or sets the whether the helix is to rotate clockwise from the basepoint or not.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.HelixGeometryParams.RotationAngle">
            <summary> Gets or sets the number of degrees to which the helix is rotated about the center
          point.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.HelixGeometryParams.Pitch">
            <summary> Gets or sets the pitch of the helix to be created. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.HelixGeometryParams.TaperAngle">
            <summary> Gets or sets the angle from the base of the helix to the top of the helix.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.HelixGeometryParams.NumberRevolutions">
            <summary> Gets or sets the number of helical revolutions. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.HelixGeometryParams.Radius">
            <summary> Gets or sets the radius from the center point to the starting point of the helix.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.HelixGeometryParams.CenterPoint">
            <summary> Gets or sets the center point of the helix. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.HelixGeometryParams.op_Inequality(Mastercam.GeometryUtility.Types.HelixGeometryParams,Mastercam.GeometryUtility.Types.HelixGeometryParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.HelixGeometryParams.op_Equality(Mastercam.GeometryUtility.Types.HelixGeometryParams,Mastercam.GeometryUtility.Types.HelixGeometryParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.HelixGeometryParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.HelixGeometryParams.Equals(Mastercam.GeometryUtility.Types.HelixGeometryParams,Mastercam.GeometryUtility.Types.HelixGeometryParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.HelixGeometryParams">
            <summary> This class represents the data needed to represent a helix. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.SpiralGeometryParams.ClockwiseRotation">
            <summary> Gets or sets a value indicating whether the spiral is to rotate clockwise from the
          basepoint or not.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.SpiralGeometryParams.CenterPoint">
            <summary> Gets or sets the center point of the spiral. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.SpiralGeometryParams.NumberRevolutions">
            <summary> Gets or sets the number of revolutions in the spiral. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.SpiralGeometryParams.Radius">
            <summary> Gets or sets the radius from the center point of the spiral to it's start point.
          </summary>
            <remarks> The spiral's start point is the point dictated by it's lower/inner pitch point.
          </remarks>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.SpiralGeometryParams.VerticalUpperPitch">
            <summary> Gets or sets the upper vertical pitch of the spiral. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.SpiralGeometryParams.VerticalLowerPitch">
            <summary> Gets or sets the lower vertical pitch of the spiral. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.SpiralGeometryParams.HorizontalOuterPitch">
            <summary> Gets or sets the outer horizontal pitch of the spiral. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.SpiralGeometryParams.HorizontalInnerPitch">
            <summary> Gets or sets the inner horizontal pitch of the spiral. </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.SpiralGeometryParams.op_Inequality(Mastercam.GeometryUtility.Types.SpiralGeometryParams,Mastercam.GeometryUtility.Types.SpiralGeometryParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.SpiralGeometryParams.op_Equality(Mastercam.GeometryUtility.Types.SpiralGeometryParams,Mastercam.GeometryUtility.Types.SpiralGeometryParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.SpiralGeometryParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.SpiralGeometryParams.Equals(Mastercam.GeometryUtility.Types.SpiralGeometryParams,Mastercam.GeometryUtility.Types.SpiralGeometryParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.SpiralGeometryParams">
            <summary> This class represents the data needed to represent a spiral. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.PolygonCreationParams.ShowCenter">
            <summary> Gets or sets a value indicating whether a point will be created at the center of
          the polygon.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.PolygonCreationParams.TrimmedSurface">
            <summary> Gets or sets a value indicating whether the polygon has a trimmed surface. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.PolygonCreationParams.MeasureCorner">
            <summary> Gets or sets a value indicating whether the radius is measured from the center to
          the corners. Otherwise, it is measured from the center to the midpoints of the
          sides.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.PolygonCreationParams.RotationAngle">
            <summary> Gets or sets the number of degrees to which the polygon is rotated about the center
          point.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.PolygonCreationParams.FilletRadius">
            <summary> Gets or sets the radius of fillets. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.PolygonCreationParams.Radius">
            <summary> Gets or sets the distance between the center and either the corners or edges'
          midpoints.
          </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.PolygonCreationParams.NumberSides">
            <summary> Gets or set the number of sides in the polygon. </summary>
        </member>
        <member name="P:Mastercam.GeometryUtility.Types.PolygonCreationParams.CenterPoint">
            <summary> Gets or sets the location of center point of the polygon (world coordinates.)
          </summary>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.PolygonCreationParams.op_Inequality(Mastercam.GeometryUtility.Types.PolygonCreationParams,Mastercam.GeometryUtility.Types.PolygonCreationParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.PolygonCreationParams.op_Equality(Mastercam.GeometryUtility.Types.PolygonCreationParams,Mastercam.GeometryUtility.Types.PolygonCreationParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.PolygonCreationParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.GeometryUtility.Types.PolygonCreationParams.Equals(Mastercam.GeometryUtility.Types.PolygonCreationParams,Mastercam.GeometryUtility.Types.PolygonCreationParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.PolygonCreationParams">
            <summary> This class represents the data needed to represent a polygon. </summary>
        </member>
        <member name="T:Mastercam.GeometryUtility.Types.FilletDirectionType">
            <summary> This enum specifies the different possible fillet 'direction' options available when
          creating fillets.
          </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.FilletDirectionType.Either">
            <summary> Any direction (CCW or CCW) </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.FilletDirectionType.OnlyCW">
            <summary> CW (or negative) </summary>
        </member>
        <member name="F:Mastercam.GeometryUtility.Types.FilletDirectionType.OnlyCCW">
            <summary> CCW (or positive) </summary>
        </member>
        <member name="M:Mastercam.Nesting.NestingParam.#ctor">
            <summary> Initializes a new instance of the NestingParam class. </summary>
            <remarks> This initializes all of the nesting item objects to their default values.
          </remarks>
        </member>
        <member name="T:Mastercam.Nesting.NestingParam">
            <summary> This class is used to work with all of the settings within the parameters section of a
          nesting file.
          </summary>
        </member>
        <member name="F:Mastercam.Nesting.Types.NestingSection.AdditionalStrings">
            <summary> An array storing all of the strings that this nesting section object couldn't
          create parameters for.
          </summary>
        </member>
        <member name="F:Mastercam.Nesting.Types.NestingSection.Members">
            <summary> The array of parameter members stored in this section. </summary>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingSection.ReadData(System.IO.StreamReader,System.String)">
            <summary> Reads in and creates parameters from an entire section of a nesting file.
          </summary>
            <param name="Stream">        The stream to read data and extract parameters from.
                             </param>
            <param name="SectionHeader"> A string representing the header for this particular
                             section.
                             </param>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingSection.DefaultData">
            <summary> Reinitializes all of the parameters in this section to their default values.
          </summary>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingSection.Commit(System.IO.StreamWriter)">
            <summary> Commits all of the parameters in this section to the given stream. </summary>
            <param name="Stream"> [in,out] The stream to output all of the parameter's data to. </param>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingSection.#ctor">
            <summary> Standard Default Constructor. </summary>
        </member>
        <member name="F:Mastercam.Nesting.Types.NestingSection.SectionNumber">
            <summary> Where applicable, this stores the number of the specified section. </summary>
        </member>
        <member name="T:Mastercam.Nesting.Types.NestingSection">
            <summary> This class serves as the base class for nesting sections. </summary>
        </member>
        <member name="F:Mastercam.Nesting.Types.NestingItem`1.Data">
            <summary> This is the data object stored within this nesting parameter .</summary>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingItem`1.SetNestData(System.String)">
            <summary> This is the overridden definition for the method to take a string from a nesting
          file and convert it to input for this parameter.
          </summary>
            <exception cref="T:Mastercam.App.Exceptions.TypeMismatchException"> Thrown when a type mismatch error condition occurs.
                                         </exception>
            <param name="DataString"> The String object input for this parameter. </param>
            <returns> True if the nesting data was stored successfully; false if not. </returns>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingItem`1.SetToDefault">
            <summary> This is the overridden definition for the method to initialize the parameter to
          it's default value.
          </summary>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingItem`1.GetName">
            <summary> This is the overridden definition for the method to output the name of this nesting
          parameter.
          </summary>
            <returns> The String object representing the name of this parameter. </returns>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingItem`1.GetOutput">
            <summary> This is the overridden definition for the method to output the nesting data string
          to the nesting file.
          </summary>
            <returns> The String object to write out to the nesting file. </returns>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingItem`1.SetData(`0)">
            <summary> This method is used to set the data object in this parameter. </summary>
            <param name="NewData"> The data object to set this parameter to. </param>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingItem`1.GetData">
            <summary> This method is used to return the data object in this parameter. </summary>
            <returns> The data object stored within this parameter. </returns>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingItem`1.#ctor(`0,System.String)">
            <summary> Initializes a new instance of the NestingItem class. </summary>
            <remarks> Takes an object of the necessary type as initial input
          as well as a String object representing the output name.
          </remarks>
            <param name="Data">   The data object to initialize this parameter with. </param>
            <param name="Output"> The String object representing the name of this parameter. </param>
        </member>
        <member name="F:Mastercam.Nesting.Types.NestingItem`1.Output">
            <summary> The string representing the name of this parameter. </summary>
        </member>
        <member name="F:Mastercam.Nesting.Types.NestingItem`1.Default">
            <summary> The default value for this parameter. </summary>
        </member>
        <member name="T:Mastercam.Nesting.Types.NestingItem`1">
            <summary> This class serves as the intermediary class for nesting parameters. </summary>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingBase.SetNestData(System.String)">
            <summary> This is the virtual declaration for the method to take a string from a nesting file and
          convert it to input for this parameter.
          </summary>
            <param name="DataString"> The String object input for this parameter. </param>
            <returns> True if the nesting data was stored successfully; false if not. </returns>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingBase.SetToDefault">
            <summary>This is the virtual declaration for the method to initialize the parameter to it's default value.</summary>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingBase.GetName">
            <summary> This is the virtual declaration for the method to output the name of this nesting
          parameter.
          </summary>
            <returns> The String object representing the name of this parameter. </returns>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingBase.GetOutput">
            <summary> This is the virtual declaration for the method to output the nesting data string to the
          nesting file.
          </summary>
            <returns> The String object to write out to the nesting file. </returns>
        </member>
        <member name="M:Mastercam.Nesting.Types.NestingBase.#ctor">
            <summary> Initializes a new instance of the abstract class. </summary>
        </member>
        <member name="T:Mastercam.Nesting.Types.NestingBase">
            <summary> This class serves as the base class for nesting parameters. </summary>
        </member>
        <member name="M:Mastercam.Support.Typecaster.ViewCaster(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method takes a view structure and tries to cast it down to an MCView object.
          </summary>
            <param name="ViewEnt"> The view structure to try and find and cast down to an MCView object.
                       </param>
            <returns> A MCView object representing the view structure passed in. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.ViewCaster(System.Int16)">
            <summary> This method takes a view ID and tries to cast it down to an MCView object. </summary>
            <param name="ID"> The view ID to try and find and cast down to an MCView object. </param>
            <returns> A MCView object representing the view ID passed in. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.ToolCaster(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method takes a tool structure and tries to cast it down to a Tool object.
          </summary>
            <param name="Tl"> The tool structure to try to find and cast down to a Tool object.
                  </param>
            <returns> A Tool object representing the tool structure passed in. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.ToolCaster(System.Int32)">
            <summary> This method takes a tool ID and tries to cast it down to a Tool object. </summary>
            <param name="ID"> The tool ID to try and find and cast down to a Tool object. </param>
            <returns> A Tool object representing the tool ID passed in. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.OperationCaster(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method takes an operation structure and tries to cast it down to an Operation
          object.
          </summary>
            <param name="Op"> The operation structure to try to find and cast down to an Operation
                  object.
                  </param>
            <returns> An Operation object representing the operation structure passed in. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.OperationCaster(System.Int32)">
            <summary> This method takes an operation ID and tries to cast it down to an Operation object.
          </summary>
            <param name="ID"> The operation ID to try to find and cast down to an Operation object. </param>
            <returns> An Operation object representing the operation ID passed in. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.GeometryCaster(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method takes an entity structure and tries to cast it down to a Geometry object.
          </summary>
            <param name="Ent"> The entity structure to try to cast down to a Geometry object.
                   </param>
            <returns> A Geometry object representing the database entity passed in. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.GeometryCaster(DB_LIST_ENT*)">
            <summary> This method takes an entity eptr and tries to cast it down to a Geometry object.
          </summary>
            <param name="eptr"> The entity eptr to try to find and cast down to a Geometry object. </param>
            <returns> A Geometry object representing the database entity whose eptr was passed in. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.GeometryCaster(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> This method takes an entity ID and tries to cast it down to a Geometry object.
          </summary>
            <param name="ID"> The entity ID to try to find and cast down to a Geometry object. </param>
            <returns> A Geometry object representing the database entity whose ID was passed in. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.SurfaceCaster(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>This method takes an entity structure and tries to cast it down to a Surface object.</summary>
            <param name="Ent">The entity structure to try to cast down to a Surface object.</param>
            <returns>A Surface object downcast to a Geometry object handle.</returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.SolidsCaster(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method takes an entity structure and tries to cast it down to a Solids object.
          </summary>
            <param name="Ent"> The entity structure to try to cast down to a Solids object. </param>
            <returns> A Solids object downcast to a Geometry object handle. </returns>
        </member>
        <member name="M:Mastercam.Support.Typecaster.#ctor">
            <summary> Initializes a new instance of the Typecaster class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetPartHistory">
            <summary> Gets the list of Part History time-stamps. </summary>
            <returns> If successful, the list of part history timestamps from newest to oldest,
          else an empty list if no history data was found. </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.SelectAllGeometryOnLevel(System.Int32,System.Boolean)">
            <summary> Set the 'select' bit ON all entities on the specified level. </summary>
            <remarks> This only affects geometry that is already committed to Mastercam's database!
          It does NOT effect the state of any .NET geometry objects.
          That is why it can be "fast".
          </remarks>
            <param name="level">                  The Level# to select all geometry. </param>
            <param name="clearExistingSelection"> true to clear existing selection before doing the new
                                      selection.
                                      </param>
            <returns> The number of entities found and set as 'selected'. </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGroups(System.String,Mastercam.Support.Group,Mastercam.Database.Types.ProductType)">
            <summary> This method is used to determine if there are any specified toolpath groups in the
          current Mastercam part file.
          </summary>
            <remarks> While the 'GetGroups' search manager methods can be used to determine if any
          toolpath groups exist, this method can be an order of magnitude faster than
          actually searching for all of the matching toolpath groups and returning them.
          </remarks>
            <param name="GroupName"> The name of the groups to look for. </param>
            <param name="Parent">    The object representing the Mastercam group that is the parent
                         of all the subgroups to look for.
                         </param>
            <param name="Product">   The type of machine all of the returned groups should come from.
                         </param>
            <returns> A boolean flag indicating whether there are any toolpath groups in the current part
          file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGroups(Mastercam.Database.Types.ProductType)">
            <summary> This method is used to determine if there are any specified toolpath groups in the
          current Mastercam part file.
          </summary>
            <remarks> While the 'GetGroups' search manager methods can be used to determine if any
          toolpath groups exist, this method can be an order of magnitude faster than
          actually searching for all of the matching toolpath groups and returning them.
          </remarks>
            <param name="Product"> The type of machine all of the returned groups should come from. </param>
            <returns> A boolean flag indicating whether there are any toolpath groups in the current part
          file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGroups(Mastercam.Support.Group)">
            <summary> This method is used to determine if there are any specified toolpath groups in the
          current Mastercam part file.
          </summary>
            <remarks> While the 'GetGroups' search manager methods can be used to determine if any
          toolpath groups exist, this method can be an order of magnitude faster than
          actually searching for all of the matching toolpath groups and returning them.
          </remarks>
            <param name="Parent"> The object representing the Mastercam group that is the parent of
                      all the subgroups to look for.
                      </param>
            <returns> A boolean flag indicating whether there are any toolpath groups in the current part
          file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGroups(System.String)">
            <summary> This method is used to determine if there are any specified toolpath groups in the
          current Mastercam part file.
          </summary>
            <remarks> While the 'GetGroups' search manager methods can be used to determine if any
          toolpath groups exist, this method can be an order of magnitude faster than
          actually searching for all of the matching toolpath groups and returning them.
          </remarks>
            <param name="GroupName"> The name of the groups to look for. </param>
            <returns> A boolean flag indicating whether there are any toolpath groups in the current part
          file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGroups">
            <summary> This method is used to determine if there are any specified toolpath groups in the
          current Mastercam part file.
          </summary>
            <remarks> While the 'GetGroups' search manager methods can be used to determine if any
          toolpath groups exist, this method can be an order of magnitude faster than
          actually searching for all of the matching toolpath groups and returning them.
          </remarks>
            <returns> A boolean flag indicating whether there are any toolpath groups in the current part
          file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyOperations(Mastercam.Database.Types.OperationType,System.Int32,System.Boolean)">
            <summary> This method is used to determine if there are any specified toolpath operations in
          the current Mastercam part file.
          </summary>
            <remarks> While the 'GetOperations' search manager methods can be used to determine if any
           toolpath operations exist, this method can be an order of magnitude faster than
           actually searching for all of the matching toolpath operations and returning them.
           </remarks>
            <param name="OpType">                 The type of toolpath operation to look for or Undefined
                                      to ignore toolpath type.
                                      </param>
            <param name="GroupID">                The ID of the group to look for toolpath operations in
                                      or -1 to ignore groups.
                                      </param>
            <param name="OnlySelectedOperations"> True if the search is only to look for operations that
                                      are selected in the Toolpath Manager and false to ignore
                                      selection status.
                                      </param>
            <returns> A boolean flag indicating whether there are any toolpath operations in the current
          part file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyOperations(System.Boolean)">
            <summary> This method is used to determine if there are any specified toolpath operations in
          the current Mastercam part file.
          </summary>
            <remarks> While the 'GetOperations' search manager methods can be used to determine if any
          toolpath operations exist, this method can be an order of magnitude faster than
          actually searching for all of the matching toolpath operations and returning them.
          </remarks>
            <param name="OnlySelectedOperations"> True if the search is only to look for operations that
                                      are selected in the Toolpath Manager and false to ignore
                                      selection status.
                                      </param>
            <returns> A boolean flag indicating whether there are any toolpath operations in the current 
          part file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyOperations(System.Int32)">
            <summary> This method is used to determine if there are any specified toolpath operations in
          the current Mastercam part file.
          </summary>
            <remarks> While the 'GetOperations' search manager methods can be used to determine if any
          toolpath operations exist, this method can be an order of magnitude faster than
          actually searching for all of the matching toolpath operations and returning them.
          </remarks>
            <param name="GroupID"> The ID of the group to look for toolpath operations in. </param>
            <returns> A boolean flag indicating whether there are any toolpath operations in the current
          part file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyOperations(Mastercam.Database.Types.OperationType)">
            <summary> This method is used to determine if there are any specified toolpath operations in
          the current Mastercam part file.
          </summary>
            <remarks> While the 'GetOperations' search manager methods can be used to determine if any
           toolpath operations exist, this method can be an order of magnitude faster than
           actually searching for all of the matching toolpath operations and returning them.
           </remarks>
            <param name="OpType"> The type of toolpath operation to look for. </param>
            <returns> A boolean flag indicating whether there are any toolpath operations in the current
          part file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyOperations">
            <summary> This method is used to determine if there are any specified toolpath operations in
          the current Mastercam part file.
          </summary>
            <remarks> While the 'GetOperations' search manager methods can be used to determine if any
          toolpath operations exist, this method can be an order of magnitude faster than
          actually searching for all of the matching toolpath operations and returning them.
          </remarks>
            <returns> A boolean flag indicating whether there are any toolpath operations in the current
           part file.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyTools(Mastercam.Database.Types.ToolType,System.Int32)">
            <summary> This method is used to determine if there are any specified Mill tools in the current
          Mastercam part file.
          </summary>
            <remarks> While the 'GetTools' search manager methods can be used to determine if any Mill
          tools exist, this method can be an order of magnitude faster than actually
          searching for all of the matching Mill tools and returning them.
          </remarks>
            <param name="TlType">         The type of tool to look for or an Undefined tool to look for all
                              tools.
                              </param>
            <param name="MachineGroupID"> The ID of the machine group to look for tools in or -1 to look
                              throughout all machine groups.
                              </param>
            <returns> A boolean flag indicating whether there are any Mill tools in the current part file
          with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyTools(System.Int32)">
            <summary> This method is used to determine if there are any specified Mill tools in the current
          Mastercam part file.
          </summary>
            <remarks> While the 'GetTools' search manager methods can be used to determine if any Mill
          tools exist, this method can be an order of magnitude faster than actually
          searching for all of the matching Mill tools and returning them.
          </remarks>
            <param name="MachineGroupID"> The ID of the machine group to look for tools in. </param>
            <returns> A boolean flag indicating whether there are any Mill tools in the current part file
          with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyTools(Mastercam.Database.Types.ToolType)">
            <summary> This method is used to determine if there are any specified Mill tools in the current
          Mastercam part file.
          </summary>
            <remarks> While the 'GetTools' search manager methods can be used to determine if any Mill
         tools exist, this method can be an order of magnitude faster than actually
         searching for all of the matching Mill tools and returning them.
         </remarks>
            <param name="TlType"> The type of tool to look for. </param>
            <returns> A boolean flag indicating whether there are any Mill tools in the current part file
          with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyTools">
            <summary> This method is used to determine if there are any specified Mill tools in the current
          Mastercam part file.
          </summary>
            <remarks> While the 'GetTools' search manager methods can be used to determine if any Mill
          tools exist, this method can be an order of magnitude faster than actually
          searching for all of the matching Mill tools and returning them.
          </remarks>
            <returns> A boolean flag indicating whether there are any Mill tools in the current part file.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnySurfaceGeometry(Mastercam.Database.Types.SelectionMask,System.Int32)">
            <summary> This method is used to determine if there is any specified surface geometry in the
          current part file.
          </summary>
            <remarks> While the 'GetSurfaceGeometry' search manager methods can be used to determine if
          any surface geometry exists, this method can be an order of magnitude faster
          than actually searching for all of the matching surface geometry and returning it.
          </remarks>
            <param name="SelectionTypes"> The selection status of the surface geometry to look for. </param>
            <param name="Level">          The number of the level to search for surface geometry on. </param>
            <returns> A boolean flag indicating whether there is any surface geometry in the current part
          file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnySurfaceGeometry(Mastercam.Database.Types.SelectionMask)">
            <summary> This method is used to determine if there is any specified surface geometry in the
          current part file.
          </summary>
            <remarks> While the 'GetSurfaceGeometry' search manager methods can be used to determine if
          any surface geometry exists, this method can be an order of magnitude faster
          than actually searching for all of the matching surface geometry and returning it.
          </remarks>
            <param name="SelectionTypes"> The selection status of the surface geometry to look for. </param>
            <returns> A boolean flag indicating whether there is any surface geometry in the current part
          file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnySurfaceGeometry(System.Int32)">
            <summary> This method is used to determine if there is any specified surface geometry in the
          current part file.
          </summary>
            <remarks> While the 'GetSurfaceGeometry' search manager methods can be used to determine if
          any surface geometry exists, this method can be an order of magnitude faster
          than actually searching for all of the matching surface geometry and returning it.
          </remarks>
            <param name="Level"> The number of the level to search for surface geometry on. </param>
            <returns> A boolean flag indicating whether there is any surface geometry in the current part
          file with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnySurfaceGeometry">
            <summary> This method is used to determine if there is any specified surface geometry in the
          current part file.
          </summary>
            <remarks> While the 'GetSurfaceGeometry' search manager methods can be used to determine if
          any surface geometry exists, this method can be an order of magnitude faster
          than actually searching for all of the matching surface geometry and returning it.
          </remarks>
            <returns> A boolean flag indicating whether there is any surface geometry in the current part
          file.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnySolidGeometry(Mastercam.Database.Types.SelectionMask,System.Int32)">
            <summary> This method is used to determine if there is any specified solid geometry in the
          current part file.
          </summary>
            <remarks> While the 'GetSolidGeometry' search manager methods can be used to determine if any
          solid geometry exists, this method can be an order of magnitude faster than
          actually searching for all of the matching solid geometry and returning it.
          </remarks>
            <param name="SelectionTypes"> The selection status of the solid geometry to look for. </param>
            <param name="Level">          The number of the level to search for solid geometry on or -1 to
                              ignore the level.
                              </param>
            <returns> A boolean flag indicating whether there is any solid geometry in the current part file
          with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnySolidGeometry(Mastercam.Database.Types.SelectionMask)">
            <summary> This method is used to determine if there is any specified solid geometry in the
          current part file.
          </summary>
            <remarks> While the 'GetSolidGeometry' search manager methods can be used to determine if any
          solid geometry exists, this method can be an order of magnitude faster than
          actually searching for all of the matching solid geometry and returning it.
          </remarks>
            <param name="SelectionTypes"> The selection status of the solid geometry to look for. </param>
            <returns> A boolean flag indicating whether there is any solid geometry in the current part file
          with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnySolidGeometry(System.Int32)">
            <summary> This method is used to determine if there is any specified solid geometry in the
          current part file.
          </summary>
            <remarks> While the 'GetSolidGeometry' search manager methods can be used to determine if any
          solid geometry exists, this method can be an order of magnitude faster than
          actually searching for all of the matching solid geometry and returning it.
          </remarks>
            <param name="Level"> The number of the level to search for solid geometry on. </param>
            <returns> A boolean flag indicating whether there is any solid geometry in the current part file
          with the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnySolidGeometry">
            <summary> This method is used to determine if there is any specified solid geometry in the
          current part file.
          </summary>
            <remarks> While the 'GetSolidGeometry' search manager methods can be used to determine if any
          solid geometry exists, this method can be an order of magnitude faster than
          actually searching for all of the matching solid geometry and returning it.
          </remarks>
            <returns> A boolean flag indicating whether there is any solid geometry in the current part file.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGeometry(Mastercam.Database.Types.GeometryMask,Mastercam.Database.Types.SelectionMask,System.Int32)">
            <summary> This method is used to determine if there is any specified geometry in the current
          part file.
          </summary>
            <remarks> While the 'GetGeometry' search manager methods can be used to determine if any
          geometry exists, this method can be an order of magnitude faster than actually
          searching for all of the matching geometry and returning it.
          </remarks>
            <param name="GeometryTypes">  The types of geometry to look for. </param>
            <param name="SelectionTypes"> The selection status of the geometry to look for. </param>
            <param name="Level">          The number of the level to search for geometry on or -1 to ignore
                              the level.
                              </param>
            <returns> A boolean flag indicating whether there is any geometry in the current part file with
          the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGeometry(Mastercam.Database.Types.SelectionMask)">
            <summary> This method is used to determine if there is any specified geometry in the current
          part file.
          </summary>
            <remarks> While the 'GetGeometry' search manager methods can be used to determine if any
          geometry exists, this method can be an order of magnitude faster than actually
          searching for all of the matching geometry and returning it.
          </remarks>
            <param name="SelectionTypes"> The selection status of the geometry to look for. </param>
            <returns> A boolean flag indicating whether there is any geometry in the current part file with
          the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGeometry(Mastercam.Database.Types.GeometryMask)">
            <summary> This method is used to determine if there is any specified geometry in the current
          part file.
          </summary>
            <remarks> While the 'GetGeometry' search manager methods can be used to determine if any
          geometry exists, this method can be an order of magnitude faster than actually
          searching for all of the matching geometry and returning it.
          </remarks>
            <param name="GeometryTypes"> The types of geometry to look for. </param>
            <returns> A boolean flag indicating whether there is any geometry in the current part file with
          the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGeometry(System.Int32)">
            <summary> This method is used to determine if there is any specified geometry in the current
          part file.
          </summary>
            <remarks> While the 'GetGeometry' search manager methods can be used to determine if any
          geometry exists, this method can be an order of magnitude faster than actually
          searching for all of the matching geometry and returning it.
          </remarks>
            <param name="Level"> The number of the level to search for geometry on. </param>
            <returns> A boolean flag indicating whether there is any geometry in the current part file with
          the matching parameters.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.IsAnyGeometry">
            <summary> This method is used to determine if there is any specified geometry in the current
          part file.
          </summary>
            <remarks> While the 'GetGeometry' search manager methods can be used to determine if any
          geometry exists, this method can be an order of magnitude faster than actually
          searching for all of the matching geometry and returning it.
          </remarks>
            <returns> A boolean flag indicating whether there is any geometry in the current part file.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSystemView(Mastercam.IO.Types.SystemPlaneType)">
            <summary> Retrieves a 'system' view. </summary>
            <param name="id"> The SystemPlaneType that identifies the view to be retrieved. </param>
            <returns> The Mastercam::Database::MCView object of the 'system' view that was asked for. </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSystemView(Mastercam.IO.Types.GraphicsViewType)">
            <summary> Retrieves a 'system' view. </summary>
            <param name="id"> The GraphicsViewType that identifies the view to be retrieved. </param>
            <returns> The Mastercam::Database::MCView object of the 'system' view that was asked for. </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetViews(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> This method is used to get objects for all of the views found in the current Mastercam
          part file with a matching view category.
          </summary>
            <param name="ViewNumber"> The view number of the views to look for. </param>
            <returns> An array of MCView objects representing all of the appropriate views found in the
          current Mastercam part file's database.
          If the supplied View Number does identify a "valid" defined view,
          the array returned will be empty.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetViews">
            <summary> This method is used to get objects for all of the views found in the current Mastercam
          part file.
          </summary>
            <returns> An array of Mastercam::Database::MCView objects representing all of the appropriate views found in the
          current Mastercam part file's database.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetFileDescriptorInExternalFile(System.String,System.String@)">
            <summary> Gets the file descriptor from an 'external' file. </summary>
            <remarks> This will not work for old 32-bit Mastercam part files. </remarks>
            <param name="FileName">   The full path to the Mastercam file to interrogate. </param>
            <param name="Descriptor"> [out] The file descriptor text. </param>
            <returns> True if it succeeds, false if it fails (file does not exist or is not a valid Mastercam file. </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetToolsInExternalFile(System.String,Mastercam.Database.Tool[]@)">
            <summary> Gets a list of the tools in an 'external' file. </summary>
            <param name="FileName"> The (full path) name of the file to interrogate. </param>
            <param name="Tools">    [in] If non-null, the tools. </param>
            <returns> True if successful, else false if the file was not found or could not be opened.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetOpGroupDataInExternalFile(System.String,Mastercam.Support.Types.ExternalGroupsFileData[]@,Mastercam.Support.Types.ExternalOpsFileData[]@)">
            <summary> Gets a list of all of the groups and/or operations in an 'external' file. </summary>
            <param name="FileName">   The (full path) name of the file to interrogate. </param>
            <param name="GroupData">  [out] If non-null, A list of ExternalGroupsFileData,
                          describing the (Machine/Toolpath) Groups in the file. </param>
            <param name="OpData">     [out] If non-null, A list of ExternalOpsFileData,
                          describing the Toolpath Operations in the file. </param>
            <returns> True if successful, else false if the file was not found or could not be opened.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGroups(System.String,Mastercam.Support.Group,Mastercam.Database.Types.ProductType)">
            <summary> This method is used to get objects for all of the groups found in the operations
          manager in the current Mastercam part file that match the specified input criteria.
          </summary>
            <param name="GroupName"> The name of the groups to look for. </param>
            <param name="Parent">    The object representing the Mastercam group that is the parent
                         of all the subgroups to look for.
                         </param>
            <param name="Product">   The type of machine all of the returned groups should come from.
                         </param>
            <remarks> GroupName and Parent are filters and either (or both) can be null if desired. </remarks>
            <returns> An array of Group objects representing all of the appropriate operation groups found in
          the current Mastercam part file's database.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGroups(Mastercam.Database.Types.ProductType)">
            <summary> This method is used to get objects for all of the groups found in the operations
          manager in the current Mastercam part file of a specified machine type.
          </summary>
            <param name="Product"> The type of machine all of the returned groups should come from. </param>
            <returns> An array of Group objects representing all of the appropriate operation groups found in
          the current Mastercam part file's database.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGroups(Mastercam.Support.Group)">
            <summary> This method is used to get objects for all of the groups found in the operations
          manager in the current Mastercam part file with a specified parent group.
          </summary>
            <param name="Parent"> The object representing the Mastercam group that is the parent of
                      all the subgroups to look for.
                      </param>
            <returns> An array of Group objects representing all of the appropriate operation groups found in
          the current Mastercam part file's database.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGroups(System.String)">
            <summary> This method is used to get objects for all of the groups found in the operations
          manager in the current Mastercam part file with a matching name.
          </summary>
            <param name="GroupName"> The name of the groups to look for. </param>
            <returns> An array of Group objects representing all of the appropriate operation groups found in
          the current Mastercam part file's database.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGroups">
            <summary> This method is used to get objects for all of the groups found in the operations
          manager in the current Mastercam part file.
          </summary>
            <returns> An array of Group objects representing all of the appropriate operation groups found in
          the current Mastercam part file's database.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetNestedOperations(Mastercam.Database.Operation)">
            <summary> This method is used to retrieve all of the operations nested within a parent Nesting
          operation.
          </summary>
            <param name="ParentOperation"> The parent Nesting operation to retrieve all of it's
                               child nested ops from.
                               </param>
            <returns> An array of Operation objects representing all of the appropriate toolpath operations
          found to be child operations of the parent Nesting op.
          </returns>
            <remarks> Note that all of the returned Operation objects can be down-cast to their
          appropriate derived operation types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetOperation(System.Int32)">
            <summary> This method searches for an operation that matches the unique operation identifier
          passed in.
          </summary>
            <param name="OperationID"> The unique operation identifier to search for in the current
                           Mastercam database.
                           </param>
            <returns> An operation object representing the operation with the matching identifier or a null
          handle if no matching operation could be found.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetOperations(Mastercam.Database.Types.OperationType,System.Int32,System.Boolean,Mastercam.Database.Tool)">
            <summary> This method is used to get objects for all of the toolpath operations that match the
          given input criteria in the current Mastercam part file.
          </summary>
            <param name="OpType">                 The type of toolpath operation to look for
                                      or Undefined to ignore toolpath type.
                                      </param>
            <param name="GroupID">                The ID of the group to look for toolpath operations in
                                      or 1 to ignore groups.
                                      </param>
            <param name="OnlySelectedOperations"> True if the search is only to look for operations that are
                                      selected in the Toolpath Manager and false to ignore
                                      selection status.
                                      </param>
            <param name="ToolUsed">               The tool object being used in operations to be found
                                      or a null object to ignore the tool being used.
                                      </param>
            <returns> An array of Operation objects representing all of the appropriate toolpath operations
          found in the current Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Operation objects can be down-cast to their appropriate
          derived operation types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetOperations(System.Boolean)">
            <summary> This method is used to get objects for all of the toolpath operations of a given
          selection status in the current Mastercam part file.
          </summary>
            <param name="OnlySelectedOperations"> True if the search is only to look for operations that are
                                      selected in the Toolpath Manager and false to ignore
                                      selection status.
                                      </param>
            <returns> An array of Operation objects representing all of the appropriate toolpath operations
          found in the current Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Operation objects can be down-cast to their appropriate
          derived operation types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetOperations(Mastercam.Database.Tool)">
            <summary> This method is used to get objects for all of the toolpath operations in a given group
          in the current Mastercam part file.
          </summary>
            <param name="ToolUsed"> The tool object being used in operations to be found. </param>
            <returns> An array of Operation objects representing all of the appropriate toolpath operations
          found in the current Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Operation objects can be down-cast to their appropriate
          derived operation types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetOperations(System.Int32)">
            <summary> This method is used to get objects for all of the toolpath operations in a given group
          in the current Mastercam part file.
          </summary>
            <param name="GroupID"> The ID of the group to look for toolpath operations in. </param>
            <returns> An array of Operation objects representing all of the appropriate toolpath operations
          found in the current Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Operation objects can be down-cast to their appropriate
          derived operation types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetOperations(Mastercam.Database.Types.OperationType)">
            <summary> This method is used to get objects for all of the toolpath operations of a given type
          in the current Mastercam part file.
          </summary>
            <param name="OpType"> The type of toolpath operation to look for. </param>
            <returns> An array of Operation objects representing all of the appropriate toolpath operations
          found in the current Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Operation objects can be down-cast to their appropriate
          derived operation types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetOperations">
            <summary> This method is used to get objects for all of the toolpath operations in the current
          Mastercam part file.
          </summary>
            <returns> An array of Operation objects representing all of the appropriate toolpath operations
          found in the current Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Operation objects can be down-cast to their appropriate
          derived operation types.
           </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetMillTool(System.Int32)">
            <summary> Gets mill tool from slot number. </summary>
            <param name="slot"> The mill slot number. </param>
            <returns> nullptr if it fails, else the mill tool. </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetTools(Mastercam.Database.Types.ToolType,System.Int32)">
            <summary> This method is used to get objects for all of the tools in the current Mastercam part
          file that match the specified input criteria.
          </summary>
            <param name="TlType">         The type of tool to look for or an Undefined tool to look for all
                              tools.
                              </param>
            <param name="MachineGroupID"> The ID of the machine group to look for tools in or -1 to look
                              throughout all machine groups.
                              </param>
            <returns> An array of Tool objects representing all of the appropriate tools found in the current
          Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Tool objects can be down-cast to their appropriate derived tool types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetTools(System.Int32)">
            <summary> This method is used to get objects for all of the tools in the current Mastercam part
          file that are used in a given machine group.
          </summary>
            <param name="MachineGroupID"> The ID of the machine group to look for tools in. </param>
            <returns> An array of Tool objects representing all of the appropriate tools found in the current
          Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Tool objects can be down-cast to their appropriate derived tool types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetTools(Mastercam.Database.Types.ToolType)">
            <summary> This method is used to get objects for all of the tools in the current Mastercam part
          file that match the specific type.
          </summary>
            <param name="TlType"> The type of tool to look for. </param>
            <returns> An array of Tool objects representing all of the appropriate tools found in the current
          Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Tool objects can be down-cast to their appropriate derived tool types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetTools">
            <summary> This method is used to get objects for all of the tools in the current Mastercam part
          file.
          </summary>
            <returns> An array of Tool objects representing all of the appropriate tools found in the current
          Mastercam part file's database.
          </returns>
            <remarks> Note that all of the Tool objects can be down-cast to their appropriate derived tool types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSurfaceGeometry(Mastercam.Database.Types.SelectionMask,System.Int32)">
            <summary> This method is used to get objects for all of the surface geometry that meet the
          multiple input criteria in the current Mastercam part file.
          </summary>
            <param name="SelectionTypes"> The selection status of the surface geometry to look for. </param>
            <param name="Level">          The number of the level to search for surface geometry on. </param>
            <returns> An array of SurfaceGeometry objects representing all of the appropriate surface
          geometry found.
          </returns>
            <remarks> Note that all of the SurfaceGeometry objects can be down-cast to their appropriate
          derived surface geometry types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSurfaceGeometry(Mastercam.Database.Types.SelectionMask)">
            <summary> This method is used to get objects for all of the surface geometry that meet the input
          selection status criteria in the current Mastercam part file.
          </summary>
            <param name="SelectionTypes"> The selection status of the surface geometry to look for. </param>
            <returns> An array of SurfaceGeometry objects representing all of the appropriate surface
          geometry found.
          </returns>
            <remarks> Note that all of the SurfaceGeometry objects can be down-cast to their appropriate
          derived surface geometry types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSurfaceGeometry(System.Int32)">
            <summary> This method is used to get objects for all of the surface geometry on a given level in
          the current Mastercam part file.
          </summary>
            <param name="Level"> The number of the level to search for surface geometry on. </param>
            <returns> An array of SurfaceGeometry objects representing all of the appropriate surface
          geometry found.
          </returns>
            <remarks> Note that all of the SurfaceGeometry objects can be down-cast to their appropriate
          derived surface geometry types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSurfaceGeometry">
            <summary> This method is used to get objects for all of the surface geometry in the current
          Mastercam part file.
          </summary>
            <returns> An array of SurfaceGeometry objects representing all of the appropriate surface
          geometry found.
          </returns>
            <remarks> Note that all of the SurfaceGeometry objects can be down-cast to their appropriate
          derived surface geometry types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSolidGeometry(Mastercam.Database.Types.SelectionMask,System.Int32)">
            <summary> This method is used to get objects for all of the solid geometry that meets the
          combination of search criteria in the current Mastercam part file.
          </summary>
            <param name="SelectionTypes"> The selection status of the solid geometry to look for. </param>
            <param name="Level">          The number of the level to search for solid geometry on or -1 to
                              ignore the level.
                              </param>
            <returns> An array of SolidGeometry objects representing all of the appropriate solid geometry
          found.
          </returns>
            <remarks> Note that all of the SolidGeometry objects can be down-cast to their appropriate
          derived solid primitive types.
          </remarks>
            <exception cref="T:Mastercam.App.Exceptions.SolidException"> Thrown if an unknown solid primitive type is encountered.
                                  </exception>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSolidGeometry(Mastercam.Database.Types.SelectionMask)">
            <summary> This method is used to get objects for all of the solid geometry with specific
          selection settings in the current Mastercam part file.
          </summary>
            <param name="SelectionTypes"> The selection status of the solid geometry to look for. </param>
            <returns> An array of SolidGeometry objects representing all of the appropriate solid geometry
          found.
          </returns>
            <remarks> Note that all of the SolidGeometry objects can be down-cast to their appropriate
          derived solid primitive types.
          </remarks>
            <exception cref="T:Mastercam.App.Exceptions.SolidException"> Thrown if an unknown solid primitive type is encountered.
                                  </exception>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSolidGeometry(System.Int32)">
            <summary> This method is used to get objects for all of the solid geometry on a given level in
          the current Mastercam part file.
          </summary>
            <param name="Level"> The number of the level to search for solid geometry on. </param>
            <returns> An array of SolidGeometry objects representing all of the appropriate solid geometry
          found.
          </returns>
            <remarks> Note that all of the SolidGeometry objects can be down-cast to their appropriate
          derived solid primitive types.
          </remarks>
            <exception cref="T:Mastercam.App.Exceptions.SolidException"> Thrown if an unknown solid primitive type is encountered.
                                  </exception>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSolidGeometry">
            <summary> This method is used to get objects for all of the solid geometry in the current
          Mastercam part file.
          </summary>
            <returns> An array of SolidGeometry objects representing all of the appropriate solid geometry
          found.
         </returns>
            <remarks> Note that all of the SolidGeometry objects can be down-cast to their appropriate
          derived solid primitive types.
          </remarks>
            <exception cref="T:Mastercam.App.Exceptions.SolidException"> Thrown if an unknown solid primitive type is encountered.
                                  </exception>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetResultGeometry">
            <summary> Gets all of the geometry in the active 'Result'. </summary>
            <returns> An array of Geometry objects representing all of the appropriate Geometry found.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGroupGeometry">
            <summary> Gets all of the geometry in the active 'Group'. </summary>
            <returns> An array of Geometry objects representing all of the appropriate Geometry found.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetSelectedGeometry">
            <summary> Gets all of the currently 'Selected' geometry. </summary>
            <returns> An array of Geometry objects representing all of the appropriate Geometry found.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGeometry(Mastercam.Database.Types.GeometryMask,Mastercam.Database.Types.SelectionMask,System.Int32)">
            <summary> This method is used to get objects for geometry with any combination of settings in the
          current Mastercam part file.
          </summary>
            <param name="GeometryTypes">  The types of geometry to look for. </param>
            <param name="SelectionTypes"> The selection status of the geometry to look for. </param>
            <param name="Level">          The number of the level to search for geometry on or -1 to ignore
                              the level.
                              </param>
            <returns> An array of Geometry objects representing all of the appropriate Geometry found.
          </returns>
            <remarks> Note that all of the Geometry objects can be down-cast to their appropriate derived types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGeometry(Mastercam.Database.Types.SelectionMask)">
            <summary> This method is used to get objects for geometry with specific selection settings in the
          current Mastercam part file.
          </summary>
            <param name="SelectionTypes"> The selection status of the geometry to look for. </param>
            <returns> An array of Geometry objects representing all of the appropriate Geometry found.
          </returns>
            <remarks> Note that all of the Geometry objects can be down-cast to their appropriate derived types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGeometry(Mastercam.Database.Types.GeometryMask)">
            <summary> This method is used to get objects for geometry of specific types in the current
          Mastercam part file.
          </summary>
            <param name="GeometryTypes"> The types of geometry to look for. </param>
            <returns> An array of Geometry objects representing all of the appropriate Geometry found.
       </returns>
            <remarks> Note that all of the Geometry objects can be down-cast to their appropriate derived types.
       </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGeometry(System.Int32)">
            <summary> This method is used to get objects for the geometry on a given level in the current
          Mastercam part file.
          </summary>
            <param name="Level"> The number of the level to search for geometry on. </param>
            <returns> An array of Geometry objects representing all of the appropriate Geometry found.
          </returns>
            <remarks> Note that all of the Geometry objects can be down-cast to their appropriate derived types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetGeometry">
            <summary> This method is used to get objects for all of the geometry in the current Mastercam
          part file.
          </summary>
            <returns> An array of Geometry objects representing all of the appropriate Geometry found.
          </returns>
            <remarks> Note that all of the Geometry objects can be down-cast to their appropriate derived types.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.SearchManager.ToolCaster(op_tool_info*,tp_tool*)">
            <summary> Tool caster. </summary>
            <param name="oti"> [in,out] If non-null, the op_tool_info data for the Tool. </param>
            <param name="tpt"> [in,out] If non-null, the tp_tool data for the Tool. </param>
            <returns> null if it fails, else the initialized Tool. </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.GetAllGeometryByMask(System.Int16)">
            <summary> Gets all geometry match the specified bit mask. </summary>
            <param name="SelectionMask"> The selection mask.
                             SELECT_BIT, GROUP_BIT, RESULT_BIT, etc.
                             </param>
            <returns> An array of Geometry objects representing all of the appropriate Geometry found.
          </returns>
        </member>
        <member name="M:Mastercam.Support.SearchManager.#ctor">
            <summary> Initializes a new instance of the SearchManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.SearchManager">
            <summary> This class is used for retrieving entities from the Mastercam database based on different
          combinations of settings.
          </summary>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalOpsFileData.ParentID">
            <summary> Gets or sets the ID of the parent (toolpath) group. </summary>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalOpsFileData.OpTool">
            <summary> Gets or sets the operation tool. </summary>
            <remarks> If Mastercam is in Design mode (No Machine Groups),
		  this tool data will be null. </remarks>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalOpsFileData.OpCode">
            <summary> Gets or sets the operation code. </summary>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalOpsFileData.OpSlot">
            <summary> Gets or sets the slot# of the operation. </summary>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalOpsFileData.OpIdn">
            <summary> Gets or sets the operation ID. </summary>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalOpsFileData.Name">
            <summary> Gets or set the name. </summary>
        </member>
        <member name="T:Mastercam.Support.Types.ExternalOpsFileData">
            <summary> An external ops data package. </summary>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalGroupsFileData.GroupSlot">
            <summary> Gets or sets the slot# of the group. </summary>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalGroupsFileData.ParentID">
            <summary> Gets or sets the ID of the parent group. </summary>
            <remarks> If the this property value is '0', this is a Machine Group. </remarks>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalGroupsFileData.ID">
            <summary> Gets or sets the group ID. </summary>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalGroupsFileData.Comment">
            <summary> Gets or sets the group comment. </summary>
            <remarks> Only Machine Groups have a "comment". 
		  If the group is a Toolpath Group, this will be an empty string. </remarks>
        </member>
        <member name="P:Mastercam.Support.Types.ExternalGroupsFileData.Name">
            <summary> Gets or sets the group name. </summary>
        </member>
        <member name="T:Mastercam.Support.Types.ExternalGroupsFileData">
            <summary> The data for groups from an external file. </summary>
        </member>
        <member name="T:Mastercam.Support.Types.ConfigurationChangeType">
            <summary> An enumeration listing the different methods of changing the Metric
          configuration setting within Mastercam.
          </summary>
        </member>
        <member name="F:Mastercam.Support.Types.ConfigurationChangeType.AllSettings">
            <summary> This is the option for changing all of the settings. </summary>
        </member>
        <member name="F:Mastercam.Support.Types.ConfigurationChangeType.UnitsOnly">
            <summary> This is the option for only changing the units. </summary>
        </member>
        <member name="F:Mastercam.Support.Types.ConfigurationChangeType.ShowDialog">
            <summary> This is the option for showing the dialog first and letting the user choose the method. </summary>
        </member>
        <member name="P:Mastercam.Support.Group.DefaultProgramNumber">
            <summary> Gets or sets the Default Program Number in a machine group. </summary>
        </member>
        <member name="P:Mastercam.Support.Group.ID">
            <summary> Gets the unique ID of this group in Mastercam. </summary>
        </member>
        <member name="P:Mastercam.Support.Group.Name">
            <summary> Gets or sets the current Group's name. </summary>
            <remarks> Changing this property may require an update to the Toolpath Manager
          using the OperationsManager.RefreshOperations() method.
          </remarks>
        </member>
        <member name="P:Mastercam.Support.Group.SequentialToolNumbering">
            <summary> Gets or sets the sequential tool numbering flag in a machine group. </summary>
        </member>
        <member name="M:Mastercam.Support.Group.SetToolpathDirectory(System.String)">
            <summary> Sets the toolpath directory. </summary>
            <param name="folder"> The full path to the folder. </param>
            <returns> True if it succeeds, false if it fails. (The folder does not exist or this Group is not a Machine Group). </returns>
        </member>
        <member name="M:Mastercam.Support.Group.GetToolpathDirectory">
            <summary> Gets the toolpath directory. </summary>
            <returns> The toolpath directory, else an empty string is this Group is not a Machine Group. </returns>
        </member>
        <member name="M:Mastercam.Support.Group.IsGeometryGroup">
            <summary> This method is used to determine whether or not a Mastercam group is a Geometry group.
          </summary>
            <returns> True if this group object is a geometry group , else false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.Group.IsMachineGroup">
            <summary> This method is used to determine whether or not a Mastercam group is a Machine group.
          </summary>
            <returns> True if this group object is a machine group , else false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.Group.IsToolpathGroup">
            <summary> This method is used to determine whether or not a Mastercam group is a Toolpath group.
          </summary>
            <returns> True if this group object is a toolpath group , else false if not. </returns>
        </member>
        <member name="M:Mastercam.Support.Group.GetParentGroup">
            <summary> This method is used to get a group's parent. </summary>
            <returns> A new group object for this group's parent group or a null value if this group has no
          parent.
          </returns>
        </member>
        <member name="M:Mastercam.Support.Group.NameFromNumber(System.Int32)">
            <summary> This method tried to find a group name to match a group ID value given as input.
          </summary>
            <param name="GroupNumberToMatch"> The ID of the group in Mastercam to look for. </param>
            <returns> The name of the matching group if one was found, else a null object reference if not.
          </returns>
        </member>
        <member name="M:Mastercam.Support.Group.NumberFromName(System.String)">
            <summary> This method tries to find a group ID value to match a group name given as input.
          </summary>
            <param name="GroupNameToMatch"> The name of the group in Mastercam to look for. </param>
            <returns> The ID of the matching group if one was found, else -1 if not. </returns>
        </member>
        <member name="M:Mastercam.Support.Group.IsIDValid(System.Int32)">
            <summary> This method validates whether or not a group ID value actually corresponds to a group
          in Mastercam.
          </summary>
            <param name="GroupNumberToMatch"> The ID of the group in Mastercam to try and validate. </param>
            <returns> True if a matching group was found; false if not. </returns>
        </member>
        <member name="F:Mastercam.Support.Group.GroupName">
            <summary> The name of this group in Mastercam. </summary>
        </member>
        <member name="F:Mastercam.Support.Group.GroupID">
            <summary> The ID of this group in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Support.Group.Delete">
            <summary> Deletes this group and all of it's subgroups from Mastercam. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Support.Group.#ctor(System.String)">
            <summary> Initializes a new instance of the Group class. </summary>
            <remarks> Initializes a group object to match the group name passed in. </remarks>
            <param name="GroupNameToMatch"> The name of the Mastercam group to initialize this object from.
                                </param>
        </member>
        <member name="M:Mastercam.Support.Group.#ctor(System.Int32)">
            <summary> Initializes a new instance of the Group class. </summary>
            <remarks> Initializes a group object to match the group ID passed in. </remarks>
            <param name="GroupIDToMatch"> The ID of the Mastercam group to initialize this object from.
                              </param>
        </member>
        <member name="T:Mastercam.Support.Group">
            <summary>This class is used to work with Mastercam groups.</summary>
        </member>
        <member name="P:Mastercam.Database.SolidGeometry.Name">
            <summary> Gets or sets the name of the solid entity. </summary>
            <remarks> Note that if the solid has the default "Solid" name, this Name will be empty!. </remarks>
        </member>
        <member name="P:Mastercam.Database.SolidGeometry.ZAxisVector">
            <summary> Gets or sets the vector representing the Z axis for the specified solid primitive object.
          </summary>
        </member>
        <member name="P:Mastercam.Database.SolidGeometry.YAxisVector">
            <summary> Gets or sets the vector representing the Y axis for the specified solid primitive object.
          </summary>
        </member>
        <member name="P:Mastercam.Database.SolidGeometry.XAxisVector">
            <summary> Gets or sets the vector representing the X axis for the specified solid primitive object.
          </summary>
        </member>
        <member name="P:Mastercam.Database.SolidGeometry.BasePoint">
            <summary> Gets or sets the base point for the specified solid primitive object. </summary>
        </member>
        <member name="M:Mastercam.Database.SolidGeometry.Commit">
            <summary> This handles the committing of changes to a Solid object to the Mastercam database.
          </summary>
            <returns> True if the object was committed successfully, else false if not. </returns>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException">       Thrown if for some reason this object is
                                             supposed to be valid but the geometry is no
                                             longer in the Mastercam database.
                                             </exception>
            <exception cref="T:Mastercam.App.Exceptions.SolidException">            Thrown if an unknown solid primitive type is
                                             encountered.
                                             </exception>
        </member>
        <member name="M:Mastercam.Database.SolidGeometry.GetSolid(SLD_PRIMITIVE_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads a passed in solid parameters structure with this solid object's current settings.
          </summary>
            <param name="Params"> [out] The parameter structure to load with this object's current settings.
                      </param>
            <returns> True if the solid parameters could be stored and passed back successfully, false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.SolidGeometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SLD_PRIMITIVE_PARAMS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a geometry entity to the Mastercam database. </summary>
            <param name="Ent">    The geometry entity to be committed. </param>
            <param name="Params"> The solid parameters to commit the geometry entity with. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.SolidGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the SolidGeometry class. </summary>
            <remarks> Attempts to retrieve a geometry entity with the given ID from the Mastercam
          database and use that to initialize this solid geometry object.
   <para> If no matching geometry entity is found in the Mastercam database, the object is
          initialized to default values. </para></remarks>
            <param name="ID"> The ID of the geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="M:Mastercam.Database.SolidGeometry.#ctor">
            <summary> Initializes a new instance of the SolidGeometry class. </summary>
            <remarks> All members are given default values. </remarks>
        </member>
        <member name="T:Mastercam.Database.SolidGeometry">
            <summary> This class handles the interaction between the NET-Hook and Mastercam for Solid geometry objects.
          </summary>
        </member>
        <member name="P:Mastercam.IO.GraphicsManager.InPrintPreview">
            <summary> Gets or sets a value that represents the Mastercam's external flag for whether
          or not the screen is in print preview mode.
          </summary>
        </member>
        <member name="P:Mastercam.IO.GraphicsManager.InHardcopy">
            <summary> Gets or sets a value that represents Mastercam's external global variable for
          whether or not the screen is in 'Hardcopy' mode.
          </summary>
        </member>
        <member name="P:Mastercam.IO.GraphicsManager.ToolpathDisplayOn">
            <summary> Gets or sets a value indicating the visibility of the display of toolpath
          information in the viewports.
          </summary>
        </member>
        <member name="P:Mastercam.IO.GraphicsManager.WCSAxesOn">
            <summary> Gets or sets a value indicating the visibility of the WCS axes in the
          lower right-hand corner of the graphics window / viewport.
          </summary>
        </member>
        <member name="P:Mastercam.IO.GraphicsManager.ViewAxesOn">
            <summary> Gets or sets a value indicating the visibility of the view axes in the
          lower left-hand corner of the graphics window / viewport.
          </summary>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.ClearColors(Mastercam.Database.Types.GroupSelectionMask)">
            <summary> Clears all Group and/or Result color markings. </summary>
            <param name="mask"> The mask defining which color markings are to be cleared. </param>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.SetFocusToGraphicsWindow">
            <summary> This method forces user input focus to the Mastercam graphics window / viewport.
          </summary>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.RestoreCursor">
            <summary> Restores the cursor displayed in Mastercam to the default cursor. </summary>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.SetWaitCursor">
            <summary> Sets cursor in Mastercam to the "wait" (HourGlass) cursor. </summary>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.Repaint(System.Boolean)">
            <summary> This method repaints the screen using Mastercam's internal display list. </summary>
            <param name="FullyRegenerate"> If true, then Mastercam will first fully regenerate the
                               internal display list before repainting the screen.
                               </param>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.Repaint">
            <summary> This method repaints the screen using Mastercam's internal display list. </summary>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.FitScreen(Mastercam.Database.Chain[],System.Double)">
            <summary> This method fits the screen dimensions make visible all of the chains passed in to
          this method.
          </summary>
            <param name="ChainArray"> The array of all the chains that should be visible after the screen
                          fitting is complete.
                          </param>
            <param name="Margin">     This value will be added to the outer extents of the chains passed
                          in order to serve as a margin for the viewport.
                          </param>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.FitScreen(Mastercam.Math.Point2D,System.Double)">
            <summary> This method fits the screen dimensions to a set of specified coordinate values.
             </summary>
            <param name="Center"> This should be the point whose 2D coordinate values will become the center
                      of the viewport.
                      </param>
            <param name="Height"> This should be the value to become the height of the viewport. </param>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.FitScreen(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This method fits the screen dimensions to a set of specified coordinate values.
          </summary>
            <param name="UpperLeft">  This should be the point whose 2D coordinate values will become the
                          coordinates of the upper left-hand corner of the viewport.
                          </param>
            <param name="LowerRight"> This should be the point whose 2D coordinate values will become the
                          coordinates of the lower right-hand corner of the viewport.
                          </param>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.FitScreen(System.Double,System.Double,System.Double,System.Double)">
            <summary> This method fits the screen dimensions to a set of specified coordinate values.
          </summary>
            <param name="XUpperLeft">  This should be the x value of the point to become the new upper
                           left-hand corner of the viewport.
                           </param>
            <param name="YUpperLeft">  This should be the y value of the point to become the new upper
                           left-hand corner of the viewport.
                           </param>
            <param name="XLowerRight"> This should be the x value of the point to become the new lower
                           right-hand corner of the viewport.
                           </param>
            <param name="YLowerRight"> This should be the y value of the point to become the new lower
                           right-hand corner of the viewport.
                           </param>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.FitScreen">
            <summary> This method fits the screen dimensions to make all of the geometry in the file visible.
          </summary>
        </member>
        <member name="M:Mastercam.IO.GraphicsManager.#ctor">
            <summary> Initializes a new instance of the GraphicsManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.IO.GraphicsManager">
            <summary>This class is used for performing graphics-related tasks and activities.</summary>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.ReplaceDraftWithLines(System.Int32)">
            <summary> This method replaces all draft entities with lines. </summary>
            <param name="LevelNumber"> The level number of the level to process. </param>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetLevelsEntityCounts(System.Boolean)">
            <summary> Gets the number of entities on all used levels. </summary>
            <param name="includeBlanked"> True to include, false to exclude the blanked entities. </param>
            <returns> A dictionary collection were the Key is the level number and
		  the Value is the number of entities on that level. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetLevelEntityCount(System.Int32,System.Boolean)">
            <summary> Count the number of entities on a level. </summary>
            <remarks> If you are calling this method multiple times to get the number of entities for multiple levels, 
		  you may want to use <see cref="M:Mastercam.IO.LevelsManager.GetLevelsEntityCounts(System.Boolean)" /></remarks>
            <param name="levelNumber">    The level number. </param>
            <param name="includeBlanked"> True to include, false to exclude the blanked entities. </param>
            <returns> The number of entities on the level. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.LevelHasEntities(System.Int32)">
            <summary> Does the specified level have any entities? </summary>
            <remarks> This is a "quick" search, as it does not look to see "how many" entities the level has.
          Once a single entity is found on this level, it returns 'true'.</remarks>
            <param name="levelNumber"> The level number. </param>
            <returns> true if there are any entities on the level, false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.DeleteLevelSet(System.String)">
            <summary> Deletes the levels described by levelSetName. </summary>
            <remarks> The level will deleted only...
           If it contains no geometry entities and it is not the "main" level.</remarks>
            <param name="levelSetName"> The name of the level set (multiple levels can have the same level set name). </param>
            <returns> The number of levels that were deleted. (-1 if an empty level set name was supplied) </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.DeleteLevels(System.String)">
            <summary> Deletes the levels described by levelName. </summary>
            <remarks> The level will deleted only...
           If it contains no geometry entities and it is not the "main" level.</remarks>
            <param name="levelName"> The name of the level (multiple levels can have the same name). </param>
            <returns> The number of levels that were deleted. (-1 if an empty level name was supplied) </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.DeleteLevel(System.Int32)">
            <summary> Deletes the level described by levelNumber. </summary>
            <remarks> The level will deleted only...
          If it contains no geometry entities and it is not the "main" level.</remarks>
            <param name="levelNumber"> The level number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetLevelNumbersWithNames">
            <summary> This method returns an array of level numbers representing each level that has
          a Level name associated with it.
          </summary>
            <returns> An array containing the IDs of all of the levels that have level names. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetLevelNumbersByName(System.String,System.String)">
            <summary> This method gets the Level Number(s) that have the Level Name and/or LevelSet name.
          </summary>
            <remarks> Since there is no restriction on Level "names" and LevelSet "names" being
          unique, there can be multiple matches. You supply which "name" (or names)
          you wish to match on - Level "name", LevelSet "name" or both.
          </remarks>
            <param name="LevelName">    The Level name to match. (can be blank!) </param>
            <param name="LevelSetName"> The LevelSet name to match. (can be blank!) </param>
            <returns> An array containing the IDs of all of the matching levels. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetLevelNumbersByName(System.String)">
            <summary> This method gets the Level Number(s) that have the Level name.
          </summary>
            <remarks> Since there is no restriction on Level "names" unique,
          there can be multiple matches.
          </remarks>
            <param name="LevelName">    The Level name to match. </param>
            <returns> An array containing the IDs of all of the matching levels. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetLevelSetName(System.Int32)">
            <summary> This method gets the Level Set name of a given level. </summary>
            <param name="LevelNumber"> The level number of the level whose level set name is to be retrieved.
                           </param>
            <returns> The Level Set name of the specified level. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.SetLevelSetName(System.Int32,System.String)">
            <summary> This method sets the LevelSet name of a given level. </summary>
            <param name="LevelNumber">     The level number of the level whose level name is to be changed.
                               </param>
            <param name="NewLevelSetName"> The new Level Set name of the specified level.
                               </param>
            <returns> The name was successfully set. This will be false if the name was truncated.
          </returns>
            <remarks> The total combined length of the Level "name" AND the LevelSet "name"
          cannot exceed 295 characters.
          </remarks>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetLevelName(System.Int32)">
            <summary> This method gets the Level name of a given level. </summary>
            <param name="LevelNumber"> The level number of the level whose name is to be retrieved.
                           </param>
            <returns> The name of the specified level. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.SetLevelName(System.Int32,System.String)">
            <summary> This method sets the Level name of a given level. </summary>
            <param name="LevelNumber">  The number of the level whose level name is to be changed. </param>
            <param name="NewLevelName"> The new name of the specified level. </param>
            <returns> The name was successfully set. This will be false if the name was truncated.
          </returns>
            <remarks> The total combined length of the Level "name" AND the LevelSet "name"
          cannot exceed 295 characters.
          </remarks>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetLevelNumbersWithGeometry">
            <summary> This method returns an array of level numbers representing each level that has any
          geometry on it.
          </summary>
            <returns> An array containing the IDs of all of the levels that have geometry. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetActiveLevelNumbers">
            <summary> This method returns an array of level numbers representing each currently active
          levels within Mastercam.
          </summary>
            <returns> An array containing the IDs of all of the currently active levels. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetVisibleLevelNumbers">
            <summary> This method returns an array of level numbers representing each currently visible
          levels within Mastercam.
          </summary>
            <returns> An array containing the IDs of all of the currently visible levels. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.SetLevelVisible(System.Int32,System.Boolean)">
            <summary> This method sets the visibility of a given level within Mastercam. </summary>
            <remarks> If the specified level number does not already exist, it will be created.
          If the Level being turned OFF is the Main level, it will be set invisible
          even if the "Make main level always visible" option is checked in the Level
          Manager.
          </remarks>
            <param name="LevelNumber"> The number of the level to have it's visibility set. </param>
            <param name="Visible">     Whether or not the specified level should be visible. </param>
            <returns> True if the level visibility was set successfully and false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.SetLevelSetsVisible(System.String,System.Boolean)">
            <summary> This method sets the visibility of level(s) within Mastercam. </summary>
            <param name="LevelSetName"> The name of the LevelSet to have it's visibility set.
                            </param>
            <param name="Visible">      Whether or not the specified level should be visible. </param>
            <returns> The number of levels that were affected. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.SetLevelsVisible(System.String,System.Boolean)">
            <summary> This method sets the visibility of level(s) within Mastercam. </summary>
            <remarks> Since there is no restriction on Level "names" being unique, there can be
          multiple matches when selecting "by name"! If the Level being turned OFF is
          the Main level, it will be set invisible even if the "Make main level
          always visible" option is checked in the Level Manager.
          </remarks>
            <param name="LevelName"> The name of the Level to have it's visibility set. </param>
            <param name="Visible">   Whether or not the specified level should be visible. </param>
            <returns> The number of levels that were affected. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.IsLevelVisible(System.Int32)">
            <summary> This method checks to see if a given level is currently visible within Mastercam.
          </summary>
            <param name="LevelNumber"> This is the number of the level to check for visibility.
                           </param>
            <returns> True if the level if currently visible and false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.SetMainLevel(System.Int32)">
            <summary> Sets the Main (active) level within Mastercam. </summary>
            <remarks> If the specified level number does not already exist, it will be created.
          </remarks>
            <param name="LevelNumber"> The number of the level to set as the active Main level. </param>
            <returns> true if is succeeds, false if it fails to set the level.
          </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.SetMainLevel(System.String)">
            <summary> Sets the main (active) level within Mastercam.
          </summary>
            <remarks> There can be multiple levels with the specified "name".
          *If that is the case, this function sets the first matching level found to
           be the Main Level.*
           If the specified level number does not already exist, it will be created.
           </remarks>
            <param name="LevelName"> The name of the level to set as the active Main level. </param>
            <returns> The number of the level that was set has the Main level, or -1 if no level with the
          specified name was found.
          </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetMainLevel">
            <summary> Gets the level number of the current Main Level. </summary>
            <returns> The number of the Main (active) level that is set in Mastercam. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.SetOnlyActiveLevelVisibleSetting(System.Boolean)">
            <summary> Sets the on/off state of the 'Only Active level is visible' setting. </summary>
            <param name="Setting"> True to enable, or false to disable the setting. </param>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetOnlyActiveLevelVisibleSetting">
            <summary> Gets the on/off state of the 'Only Active level is visible' setting. </summary>
            <returns> True if the option is enabled (checked) or false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.SetMainLevelVisibleSetting(System.Boolean)">
            <summary> Sets the on/off state of the 'Active level is always visible' setting. </summary>
            <param name="Setting"> True to enable, or false to disable the setting. </param>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.GetMainLevelVisibleSetting">
            <summary> Gets the on/off state of the 'Active level is always visible' setting. </summary>
            <returns> True if the option is enabled (checked) or false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.RefreshLevelsManager">
            <summary> Refreshes the Level Manager dialog data display. </summary>
            <remarks> Changes your NET-Hook makes to the levels data may not be reflected in the Level Manager pane 
          until you tell it to refresh itself. </remarks>
        </member>
        <member name="F:Mastercam.IO.LevelsManager.tildeSeparator">
            <summary> Mastercam Level "name" and LevelSet "name" is stored internally in a single string as -&gt;
          LevelName~~~LevelSetName.
          </summary>
        </member>
        <member name="M:Mastercam.IO.LevelsManager.#ctor">
            <summary> Initializes a new instance of the LevelsManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.IO.LevelsManager">
            <summary>This class is used to work with entity levels within Mastercam.</summary>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.SelectGeometryByMask(Mastercam.IO.Types.QuickMaskType)">
            <summary> Select all entities matching the supplied type 'mask'. </summary>
            <remarks> These selections are additive, meaning this selection will be added to any
          current selections.
          </remarks>
            <param name="Mask"> The selection mask. </param>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.UnselectAllGeometry">
            <summary> This method sets all of the geometry in the current file as unselected. </summary>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.SelectAllGeometry">
            <summary> This method sets all of the geometry in the current file as selected. </summary>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.WindowSelect(Mastercam.Database.Types.GeometryMask,Mastercam.IO.Types.BoxSelectionType,System.ValueType!Mastercam.Math.Point2D!System.Runtime.CompilerServices.IsBoxed,System.ValueType!Mastercam.Math.Point2D!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Window selection using a program defined window. </summary>
            <param name="SelectionMask"> The geometry mask to use during geometry selection. </param>
            <param name="SelectionType"> The type of box selection to be performed. </param>
            <param name="Corner1">		 The first corner of the window. </param>
            <param name="Corner2">		 The second corner of the window. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.BoxSelectGeometry(System.String,Mastercam.Database.Types.GeometryMask,Mastercam.IO.Types.BoxSelectionType)">
            <summary> This method asks the user to box select some geometry. </summary>
            <remarks> This method might best be used with the SearchManager::GetGeometry method
          when combined with selection flags that will return all of the geometry that
          was box selected in this step by the user.
          </remarks>
            <param name="PromptText">    The text to display to the user as they're selecting the geometry.
                             </param>
            <param name="SelectionMask"> The geometry mask to use during geometry selection. </param>
            <param name="SelectionType"> The type of box selection to be performed. </param>
            <returns> True if the box selection was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.AskForMultipleGeometry(System.String,Mastercam.Database.Types.GeometryMask)">
            <summary> This method asks the user to select multiple geometry items. </summary>
            <param name="PromptText">    The text to display to the user as they're selecting the geometry.
                             </param>
            <param name="SelectionMask"> The geometry mask to use during geometry selection. </param>
            <returns> An array containing all of the geometry selected geometry items. </returns>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.AskForGeometry(System.String,Mastercam.Database.Types.GeometryMask)">
            <summary> This method asks the user to select a geometry item. </summary>
            <param name="PromptText">    The text to display to the user as they're selecting the geometry.
                             </param>
            <param name="SelectionMask"> The geometry mask to use during geometry selection. </param>
            <returns> A handle to the selected geometry item if successful, or a null value if not.
       </returns>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.AskForPoint(System.String,System.Boolean,System.Boolean,Mastercam.Database.Geometry@,Mastercam.IO.Types.PointMask@,Mastercam.Math.Point3D@,System.Double[]@)">
            <summary> Ask the user to select a point or point position on an entity. </summary>
            <remarks> The main purpose of this method is to allow user selection for the creation of Associative Points.
		  As some PointMasks are not usable for the creation of an AssociativePoint (Intersect, Sketch, etc.),
		  the PostMask returned will be PointMask::PointGeometry for those "invalid" cases.
		  In these cases'allowCreatePoint = true' must be set for a Point entity to be created and assigned to the Geometry out value.</remarks>
            <param name="PromptText">		The prompt text to display. </param>
            <param name="allowCreatePoint"> True to allow creating a point if needed. </param>
            <param name="allowSolid">		True to allow selection on Solids. </param>
            <param name="geometry">			[out] If non-null, the associated geometry entity that was selected. </param>
            <param name="pointType">		[out] Type of the point pick (See remarks!). </param>
            <param name="point">			[out] The point in world coordinates. </param>
            <param name="tValues">			[out] The 'T' values of the pick location. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.AskForPoint(System.String,System.Boolean,System.Boolean,Mastercam.Database.Geometry@,Mastercam.IO.Types.PointMask@,Mastercam.Math.Point3D@)">
            <summary> Ask the user to select a point or point position on an entity. </summary>
            <remarks> The main purpose of this method is to allow user selection for the creation of Associative Points.
		  As some PointMasks are not usable for the creation of an AssociativePoint (Intersect, Sketch, etc.),
		  the PostMask returned will be PointMask::PointGeometry for those "invalid" cases.
		  In these cases'allowCreatePoint = true' must be set for a Point entity to be created and assigned to the Geometry out value.</remarks>
            <param name="PromptText">		The prompt text to display. </param>
            <param name="allowCreatePoint"> True to allow creating a point if needed. </param>
            <param name="allowSolid">		True to allow selection on Solids. </param>
            <param name="geometry">			[out] If non-null, the associated geometry entity that was selected. </param>
            <param name="pointType">		[out] Type of the point pick (See remarks!). </param>
            <param name="point">			[out] The point in world coordinates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.AskForPoint(System.String,Mastercam.IO.Types.PointMask,Mastercam.Math.Point3D@)">
            <summary> This method asks the user to select or create a point. </summary>
            <param name="PromptText">    The text to display to the user as they're selecting the point.
                             </param>
            <param name="SelectionMask"> The point mask to use during point selection creation.
                              Use the PointMask Null value if no point masking is to be used.
                             </param>
            <param name="Value">         This should be a valid point object which will be set
                             to the returned point coordinates if successful.
                             </param>
            <returns> True if the point was selected or created successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.ChainSelectAllVisibleSelectedGeometry">
            <summary> This method sets the chaining flag in all visibly selected geometry. </summary>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.UnselectAllGeometryForChaining">
            <summary> This method clears the chaining flag in all of a part's geometry. </summary>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.SelectGeometryForChaining(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the chaining flag in all matching geometry. </summary>
            <param name="ent_mask"> The entity mask to match on. </param>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.SelectAllGeometryForChaining">
            <summary> Sets the chaining flag in all of the part's geometry. </summary>
        </member>
        <member name="M:Mastercam.IO.SelectionManager.#ctor">
            <summary> Initializes a new instance of the SelectionManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.IO.SelectionManager">
            <summary> This class handles the interaction of geometry selection. </summary>
        </member>
        <member name="M:Mastercam.Math.Point2D.op_Inequality(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This is a static inequality operator overload for the purposes of comparing these math
          objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Point1"> This is the first point to compare. </param>
            <param name="Point2"> This is the second point to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Point2D.op_Equality(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This is a static equality operator overload for the purposes of comparing these math
          objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Point1"> This is the first point to compare. </param>
            <param name="Point2"> This is the second point to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Point2D.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this math object to another
          one.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="obj"> This is the point to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Point2D.Equals(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This is a static equality method for the purposes of comparing these math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Point1"> This is the first point to compare. </param>
            <param name="Point2"> This is the second point to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="P:Mastercam.Math.Point2D.default(System.Int32)">
            <summary> Get or sets the specified coordinate of this Point2D.
          This is the bracket operator overload so that the X, Y values within this point
          can be accessed via an array-like interface.
          </summary>
            <param name="index"> The index used within the brackets must be either 0 or 1 to access
                     either the X or Y value within this Point2D.
                     </param>
            <exception cref="T:System.IndexOutOfRangeException"> Thrown if an index is passed in that is out of the allowed range.
                                            </exception>
        </member>
        <member name="M:Mastercam.Math.Point2D.Dot(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This is the dot product method so that two points can have their dot product
          calculated.
          </summary>
            <param name="Point1"> This is the first point in the dot product operation. </param>
            <param name="Point2"> This is the second point in the dot product operation. </param>
            <returns> The value of the dot product between the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point2D.op_Multiply(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This is the dot product operator overload so that two points can have their dot
          products calculated using an intuitive, mathematical method.
          </summary>
            <param name="Point1"> This is the first point in the dot product operation. </param>
            <param name="Point2"> This is the second point in the dot product operation. </param>
            <returns> The value of the dot product between the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point2D.Subtract(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This is the subtraction method so that two points can be subtracted from one another.
          </summary>
            <param name="Point1"> This is the point that will be subtracted from. </param>
            <param name="Point2"> This is the point whose values will be subtracted. </param>
            <returns> A new point representing the vector subtraction of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point2D.op_Subtraction(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This is the subtraction operator overload so that two points can be subtracted from one
          another.
          </summary>
            <param name="Point1"> This is the point that will be subtracted from. </param>
            <param name="Point2"> This is the point whose values will be subtracted. </param>
            <returns> A new point representing the vector subtraction of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point2D.Add(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This is the addition method so that two points can be added. </summary>
            <param name="Point1"> This is the first point in the point addition operation. </param>
            <param name="Point2"> This is the second point in the point addition operation. </param>
            <returns> A new point representing the vector addition of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point2D.op_Addition(Mastercam.Math.Point2D,Mastercam.Math.Point2D)">
            <summary> This is the addition operator overload so that two points can be added using an
          intuitive, mathematical method.
          </summary>
            <param name="Point1"> This is the first point in the point addition operation. </param>
            <param name="Point2"> This is the second point in the point addition operation. </param>
            <returns> A new point representing the vector addition of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point2D.ToString">
            <summary> Convert this object into a string representation. </summary>
            <returns> A text string that represents this object. </returns>
        </member>
        <member name="F:Mastercam.Math.Point2D.y">
            <summary> Gets or sets the  Y value of the point object. </summary>
        </member>
        <member name="F:Mastercam.Math.Point2D.x">
            <summary> Gets or sets the X value of the point object. </summary>
        </member>
        <member name="M:Mastercam.Math.Point2D.#ctor(System.Double,System.Double)">
            <summary> Initializes a new instance of the Point2D class. </summary>
            <remarks> This construction method takes an X and a Y value and constructs a point object from them.
          </remarks>
            <param name="XValue"> The value to become this point's X value. </param>
            <param name="YValue"> The value to become this point's Y value. </param>
        </member>
        <member name="M:Mastercam.Math.Point2D.ConvertMastercam(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> "Converts" this NET-Hook type to the corresponding Mastercam math type. </summary>
            <param name="MCamPoint"> [in,out] The Mastercam math type. </param>
        </member>
        <member name="M:Mastercam.Math.Point2D.#ctor(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes a new instance of the Point2D class. </summary>
            <param name="PointGeometry"> The Mastercam 2D point geometry data. </param>
        </member>
        <member name="T:Mastercam.Math.Point2D">
            <summary> This class is used as a mathematical representation of a 2D Point. </summary>
            <remarks> The operator overloads in this class utilize the VectorManager class for their operations.
          </remarks>
        </member>
        <member name="M:Mastercam.Support.TypeLibrary.#ctor">
            <summary> Initializes a new instance of the TypeLibrary class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.TypeLibrary">
            <summary> Type library. </summary>
            <remarks> This type library is used to hold GUIDs of class types that we'll need for comparison
          purposes in the API.
          These GUIDs are used for type comparison purposes; generally, they're used in downcasting
          handles to class objects. For performance purposes, if the GUID is not used in the API
          it's not included in the TypeLibrary class.
          </remarks>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.SaveCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's cutter comp  settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with cutter comp settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.SaveMultiPassesParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's finish settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with finish settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.SaveLeadInLeadOutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's rough/finish settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with rough/finish settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.SaveCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (basic) Cut Parameters settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> The operation data member to load with cut parameters settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.LoadCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's cutter comp settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cutter comp settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.LoadMultiPassesParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's finish settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's finish settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.LoadLeadInLeadOutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's lead-in/lead-out settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's lead-in/lead-out settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.LoadCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's (basic) Cut Parameters settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cut parameters settings from.
                  </param>
        </member>
        <member name="F:Mastercam.Operations.ThreadMillOperation.CutterComp">
            <summary> The cutter comp settings to be used in this contour operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.ThreadMillOperation.MultiPasses">
            <summary> Gets or sets the multi passes parameter data to be used in this thread mill operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.ThreadMillOperation.LeadInLeadOutParams">
            <summary> Gets or sets the lead-in lead-out parameter data to be used in this thread mill operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.ThreadMillOperation.CutParams">
            <summary> Gets or sets the (basic) cut parameter data to be used in this thread mill operation. </summary>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.Commit(System.Boolean)">
            <summary> This method commits the current Thread Mill operation to the Mastercam database. </summary>
            <param name="includePoints"> true to update any points assigned to the operation. </param>
            <remarks> If you know that you've not altered the points used by this operation,
		  you may wish to used this &gt;.Commit(false). </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.Commit">
            <summary> This method commits the current Thread Mill bore operation to the Mastercam database.
          </summary>
            <remarks> This commit also updates any the points used by this operation.
		   If you know that do not want the points touched during the commit,
		   you may wish to use the .Commit(false) method overload. </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.#ctor">
            <summary> Initializes a new instance of the ThreadMillOperation class. </summary>
            <remarks> This creates a new Thread Mill operation with default settings.
          </remarks>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.CommitOperation(System.Boolean)">
            <summary> Commits the operation. </summary>
            <param name="includePoints"> true to include, false to exclude touching the points during the commit. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the ThreadMillOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from
          the Mastercam database and use that to initialize this operation object.
          If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation object.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillOperation.LoadDefaults">
            <summary> Loads the default values for a given operation object. </summary>
        </member>
        <member name="T:Mastercam.Operations.ThreadMillOperation">
            <summary> This class is used for working with Thread Mill toolpath operations. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillLeadInLeadOut.HelicalEntryExitAtBottomOfThread">
            <summary> Gets or sets a value indicating the state of the
          Helical Entry/Exit At Bottom Of Thread option.
           </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillLeadInLeadOut.HelicalEntryExitAtTopOfThread">
            <summary> Gets or sets a value indicating the state of the
          Helical Entry/Exit At Top Of Thread option.
           </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillLeadInLeadOut.PerpendicularEntry">
            <summary> Gets or sets a value indicating the state of the
          Perpendicular Entry option.
           </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillLeadInLeadOut.StartAtCenter">
            <summary> Gets or sets a value indicating the state of the
          Start At Center option.
           </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillLeadInLeadOut.EntryExitLineLength">
            <summary> Gets or sets the EntryExitLineLength value. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillLeadInLeadOut.EntryExitArcClearance">
            <summary> Gets or sets the EntryExitArcClearance value. </summary>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillLeadInLeadOut.op_Inequality(Mastercam.Operations.ThreadMillLeadInLeadOut,Mastercam.Operations.ThreadMillLeadInLeadOut)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillLeadInLeadOut.op_Equality(Mastercam.Operations.ThreadMillLeadInLeadOut,Mastercam.Operations.ThreadMillLeadInLeadOut)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillLeadInLeadOut.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillLeadInLeadOut.Equals(Mastercam.Operations.ThreadMillLeadInLeadOut,Mastercam.Operations.ThreadMillLeadInLeadOut)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.ThreadMillLeadInLeadOut">
            <summary> This class represents the Thread Mill Lead-In Lead-Out specific parameters. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.ThreadType">
            <summary> Gets or sets the inside/outside type value. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.LeftOrRightHand">
            <summary> Gets or sets the left or right hand thread option. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.TopOrBottom">
            <summary> Gets or sets the thread direction. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.Tolerance">
            <summary> Gets or sets the Linearize Helixes value. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.LinearizeHelixes">
            <summary> Gets or sets a value indicating whether to linearize helixes. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.TaperAngle">
            <summary> Gets or sets the taper angle value. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.ThreadStartAngle">
            <summary> Gets or sets the thread start angle value. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.OverCutAllowance">
            <summary> Gets or sets the thread over-cut allowance value. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.ThreadDiameter">
            <summary> Gets or sets the thread diameter value. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.ThreadPitch">
            <summary> Gets or sets the thread pitch value. </summary>
        </member>
        <member name="P:Mastercam.Operations.ThreadMillCutParams.NumberOfActiveTeeth">
            <summary> Gets or sets the number of active teeth value. </summary>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillCutParams.op_Inequality(Mastercam.Operations.ThreadMillCutParams,Mastercam.Operations.ThreadMillCutParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillCutParams.op_Equality(Mastercam.Operations.ThreadMillCutParams,Mastercam.Operations.ThreadMillCutParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillCutParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.ThreadMillCutParams.Equals(Mastercam.Operations.ThreadMillCutParams,Mastercam.Operations.ThreadMillCutParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.ThreadMillCutParams">
            <summary> This class represents the (basic) Cut Parameter data needed to set up a Thread Mill operation.
          </summary>
        </member>
        <member name="T:Mastercam.Operations.ThreadDirectionLeftOrRight">
            <summary> An enumeration that represent the "hand" of the thread. </summary>
        </member>
        <member name="F:Mastercam.Operations.ThreadDirectionLeftOrRight.Left">
            <summary> Specifies left hand thread. </summary>
        </member>
        <member name="F:Mastercam.Operations.ThreadDirectionLeftOrRight.Right">
            <summary> Specifies right hand thread. </summary>
        </member>
        <member name="T:Mastercam.Operations.ThreadDirectionTopOrBottom">
            <summary> An enumeration that represent the cutting direction. </summary>
        </member>
        <member name="F:Mastercam.Operations.ThreadDirectionTopOrBottom.BottomToTop">
            <summary> Specifies cutting direction. </summary>
        </member>
        <member name="F:Mastercam.Operations.ThreadDirectionTopOrBottom.TopToBottom">
            <summary> Specifies cutting direction. </summary>
        </member>
        <member name="T:Mastercam.Operations.ThreadType">
            <summary> An enumeration that represent the location of the thread . </summary>
        </member>
        <member name="F:Mastercam.Operations.ThreadType.Outside">
            <summary> Specifies an outside diameter thread. </summary>
        </member>
        <member name="F:Mastercam.Operations.ThreadType.Inside">
            <summary> Specifies an inside diameter thread. </summary>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.SaveSmoothingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'smoothing' settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with smoothing settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.SaveArcFilterParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'arc filter' settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with arc filter settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.SaveToleranceDistributionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'tolerance distribution' settings
          (from the Arc Filter / Tolerance page) to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with tolerance settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.SaveBreakThroughSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's break through settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with break through settings.
               </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.SaveDepthCutSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's depth cuts settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
               </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.SaveCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's cutter comp  settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with cutter comp settings. </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.SaveRoughFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's rough/finish settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with rough/finish settings. </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.SaveCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (basic) cut parameter settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with cut parameter settings. </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadSmoothingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's smoothing settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with smoothing settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadArcFilterParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's arc filter settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with arc filter settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadToleranceDistributionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's 'tolerance distribution' settings
          (from the Arc Filter / Tolerance page) from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with tolerance settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadBreakThroughSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's break through settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with break through settings.
               </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadDepthCutSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's depth cuts settings from the operation data member
          passed in.
          </summary>
            <remarks>  X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
               </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's cutter comp settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cutter comp settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadRoughFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's rough/finish settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's rough/finish settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's (basic) cut parameter settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cut parameter settings from.
               </param>
        </member>
        <member name="F:Mastercam.Operations.SlotMillOperation.Smoothing">
            <summary> Gets or sets the Smoothing settings used in this contour operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.SlotMillOperation.ArcFilter">
            <summary> Gets or sets the Arc Filter settings used in this contour operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.SlotMillOperation.ToleranceDistribution">
            <summary> Gets or sets the Tolerance Distribution settings used in this operation. </summary>
            <remarks> Arc Filter / Tolerance page </remarks>
        </member>
        <member name="F:Mastercam.Operations.SlotMillOperation.BreakThrough">
            <summary> Gets or sets the Break Through settings used in this operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.SlotMillOperation.DepthCuts">
            <summary> Gets or sets the Depth Cut Through settings used in this operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.SlotMillOperation.CutterComp">
            <summary> Gets or sets the cutter comp settings to be used in this operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.SlotMillOperation.RoughFinish">
            <summary> Gets or sets the rough/finish settings to be used in this operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.SlotMillOperation.CutParams">
            <summary> Gets or sets the (basic) cut parameter settings to be used in this operation. </summary>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.SetChainArray(Mastercam.Database.Chain[])">
            <summary> This method takes the array passed in and copies it's contents into the internal chain
          array for this operation.
          </summary>
            <param name="NewChainArray"> The array of new chains. </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.Commit(System.Boolean)">
            <summary> This method commits the current Slot Mill operation to the Mastercam database. </summary>
            <param name="includeChains"> true to update any chains assigned to the operation. </param>
            <remarks> If you know that you've not altered the chains used by this operation,
		  you may wish to used this &gt;.Commit(false). </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.Commit">
            <summary> This method commits the current Slot Mill operation to the Mastercam database.
          </summary>
            <remarks> This commit also updates any the chains used by this operation.
		   If you know that do not want the chains touched during the commit,
		   you may wish to use the .Commit(false) method overload. </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.#ctor">
            <summary> Initializes a new instance of the SlotMillOperation class. </summary>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="Op"> The operation structure to use as defaults for this operation object. </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.CommitOperation(System.Boolean)">
            <summary> Commits the operation. </summary>
            <param name="includeChains"> true to include, false to exclude touching the chains during the commit. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.#ctor(System.Int32)">
            <summary> ID Lookup Constructor. Attempts to retrieve an operation entity with the given ID from
          the Mastercam database and use that to initialize this operation object.
          </summary>
            <remarks> If no matching operation entity is found in the Mastercam database, the object is
          initialized to default values.
          </remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Operations.SlotMillOperation.LoadDefaults">
            <summary>Loads the default values for a given operation object.</summary>
        </member>
        <member name="T:Mastercam.Operations.SlotMillOperation">
            <summary>This class is used for working with slot mill toolpath operations.</summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillRoughFinishParams.KeepToolDown">
            <summary> Gets r sets a value indicating the state of the 'Keep tool down' option. (true/false). </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillRoughFinishParams.FinishPassSpacing">
            <summary> Gets or sets the spacing of Finish Passes. </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillRoughFinishParams.FinishPassesNumber">
            <summary> Gets or sets the number of Finish Passes. </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillRoughFinishParams.StepOver">
            <summary> Gets or sets the Roughing step-over distance. </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillRoughFinishParams.HelixTolerance">
            <summary> Gets or sets the Helix Tolerance for the Ramp Entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillRoughFinishParams.PlungeAngle">
            <summary> Gets or sets the Plunge Angle for the Ramp Entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillRoughFinishParams.OutputHelixesAsArcs">
            <summary> Gets or sets a value indicating the state of the 'Output Helixes As Arcs' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillRoughFinishParams.RampEntryEnabled">
            <summary> Gets or sets a value indicating the state of the 'Ramp Entry' option. </summary>
            <remarks> Enable/disable the Ramp Entry (groupbox) options. </remarks>
        </member>
        <member name="M:Mastercam.Operations.SlotMillRoughFinishParams.op_Inequality(Mastercam.Operations.SlotMillRoughFinishParams,Mastercam.Operations.SlotMillRoughFinishParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.SlotMillRoughFinishParams.op_Equality(Mastercam.Operations.SlotMillRoughFinishParams,Mastercam.Operations.SlotMillRoughFinishParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.SlotMillRoughFinishParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.SlotMillRoughFinishParams.Equals(Mastercam.Operations.SlotMillRoughFinishParams,Mastercam.Operations.SlotMillRoughFinishParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.SlotMillRoughFinishParams">
            <summary> This class represents the Slot Mill Rough/Finish specific parameters. </summary>
        </member>
        <member name="F:Mastercam.Operations.SlotMillCutParams.LeaveStock">
            <summary> Gets or sets the amount the stock leave on walls and floors. </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillCutParams.Overlap">
            <summary> Gets or sets this is the Entry Overlap amount setting in the current slot mill operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillCutParams.PerpindicularEntry">
            <summary> Gets or sets a value indicating the Perpendicular Entry setting in the current slot mill operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.SlotMillCutParams.EntryExitArcSweep">
            <summary> Gets the entry/exit arc sweep setting in the current slot mill operation. </summary>
        </member>
        <member name="M:Mastercam.Operations.SlotMillCutParams.op_Inequality(Mastercam.Operations.SlotMillCutParams,Mastercam.Operations.SlotMillCutParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.SlotMillCutParams.op_Equality(Mastercam.Operations.SlotMillCutParams,Mastercam.Operations.SlotMillCutParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.SlotMillCutParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.SlotMillCutParams.Equals(Mastercam.Operations.SlotMillCutParams,Mastercam.Operations.SlotMillCutParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.SlotMillCutParams">
            <summary> This class represents the Slot Mill Rough/Finish specific parameters. </summary>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadBreakThroughSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's break through settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with break through settings.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadDepthCutSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's depth cuts settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadTransitionsParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's transitions page settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's transitions page settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadSemiFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's semi-finish settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's semi-finish settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's finish settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's finish settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadFinishingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's finishing settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's finishing settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadHelicalEntryParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's helix entry settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's helix entry settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadRoughingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's roughing settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's roughing settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's cutter comp settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cutter comp settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's (basic) Cut Parameters settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cut parameters settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveBreakThroughSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's break through settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with break through settings.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveDepthCutSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's depth cuts settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
               </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveTransitionsParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's transitions page settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with transitions page settings. </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveSemiFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's semi-finish settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with semi-finish settings. </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's helix finish settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with finish settings. </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveFinishingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's finishing settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with finishing settings. </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveHelicalEntryParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's helix entry settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with helix entry settings. </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveRoughingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's helix roughing settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with roughing settings. </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's cutter comp settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with cutter comp settings. </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.SaveCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (basic) Cut Parameters settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> The operation data member to load with cut parameters settings. </param>
        </member>
        <member name="F:Mastercam.Operations.CircleMillOperation.HelicalEntry">
            <summary> Gets or sets the data structure contains the CircleMill Helix Entry parameters used in this operation.</summary>
        </member>
        <member name="F:Mastercam.Operations.CircleMillOperation.Finish">
            <summary> Gets or sets the data structure that contains the CircleMill Finish (groupbox) parameters
          used in this operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.CircleMillOperation.SemiFinish">
            <summary> Gets or sets the data structure that contains the CircleMill Semi-Finish (groupbox) parameters
          used in this operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.CircleMillOperation.Finishing">
            <summary> Gets or sets the data structure that contains the CircleMill Finishing (page) parameters
          used in this operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.CircleMillOperation.Roughing">
            <summary> Gets or sets the Roughing settings used in this operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.CircleMillOperation.BreakThrough">
            <summary> Gets or sets the Break Through settings used in this operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.CircleMillOperation.DepthCuts">
            <summary> Gets or sets the Depth Cut Through settings used in this operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.CircleMillOperation.CutterComp">
            <summary> The cutter comp settings to be used in this contour operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.CircleMillOperation.CutParams">
            <summary> Gets or sets the (basic) cut parameter data to be used in this circle mill operation.
         </summary>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.Commit">
            <summary> This method commits the current Circle Mill operation to the Mastercam database.
          </summary>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.#ctor">
            <summary> Initializes a new instance of the CircleMillOperation class. </summary>
            <remarks> This creates a new contour toolpath operation with default settings. </remarks>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation object.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the CircleMillOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from the Mastercam
          database and use that to initialize this operation object.
<para>    If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.CircleMillOperation.LoadDefaults">
            <summary>Loads the default values for a given operation.</summary>
        </member>
        <member name="T:Mastercam.Operations.CircleMillOperation">
            <summary>This class is used for working with Circle Mill toolpath operations.</summary>
        </member>
        <member name="F:Mastercam.Operations.FinishingParams.Transitions">
            <summary> Gets or sets the Transitions page parameters (sub-page of Finishing). </summary>
        </member>
        <member name="P:Mastercam.Operations.FinishingParams.KeepToolDown">
            <summary> Gets or sets a value indicating the state of the 'Keep Tool Down' option (true/false) </summary>
        </member>
        <member name="P:Mastercam.Operations.FinishingParams.FinishPassAtAllDepths">
            <summary> Gets or sets a value indicating the state of 'finish passes at ?' option.
          true = write the finish pass at all depths.
          false = write finish pass at final depth.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.FinishingParams.Finish">
            <summary> Gets or sets the Finish (groupbox) settings used in this circle mill operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.FinishingParams.SemiFinish">
            <summary> Gets or sets the Semi-Finish (groupbox) settings used in this circle mill operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="P:Mastercam.Operations.FinishingParams.Enabled">
            <summary> Gets or sets a value indicating the state of enable Finishing settings. </summary>
            <remarks> Finishing page enable/disable. </remarks>
        </member>
        <member name="M:Mastercam.Operations.FinishingParams.op_Inequality(Mastercam.Operations.FinishingParams,Mastercam.Operations.FinishingParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.FinishingParams.op_Equality(Mastercam.Operations.FinishingParams,Mastercam.Operations.FinishingParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.FinishingParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.FinishingParams.Equals(Mastercam.Operations.FinishingParams,Mastercam.Operations.FinishingParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.FinishingParams">
            <summary> This class represents the Circle Mill specific FinishingParams parameters. </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillFinishParams.SpindleSpeed">
            <summary> Gets or sets the (Finish) spindle speed value. </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillFinishParams.SpindleSpeedOverride">
            <summary> Gets or sets a value indicating the state of the (Finish) spindle speed override option. (true/false). </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillFinishParams.Feedrate">
            <summary> Gets or sets the (Finish) feedrate value. </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillFinishParams.FeedrateOverride">
            <summary> Gets or sets a value indicating the state of the (Finish) feedrate override option. (true/false). </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillFinishParams.PassSpacing">
            <summary> Gets or sets the spacing used during the (Finish) passes. </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillFinishParams.NumberPasses">
            <summary> Gets or sets the number of (Finish) passes. </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillFinishParams.Enabled">
            <summary> Gets or sets a value indicating the state of enable the Finish option. (true/false). </summary>
            <remarks> Finish (sub) groupbox. </remarks>
        </member>
        <member name="M:Mastercam.Operations.CircleMillFinishParams.op_Inequality(Mastercam.Operations.CircleMillFinishParams,Mastercam.Operations.CircleMillFinishParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillFinishParams.op_Equality(Mastercam.Operations.CircleMillFinishParams,Mastercam.Operations.CircleMillFinishParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillFinishParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillFinishParams.Equals(Mastercam.Operations.CircleMillFinishParams,Mastercam.Operations.CircleMillFinishParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.CircleMillFinishParams">
            <summary> This class represents the Circle Mill specific FinishingParams parameters. </summary>
        </member>
        <member name="P:Mastercam.Operations.SemiFinishParams.SpindleSpeed">
            <summary> Gets or sets the (Semi-Finish) spindle speed value. </summary>
        </member>
        <member name="P:Mastercam.Operations.SemiFinishParams.SpindleSpeedOverride">
            <summary> Gets or sets a value indicating the state of the (Semi-Finish) spindle speed override option. (true/false). </summary>
        </member>
        <member name="P:Mastercam.Operations.SemiFinishParams.Feedrate">
            <summary> Gets or sets the (Semi-Finish) feedrate value. </summary>
        </member>
        <member name="P:Mastercam.Operations.SemiFinishParams.FeedrateOverride">
            <summary> Gets or sets a value indicating the state of the (Semi-Finish) feedrate override option. (true/false). </summary>
        </member>
        <member name="P:Mastercam.Operations.SemiFinishParams.PassSpacing">
            <summary> Gets or sets the spacing used during the (Semi-Finish) passes. </summary>
        </member>
        <member name="P:Mastercam.Operations.SemiFinishParams.NumberPasses">
            <summary>Gets or sets the number of (Semi-Finish) passes. </summary>
        </member>
        <member name="P:Mastercam.Operations.SemiFinishParams.Enabled">
            <summary> Gets or sets a value indicating the state of Enable the Semi-Finish settings? (true/false). </summary>
            <remarks> Semi-Finishing (sub) groupbox. </remarks>
        </member>
        <member name="M:Mastercam.Operations.SemiFinishParams.op_Inequality(Mastercam.Operations.SemiFinishParams,Mastercam.Operations.SemiFinishParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.SemiFinishParams.op_Equality(Mastercam.Operations.SemiFinishParams,Mastercam.Operations.SemiFinishParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.SemiFinishParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.SemiFinishParams.Equals(Mastercam.Operations.SemiFinishParams,Mastercam.Operations.SemiFinishParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.SemiFinishParams">
            <summary> This class represents the Circle Mill specific SemiFinishParams parameters. </summary>
        </member>
        <member name="P:Mastercam.Operations.TransitionsParams.OverlapDistance">
            <summary> Gets or sets the lead-in/out overlap distance. </summary>
            <remarks> Finishing-Transitions page. </remarks>
        </member>
        <member name="P:Mastercam.Operations.TransitionsParams.PerpendicularEntry">
            <summary> Gets or sets a value indicating the state of the 'do perpendicular entry' option. (true/false). </summary>
            <remarks> Finishing-Transitions page. </remarks>
        </member>
        <member name="P:Mastercam.Operations.TransitionsParams.StartAtCenter">
            <summary> Gets or sets a value indicating the state of the 'Start at center' option. (true/false). </summary>
            <remarks> Finishing-Transitions page. </remarks>
        </member>
        <member name="P:Mastercam.Operations.TransitionsParams.EntryExitSweepAngle">
            <summary> Gets or sets the entry/exit sweep angle. </summary>
            <remarks> Finishing-Transitions page. </remarks>
        </member>
        <member name="P:Mastercam.Operations.TransitionsParams.UseLeadInOut">
            <summary> Gets or sets a value indicating the state of the Lead-In/Out settings enabled? (true/false). </summary>
            <remarks> Finishing-Transitions page. </remarks>
        </member>
        <member name="P:Mastercam.Operations.TransitionsParams.EntryAngle">
            <summary> Gets or sets the high-speed transition angle value. </summary>
            <remarks> Finishing-Transitions page. </remarks>
        </member>
        <member name="P:Mastercam.Operations.TransitionsParams.UseHighSpeedEntry">
            <summary> Gets or sets a value indicating the state of the 'high-speed entry' mode (true/false). </summary>
            <remarks> Finishing-Transitions page. </remarks>
        </member>
        <member name="M:Mastercam.Operations.TransitionsParams.op_Inequality(Mastercam.Operations.TransitionsParams,Mastercam.Operations.TransitionsParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.TransitionsParams.op_Equality(Mastercam.Operations.TransitionsParams,Mastercam.Operations.TransitionsParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.TransitionsParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.TransitionsParams.Equals(Mastercam.Operations.TransitionsParams,Mastercam.Operations.TransitionsParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.TransitionsParams">
            <summary> This class represents the Circle Mill specific Transitions page parameters. </summary>
        </member>
        <member name="F:Mastercam.Operations.CircleMillCutParams.LeaveStock">
            <summary> Gets or sets the amount the stock leave on walls and floors. </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillCutParams.CircleDiameter">
            <summary> Gets or sets the circle diameter (used when circles are defined by points). </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillCutParams.StartAngle">
            <summary> Gets or sets the start angle value. </summary>
        </member>
        <member name="M:Mastercam.Operations.CircleMillCutParams.op_Inequality(Mastercam.Operations.CircleMillCutParams,Mastercam.Operations.CircleMillCutParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillCutParams.op_Equality(Mastercam.Operations.CircleMillCutParams,Mastercam.Operations.CircleMillCutParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillCutParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillCutParams.Equals(Mastercam.Operations.CircleMillCutParams,Mastercam.Operations.CircleMillCutParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.CircleMillCutParams">
            <summary> This class represents the (basic) Cut Parameter data needed to set up a CircleMkll operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.CircleMillRoughingParams.HelicalEntry">
            <summary> If the HelicalEntry.Enabled value is set to true, the parameters in this object will
          specify how the helical entry is to be set up.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillRoughingParams.StepOverDistance">
            <summary> Gets or sets the absolute step-over distance to use while roughing. </summary>
        </member>
        <member name="P:Mastercam.Operations.CircleMillRoughingParams.Enabled">
            <summary> Gets or sets a value indicating the state of the 'Roughing enabled' option. (true/false). </summary>
            <remarks> Enable/disable the entire Roughing page. </remarks>
        </member>
        <member name="M:Mastercam.Operations.CircleMillRoughingParams.op_Inequality(Mastercam.Operations.CircleMillRoughingParams,Mastercam.Operations.CircleMillRoughingParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillRoughingParams.op_Equality(Mastercam.Operations.CircleMillRoughingParams,Mastercam.Operations.CircleMillRoughingParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillRoughingParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.CircleMillRoughingParams.Equals(Mastercam.Operations.CircleMillRoughingParams,Mastercam.Operations.CircleMillRoughingParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.CircleMillRoughingParams">
            <summary> This class represents the data needed for using roughing in a Circle Mill operation.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.EngraveOperation.Commit">
            <summary> This method commits the current engrave operation to the Mastercam database.
          </summary>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.EngraveOperation.#ctor">
            <summary> Initializes a new instance of the EngraveOperation class. </summary>
            <remarks> This creates a new engrave toolpath operation with default settings.
       </remarks>
        </member>
        <member name="M:Mastercam.Operations.EngraveOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation
                  object.
               </param>
        </member>
        <member name="M:Mastercam.Operations.EngraveOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the EngraveOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from the Mastercam
          database and use that to initialize this operation object.
          If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Operations.EngraveOperation.LoadDefaults">
            <summary> Loads the default values for a given operation object. </summary>
        </member>
        <member name="T:Mastercam.Operations.EngraveOperation">
            <summary> This class is used for working with engrave toolpath operations. </summary>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.SaveCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's cutter comp  settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with cutter comp settings. </param>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.SaveFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's finish settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with finish settings. </param>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.SaveRoughFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's rough/finish settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with rough/finish settings. </param>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.SaveCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (basic) Cut Parameters settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> The operation data member to load with cut parameters settings. </param>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.LoadCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's cutter comp settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cutter comp settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.LoadFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's finish settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's finish settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.LoadRoughFinishParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's rough/finish settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's rough/finish settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.LoadCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's (basic) Cut Parameters settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cut parameters settings from.
                  </param>
        </member>
        <member name="F:Mastercam.Operations.HelixBoreOperation.CutterComp">
            <summary> Gets or sets the cutter comp settings to be used in this helix bore operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.HelixBoreOperation.RoughFinish">
            <summary> Gets or sets the rough/finish parameter data to be used in this helix bore operation.
         </summary>
        </member>
        <member name="F:Mastercam.Operations.HelixBoreOperation.CutParams">
            <summary> Gets or sets the (basic) cut parameter data to be used in this helix bore operation.
         </summary>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.Commit(System.Boolean)">
            <summary> This method commits the current Helix Bore operation to the Mastercam database. </summary>
            <param name="includePoints"> true to update any points assigned to the operation. </param>
            <remarks> If you know that you've not altered the points used by this operation,
		  you may wish to used this &gt;.Commit(false). </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.Commit">
            <summary> This method commits the current Helix Bore operation to the Mastercam database.
          </summary>
            <remarks> This commit also updates any the points used by this operation.
		   If you know that do not want the points touched during the commit,
		   you may wish to use the .Commit(false) method overload. </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.#ctor">
            <summary> Initializes a new instance of the HelixBoreOperation class. </summary>
            <remarks> This creates a new helix bore toolpath operation with default settings.
          </remarks>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation object.
               </param>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.CommitOperation(System.Boolean)">
            <summary> Commits the operation. </summary>
            <param name="includePoints"> true to include, false to exclude touching the points during the commit. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the HelixBoreOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from
          the Mastercam database and use that to initialize this operation object.
          If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreOperation.LoadDefaults">
            <summary> Loads the default values for a given operation object. </summary>
        </member>
        <member name="T:Mastercam.Operations.HelixBoreOperation">
            <summary> This class is used for working with helix bore toolpath operations. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreRoughFinishParams.Tolerance">
            <summary> Gets or sets the maximum tolerance to use if arc moves are not output by the operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreRoughFinishParams.OutputArcMoves">
            <summary> Gets or sets the a value indicating the state of the 'Output arc moves for helix' option. </summary>
        </member>
        <member name="F:Mastercam.Operations.HelixBoreRoughFinishParams.Finish">
            <summary> Gets or sets the Finish (groupbox) settings used in this helix bore operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreRoughFinishParams.RoughFeedrateFinalDepth">
            <summary> Gets or sets the final depth feedrate to use while roughing. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreRoughFinishParams.RoughStepover">
            <summary> Gets or sets the amount of step-over to use while roughing. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreRoughFinishParams.RoughNumberPasses">
            <summary> Gets or sets the number of roughing passes used. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreRoughFinishParams.RoughPitch">
            <summary> Gets or sets the pitch angle to be used while roughing for this operation. </summary>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreRoughFinishParams.op_Inequality(Mastercam.Operations.HelixBoreRoughFinishParams,Mastercam.Operations.HelixBoreRoughFinishParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreRoughFinishParams.op_Equality(Mastercam.Operations.HelixBoreRoughFinishParams,Mastercam.Operations.HelixBoreRoughFinishParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreRoughFinishParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreRoughFinishParams.Equals(Mastercam.Operations.HelixBoreRoughFinishParams,Mastercam.Operations.HelixBoreRoughFinishParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.HelixBoreRoughFinishParams">
            <summary> This class represents the Slot Mill RoughFinish specific parameters. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreFinishParams.SpindleSpeed">
            <summary> Gets or sets the spindle speed to use while finishing. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreFinishParams.Feedrate">
            <summary> Gets or sets the feedrate to use while finishing. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreFinishParams.FinishStepover">
            <summary> Gets or sets the amount of step-over to use while finishing. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreFinishParams.FinishPitch">
            <summary> Gets or sets the pitch angle to be used while finishing for this operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreFinishParams.FinishMethod">
            <summary> Gets or sets the finish method used for this operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreFinishParams.Enabled">
            <summary> Gets or sets a value indicating the state of the Finish option (checkbox). </summary>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreFinishParams.op_Inequality(Mastercam.Operations.HelixBoreFinishParams,Mastercam.Operations.HelixBoreFinishParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreFinishParams.op_Equality(Mastercam.Operations.HelixBoreFinishParams,Mastercam.Operations.HelixBoreFinishParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreFinishParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreFinishParams.Equals(Mastercam.Operations.HelixBoreFinishParams,Mastercam.Operations.HelixBoreFinishParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.HelixBoreFinishParams">
            <summary> This class represents the Helix Bore specific Finish parameters. </summary>
        </member>
        <member name="F:Mastercam.Operations.HelixBoreCutParams.LeaveStock">
            <summary> Gets or sets the amount the stock leave on walls and floors. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreCutParams.Overlap">
            <summary> Gets or sets the overlap length. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreCutParams.PerpendicularEntry">
            <summary> Gets or sets a value indicating the on/off state of the perpendicular entry option. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreCutParams.StartAtCenter">
            <summary> Gets or sets a value indicating the on/off state of the start at center option. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreCutParams.EntryExitArcSweepAngle">
            <summary> Gets or sets the entry/exit sweep angle. </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreCutParams.CircleDiameter">
            <summary> Gets or sets the circle diameter (used when circles are defined by points). </summary>
        </member>
        <member name="P:Mastercam.Operations.HelixBoreCutParams.StartAngle">
            <summary> Gets or sets the start angle value. </summary>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreCutParams.op_Inequality(Mastercam.Operations.HelixBoreCutParams,Mastercam.Operations.HelixBoreCutParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreCutParams.op_Equality(Mastercam.Operations.HelixBoreCutParams,Mastercam.Operations.HelixBoreCutParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreCutParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.HelixBoreCutParams.Equals(Mastercam.Operations.HelixBoreCutParams,Mastercam.Operations.HelixBoreCutParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.HelixBoreCutParams">
            <summary> This class represents the (basic) Cut Parameter data needed to set up a CircleMkll operation.
          </summary>
        </member>
        <member name="T:Mastercam.Operations.HelixBoreFinishMethod">
            <summary> This enumeration specifies the different finish methods available in a Helix Bore operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.HelixBoreFinishMethod.Circle">
            <summary> Generate a single circular cut at the bottom of the hole. </summary>
        </member>
        <member name="F:Mastercam.Operations.HelixBoreFinishMethod.HelixDownwardly">
            <summary> Generate the helix from top to bottom. </summary>
        </member>
        <member name="F:Mastercam.Operations.HelixBoreFinishMethod.HelixUpwardly">
            <summary> Generate the helix from bottom to top. </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillBasedOperation.DrillCycle">
            <summary> Gets or sets the type of drill cycle being used in this drill-based operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.DrillBasedOperation.SortMethod">
            <summary> Gets or sets the drill point sorting method being used in this drill-based operation.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.DrillBasedOperation.DrillPoints">
            <summary> Gets or sets the Array list that holds all of the drill points being used in this drill-
          based operation.
          </summary>
            <remarks> This property performs a deep copy of all of the elements passed in whenever an
          assignment is done as Mastercam does not allow the sharing of drill points
          between operations. That means that you may have to retrieve the handle to the
          new DrillPoint ArrayList after an assignment.
          </remarks>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.ReverseDrillPoints">
            <summary> Reverse the drill points in the operation. </summary>
            <remarks> The SortMethod in the operation will be set to "OFF" after the reverse. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.CopyDrillPointsFromOp(Mastercam.Operations.DrillBasedOperation,System.Boolean)">
            <summary> Copies the drill points from another drill operation into this operation. </summary>
            <remarks> The operations must already have been Committed for this to work! </remarks>
            <param name="sourceOp"> The source operation the points are to be copied from. </param>
            <param name="replace">  true to replace the points in the current operation,
                        else add them to the points already in the target operation.
                        </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.Commit(System.Boolean)">
            <summary> This method commits the current point-based operation's settings to the Mastercam
          database.
          </summary>
            <param name="includeGeometry"> True = also update the Drill Points,
                               </param>
            <returns> True if the database commit was successful, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.Commit">
            <summary> This method commits the current point-based operation's settings to the Mastercam
          database.
          </summary>
            <returns> True if the database commit was successful, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.RetrieveDrillPoints(System.Int32)">
            <summary> This method retrieves the drill points from a given operation structure,
          from Mastercam's database. </summary>
            <param name="opID"> The identifier of the operation to retrieve the drill points from. </param>
            <returns> The list of DrillPoints in the operation. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="op"> [in,out] The operation structure to use as defaults for this operation
                  object.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.Commit(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Commits an operation to the Mastercam database. </summary>
            <param name="op">              The operation to be committed. </param>
            <param name="includeGeometry"> True = also update the Drill Points, else do everything
                               except the Drill Points.
                               </param>
            <returns> True if the commit was successful, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.Commit(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits an operation to the Mastercam database. </summary>
            <param name="op"> The operation to be committed. </param>
            <returns> True if the commit was successful, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the DrillBasedOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from the Mastercam 
          database and use that to initialize this operation object.
<para>    If no matching operation entity is found in the Mastercam database, 
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.#ctor">
            <summary> Initializes a new instance of the DrillBasedOperation class. </summary>
            <remarks> This creates a new drill-based toolpath operation with default settings. </remarks>
        </member>
        <member name="F:Mastercam.Operations.DrillBasedOperation.DrillPointsArray">
            <summary> The array of drill points being used in this operation. </summary>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.AddDrillPoints(System.Collections.Generic.IEnumerable`1{Mastercam.Database.DrillPoint},ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the Drill Points to Operation. </summary>
            <param name="newDrillPoints"> The new drill points. </param>
            <param name="opEnt">		  The operation. </param>
            <returns> The number of points successfully added. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.GetPointBasedToolpathEntities(System.Int32!System.Runtime.CompilerServices.IsLong,std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,ent_tp,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,ent_tp&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets point based toolpath entities referenced by the operation. </summary>
            <param name="opID">       Identifier for the operation. </param>
            <param name="tpEntities"> The list to toolpath entities. </param>
            <returns> The point based toolpath entities. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.CreateArcEnt(System.ValueType!Mastercam.Math.Point3D!System.Runtime.CompilerServices.IsBoxed,System.Double,System.Double,System.Double,System.Int16,ent*)">
            <summary> This method creates an arc entity and stores it in the database. </summary>
            <param name="point">	  The point value to initialize this arc entity with. </param>
            <param name="radius">	  The radius of the arc value to initialize this arc entity with. </param>
            <param name="startAngle"> The starting angle of the arc value to initialize this arc entity with. </param>
            <param name="sweepAngle"> The sweep angle of the arc value to initialize this arc entity with. </param>
            <param name="viewNumber"> The view number the arc was created in. </param>
            <param name="pNewEntity"> The entity created for this arc entity, assuming it was successful. </param>
            <returns> True if the arc entity was created successfully; false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.DrillBasedOperation.UpdateDrillPoints(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> This method updates the drill points in the given operation structure. </summary>
            <param name="op">            The operation to load the drill points into. </param>
            <param name="initialUpdate"> This is the first update of the operation. </param>
            <returns> The number of points in the Operation. </returns>
        </member>
        <member name="T:Mastercam.Operations.DrillBasedOperation">
            <summary> This class is an intermediary class used in working with drill-based toolpath operations.
          </summary>
        </member>
        <member name="F:Mastercam.Database.DrillPoint.m_Name">
            <summary> The internal drill point name member. </summary>
        </member>
        <member name="F:Mastercam.Database.DrillPoint.m_ArcData">
            <summary> The internal arc geometry handle member. </summary>
        </member>
        <member name="F:Mastercam.Database.DrillPoint.m_JumpHeight">
            <summary> The internal jump height member. </summary>
        </member>
        <member name="F:Mastercam.Database.DrillPoint.m_Depth">
            <summary> The internal depth value member. </summary>
        </member>
        <member name="F:Mastercam.Database.DrillPoint.m_PointData">
            <summary> The internal point data member. </summary>
        </member>
        <member name="M:Mastercam.Database.DrillPoint.#ctor(Mastercam.Curves.ArcGeometry)">
            <summary> Initializes a new instance of the DrillPoint class. </summary>
            <param name="Arc"> The arc geometry data used to initialize the newly created drill point. </param>
        </member>
        <member name="M:Mastercam.Database.DrillPoint.#ctor(Mastercam.BasicGeometry.PointGeometry)">
            <summary> Initializes a new instance of the DrillPoint class. </summary>
            <param name="Point"> The point geometry data used to initialize the newly created drill point. </param>
        </member>
        <member name="M:Mastercam.Database.DrillPoint.#ctor(Mastercam.Math.Point3D,Mastercam.Curves.ArcGeometry)">
            <summary> Initializes a new instance of the DrillPoint class. </summary>
            <remarks> Takes a point object and an arc object and stores them in the newly created drill point.
          </remarks>
            <param name="NewPoint"> The point in 3D space to set the new drill point to. </param>
            <param name="ArcData">  The arc geometry object handle to store in the drill point.
                        </param>
        </member>
        <member name="M:Mastercam.Database.DrillPoint.#ctor(Mastercam.Math.Point3D,System.Double,System.Double)">
            <summary> Initializes a new instance of the DrillPoint class. </summary>
            <remarks> Takes a point object and some parameters and stores them all in the newly created drill point.
       </remarks>
            <param name="NewPoint">   The point in 3D space to set the new drill point to. </param>
            <param name="Depth">      The depth value to initialize the drill point to. </param>
            <param name="JumpHeight"> The jump height value to initialize the drill point to. </param>
        </member>
        <member name="M:Mastercam.Database.DrillPoint.#ctor(Mastercam.Math.Point3D)">
            <summary> Initializes a new instance of the DrillPoint class. </summary>
            <remarks> Takes a point object and stores it in the newly created drill point. </remarks>
            <param name="NewPoint"> The point in 3D space to set the new drill point to. </param>
        </member>
        <member name="M:Mastercam.Database.DrillPoint.#ctor">
            <summary> Initializes a new instance of the DrillPoint class. </summary>
        </member>
        <member name="P:Mastercam.Database.DrillPoint.Name">
            <summary> Gets or sets the optional 'name' for this drill point. </summary>
        </member>
        <member name="P:Mastercam.Database.DrillPoint.ArcData">
            <summary> Gets or sets the reference to arc geometry if the drill point is arc-based. </summary>
            <remarks> Be sure to check this is not NULL before accessing its data!
          As not all DrillPoints have an associated Arc. </remarks>
        </member>
        <member name="P:Mastercam.Database.DrillPoint.JumpHeight">
            <summary> Gets or sets the jump height value for the given drill point. </summary>
            <remarks> If not explicitly set, this value will be initialized to -1.0E+38 </remarks>
        </member>
        <member name="P:Mastercam.Database.DrillPoint.Depth">
            <summary> Gets or sets the depth value for the given drill point. </summary>
            <remarks> If not explicitly set, this value will be initialized to 1.0E+38 </remarks>
        </member>
        <member name="P:Mastercam.Database.DrillPoint.PointData">
            <summary> Gets or sets the point data for the given drill point. </summary>
        </member>
        <member name="M:Mastercam.Database.DrillPoint.#ctor(Mastercam.Database.DrillPoint!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the DrillPoint class. </summary>
            <param name="point"> The drill point to be copied. </param>
            <param name="opID"> The ID of the operation this DrillPoint belongs to. </param>
        </member>
        <member name="F:Mastercam.Database.DrillPoint.m_OpID">
            <summary> The ID of the operation this drill point is tied to. </summary>
        </member>
        <member name="F:Mastercam.Database.DrillPoint.m_EntityID">
            <summary> The ID of the geometry entity this drill point is tied to. </summary>
        </member>
        <member name="F:Mastercam.Database.DrillPoint.m_ToolpathEntityID">
            <summary> The ID of the toolpath entity this drill point is tied to. </summary>
        </member>
        <member name="T:Mastercam.Database.DrillPoint">
            <summary> The drill point class is used to provide drill-based operations with the data necessary
          to specify which points in 3D space are to be drilled and how they are to be drilled.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.SaveDepthCutSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's depth cuts settings to the operation data member passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.SaveCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's cutter comp  settings to the operation data member passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with cutter comp settings. </param>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.SaveCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (basic) cut parameter settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with cut parameter settings. </param>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.LoadDepthCutSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's depth cuts settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.LoadCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's cutter comp settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cutter comp settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.LoadCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's (basic) cut parameters settings from the operation data
          members passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cut parameter settings from.
                  </param>
        </member>
        <member name="F:Mastercam.Operations.FacingOperation.DepthCuts">
            <summary> Gets or sets the Depth Cuts settings used in this operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.FacingOperation.CutterComp">
            <summary> Gets or sets the cutter comp settings to be used in this operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.FacingOperation.CutParams">
            <summary> Gets or sets the (basic) cut parameter settings to be used in this operation. </summary>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.Commit(System.Boolean)">
            <summary> This method commits the current Facing operation to the Mastercam database. </summary>
            <param name="includeChains"> true to update any chains assigned to the operation. </param>
            <remarks> If you know that you've not altered the chains used by this operation,
		  you may wish to used this &gt;.Commit(false). </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.Commit">
            <summary> This method commits the current Facing operation to the Mastercam database.
          </summary>
            <remarks> This commit also updates any the chains used by this operation.
		   If you know that do not want the chains touched during the commit,
		   you may wish to use the .Commit(false) method overload. </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.#ctor">
            <summary> Initializes a new instance of the FacingOperation class. </summary>
            <remarks> This creates a new facing toolpath operation with default settings. </remarks>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation object.
               </param>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.CommitOperation(System.Boolean)">
            <summary> Commits the operation. </summary>
            <param name="includeChains"> true to include, false to exclude touching the chains during the commit. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the FacingOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from
          the Mastercam database and use that to initialize this operation object.
          If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Operations.FacingOperation.LoadDefaults">
            <summary> Loads the default values for a given operation object. </summary>
        </member>
        <member name="T:Mastercam.Operations.FacingOperation">
            <summary> This class is used for working with facing toolpath operations. </summary>
        </member>
        <member name="F:Mastercam.Operations.FacingCutParams.LeaveStock">
            <summary> Gets or sets the amount the stock leave on walls and floors. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.FeedrateBetweenCuts">
            <summary> Gets or sets the feedrate to use between cuts (if enabled). </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.UseFeedrateBetweenCuts">
            <summary> Gets or sets the a value indicating the state of the 'Feedrate between cuts' option (checkbox). </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.MoveBetweenCuts">
            <summary> Gets or sets the 'Move Between Cuts' method. (ZigZag ONLY). </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.RoughingAngle">
            <summary> Gets or sets the roughing angle. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.AutoAngle">
            <summary> Gets or sets a value indicating the state of the Auto Angle option (checkbox). </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.ReverseDirectionOnLastPass">
            <summary> Gets or sets a value indicating the state of the 'Reverse direction on last pass' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.ClimbCut">
            <summary> Gets or sets a value indicating the state Climb/Conventional cut direction option. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.MaxStepover">
            <summary> Gets or sets the maximum of step-over to use. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.GeneralStartLocation">
            <summary> Gets or sets the general starting location. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.ExitDistance">
            <summary> Gets or sets the exit distance. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.ApproachDistance">
            <summary> Gets or sets the approach distance. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.AlongOverlap">
            <summary> Gets or sets the 'along' direction overlap. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.AcrossOverlap">
            <summary> Gets or sets the 'across' direction overlap. </summary>
        </member>
        <member name="P:Mastercam.Operations.FacingCutParams.CutStyle">
            <summary> Gets or sets the cut 'style' to be used. </summary>
        </member>
        <member name="M:Mastercam.Operations.FacingCutParams.op_Inequality(Mastercam.Operations.FacingCutParams,Mastercam.Operations.FacingCutParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.FacingCutParams.op_Equality(Mastercam.Operations.FacingCutParams,Mastercam.Operations.FacingCutParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.FacingCutParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.FacingCutParams.Equals(Mastercam.Operations.FacingCutParams,Mastercam.Operations.FacingCutParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.FacingCutParams">
            <summary> This class represents the Facing specific parameters. </summary>
        </member>
        <member name="T:Mastercam.Operations.StartLocation">
            <summary> This enumeration specifies the "general start location" to be used for the Facing operation. </summary>
            <remarks> * When the Facing Style is set to 'Dynamic'. </remarks>
        </member>
        <member name="T:Mastercam.Operations.MoveBetweenCutsStyle">
            <summary> This enumeration specifies the different "motion between cuts" options available in a
          facing operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.MoveBetweenCutsStyle.Rapid">
            <summary> Generate rapid moves between each cut. </summary>
        </member>
        <member name="F:Mastercam.Operations.MoveBetweenCutsStyle.Linear">
            <summary> Generate linear feed moves between each cut. </summary>
        </member>
        <member name="F:Mastercam.Operations.MoveBetweenCutsStyle.HighSpeedLoops">
            <summary> Generate 180 degree arc moves between each cut. </summary>
        </member>
        <member name="T:Mastercam.Operations.FacingCutStyle">
            <summary> This enumeration specifies the different cut style methods available in a Facing operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.FacingCutStyle.Dynamic">
            <summary> Generate motion that cuts from the outside to the inside (Constant Engagement). </summary>
        </member>
        <member name="F:Mastercam.Operations.FacingCutStyle.OneWay">
            <summary> Generate one-way motion in a single direction. </summary>
            <remarks> As defined by the selected cutting direction: Climb or Conventional. </remarks>
        </member>
        <member name="F:Mastercam.Operations.FacingCutStyle.OnePass">
            <summary> Generate motion that creates a single pass down the center. </summary>
        </member>
        <member name="F:Mastercam.Operations.FacingCutStyle.ZigZag">
            <summary> Generate zig-zag back and forth motion. </summary>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadTabParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's tabs settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with tabs settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadSmoothingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's smoothing settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with smoothing settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadArcFilterParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's arc filter settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with arc filter settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadToleranceDistributionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's 'tolerance distribution' settings
          (from the Arc Filter / Tolerance page) from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with tolerance settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadBreakThroughParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's break through settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with break through settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadDepthCutsParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's depth cuts settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadMultiPassParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's multi-pass settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with multi-pass settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadLeadInOutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's lead-on/out settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with lead-in/out settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadAdjustEndParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's 'Adjust end of contour'' settings from the
          operation data member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> The operation data member to load with lead-in/out entry settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadAdjustStartParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's 'Adjust start of contour'' settings from the
          operation data member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> The operation data member to load with lead-in/out entry settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadExitParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's lead-on/out 'exit' settings from the operation data
          member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> The operation data member to load with lead-in/out exit settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadEntryParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's lead-on/out 'entry' settings from the operation data
          member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> The operation data member to load with lead-in/out entry settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadOscillateParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's oscillation settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's oscillation settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadRemachiningParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's re-machining settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's re-machining settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadRampParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's ramp settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's ramp settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadChamferParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's chamfer settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's chamfer settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's cutter comp settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cutter comp settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's (basic) Cut Parameters settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cut parameters settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveTabParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'tabs' settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with tabs settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveSmoothingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'smoothing' settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with smoothing settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveArcFilterParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'arc filter' settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with arc filter settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveToleranceDistributionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'tolerance distribution' settings
          (from the Arc Filter / Tolerance page) to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with tolerance settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveBreakThroughParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's break through settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with break through settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveDepthCutsParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's depth cuts settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveMultiPassParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's multi-pass settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with multi-pass settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveLeadInOutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's lead-on/out settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with lead-in/out settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveAdjustEndParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'Adjust end of contour' settings from the
          operation data member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> [in,out] The operation data member to load with adjust end of contour settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveAdjustStartParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'Adjust start of contour' settings from the
          operation data member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> [in,out] The operation data member to load with adjust start of contour settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveExitParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (lead-in/out) Exit settings to the operation data
          member passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation object.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveEntryParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (lead-in/out) Entry settings to the operation data
          member passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation object.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveOscillateParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's oscillation settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with oscillation settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveRemachiningParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's re-machining settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with re-machining settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveRampParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's ramp settings to the operation data member passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with ramp settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveChamferParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's chamfer settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with chamfer settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveCutterCompParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's cutter comp settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with cutter comp settings. </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SaveCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (basic) Cut Parameters settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> The operation data member to load with cut parameters settings. </param>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.m_ContourSubtype">
            <summary> Gets or sets the internal contour sub-type member. </summary>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.Tabs">
            <summary> Gets or sets the Tabs settings used in this contour operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.Smoothing">
            <summary> Gets or sets the Smoothing settings used in this contour operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.ArcFilter">
            <summary> Gets or sets the Arc Filter settings used in this contour operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.ToleranceDistribution">
            <summary> Gets or sets the Tolerance Distribution settings used in this operation. </summary>
            <remarks> Arc Filter / Tolerance page </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.BreakThrough">
            <summary> Gets or sets the Break Through settings used in this contour operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.DepthCuts">
            <summary> Gets or sets the Depth Cuts settings used in this contour operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.MultiPass">
            <summary> Gets or sets the Multi-Passes settings used in this contour operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.LeadInOut">
            <summary> Gets or sets the Lead-In/Out settings used in this contour operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.Exit">
            <summary> The Exit (sub-data of Lead-In/Out) settings used in this contour operation.
          </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.Entry">
            <summary> The Entry (sub-data of Lead-In/Out) settings used in this contour
          operation.
          </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.Oscillate">
            <summary> The Oscillation data to be used in this contour operation if the toolpath
          gets set to an oscillation contour subtype.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.Remachining">
            <summary> The Re-Machining data to be used in this contour operation if the toolpath
          gets set to a re-machining contour subtype.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.Ramp">
            <summary> The Ramp settings to be used in this contour operation if the toolpath gets set
          to a ramp contour subtype.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.Chamfer">
            <summary> The Chamfer settings to be used in this contour operation if the toolpath gets
          set to a chamfer contour subtype.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.CutterComp">
            <summary> The cutter comp settings to be used in this contour operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.ContourOperation.CutParams">
            <summary> Gets or sets the (basic) cut parameter data to be used in this contour operation.
         </summary>
        </member>
        <member name="P:Mastercam.Operations.ContourOperation.ContourSubtype">
            <summary> This is the contour subtype being used in the current contour toolpath operation.
          </summary>
            <remarks> Trying to assign a 2D subtype to a contour operation with 3D chain geometry will
          result in an exception, and vice-versa.
          Use the ChainManager::IsChain2D() method to ensure you assign the appropriate
          contour subtypes.
          </remarks>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.SetChainArray(Mastercam.Database.Chain[])">
            <summary> This method takes the array passed in and copies it's contents into the internal
          chain array for this operation.
          </summary>
            <remarks> If 2D chain geometry is passed in and the contour operation has a 3D subtype
           it will be automatically updated to a Basic2D subtype and vice-versa.
           </remarks>
            <param name="NewChainArray"> The array of new chains. </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.IsSubtype3D(Mastercam.Operations.Types.ContourSubtypeType)">
            <summary> This method examines whether or not a contour subtype is a valid 3D subtype.
          </summary>
            <param name="SubtypeValue"> The contour subtype value to test. </param>
            <returns> True if the subtype is a valid 3D subtype, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.IsSubtype3D">
            <summary>This method examines whether the contour subtype in the current operation is a valid 3D subtype.</summary>
            <returns>True if the subtype is a valid 3D subtype, False if not.</returns>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.IsSubtype2D(Mastercam.Operations.Types.ContourSubtypeType)">
            <summary> This method examines whether or not a contour subtype is a valid 2D subtype.
          </summary>
            <param name="SubtypeValue"> The contour subtype value to test. </param>
            <returns> True if the subtype is a valid 2D subtype, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.IsSubtype2D">
            <summary> This method examines whether the contour subtype in the current operation is a
          valid 2D subtype.
          </summary>
            <returns> True if the subtype is a valid 2D subtype, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.Commit(System.Boolean)">
            <summary> This method commits the current Contour operation to the Mastercam database. </summary>
            <param name="includeChains"> true to update any chains assigned to the operation. </param>
            <remarks> If you know that you've not altered the chains used by this operation,
		  you may wish to used this &gt;.Commit(false). </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.Commit">
            <summary> This method commits the current Contour operation to the Mastercam database.
          </summary>
            <remarks> This commit also updates any the chains used by this operation.
		   If you know that do not want the chains touched during the commit,
		   you may wish to use the .Commit(false) method overload. </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.#ctor">
            <summary> Initializes a new instance of the ContourOperation class. </summary>
            <remarks> This creates a new contour toolpath operation with default settings. </remarks>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation object.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.CommitOperation(System.Boolean)">
            <summary> Commits the operation. </summary>
            <param name="includeChains"> true to include, false to exclude touching the chains during the commit. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the ContourOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from the Mastercam
          database and use that to initialize this operation object.
<para>    If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.ContourOperation.LoadDefaults">
            <summary> Loads the default values for a given operation object. </summary>
        </member>
        <member name="T:Mastercam.Operations.ContourOperation">
            <summary> This class is used for working with contour toolpath operations. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.MaxTabDistance">
            <summary> Gets or sets the maximum distance between tabs (for auto tab). </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.AutoTabByDistance">
            <summary> Gets or sets a value indicating the tab distance mode:
          true = auto tab by distance, false = auto tab by # tabs. </summary>
            <remarks> (only used if AutomaticPosition is set = true)</remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.CutOffOnFirstFinish">
            <summary> Gets or sets a value indicating if the tabs should be cut-off on the first finish pass. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.CutOffType">
            <summary> Gets or sets a value indicating the tab cut-off type -
          (None, AfterAll, AfterEach, SeparateOp).  </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.Overwrite">
            <summary> Gets or sets a value indicating the to 'Overwrite tab edit changes'. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.TabAll">
            <summary> Gets or sets a value indicating the to 'Tab All'. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.TabSizeY">
            <summary> Gets or sets the Y dimension of maximum size shape to tab. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.TabSizeX">
            <summary> Gets or sets the X dimension of maximum size shape to tab. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.UsePoint">
            <summary> Gets or sets a value indicating to use points on the chain for start and tab positions. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.UseFeedPlane">
            <summary> Gets or sets a value indicating to use the Feed Plane for full height tabs. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.AdvancedAuto">
            <summary> Gets or sets a value indicating to use the Advanced Auto Tab Positioning. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.RampAngle">
            <summary> Gets or sets the Ramp Angle to use for the tab entry/exit mode = Ramp. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.ArcRadius">
            <summary> Gets or sets the Arc Radius to use for the tab entry/exit mode = Arc. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.EntryExitMode">
            <summary> Gets or sets a value indicating the tab entry/exit mode -
          (Vertical, Arc, Ramp). </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.TabPosition">
            <summary> Gets or sets a value indicating the (manual) tab position option -
          (Start, Midpoint, End).  </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.TabMotion">
            <summary> Gets or sets a value indicating the selection state of the Tab Motion (full or partial) option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.TabThickness">
            <summary> Gets or sets the Tab Thickness. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.TabWidth">
            <summary> Gets or sets the Tab Width. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.NumberOfTabs">
            <summary> Gets or sets a the number of tabs (for auto tabs). </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.AutomaticPosition">
            <summary> Gets or sets a value indicating the on/off state of the Automatic option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TabParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the Tabs (checkbox). </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.TabParams.op_Inequality(Mastercam.Operations.Types.TabParams,Mastercam.Operations.Types.TabParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.TabParams.op_Equality(Mastercam.Operations.Types.TabParams,Mastercam.Operations.Types.TabParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
       objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.TabParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.TabParams.Equals(Mastercam.Operations.Types.TabParams,Mastercam.Operations.Types.TabParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.TabParams">
            <summary> This class represents the data needed for Tabs in a Contour operation. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.TabCutOffType">
            <summary> This enumeration specifies the different Tab Cut-Off settings of a contour toolpath operation. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.TabEntryExitType">
            <summary> This enumeration specifies the different Tab Entry/Exit settings of a contour toolpath operation. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.TabPositionType">
            <summary> This enumeration specifies the different Tab Position settings of a contour toolpath operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.TaperAngle">
            <summary> Gets or sets the Taper Wall Angle (If Tapered Walls is enabled).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.TaperedWalls">
            <summary> Gets or sets a value indicating the on/of state of the Taper Walls option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.CutOrderByDepth">
            <summary> Gets or sets a value indicating the Depth Cut Order mode.
          true = 'by depth', else false = 'by contour'.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.SubprogramIsIncremental">
            <summary> Gets or sets a value indicating the Subprogram Incremental/Absolute setting
          If true, incremental subprograms will be used, else false for absolute subprograms.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.UseSubprogram">
            <summary> Gets or sets a value indicating the on/off state of the Subprogram option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.KeepToolDown">
            <summary> Gets or sets a value indicating the on/off state of the Keep Tool Down option.
          If true, the operation will generate a toolpath where the tool is kept down.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.FinishStep">
            <summary> Gets or sets the finishing step value to use. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.FinishNumberCuts">
            <summary> Gets or sets the number of finishing cuts to make. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.MaxRoughStep">
            <summary> Gets or sets the maximum roughing step value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourDepthCutsParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the depth Cuts (checkbox). </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourDepthCutsParams.op_Inequality(Mastercam.Operations.Types.ContourDepthCutsParams,Mastercam.Operations.Types.ContourDepthCutsParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourDepthCutsParams.op_Equality(Mastercam.Operations.Types.ContourDepthCutsParams,Mastercam.Operations.Types.ContourDepthCutsParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourDepthCutsParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourDepthCutsParams.Equals(Mastercam.Operations.Types.ContourDepthCutsParams,Mastercam.Operations.Types.ContourDepthCutsParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ContourDepthCutsParams">
            <summary> This class represents the data needed for Depth Cuts in a Contour operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassParams.KeepToolDown">
            <summary> Gets or sets a value indicating the on/off state of the 'Keep Tool Down' option.
          If true, the operation will generate a toolpath where the tool is kept down.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassParams.FinishPassesAtFinalDepth">
            <summary> Gets or sets a value indicating whether to do finish passes at the final depth. </summary>
            <remarks> true = final depth, else false = all depths </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassParams.FinishCutSpacing">
            <summary> Gets or sets the finish cut spacing. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassParams.FinishNumberCuts">
            <summary> Gets or sets the number of finish cuts. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassParams.RoughCutSpacing">
            <summary> Gets or sets the rough cut spacing. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassParams.RoughNumberCuts">
            <summary> Gets or sets the number of rough cuts. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassParams.Enabled">
            <summary> Gets or sets a value indicating if the Multi-Passes parameters page is enabled. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.MultiPassParams.op_Inequality(Mastercam.Operations.Types.MultiPassParams,Mastercam.Operations.Types.MultiPassParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MultiPassParams.op_Equality(Mastercam.Operations.Types.MultiPassParams,Mastercam.Operations.Types.MultiPassParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MultiPassParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MultiPassParams.Equals(Mastercam.Operations.Types.MultiPassParams,Mastercam.Operations.Types.MultiPassParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.MultiPassParams">
            <summary> This class represents the data needed to set up the Multi-Passes gage on a Contour
          operation.
          </summary>
            <remarks> Mastercam X7. </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.OscillateParams.OscillationDistance">
            <summary> Gets or sets the oscillation distance to use in this oscillation contour toolpath operation.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.OscillateParams.MaximumDepth">
            <summary> Gets or sets the maximum depth value to use in this oscillation contour toolpath operation.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.OscillateParams.MovementType">
            <summary> Gets or sets the type of oscillation movement used in this oscillation contour toolpath
          operation.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.OscillateParams.op_Inequality(Mastercam.Operations.Types.OscillateParams,Mastercam.Operations.Types.OscillateParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.OscillateParams.op_Equality(Mastercam.Operations.Types.OscillateParams,Mastercam.Operations.Types.OscillateParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.OscillateParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.OscillateParams.Equals(Mastercam.Operations.Types.OscillateParams,Mastercam.Operations.Types.OscillateParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.OscillateParams">
            <summary> This class represents the data needed to set up Oscillation in a Contour operation.
          </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.OscillationMovementType">
            <summary> This enumeration specifies the different rules for how an NC file name is found and created.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.OscillationMovementType.Highspeed">
            <summary> A parabolic, high-speed oscillation movement. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.OscillationMovementType.Linear">
            <summary> A linear oscillation movement. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourRemachiningParams.DisplayStock">
            <summary> Gets or sets a value indicating whether or not to display the stock during the
          generation of this contour toolpath.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourRemachiningParams.RemachiningTolerance">
            <summary> Gets or sets the tolerance value to use in this Re-machining Contour operation.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourRemachiningParams.Clearance">
            <summary> Gets or sets the re-machining clearance value to use in this Re-machining Contour operation.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourRemachiningParams.RoughingToolDiameter">
            <summary> Gets or sets the diameter of the roughing tool to use for remaining stock computation.
          </summary>
            <remarks> Note that this value is only used if the RemainingStockMethod type is set to RoughingToolDiameter.
          </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourRemachiningParams.RemainingStockMethod">
            <summary> Gets or sets the method for computing remaining stock in a re-machining contour operation.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourRemachiningParams.op_Inequality(Mastercam.Operations.Types.ContourRemachiningParams,Mastercam.Operations.Types.ContourRemachiningParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourRemachiningParams.op_Equality(Mastercam.Operations.Types.ContourRemachiningParams,Mastercam.Operations.Types.ContourRemachiningParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourRemachiningParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourRemachiningParams.Equals(Mastercam.Operations.Types.ContourRemachiningParams,Mastercam.Operations.Types.ContourRemachiningParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ContourRemachiningParams">
            <summary> This class represents the data needed to set up a Contour Re-machining operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RampParams.PassAtFinalDepth">
            <summary> Gets or sets a value indicating whether to incorporate a pass at the final depth in
          this ramp contour operation.
          </summary>
            <remarks> Note that this value is only used if the MotionType type is set to DepthMotion.
       </remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.RampParams.OpenContourOneWayRamping">
            <summary> Gets or sets a value indicating whether to use one way ramping for open contours in
          this ramp contour operation.
          </summary>
            <remarks> Note that this value is only used if the MotionType type is set to DepthMotion
          or AngleMotion.
          </remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.RampParams.Depth">
            <summary> Gets or sets the depth value to use for the ramp contour operation. </summary>
            <remarks> Note that this value is only used if the MotionType type is set to DepthMotion
          or PlungeMotion.
       </remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.RampParams.Angle">
            <summary> Gets or sets the angle to use for the ramp contour operation. </summary>
            <remarks> Note that this value is only used if the MotionType type is set to AngleMotion.
       </remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.RampParams.MotionType">
            <summary> Gets or sets the type of ramp motion to use in the ramp contour operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RampParams.LinearizationTolerance">
            <summary> Gets or sets the value that specifies the tolerance used for linearizing the helixes.
          If the LinearizeHelixes flag is on.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RampParams.LinearizeHelixes">
            <summary> Gets or sets a value indicating whether or not to linearize helixes in the ramp toolpath.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.RampParams.op_Inequality(Mastercam.Operations.Types.RampParams,Mastercam.Operations.Types.RampParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.RampParams.op_Equality(Mastercam.Operations.Types.RampParams,Mastercam.Operations.Types.RampParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.RampParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.RampParams.Equals(Mastercam.Operations.Types.RampParams,Mastercam.Operations.Types.RampParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.RampParams">
            <summary> This class represents the data needed to set up a Contour Ramp operation. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.RampMotionType">
            <summary> This enumeration specifies the different types of ramp motion used in 2D Contour toolpath.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RampMotionType.PlungeMotion">
            <summary>Use plunge motion in a Contour Ramp toolpath. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RampMotionType.DepthMotion">
            <summary> Use depth motion in a Contour Ramp toolpath. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RampMotionType.AngleMotion">
            <summary> Use angled motion in a Contour Ramp toolpath. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ChamferParams.Depth">
            <summary> Gets or sets the depth value to use if the contour operation's tool is an end mill. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ChamferParams.ToolTipOffset">
            <summary> Gets or sets the amount of offset to be taken into consideration due to the size of the tool tip.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ChamferParams.Width">
            <summary> Gets or sets the width of the chamfer to put be applied via toolpath. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ChamferParams.op_Inequality(Mastercam.Operations.Types.ChamferParams,Mastercam.Operations.Types.ChamferParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ChamferParams.op_Equality(Mastercam.Operations.Types.ChamferParams,Mastercam.Operations.Types.ChamferParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ChamferParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ChamferParams.Equals(Mastercam.Operations.Types.ChamferParams,Mastercam.Operations.Types.ChamferParams)">
            <summary> This is a static equality method for the purposes of comparing two objects. </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ChamferParams">
            <summary> This class represents the data needed to set up a Contour Chamfer operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ContourCutParams.LeaveStock">
            <summary> Gets or sets the amount the stock leave on walls and floors. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourCutParams.MaxDepthVariance">
            <summary> Gets or sets the 'Max Depth Variance' setting. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourCutParams.InternalCornerRoundingRadius">
            <summary> Gets or sets the Internal Corner Rounding Radius variance. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourCutParams.InfiniteLookAhead">
            <summary> Gets or sets a value indicating the on/off state of the Infinite Look Ahead option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ContourCutParams.ContourSubtype">
            <summary> Gets or sets the contour subtype being used in the current contour toolpath operation.
      </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourCutParams.op_Inequality(Mastercam.Operations.Types.ContourCutParams,Mastercam.Operations.Types.ContourCutParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourCutParams.op_Equality(Mastercam.Operations.Types.ContourCutParams,Mastercam.Operations.Types.ContourCutParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourCutParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ContourCutParams.Equals(Mastercam.Operations.Types.ContourCutParams,Mastercam.Operations.Types.ContourCutParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ContourCutParams">
            <summary> This class represents the (basic) Cut Parameter data needed to set up a Contour operation.
          </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.ContourSubtypeType">
            <summary> This enumeration specifies the different sub-types of a contour toolpath operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ContourSubtypeType.Oscillate2D">
            <summary> A 2D oscillating contour operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ContourSubtypeType.Remachining2D">
            <summary> A 2D re-machining contour operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ContourSubtypeType.Ramp2D">
            <summary> A 2D ramp motion contour operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ContourSubtypeType.Chamfer3D">
            <summary>A 3D chamfer contour operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ContourSubtypeType.Chamfer2D">
            <summary> A 2D chamfer contour operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ContourSubtypeType.Basic3D">
            <summary> A basic 3D contour operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ContourSubtypeType.Basic">
            <summary> A basic contour operation (2D or 3D). </summary>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadHighSpeedParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's high-speed settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with high-speed settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadBreakThroughParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's break through settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with break through settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadDepthCutsParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's depth cuts settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadOpenPocketParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's open pocket settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's open pocket settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadRemachiningParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's re-machining settings from the operation data
          member passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's re-machining settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadFacingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's facing settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's facing settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadFinishingLeadInOutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's (finishing) Lead-In/Out settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's (finishing) Lead-In/Out settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadExitParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's finishing exit settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's finishing exit settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadEntryParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's finishing entry settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's finishing entry settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadFinishingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's finishing settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's finishing settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadRoughingEntryMotionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's roughing entry motion settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's roughing entry motion settings from.
               </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadRoughingRampEntryMotionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's roughing entry (ramp) motion settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's roughing entry (ramp) motion settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadRoughingHelixEntryMotionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's roughing entry (helix) motion settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's roughing entry (helix) motion settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadRoughingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's roughing settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's roughing settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's (basic) Cut Parameters settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's cut parameters settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveHighSpeedParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's high-speed settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with high-speed settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveBreakThroughParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's break through settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with break through settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveDepthCutsParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's depth cuts settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with depth cuts settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveOpenPocketParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's open pocket settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with open pocket settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveRemachiningParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's re-machining settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with re-machining settings.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveFacingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's facing settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with facing settings. </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveFinishingLeadInOutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (finishing) Lead-In/Out settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with (finishing) Lead-In/Out settings. </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveExitParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's finishing exit settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with finishing exit settings. </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveEntryParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's finishing entry settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with finishing entry settings. </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveFinishingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's finishing settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with finishing settings. </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveRoughingEntryMotionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's roughing entry motion settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with roughing entry motion settings. </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveRoughingRampEntryMotionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's roughing entry (ramp) motion settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with roughing entry (ramp) motion settings. </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveRoughingHelixEntryMotionParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's roughing entry (helix) motion settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with roughing entry (helix) motion settings. </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveRoughingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's roughing settings to the operation data member
          passed in.
          </summary>
            <param name="Op">[in,out]  The operation data member to load with roughing settings. </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.SaveCutParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's (basic) Cut Parameters settings to the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load with cut parameters settings. </param>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.TrochoidalCuts">
            <summary> Gets or sets the (Roughing page) Trochoidal Cuts settings used in this pocket operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.BreakThrough">
            <summary> Gets or sets the Break Through settings used in this pocket operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.DepthCuts">
            <summary> Gets or sets the Depth Cuts settings used in this pocket operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.FinishLeadInOut">
            <summary> Gets or sets the (Finish) Lead-In/Out settings used in this pocket operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.Finishing">
            <summary> Gets or sets the Finish settings used in this pocket operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.PocketRoughEntry">
            <summary> Gets or sets the Roughing Entry Motion used in this pocket operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.Roughing">
            <summary> Gets or sets the Roughing settings used in this pocket operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.OpenPocket">
            <summary> Gets or sets the open pocket data to be used in this pocket operation if the toolpath
          is set to an open pocket subtype.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.Remachining">
            <summary> Gets or sets the re-machining data to be used in this pocket operation if the
          toolpath is set to a re-machining pocket subtype.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.Facing">
            <summary> Gets or sets the facing data to be used in this pocket operation if the toolpath
          is set to a facing pocket subtype.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.PocketOperation.CutParams">
            <summary> Gets or sets the (basic) cut parameter data to be used in this pocket operation.
         </summary>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.Commit(System.Boolean)">
            <summary> This method commits the current Pocket operation to the Mastercam database. </summary>
            <param name="includeChains"> true to update any chains assigned to the operation. </param>
            <remarks> If you know that you've not altered the chains used by this operation,
		  you may wish to used this &gt;.Commit(false). </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.Commit">
            <summary> This method commits the current Pocket operation to the Mastercam database.
          </summary>
            <remarks> This commit also updates any the chains used by this operation.
		   If you know that do not want the chains touched during the commit,
		   you may wish to use the .Commit(false) method overload. </remarks>
            <returns> True if the database commit was successful and false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.#ctor">
            <summary> Initializes a new instance of the PocketOperation class. </summary>
            <remarks> This creates a new pocketing toolpath operation with default settings. </remarks>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation object from the operation structure
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation structure to use as defaults for this operation
                  object.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.CommitOperation(System.Boolean)">
            <summary> Commits the operation. </summary>
            <param name="includeChains"> true to include, false to exclude touching the chains during the commit. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the PocketOperation class. </summary>
            <remarks> If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="M:Mastercam.Operations.PocketOperation.LoadDefaults">
            <summary> Loads the default values for a given operation object. </summary>
        </member>
        <member name="T:Mastercam.Operations.PocketOperation">
            <summary> This class is used for working with pocketing toolpath operations. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TrochoidalCutsParams.SmoothingRadius">
            <summary> Gets or sets the Corner Smoothing Radius to use on the Trochoidal cuts . </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TrochoidalCutsParams.LoopSpacing">
            <summary> Gets or sets the Loop Spacing of the Trochoidal cuts . </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TrochoidalCutsParams.LoopRadius">
            <summary> Gets or sets the Loop Radius of the Trochoidal cuts . </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.TrochoidalCutsParams.Mode">
            <summary> Gets or sets a value indicating the on/off state of the Trochoidal Cuts option. </summary>
            <remarks> 0=Off, 1=Full material only, or 2=Entire pocket </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.TrochoidalCutsParams.op_Inequality(Mastercam.Operations.Types.TrochoidalCutsParams,Mastercam.Operations.Types.TrochoidalCutsParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.TrochoidalCutsParams.op_Equality(Mastercam.Operations.Types.TrochoidalCutsParams,Mastercam.Operations.Types.TrochoidalCutsParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.TrochoidalCutsParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.TrochoidalCutsParams.Equals(Mastercam.Operations.Types.TrochoidalCutsParams,Mastercam.Operations.Types.TrochoidalCutsParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.TrochoidalCutsParams">
            <summary> This class represents the data needed for Trochoidal Cuts settings in a Pocket operation. </summary>
            <remarks> Only used with the Pocket 'High-Speed' cutting method. </remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketLeadInOutParams.Exit">
            <summary> Gets or sets the (Finishing) Lead-In/Out Exit settings. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketLeadInOutParams.Entry">
            <summary> Gets or sets the (Finishing) Lead-In/Out Entry settings. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketLeadInOutParams.OverLap">
            <summary> Gets or sets the Overlap distance. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketLeadInOutParams.Enabled">
            <summary> Gets or sets a value indicating if the Lead In/Out parameters page is enabled. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketLeadInOutParams.op_Inequality(Mastercam.Operations.Types.PocketLeadInOutParams,Mastercam.Operations.Types.PocketLeadInOutParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketLeadInOutParams.op_Equality(Mastercam.Operations.Types.PocketLeadInOutParams,Mastercam.Operations.Types.PocketLeadInOutParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketLeadInOutParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketLeadInOutParams.Equals(Mastercam.Operations.Types.PocketLeadInOutParams,Mastercam.Operations.Types.PocketLeadInOutParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketLeadInOutParams">
            <summary> This class represents the data needed to set up the Lead-In/Out on a Pocket operation.
          </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketFinishingParams.ThinWall">
            <summary> Gets or sets the Thin Wall settings for the Pocket. </summary>
            <remarks> Only used if both of these options are enabled:
          Machine finish passes only at final depth,
          and
          Machine finish pass after roughing all pockets.
          </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.SpindleSpeed">
            <summary> Gets or sets the Override Spindle Speed. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.FeedRate">
            <summary> Gets or sets the Override Feedrate. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.OverrideSpindleSpeed">
            <summary> Gets or sets a value indicating the on/off state of the 'Spindle Speed Override' option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.OverrideFeedrate">
            <summary> Gets or sets a value indicating the on/off state of the 'Feedrate Override' option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.FinishAfterAllPockets">
            <summary> Gets or sets a value indicating the on/off state of the 'Machining finish pass after roughing all pockets' option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.FinishOnlyAtFinalDepth">
            <summary> Gets or sets a value indicating the on/off state of the 'Machining finish passes only at final depth' option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.CutterComp">
            <summary> Gets or sets a value indicating the type of Cutter Compensation to use on the finish pass.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.OptimizeCutterComp">
            <summary> Gets or sets a value indicating the on/off state of the 'Optimize cutter comp in control' option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.KeepToolDown">
            <summary> Gets or sets a value indicating the on/off state of the 'Keep tool down' option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.StartFinishAtClosest">
            <summary> Gets or sets a value indicating the on/off state of the 'Start finish pass at closest entity' option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.FinishOuterBounday">
            <summary> Gets or sets a value indicating the on/off state of the 'Finish outer boundary' option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.SpringNumberPasses">
            <summary> Gets or sets the number of spring passes. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.FinishPassSpacing">
            <summary> Gets or sets the finish pass spacing. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.FinishNumberPasses">
            <summary> Gets or sets the number of finish passes. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketFinishingParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the Finish Cuts (checkbox). </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketFinishingParams.op_Inequality(Mastercam.Operations.Types.PocketFinishingParams,Mastercam.Operations.Types.PocketFinishingParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketFinishingParams.op_Equality(Mastercam.Operations.Types.PocketFinishingParams,Mastercam.Operations.Types.PocketFinishingParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketFinishingParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketFinishingParams.Equals(Mastercam.Operations.Types.PocketFinishingParams,Mastercam.Operations.Types.PocketFinishingParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketFinishingParams">
            <summary> This class represents the data needed for Finishing (page) settings in a Pocket operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ThinWallParams.ClimbCut">
            <summary> Gets or sets a value indicating the state of the 'Climb / Conventional' setting. </summary>
            <remarks> true = climb cut, else false = conventional </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.ThinWallParams.NumberPasses">
            <summary> Gets or sets the number of finish passes. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ThinWallParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the Thin Wall option (checkbox). </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ThinWallParams.op_Inequality(Mastercam.Operations.Types.ThinWallParams,Mastercam.Operations.Types.ThinWallParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ThinWallParams.op_Equality(Mastercam.Operations.Types.ThinWallParams,Mastercam.Operations.Types.ThinWallParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ThinWallParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ThinWallParams.Equals(Mastercam.Operations.Types.ThinWallParams,Mastercam.Operations.Types.ThinWallParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ThinWallParams">
            <summary> This class represents the data needed for Finishing (page) Thin Wall settings in a Pocket operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughingParams.ConstantOverlapTolerance">
            <summary> Gets or sets the 'Tolerance for remachining and constant overlap spiral'. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughingParams.MinimizeToolBurial">
            <summary> Gets or sets a value indicating the on/off state of the 'Minimize tool burial' option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughingParams.DisplayStock">
            <summary> Gets or sets a value indicating the on/off state of the 'Display stock for constant overlap spiral' option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughingParams.SpiralOut">
            <summary> Gets or sets a value indicating the on/off state of the 'Spiral inside to outside' option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughingParams.RoughingAngle">
            <summary> Gets or sets the roughing angle. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughingParams.StepOverDistance">
            <summary> Gets or sets the rough step-over distance. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughingParams.CuttingMethod">
            <summary> Gets or sets a value indicating the Cutting Method. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughingParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the Rough Cuts (checkbox). </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughingParams.op_Inequality(Mastercam.Operations.Types.PocketRoughingParams,Mastercam.Operations.Types.PocketRoughingParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughingParams.op_Equality(Mastercam.Operations.Types.PocketRoughingParams,Mastercam.Operations.Types.PocketRoughingParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughingParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughingParams.Equals(Mastercam.Operations.Types.PocketRoughingParams,Mastercam.Operations.Types.PocketRoughingParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketRoughingParams">
            <summary> This class represents the data needed for Roughing (page) settings in a Pocket operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRoughEntryParams.Ramp">
            <summary> Gets or sets the Ramp Entry settings used for the pocket roughing entry. </summary>
            <remarks> Only valid of the EntryMode is 'Ramp'.</remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRoughEntryParams.Helix">
            <summary> Gets or sets the Helix Entry settings used for the pocket roughing entry. </summary>
            <remarks> Only valid of the EntryMode is 'Helix'.</remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryParams.EntryMode">
            <summary> Gets or sets the Entry Motion option setting used for the pocket roughing entry. </summary>
            <remarks> Off, Ramp or Helix. </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryParams.op_Inequality(Mastercam.Operations.Types.PocketRoughEntryParams,Mastercam.Operations.Types.PocketRoughEntryParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryParams.op_Equality(Mastercam.Operations.Types.PocketRoughEntryParams,Mastercam.Operations.Types.PocketRoughEntryParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryParams.Equals(Mastercam.Operations.Types.PocketRoughEntryParams,Mastercam.Operations.Types.PocketRoughEntryParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketRoughEntryParams">
            <summary> This class represents the data needed for the rough entry motion of a pocket operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.UsePlungeFeedrate">
            <summary> Gets or sets a value indicating which feedrate to use for the entry motion.
          If true, then use the plunge rate, else use the regular feedrate.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.SaveSkippedBoundary">
            <summary> Gets or sets a value indicating whether to 'Save the skipped boundary' if all entry attempts fail.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.PlungeOnEntryFailure">
            <summary> Gets or sets a value indicating specifies what to do if the helical entry fails.
          If true, then plunge, else skip the entry altogether.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.RampFromEntryPoint">
            <summary> Gets or sets a value indicating the state of the 'Ramp from  entry point' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.AlignWithEntryPoint">
            <summary> Gets or sets a value indicating the state of the 'Align ramp with entry point' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.AddSlotWidth">
            <summary> Gets or sets the'Additional slot width' value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.AngleXY">
            <summary> Gets or sets the 'XY angle' value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.AutoAngle">
            <summary> Gets or sets a value indicating the state of the 'Auto angle' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.PlungeAngleZag">
            <summary> Gets or sets the ramp entry's plunge zag angle. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.PlungeAngleZig">
            <summary> Gets or sets the ramp entry's plunge zig angle. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.ClearanceZ">
            <summary> Gets or sets the Z clearance to be used in the helical entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.ClearanceXY">
            <summary> Gets or sets the XY clearance to be used in the helical entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.MaxLength">
            <summary> Gets or sets the maximum length to be used in the ramp entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryRampParams.MinLength">
            <summary> Gets or sets the minimum length to be used in the ramp entry. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryRampParams.op_Inequality(Mastercam.Operations.Types.PocketRoughEntryRampParams,Mastercam.Operations.Types.PocketRoughEntryRampParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryRampParams.op_Equality(Mastercam.Operations.Types.PocketRoughEntryRampParams,Mastercam.Operations.Types.PocketRoughEntryRampParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryRampParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryRampParams.Equals(Mastercam.Operations.Types.PocketRoughEntryRampParams,Mastercam.Operations.Types.PocketRoughEntryRampParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketRoughEntryRampParams">
            <summary> This class represents the data needed for the rough entry motion of a pocket operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.UsePlungeFeedrate">
            <summary> Gets or sets a value indicating which feedrate to use for the entry motion.
          If true, then use the plunge rate, else use the regular feedrate.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.SaveSkippedBoundary">
            <summary> Gets or sets a value indicating whether to 'Save the skipped boundary' if all entry attempts fail.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.SkipOnEntryFailure">
            <summary> Gets or sets a value indicating specifies what to do if the helical entry fails.
          If true, then plunge, else skip the entry altogether.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.Direction">
            <summary> Gets or sets a value indicating the 'Direction' (CW or CCW) . </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.LengthExceeds">
            <summary> Gets or sets the minimum boundary length (for follow boundary). </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.FollowBoundaryOnlyFail">
            <summary> Gets or sets a value indicating the state of the 'On failure only' option (Follow boundary).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.FollowBoundary">
            <summary> Gets or sets a value indicating the state of the 'Follow boundary' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.CenterOnEntryPoint">
            <summary> Gets or sets a value indicating the state of the 'Center on entry point' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.Tolerance">
            <summary> Gets or sets the maximum tolerance uses if arc moves are not output by the operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.OutputArcMoves">
            <summary> Gets or sets a value indicating the state of the 'Output arc moves' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.PlungeAngle">
            <summary> Gets or sets the helical entry's plunge angle. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.ClearanceZ">
            <summary> Gets or sets the Z clearance to be used in the helical entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.ClearanceXY">
            <summary> Gets or sets the XY clearance to be used in the helical entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.MaxRadius">
            <summary> Gets or sets the maximum radius to be used in the helical entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketRoughEntryHelixParams.MinRadius">
            <summary> Gets or sets the minimum radius to be used in the helical entry. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryHelixParams.op_Inequality(Mastercam.Operations.Types.PocketRoughEntryHelixParams,Mastercam.Operations.Types.PocketRoughEntryHelixParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryHelixParams.op_Equality(Mastercam.Operations.Types.PocketRoughEntryHelixParams,Mastercam.Operations.Types.PocketRoughEntryHelixParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryHelixParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRoughEntryHelixParams.Equals(Mastercam.Operations.Types.PocketRoughEntryHelixParams,Mastercam.Operations.Types.PocketRoughEntryHelixParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketRoughEntryHelixParams">
            <summary> This class represents the data needed for the rough entry motion of a pocket operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.TaperAngleOnIslands">
            <summary> Gets or sets the Taper Angle on Islands (If Tapered Walls is enabled).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.TaperAngleOnWalls">
            <summary> Gets or sets the Taper Angle on Walls (If Tapered Walls is enabled).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.TaperedWalls">
            <summary> Gets or sets a value indicating the on/of state of the Taper Walls option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.CutOrderByDepth">
            <summary> Gets or sets a value indicating the Depth Cut Order mode.
          true = 'by depth', else false = 'by contour'.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.SubprogramIsIncremental">
            <summary> Gets or sets a value indicating the Subprogram Incremental/Absolute setting
          If true, incremental subprograms will be used, else false for absolute subprograms.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.UseSubprogram">
            <summary> Gets or sets a value indicating the on/off state of the Subprogram option (checkbox).
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.UseIslandDepths">
            <summary> Gets or sets a value indicating the on/off state of the Use Island Depths option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.KeepToolDown">
            <summary> Gets or sets a value indicating the on/off state of the Keep Tool Down option.
          If true, the operation will generate a toolpath where the tool is kept down.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.FinishStep">
            <summary> Gets or sets the finishing step value to use. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.FinishNumberCuts">
            <summary> Gets or sets the number of finishing cuts to make. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.MaxRoughStep">
            <summary> Gets or sets the maximum roughing step value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketDepthCutsParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the depth Cuts (checkbox). </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketDepthCutsParams.op_Inequality(Mastercam.Operations.Types.PocketDepthCutsParams,Mastercam.Operations.Types.PocketDepthCutsParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketDepthCutsParams.op_Equality(Mastercam.Operations.Types.PocketDepthCutsParams,Mastercam.Operations.Types.PocketDepthCutsParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketDepthCutsParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketDepthCutsParams.Equals(Mastercam.Operations.Types.PocketDepthCutsParams,Mastercam.Operations.Types.PocketDepthCutsParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketDepthCutsParams">
            <summary> This class represents the data needed for Depth Cuts in a Pocket operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.OpenPocketParams.UseStandardPocketOnClosedChains">
            <summary> Gets or sets a value indicating whether to use standard pocketing for any closed chains
          in this open pocket operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.OpenPocketParams.UseOpenPocketCutting">
            <summary> Gets or sets a value indicating whether to use the open pocket cutting method.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.OpenPocketParams.OverlapDistance">
            <summary> Gets or sets the distance to use for overlaps in pocket passes. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.OpenPocketParams.op_Inequality(Mastercam.Operations.Types.OpenPocketParams,Mastercam.Operations.Types.OpenPocketParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.OpenPocketParams.op_Equality(Mastercam.Operations.Types.OpenPocketParams,Mastercam.Operations.Types.OpenPocketParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.OpenPocketParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.OpenPocketParams.Equals(Mastercam.Operations.Types.OpenPocketParams,Mastercam.Operations.Types.OpenPocketParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.OpenPocketParams">
            <summary> This class represents the data needed to set up a Pocket Open operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRemachiningParams.DisplayStock">
            <summary> Gets or sets the a value indicating whether or not to display the stock during the
          generation of this pocket toolpath.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRemachiningParams.MachineCompleteFinishPasses">
            <summary> Gets or sets the a value indicating whether or not to machine completely finish
          passes in this pocket toolpath.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRemachiningParams.ApplyEntryExitCurvesToRoughPasses">
            <summary> Gets or sets a value indicating whether or not to apply entry and exit curves to roughing passes.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRemachiningParams.Clearance">
            <summary> Gets or sets the re-machining clearance value to use in this Re-machining Pocket
          operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRemachiningParams.RoughingToolDiameter">
            <summary> Gets or sets the diameter of the roughing tool to use for remaining stock computation.
          </summary>
            <remarks> Note that this value is only used if the RemainingStockMethod type is set to
          RoughingToolDiameter.
          </remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRemachiningParams.RemainingStockMethod">
            <summary> Gets or sets the parameter that specifies the method for computing remaining stock
          in a re-machining pocket operation.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRemachiningParams.op_Inequality(Mastercam.Operations.Types.PocketRemachiningParams,Mastercam.Operations.Types.PocketRemachiningParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRemachiningParams.op_Equality(Mastercam.Operations.Types.PocketRemachiningParams,Mastercam.Operations.Types.PocketRemachiningParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRemachiningParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketRemachiningParams.Equals(Mastercam.Operations.Types.PocketRemachiningParams,Mastercam.Operations.Types.PocketRemachiningParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketRemachiningParams">
            <summary> This class represents the data needed to set up a Pocket Re-machining operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketFacingParams.StockAboveIslands">
            <summary> Gets or sets the amount of stock above any islands. </summary>
            <remarks> Note that this value is only used if the PocketSubtye value is set to IslandFacing.
          </remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketFacingParams.ExitDistance">
            <summary> Gets or sets the amount of exit distance to apply to this facing or island facing
          toolpath operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketFacingParams.ApproachDistance">
            <summary> Gets or sets the amount of approach distance to apply to this facing or island facing
          toolpath operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketFacingParams.Overlap">
            <summary> Gets or sets the amount of overlap to use in this facing or island facing toolpath
          operation.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketFacingParams.op_Inequality(Mastercam.Operations.Types.PocketFacingParams,Mastercam.Operations.Types.PocketFacingParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketFacingParams.op_Equality(Mastercam.Operations.Types.PocketFacingParams,Mastercam.Operations.Types.PocketFacingParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketFacingParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketFacingParams.Equals(Mastercam.Operations.Types.PocketFacingParams,Mastercam.Operations.Types.PocketFacingParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketFacingParams">
            <summary> This class represents the data needed to set up a Pocket facing toolpath operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketCutParams.LeaveStock">
            <summary> Gets or sets the amount the stock leave on walls and floors. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketCutParams.CreateAddtionalFinishOperation">
            <summary> Gets or sets a value indicating the state of the 'Create additional finish operation' option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketCutParams.LinearizeTolerance">
            <summary> Gets or sets the 'Linearization Tolerance' settings. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketCutParams.RollCutterAroundCorners">
            <summary> Gets or sets a value indicating the state of the 'Roll Cutter Around Corners setting. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketCutParams.TipComp">
            <summary> Gets or sets a value indicating the state of the 'Tip Comp' (Tip or Center).
          true = comp to tip, else comp to center </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketCutParams.MachiningDirection">
            <summary> Gets or sets a value indicating the Machine Direction (Climb or Conventional). </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.PocketCutParams.PocketSubtype">
            <summary> Gets or sets the pocket subtype being used in the current pocket toolpath operation. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketCutParams.op_Inequality(Mastercam.Operations.Types.PocketCutParams,Mastercam.Operations.Types.PocketCutParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketCutParams.op_Equality(Mastercam.Operations.Types.PocketCutParams,Mastercam.Operations.Types.PocketCutParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketCutParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.PocketCutParams.Equals(Mastercam.Operations.Types.PocketCutParams,Mastercam.Operations.Types.PocketCutParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketCutParams">
            <summary> This class represents the (basic) Cut Parameter data needed to set up a Pocket operation.
          </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.HelixEntryDirection">
            <summary> This enumeration specifies the different types of Roughing - Helix Entry Motion directions.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.HelixEntryDirection.CCW">
            <summary> Roughing - Entry Motion = CCW Helix. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.HelixEntryDirection.CW">
            <summary> Roughing - Entry Motion = CW Helix. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketRoughEntryMode">
            <summary> This enumeration specifies the different types of Roughing - Entry Motion in a pocket operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRoughEntryMode.Off">
            <summary> Roughing - Entry Motion = Off. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRoughEntryMode.Ramp">
            <summary> Roughing - Entry Motion = Ramp. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketRoughEntryMode.Helix">
            <summary> Roughing - Entry Motion = Helix. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.PocketSubtypeType">
            <summary> This enumeration specifies the different sub-types of a pocket toolpath operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketSubtypeType.Open">
            <summary> An open pocket toolpath operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketSubtypeType.Remachining">
            <summary> A re-machining pocket toolpath operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketSubtypeType.IslandFacing">
            <summary> An island facing pocket toolpath operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketSubtypeType.Facing">
            <summary> A facing pocket toolpath operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.PocketSubtypeType.Standard">
            <summary> A standard pocket toolpath operation. </summary>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.Length">
            <summary> Gets the length of the NURBSCurve object. </summary>
            <remarks> In order to retrieve this information the NURBSCurve entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this will return a value of -1.0)
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.IsUniform">
            <summary> Gets a value indicating if the NURBSCurve is 'uniform'. </summary>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.IsPeriodic">
            <summary> Gets a value indicating if the NURBSCurve is 'periodic'. </summary>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.IsNonRational">
            <summary> Gets a value indicating if the NURBSCurve is 'non-rational'. </summary>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.IsClosed">
            <summary> Gets a value indicating if the NURBSCurve is 'closed' (endpoints are equal). </summary>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.IsPlanar">
            <summary> Gets a value indicating if the NURBSCurve is 'planar'. </summary>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.Dimension">
            <summary> Gets the dimension of the NURBSCurve. </summary>
            <remarks> In order to retrieve this information the NURBSCurve entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this value will be -1.)
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.Degree">
            <summary> Gets the degree of the NURBSCurve. </summary>
            <remarks> In order to retrieve this information the NURBSCurve entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this value will be -1.)
         </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.ControlPointsCount">
            <summary> Gets the number of knots in the NURBSCurve. </summary>
            <remarks> In order to retrieve this information the NURBSCurve entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this value will be -1.)
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.KnotsCount">
            <summary> Gets the number of knots in the NURBSCurve. </summary>
            <remarks> In order to retrieve this information the NURBSCurve entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this value will be -1.)
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.Normal">
            <summary> Gets the Normal the NURBSCurve. </summary>
            <remarks> If curve is planar, this is the normal to plane of curve.
          In order to retrieve this information the NURBSCurve entity MUST be Committed to
          Mastercam's database. (If that cannot be done, the values of this point will be all zeros.)
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.MaxCurvature">
            <summary> Gets the maximum curvature of the NURBSCurve. </summary>
            <remarks> In order to retrieve this information the NURBSCurve entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this will return a value of -1.0)
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.Knots">
            <summary> Gets the list of Knots in the NURBS Curve. </summary>
            <remarks> In order to retrieve this information the NURBSCurve entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this will return an empty list).
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.ControlPoints">
            <summary> Gets the list of Control Points of the NURBS Curve. </summary>
            <remarks> These are the Control Points in the actual NURBS Curve geometry object,
          NOT the user supplied points used at the time creation of the NURBS Curve!
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.NodePoints">
            <summary> Gets or sets the list of points used to create the NURBS Curve object. </summary>
            <remarks> These are the user supplied points used at the time creation of the NURBS Curve.
          These are NOT the Control Points of the actual NURBS Curve entity!
          If the entity was NOT "user created" (it was "pulled" from Mastercam's database),
          this list will be empty!
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.EndPoint2">
            <summary> Gets the last point in the current NURBS curve object. </summary>
        </member>
        <member name="P:Mastercam.Curves.NURBSCurveGeometry.EndPoint1">
            <summary> Gets the first point in the current NURBS curve object. </summary>
        </member>
        <member name="F:Mastercam.Curves.NURBSCurveGeometry.Data">
            <summary> Gets the NURBSCurve data associated with this NURBSCurveGeometry object. </summary>
        </member>
        <member name="M:Mastercam.Curves.NURBSCurveGeometry.#ctor(Mastercam.Math.Point3D[])">
            <summary> Initializes a new instance of the NURBSCurveGeometry class. </summary>
            <remarks> Creates a new NURBSCurveGeometry object based off of the supplied list of points.
          </remarks>
            <param name="Points"> The point data to create this NURBSCurveGeometry object with. </param>
        </member>
        <member name="M:Mastercam.Curves.NURBSCurveGeometry.#ctor(Mastercam.Math.NURBSCurve)">
            <summary> Initializes a new instance of the NURBSCurveGeometry class. </summary>
            <remarks> Creates a new NURBSCurveGeometry object based off of the values in the specified
          NURBSCurve math object.
          </remarks>
            <param name="CurveData"> The NURBSCurve data to create this NURBSCurveGeometry object with. </param>
        </member>
        <member name="M:Mastercam.Curves.NURBSCurveGeometry.#ctor">
            <summary> Initializes a new instance of the NURBSCurveGeometry class. </summary>
            <remarks> Creates new NURBS Curve geometry with default values -
          2 node points - one at (0,0,0) and one at (1,0,0)
          and in the current construction view.
          </remarks>
        </member>
        <member name="M:Mastercam.Curves.NURBSCurveGeometry.GetValidEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the entity from Mastercam's database. </summary>
            <param name="entity"> [out] The entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Curves.NURBSCurveGeometry.CreateNURBSCurveWorker(Mastercam.Math.Point3D[],ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> The method does the actual creation of the NURBS Curve Entity. </summary>
            <param name="points">       The node points of the NURBSCurve. </param>
            <param name="NURBSCurveEnt"> [out] The Mastercam NURBSCurve entity. </param>
            <returns> True if it succeeds, else false. </returns>
        </member>
        <member name="M:Mastercam.Curves.NURBSCurveGeometry.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> LoadDefaults (Override) </summary>
            <remarks> This handles the loading of defaults from a Mastercam entity. </remarks>
            <param name="Ent"> The entity to load the object's default values from. </param>
        </member>
        <member name="M:Mastercam.Curves.NURBSCurveGeometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commit (Override) </summary>
            <remarks> This handles the committing of the object's data to the Mastercam database. </remarks>
            <param name="Ent">The entity that will hold all the data being sent to the Mastercam database.</param>
        </member>
        <member name="M:Mastercam.Curves.NURBSCurveGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the NURBSCurveGeometry class. </summary>
            <remarks> Creates a new object from the ID of an entity in the Mastercam database. </remarks>
            <param name="ID"> The ID of the Mastercam entity to create the new object from. </param>
        </member>
        <member name="T:Mastercam.Curves.NURBSCurveGeometry">
            <summary> This class is used for working with NURBS curve geometry within Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Math.NURBSCurve.op_Inequality(Mastercam.Math.NURBSCurve,Mastercam.Math.NURBSCurve)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Spline1"> This is the first spline to compare. </param>
            <param name="Spline2"> This is the second spline to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Math.NURBSCurve.op_Equality(Mastercam.Math.NURBSCurve,Mastercam.Math.NURBSCurve)">
            <summary> This is a static equality operator overload for the purposes of comparing these
       math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Spline1"> This is the first Spline to compare. </param>
            <param name="Spline2"> This is the second Spline to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.NURBSCurve.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this math object to
       another one.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="obj"> [in,out] This is the spline to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.NURBSCurve.Equals(Mastercam.Math.NURBSCurve,Mastercam.Math.NURBSCurve)">
            <summary> This is a static equality method for the purposes of comparing these math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Spline1"> This is the first Spline to compare. </param>
            <param name="Spline2"> This is the second Spline to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.NURBSCurve.#ctor(Mastercam.Math.Point3D[])">
            <summary> Initializes a new instance of the NURBSCurve class. </summary>
            <remarks> This takes all of the necessary pieces of data to construct this NURBS Curve object,
          and creates it with those values.
          </remarks>
            <param name="Points"> The points of the NURBS Curve to be created. </param>
        </member>
        <member name="F:Mastercam.Math.NURBSCurve.m_NodePoints">
            <summary> The (user supplied) list of Node Points used to generate the NURBS Curve. </summary>
        </member>
        <member name="F:Mastercam.Math.NURBSCurve.Point2">
            <summary> Gets or sets the second endpoint of the curve object. </summary>
        </member>
        <member name="F:Mastercam.Math.NURBSCurve.Point1">
            <summary> Gets or sets the first endpoint of the curve object. </summary>
        </member>
        <member name="M:Mastercam.Math.NURBSCurve.#ctor(nb_type)">
            <summary> Initializes a new instance of the NURBSCurve class. </summary>
            <param name="MCamNURBSCurve"> The NURBS curve geometry. </param>
        </member>
        <member name="T:Mastercam.Math.NURBSCurve">
            <summary> This class is used as a mathematical representation of a NURBS Curve. </summary>
        </member>
        <member name="P:Mastercam.Curves.SplineGeometry.Length">
            <summary> Gets the length of the Spline curve. </summary>
            <remarks> In order to retrieve this information the Spline entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this will return a value of -1.0)
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.SplineGeometry.SegmentsCount">
            <summary> Gets the number of segments in the Spline curve. </summary>
            <remarks> In order to retrieve this information the spline entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this will return a value of 0)
          In Mastercam when you Analyze a Parametric Spline entity the 'Nodes' value
          displayed is this data + 1.
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.SplineGeometry.MaxCurvature">
            <summary> Gets the maximum curvature of the Spline curve. </summary>
            <remarks> In order to retrieve this information the Spline entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this will return a value of -1.0)
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.SplineGeometry.Degree">
            <summary> Gets the degree of the Spline curve. </summary>
            <remarks> In order to retrieve this information the Spline entity MUST be Committed to
          Mastercam's database. (If that cannot be done, this value will be -1.)
         </remarks>
        </member>
        <member name="P:Mastercam.Curves.SplineGeometry.IsClosed">
            <summary> Gets a value indicating if the Spline curve  is 'closed' (endpoints are equal). </summary>
        </member>
        <member name="P:Mastercam.Curves.SplineGeometry.NodePoints">
            <summary> Gets or sets the list of node points used to create the parametric Spline curve. </summary>
            <remarks> These are the user supplied points used at the time creation of the Spline Curve.
          If the entity was NOT "user created" (it was "pulled" from Mastercam's database),
          this list will be empty!
          </remarks>
        </member>
        <member name="P:Mastercam.Curves.SplineGeometry.EndPoint2">
            <summary> Gets the last point in the current parametric Spline curve. </summary>
        </member>
        <member name="P:Mastercam.Curves.SplineGeometry.EndPoint1">
            <summary> Gets the first point in the current parametric Spline curve. </summary>
        </member>
        <member name="F:Mastercam.Curves.SplineGeometry.Data">
            <summary> Gets the Spline data associated with this SplineGeometry. </summary>
        </member>
        <member name="M:Mastercam.Curves.SplineGeometry.#ctor(Mastercam.Math.Point3D[])">
            <summary> Initializes a new instance of the SplineGeometry class. </summary>
            <remarks> Creates a new SplineGeometry object based off of the supplied list of points.
          </remarks>
            <param name="Points">The point data to create this SplineGeometry object.</param>
        </member>
        <member name="M:Mastercam.Curves.SplineGeometry.#ctor(Mastercam.Math.Spline)">
            <summary> Initializes a new instance of the SplineGeometry class. </summary>
            <remarks> Creates a new SplineGeometry object based off of the values in the specified
           spline math object.
          </remarks>
            <param name="SplineData"> The spline data to create this SplineGeometry object. </param>
        </member>
        <member name="M:Mastercam.Curves.SplineGeometry.#ctor">
            <summary> Initializes a new instance of the SplineGeometry class. </summary>
            <remarks> Creates new spline geometry with default values -
          2 node points - one at (0,0,0) and one at (1,0,0)
          and in the current construction view.
          </remarks>
        </member>
        <member name="M:Mastercam.Curves.SplineGeometry.GetValidEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the entity from Mastercam's database. </summary>
            <param name="entity"> [out] The entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Curves.SplineGeometry.CreateSplineWorker(Mastercam.Math.Point3D[],ent*)">
            <summary> The method does the actual creation of the Spline Entity. </summary>
            <param name="points">    The node points of the Spline. </param>
            <param name="splineEnt"> [out] The spline entity. </param>
            <returns> True if it succeeds, else false. </returns>
        </member>
        <member name="M:Mastercam.Curves.SplineGeometry.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> LoadDefaults (Override) </summary>
            <remarks> This handles the loading of defaults from a Mastercam entity. </remarks>
            <param name="Ent"> The entity to load the object's default values from. </param>
        </member>
        <member name="M:Mastercam.Curves.SplineGeometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commit (Override) </summary>
            <remarks> This handles the committing of the object's data to the Mastercam database. </remarks>
            <param name="Ent">The entity that will hold all the data being sent to the Mastercam database.</param>
        </member>
        <member name="M:Mastercam.Curves.SplineGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the SplineGeometry class. </summary>
            <remarks> Creates a new object from the ID of an entity in the Mastercam database. </remarks>
            <param name="ID"> The ID of the Mastercam entity to create the new object from. </param>
        </member>
        <member name="T:Mastercam.Curves.SplineGeometry">
            <summary> This class is used for working with spline curve geometry within Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Math.Spline.op_Inequality(Mastercam.Math.Spline,Mastercam.Math.Spline)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Spline1"> This is the first spline to compare. </param>
            <param name="Spline2"> This is the second spline to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Spline.op_Equality(Mastercam.Math.Spline,Mastercam.Math.Spline)">
            <summary> This is a static equality operator overload for the purposes of comparing these
       math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Spline1"> This is the first Spline to compare. </param>
            <param name="Spline2"> This is the second Spline to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Spline.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this math object to
       another one.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="obj"> [in,out] This is the spline to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Spline.Equals(Mastercam.Math.Spline,Mastercam.Math.Spline)">
            <summary> This is a static equality method for the purposes of comparing these math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Spline1"> This is the first Spline to compare. </param>
            <param name="Spline2"> This is the second Spline to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Spline.#ctor(Mastercam.Math.Point3D[])">
            <summary> Initializes a new instance of the Spline class. </summary>
            <remarks> This takes all of the necessary pieces of data to construct this spline object
       and creates it with those values.
       </remarks>
            <param name="Points"> The points of the spline to be created. </param>
        </member>
        <member name="F:Mastercam.Math.Spline.m_NodePoints">
            <summary> The (user supplied) list of Node Points used to generate the Spline Curve. </summary>
        </member>
        <member name="F:Mastercam.Math.Spline.Point2">
            <summary> The second endpoint of the curve object. </summary>
        </member>
        <member name="F:Mastercam.Math.Spline.Point1">
            <summary> The first endpoint of the curve object. </summary>
        </member>
        <member name="M:Mastercam.Math.Spline.#ctor(spline)">
            <summary> Initializes a new instance of the Spline class. </summary>
            <param name="SplineGeometry"> The Mastercam spline geometry data. </param>
        </member>
        <member name="T:Mastercam.Math.Spline">
            <summary> This class is used as a mathematical representation of a Spline. </summary>
        </member>
        <member name="M:Mastercam.Curves.LineGeometry.ToString">
            <summary> Converts this object into a string representation. </summary>
            <returns> A text string that represents this object. </returns>
        </member>
        <member name="P:Mastercam.Curves.LineGeometry.EndPoint2">
            <summary> Gets or sets the second endpoint in this LineGeomtryobject.</summary>
        </member>
        <member name="P:Mastercam.Curves.LineGeometry.EndPoint1">
            <summary> Gets or sets the first endpoint in this LineGeomtry object. </summary>
        </member>
        <member name="F:Mastercam.Curves.LineGeometry.Data">
            <summary> Gets or sets the 3D line data associated with this Geometry object. </summary>
        </member>
        <member name="M:Mastercam.Curves.LineGeometry.#ctor(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> Initializes a new instance of the LineGeometry class. </summary>
            <remarks> Takes two 3D point objects and creates a line geometry object between the
          two points in 3D space.
   <para> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the LineGeometry
          object for it to be created <i>in Mastercam's geometry database</i></para>.
          </remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreateLine3" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreateLine3" language="vbnet" />
            </example>
            <param name="Point1"> The first endpoint of the line in 3D space. </param>
            <param name="Point2"> The second endpoint of the line in 3D space. </param>
        </member>
        <member name="M:Mastercam.Curves.LineGeometry.#ctor(Mastercam.Math.Line3D)">
            <summary> Initializes a new instance of the LineGeometry class. </summary>
            <remarks> Creates a new LineGeometry object based off of the values in the specified line math object.
   <para> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the LineGeometry
          object for it to be created <i>in Mastercam's geometry database</i></para>.
          </remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreateLine2" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreateLine2" language="vbnet" />
            </example>
            <param name="Data"> The 3D line data to create the line geometry with. </param>
        </member>
        <member name="M:Mastercam.Curves.LineGeometry.#ctor">
            <summary> Initializes a new instance of the LineGeometry class. </summary>
            <remarks> Creates new line geometry with default values -
          The first endpoint at (-1.0, 0.0, 0.0) and the second at (1.0, 0.0, 0.0)
   <para> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the LineGeometry
          object for it to be created <i>in Mastercam's geometry database</i></para>.
          </remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreateLine1" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreateLine1" language="vbnet" />
            </example>
        </member>
        <member name="M:Mastercam.Curves.LineGeometry.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> LoadDefaults (Override).
          This handles the loading of defaults from a Mastercam entity.
          </summary>
            <param name="Ent"> [in,out] The entity to load the object's default values from. </param>
        </member>
        <member name="M:Mastercam.Curves.LineGeometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commit (Override).
          This handles the committing of the object's data to the Mastercam database.
          </summary>
            <param name="Ent"> [in,out] The entity that will hold all the data being sent to the
                   Mastercam database.
                   </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Curves.LineGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the LineGeometry class. </summary>
            <remarks> Creates a new object from the ID of an entity in the Mastercam database. </remarks>
            <param name="ID"> The ID of the Mastercam entity to create the new object from. </param>
        </member>
        <member name="T:Mastercam.Curves.LineGeometry">
            <summary> This class provides methods for creating, editing, and otherwise working with line geometry
          within Mastercam.
          </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.Center">
            <summary> Gets or sets the center point for the current surface. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.CheckSurfaceInfo">
            <summary> Gets or sets the check surface flags for the given surface object. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MaxCurvatureLow">
            <summary> Gets or sets the lowest max curvature of the surface. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MaxCurvatureHigh">
            <summary> Gets or sets the highest max curvature of the surface. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MaxCurvatureV">
            <summary> Gets or sets the max curvature of the surface along V. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MaxCurvatureU">
            <summary> Gets or sets the max curvature of the surface along U. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.Radius">
            <summary> Gets or sets the radius of the surface, from center to outer edge. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MaxZ">
            <summary> Gets or sets the maximum Z value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MinZ">
            <summary> Gets or sets the minimum Z value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MaxY">
            <summary> Gets or sets the maximum Y value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MinY">
            <summary> Gets or sets the minimum Y value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MaxX">
            <summary> Gets or sets the maximum X value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MinX">
            <summary> Gets or sets the minimum X value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MaxV">
            <summary> Gets or sets the maximum V value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MinV">
            <summary> Gets or sets the minimum V value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MaxU">
            <summary> Gets or sets the maximum U value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.MinU">
            <summary> Gets or sets the minimum U value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsBadHighV">
            <summary> Gets or sets a value indicating if the surface has a bad high V value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsBadLowV">
            <summary> Gets or sets a value indicating if the surface has a bad low V value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsBadHighU">
            <summary> Gets or sets a value indicating if the surface has a bad high U value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsBadLowU">
            <summary> Gets or sets a value indicating  if the surface has a bad low U value. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsBad">
            <summary> Gets or sets a value indicating if the surface is bad for whatever reason. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsReady">
            <summary> Gets or sets a value indicating  if the surface is ready / complete.
          False indicates there is further processing to be done to it.</summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsMovingLowToHighInV">
            <summary> Gets or sets a value indicating if the surface moves from high to low in V. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsMovingLowToHighInU">
            <summary> Gets or sets a value indicating if the surface moves from high to low in U. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsMovingAlongV">
            <summary> Gets or sets a value indicating if the surface moves along the V. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsNormalReversed">
            <summary> Gets or sets a value indicating the normal off the surface is reversed. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsVClosed">
            <summary> Gets or sets a value indicating if the V is closed. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.IsUClosed">
            <summary> Gets or sets a value indicating if the U is closed. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.SurfaceShaded">
            <summary> Gets or sets a value indicating the shading values for the surface geometry. </summary>
        </member>
        <member name="P:Mastercam.Database.SurfaceGeometry.SurfaceDensity">
            <summary> Gets or sets the density of the surface geometry. </summary>
        </member>
        <member name="M:Mastercam.Database.SurfaceGeometry.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given surface geometry object from the geometry
          entity passed in.
          </summary>
            <param name="Ent"> [in,out] The geometry entity to use as defaults for this surface
                   geometry object.
                   </param>
        </member>
        <member name="M:Mastercam.Database.SurfaceGeometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a surface geometry entity to the Mastercam database. </summary>
            <param name="Ent"> The surface geometry entity to be committed. </param>
            <returns> True if the commit was successful, false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.SurfaceGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the abstract class. </summary>
            <remarks> ID Lookup Constructor. Attempts to retrieve a geometry entity with the given ID
          from the Mastercam database and use that to initialize this surface geometry
          object.
   <para> If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values. </para></remarks>
            <param name="ID"> The ID of the geometry entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Database.SurfaceGeometry.LoadDefaults">
            <summary> Loads the default values for a given surface geometry object. </summary>
        </member>
        <member name="T:Mastercam.Database.SurfaceGeometry">
            <summary> This class handles the interaction between the NET-Hook and Mastercam for Surface geometry objects.
          </summary>
        </member>
        <member name="M:Mastercam.IO.EventManager.ShowEventLog">
            <summary> Display the Mastercam event log. </summary>
        </member>
        <member name="M:Mastercam.IO.EventManager.SaveEventLog(System.String,Mastercam.IO.Types.EventLogFileType)">
            <summary> This method saves the contents of the Mastercam event logger as
          a comma delimited file or xml file. If the event logger is not currently
          running calling this method does nothing.
</summary>
            <param name="filename"> This is the filename of the log to save to disk. </param>
            <param name="filetype"> This is the file type: comma delimited (CSV) or XML. </param>
        </member>
        <member name="M:Mastercam.IO.EventManager.GetLogReportAction">
            <summary> Gets the current event logging state. </summary>
            <returns> The log report action. </returns>
        </member>
        <member name="M:Mastercam.IO.EventManager.SetLogReportAction(Mastercam.IO.Types.MessageLogAction)">
            <summary> Sets the global event logging state for the current session. </summary>
            <param name="newAction"> The new action. </param>
        </member>
        <member name="M:Mastercam.IO.EventManager.LogEvent(Mastercam.IO.Types.MessageSeverityType,System.String,System.String)">
            <summary> This method allows you to assign a severity level icon and write a message to the
          Mastercam event logger.
          </summary>
            <param name="MessageSeverity"> This is the level of severity: Information, Warning, or Error.
                               </param>
            <param name="PartFile">        This should be the fullpath to the current file.
                               (it can be null).
                               </param>
            <param name="Message">         This is the text message to output to the log. </param>
            <returns> True if the method was set successfully, false if not. </returns>
        </member>
        <member name="M:Mastercam.IO.EventManager.#ctor">
            <summary> Initializes a new instance of the EventManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.IO.EventManager">
            <summary> This class is used to work with and manage Mastercam event logging. </summary>
        </member>
        <member name="M:Mastercam.Tools.EndMillFlatTool.Commit">
            <summary> This method commits a End Mill Flat tool to the Mastercam database. </summary>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown when an identifier not found error condition
                                       occurs.
                                       </exception>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Tools.EndMillFlatTool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary> Initializes a new instance of the EndMillFlatTool class. </summary>
            <param name="Diameter">       The tool diameter. </param>
            <param name="CornerRadius">   The corner radius. </param>
            <param name="Number">         The Tool #. </param>
            <param name="LengthOffset">   The length offset register. </param>
            <param name="DiameterOffset"> The diameter offset register. </param>
            <param name="Length">         The over-all length. </param>
            <param name="FluteLength">    Length of the flute. </param>
            <param name="ShoulderLength"> Length of the shoulder. </param>
            <param name="Name">           The name of the tool </param>
        </member>
        <member name="M:Mastercam.Tools.EndMillFlatTool.#ctor">
            <summary> Initializes a new instance of the EndMillFlatTool class. </summary>
        </member>
        <member name="M:Mastercam.Tools.EndMillFlatTool.#ctor(System.Int32)">
            <summary> Initializes a new instance of the EndMillFlatTool class. </summary>
            <param name="ID"> The identifier. </param>
        </member>
        <member name="T:Mastercam.Tools.EndMillFlatTool">
            <summary> This class is for modifying and using End Mill Flat tools in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.SetChainArray(Mastercam.Database.Chain[])">
            <summary> This method takes the array of Chain(s) passed in and copies its contents into the
          internal chain array for this operation.
          </summary>
            <param name="NewChainArray"> The new chains. </param>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.GetChainArray">
            <summary> This method retrieves the Chains in this operation. </summary>
            <returns> An array containing the Chain(s) in the operation. </returns>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.Commit(System.Boolean)">
            <summary> This method commits the current chain-based operation's settings to the Mastercam
          database.
          </summary>
            <param name="includeGeometry"> True = also update the Chains, else only do everything except
                               the Chains.
                               </param>
            <returns> True if the database commit was successful, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.Commit">
            <summary> This method commits the current chain-based operation's settings (including chains)
     to the Mastercam database.
     </summary>
            <returns> True if the database commit was successful, else false if not. </returns>
        </member>
        <member name="F:Mastercam.Operations.ChainBasedOperation.m_Chains">
            <summary> This array holds all of the chains being used in this operation. </summary>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given operation from the operation structure passed in.
          </summary>
            <param name="Op"> [in,out] The operation data to use as defaults for this operation. </param>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.Commit(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Commits an operation to the Mastercam database. </summary>
            <param name="Op">              The operation to be committed. </param>
            <param name="includeGeometry"> True = also update the Chains, else do everything except the Chains.
                               </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.Commit(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits an operation to the Mastercam database. </summary>
            <param name="Op"> The operation to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.#ctor(System.Int32)">
            <summary> Initializes a new instance of the ChainBasedOperation class. </summary>
            <remarks> Attempts to retrieve an operation entity with the given ID from the Mastercam
          database and use that to initialize this operation object.
          If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the operation entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.#ctor">
            <summary> Initializes a new instance of the ChainBasedOperation class. </summary>
            <remarks> This creates a new chain based toolpath operation with default settings. </remarks>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.UpdateChains">
            <summary> This method updates all of the chains in the current chain based operation object.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.ChainBasedOperation.RetrieveChains">
            <summary> This method retrieves all of the chains assigned to the current chain based operation object.
          </summary>
        </member>
        <member name="T:Mastercam.Operations.ChainBasedOperation">
            <summary> This class is an intermediary class used in working with chain-based toolpath operations. </summary>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainsAreEqual(CHAIN*,CHAIN*)">
            <summary> Determines if two Chains are equal. </summary>
            <remarks> "equal" meaning that both Chains reference the same geometry entities,
          if the same order. </remarks>
            <param name="chain1"> The first chain to compare. </param>
            <param name="chain2"> The second chain to compare. </param>
            <returns> true if the are, false if they are not. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.GetChainsInOperation(Mastercam.Database.Operation,Mastercam.Database.Chain[]@,Mastercam.Database.Types.ChainTypes)">
            <summary> This method simply retrieve the Chains in the specified operation.</summary>
            <param name="operation"> The operation to be queried. </param>
            <param name="operationsChains"> [out] This is a reference to an array of Chain objects retrieved.
                                </param>
            <param name="chainType">        This specifies which types of chains are to be used during
                                the management process. See <see cref="T:Mastercam.Database.Types.ChainTypes" /> for
                                more details.
                                </param>
            <returns> True if the management function requested was successful, else false if not.
       </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.GetChainsComparer(Mastercam.Database.ChainManager.SortType,Mastercam.Database.ChainManager.SortOrder)">
            <summary> Gets the chains comparer for the specified 'type' and 'order'. </summary>
            <param name="sortType">  Type of the sort. </param>
            <param name="sortOrder"> The sort order. </param>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ManageChains(Mastercam.Database.Operation,Mastercam.Database.Chain[]@,Mastercam.Database.Types.ChainManagerMode,Mastercam.Database.Types.ChainTypes)">
            <summary> This member function is a multi-function management tool for working with Chains.
          </summary>
            <param name="OperationToChain"> This is the operation that is involved in the
                                chain management process.
                                </param>
            <param name="OperationsChains"> [in,out] This is a reference to an array of Chain objects,
                                modifying them as the chain management process dictates.
                                </param>
            <param name="ManagerMode">      This flag specifies what chain management functionality is
                                to be utilized. See <see cref="T:Mastercam.Database.Types.ChainManagerMode" /> for more
                                details.
                                </param>
            <param name="ChainType">        This specifies which types of chains are to be used during
                                the management process. See <see cref="T:Mastercam.Database.Types.ChainTypes" /> for
                                more details.
                                </param>
            <returns> True if the management function requested was successful, else false if not.
       </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.IsChainArray2D(Mastercam.Database.Operation)">
            <summary> Checks the chains in an Operation to see if they all lie in the same Z plane. </summary>
            <param name="Operation"> The operation to examine to see if it's chains all lie in the
                         same Z plane.
                         </param>
            <returns> True if all of the chains lie in the same Z plane; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.FreeChainArray(Mastercam.Database.Chain[]@)">
            <summary> This method frees the memory used in internal chain structures in an array.
          </summary>
            <param name="ChainArrayToDelete"> The chain structure array to free. </param>
        </member>
        <member name="P:Mastercam.Database.ChainManager.ChainTolerance">
            <summary> Gets or sets the 'chaining tolerance' which represents the tolerance value for
          how closely Mastercam matches distances for the purposes of chaining.
          </summary>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainsAreEqual(Mastercam.Database.Chain[],Mastercam.Database.Chain[])">
            <summary> Determines if two Chains are equal. </summary>
            <remarks> "equal" meaning that both Chains reference the same geometry entities,
          if the same order. </remarks>
            <param name="chains1"> The first array of chains to compare. </param>
            <param name="chains2"> The second array of chains to compare. </param>
            <returns> true if the are, false if they are not. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.IsChainArray2D(Mastercam.Database.Chain[])">
            <summary> Checks an array of chains to see if they all lie in the same Z plane. </summary>
            <param name="ChainArray"> The array of chains the method will examine to see if
                       they're all in the same Z plane.
                       </param>
            <returns> True if all of the chains lie in the same Z plane; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.OrientOpenChainsInDatabaseOrder(Mastercam.Database.Chain[]@)">
            <summary> Orient open chains. </summary>
            <remarks> Orients the open chain by the first/last entity ID of the Chain,
          but making sure the ID of the first is before (less than) the last ID in the Chain.
          If the Chain consists of only one entity, it makes sure that the first endpoint
          of that entity is the start of the Chain.
          </remarks>
            <remarks> The intent here is to try to recover the data chain order in sending system.
          (DXF file for example)
          </remarks>
            <param name="chains"> [in, out] The chains to be oriented. </param>
            <returns> The number of chains that were oriented. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.SortChains(Mastercam.Database.Chain[],Mastercam.Database.ChainManager.SortType,Mastercam.Database.ChainManager.SortOrder)">
            <summary> Sort chains. </summary>
            <param name="chains">    The array of <see cref="T:Mastercam.Database.Chain" />s to be sorted. </param>
            <param name="sortType">  What data of the Chain are we sorting on?. </param>
            <param name="sortOrder"> The sort order; Ascending or Descending. </param>
            <remarks> If the supplied array contains 0 or 1 chain, no sort is performed. </remarks>
            <returns> true if it sorted anything, false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.RelinkChains(Mastercam.Database.Chain[]@)">
            <summary> Re-Links the linked list of Chains. </summary>
            <remarks> If an array of Chains has been sorted or reordered in any way,
          we need to make sure the that (native) links in the list are properly set.
          </remarks>
            <param name="chains"> The array of <see cref="T:Mastercam.Database.Chain" />s. </param>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ApplyUserChainsToOp(Mastercam.Database.Operation)">
            <summary> Prompts the user to create and select a number of chains, which are then applied to
          the specified Operation object.
          </summary>
            <param name="OperationToChain"> The Operation object to apply the user-created chains to.
                                </param>
            <returns> An array of <see cref="T:Mastercam.Database.Chain" /> objects, representing those chains the user created for the
          operation.
          </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainGeometry(Mastercam.Database.Geometry[])">
            <summary> Creates and returns chains around each of the geometry objects passed in.
          </summary>
            <param name="GeometryToChain"> The array of Geometry objects to chain. </param>
            <returns> An array of <see cref="T:Mastercam.Database.Chain" /> objects, one for each chain around the input geometry. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAllSelected(System.Boolean)">
            <summary> Chains all of the selected geometry in the part file. </summary>
            <param name="FilterOnlyClosedChains"> If true, only closed chains will be returned. </param>
            <returns> An array of <see cref="T:Mastercam.Database.Chain" /> objects, one for each chain around selected geometry. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAllSelected">
            <summary> Chains all of the selected geometry in the part file. </summary>
            <returns> An array of <see cref="T:Mastercam.Database.Chain" /> objects, one for each chain around selected geometry. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll(System.Boolean,System.Boolean,Mastercam.Database.MCView,Mastercam.Database.Types.ChainDirectionType,System.String,System.String)">
            <summary> Chains all of the geometry in the part file, taking into consideration
          the specified of parameters.
          </summary>
            <param name="OnlyClosedChains">     If true, only closed chains will be returned. </param>
            <param name="OnlyZDepthZeroChains"> If true, only geometry at Z depth zero will be chained.
                                    </param>
            <param name="View">                 If a valid view object is passed in, only geometry
                                    in this view at Z0 will be chained*.
                                    <para>
                                    Please note!
                                    Specifying a (non-null) view in essence sets the "only Z depth zero"
                                    mask to be true in addition to the view restriction.
                                    </para></param>
            <param name="ChainDirection">       The <see cref="T:Mastercam.Database.Types.ChainDirectionType" /> that indicates the chaining direction.
                                    </param>
            <param name="LevelNameToChain">     If a non-null value, only geometry on the level with
                                    a Level name matching this value will be chained.
                                    </param>
            <param name="LevelSetNameToChain">  If a non-null value, only geometry on the levels with
                                    a Level Set name matching this value will be chained.
                                    </param>
            <remarks> NOTE! Since there is no restriction on Level names or Level Set names being unique,
          there can be multiple matches when selecting levels "by name".
          If there are multiple levels that match the supplied LevelNameToChain
          and/or LevelSetNameToChain - ALL matching levels will be processed!
          </remarks>
            <remarks> Passing a false, default, or null value for any of these parameters will omit
          that parameter when searching for geometry to chain.
          </remarks>
            <returns> An array of Chain objects matching the given parameters. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll(System.Boolean,System.Boolean,Mastercam.Database.MCView,Mastercam.Database.Types.ChainDirectionType,System.String)">
            <summary> Chains all of the geometry in the part file, taking into consideration
          the specified of parameters.
          </summary>
            <param name="OnlyClosedChains">     If true, only closed chains will be returned. </param>
            <param name="OnlyZDepthZeroChains"> If true, only geometry at Z depth zero will be chained.
                                    </param>
            <param name="View">                 If a valid view object is passed in, only geometry
                                    in this view at Z0 will be chained*.
                                    <para>
                                    Please note!
                                    Specifying a (non-null) view in essence sets the "only Z depth zero"
                                    mask to be true in addition to the view restriction.
                                    </para></param>
            <param name="ChainDirection">       The <see cref="T:Mastercam.Database.Types.ChainDirectionType" /> that indicates the chaining direction..
                                    </param>
            <param name="LevelNameToChain">     If a non-null value, only geometry on the level with
                                    a Level name matching this value will be chained.
                                    </param>
            <remarks> Note! Since there is no restriction on Level names being unique,
          there can be multiple matches when selecting levels "by name".
          If there are multiple levels that match the supplied LevelNameToChain -
          ALL of those Level numbers will be processed!
          </remarks>
            <remarks> Passing a false, default, or null value for any of these parameters will
          omit that parameter when searching for geometry to chain.
          </remarks>
            <returns> An array of Chain objects matching the given parameters. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll(System.Boolean,System.Boolean,Mastercam.Database.MCView,Mastercam.Database.Types.ChainDirectionType,System.Int32[])">
            <summary> Chains all of the geometry in the part file, taking into consideration
          the specified parameters.
          </summary>
            <param name="OnlyClosedChains">     If true, only closed chains will be returned. </param>
            <param name="OnlyZDepthZeroChains"> If true, only geometry at Z depth zero will be chained.
                                    </param>
            <param name="View">                  The view to restrict the chain search to.
                                     <para>
                                     Note!
                                     If a valid view object is passed in, only geometry
                                     in this view at Z0 will be chained.
                                     Specifying a (non-null) view in essence sets the "only Z depth zero"
                                     mask to be true in addition to the view restriction.
                                     </para></param>
            <param name="ChainDirection">       The <see cref="T:Mastercam.Database.Types.ChainDirectionType" /> that indicates the chaining direction.
                                    </param>
            <param name="LevelsToChain">        If not null, an array of level numbers to match on to be chained.
                                    </param>
            <returns> An array of Chain objects matching the given parameters. </returns>
            <remarks> Passing a false, default, or null value for any of these parameters will omit
          that parameter when searching for geometry to chain.
          </remarks>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll(System.Boolean,System.Boolean,Mastercam.Database.MCView,Mastercam.Database.Types.ChainDirectionType,System.Int32)">
            <summary> Chains all of the geometry in the part file, taking into consideration
          the specified parameters.
          </summary>
            <param name="OnlyClosedChains">     If true, only closed chains will be returned. </param>
            <param name="OnlyZDepthZeroChains"> If true, only geometry at Z depth zero will be chained.
                                    </param>
            <param name="View">                  The view to restrict the chain search to.
                                     <para>
                                     Note!
                                     If a valid view object is passed in, only geometry
                                     in this view at Z0 will be chained.
                                     Specifying a (non-null) view in essence sets the "only Z depth zero"
                                     mask to be true in addition to the view restriction.
                                     </para></param>
            <param name="ChainDirection">       The <see cref="T:Mastercam.Database.Types.ChainDirectionType" /> that indicates the chaining direction.
                                    </param>
            <param name="LevelToChain">         If greater than 0, only geometry on the matching level number will be chained.
                                    </param>
            <returns> An array of Chain objects matching the given parameters. </returns>
            <remarks> Passing a false, default, or null value for any of these parameters will omit
          that parameter when searching for geometry to chain.
          </remarks>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll(System.String)">
            <summary> Chains all of the geometry in the part file, taking into consideration
          the specified parameters.
          </summary>
            <param name="LevelNameToChain"> If a non-null value, only geometry on the level
                                with a name matching this value will be chained.
                                </param>
            <remarks> NOTE! Since there is no restriction on Level names being unique,
          there can be multiple matches when selecting levels "by name".
          If there are multiple levels that match the supplied LevelNameToChain -
          ONLY the first one found will be processed!
          </remarks>
            <returns> An array of Chain objects matching the given parameters. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll(System.Int32)">
            <summary> Chains all of the geometry in the part file, taking into consideration
          a number of parameters.
          </summary>
            <param name="LevelToChain"> If greater than 0, only geometry on the level matching this
                            value will be chained.
                            </param>
            <returns> An array of Chain objects matching the given parameters. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll(Mastercam.Database.Types.ChainDirectionType)">
            <summary> Chains all of the geometry in the part file, taking into consideration
          the specified parameters.
          </summary>
            <param name="ChainDirection"> Indicates the direction (CW or CCW) that all chains
                              should created in.
                              </param>
            <returns> An array of Chain objects matching the given parameters. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll(Mastercam.Database.MCView)">
            <summary> Chains all of the geometry in the part file, taking into consideration
          the specified parameters.
          </summary>
            <param name="View"> The view to restrict the chain search to.
                    <para>
                    Note!
                    If a valid view object is passed in, only geometry
                    in this view at Z0 will be chained.
                    Specifying a (non-null) view in essence sets the "only Z depth zero"
                    mask to be true in addition to the view restriction.
                    </para></param>
            <returns> An array of Chain objects matching the given parameters. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll(System.Boolean,System.Boolean)">
            <summary> Chains all of the geometry in the part file, taking into consideration
          the specified parameters.
          </summary>
            <param name="OnlyClosedChains">     If true, only closed chains will be returned. </param>
            <param name="OnlyZDepthZeroChains"> If true, only geometry at Z depth zero will be chained.
                                    </param>
            <returns> An array of Chain objects matching the given parameters. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.ChainAll">
            <summary> Chains all of the geometry in the part file. </summary>
            <returns> An array of Chain objects. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.GetMultipleChains(System.String,System.Boolean)">
            <summary> Prompts the user to pick any number of chains. </summary>
            <param name="Prompt">         The text displayed to the user when they are prompted
                              to pick the chains.
                              </param>
            <param name="ChainPointsToo"> If true, then the user-driven chaining dialog will return any
                              chained points as well as boundary chains.
                              </param>
            <returns> Returns an array Chain objects if successful, else null if not. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.GetMultipleChains(System.String)">
            <summary> Prompts the user to pick any number of chains. </summary>
            <param name="Prompt"> The text displayed to the user when they are prompted to
                      pick the chains.
                      </param>
            <returns> Returns an array Chain objects if successful, else null if not. </returns>
            <remarks> This method by default does not return chained points. </remarks>
        </member>
        <member name="M:Mastercam.Database.ChainManager.GetOneChain(System.String)">
            <summary> Prompts the user to pick a single chain around some geometry. </summary>
            <param name="Prompt"> The text displayed to the user when they are prompted to
                      pick a chain.
                      </param>
            <returns> Returns a Chain object if successful, else null if not. </returns>
        </member>
        <member name="M:Mastercam.Database.ChainManager.StartChainAtLongest(Mastercam.Database.Chain[])">
            <summary> This method takes an array of chains and modifies them so that they all begin with
          the longest side of their chain geometry.
          </summary>
            <remarks> This only alters the "closed" chains! </remarks>
            <param name="OperationsChains"> [in,out] The array of chains to re-order. </param>
        </member>
        <member name="M:Mastercam.Database.ChainManager.GetGeometryInChain(Mastercam.Database.Chain)">
            <summary> Gets the geometry (in chain order) that is referenced in a chain. </summary>
            <param name="Chain"> The chain to interrogate. </param>
            <remarks> The returned geometry are "new" objects.
          <para>
          If you created geometry and then created the Chain using that geometry,
          the geometry items returned by this method are not the same objects.
          </para></remarks>
            <remarks> Also note that "Chain order" is the order of the geometry items in the Chain.
          It does not necessarily mean that the endpoints of each geometry item
          necessarily aligns to the next geometry object in the returned list.
          </remarks>
            <returns> The list of geometry referenced in the chain. </returns>
        </member>
        <member name="T:Mastercam.Database.ChainManager.SortType">
            <summary> Values that represent the 'type' of the sort (what data in a Chain to sort on). </summary>
        </member>
        <member name="T:Mastercam.Database.ChainManager.SortOrder">
            <summary> Values that represent the a sorting order (Ascending or Descending). </summary>
        </member>
        <member name="M:Mastercam.Database.ChainManager.#ctor">
            <summary> Initializes a new instance of the ChainManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Database.ChainManager">
            <summary> The Chain Manager class is used for creating, freeing, modifying, and otherwise managing
          Chain objects.
          </summary>
        </member>
        <member name="M:Mastercam.Database.SortChainsByDatabaseOrderDescendingComparer.CompareFirstEntityId(System.Object,System.Object)">
            <summary> Compare two Chains by database entity id - descending. </summary>
            <param name="x"> The first Chain to compare. </param>
            <param name="y"> The second Chain to compare. </param>
            <returns> 0 if equal,
          1 if Chain 1 (first) entity ID &lt; Chain 2 (first) entity ID,
         -1 if Chain 1 (first) entity ID &gt; Chain 2 (first) entity ID. 
         </returns>
        </member>
        <member name="T:Mastercam.Database.SortChainsByDatabaseOrderDescendingComparer">
            <summary> A sort chains by database order descending comparer. </summary>
        </member>
        <member name="M:Mastercam.Database.SortChainsByDatabaseOrderAscendingComparer.CompareFirstEntityId(System.Object,System.Object)">
            <summary> Compare two Chains by database entity id - ascending. </summary>
            <param name="x"> The first Chain to compare. </param>
            <param name="y"> The second Chain to compare. </param>
            <returns> 0 if equal,
          1 if Chain 1 (first) entity ID &gt; Chain 2 (first) entity ID,
         -1 if Chain 1 (first) entity ID &lt; Chain 2 (first) entity ID.
          </returns>
        </member>
        <member name="T:Mastercam.Database.SortChainsByDatabaseOrderAscendingComparer">
            <summary> A sort chains by database order ascending comparer. </summary>
        </member>
        <member name="M:Mastercam.Database.SortChainsByPerimeterDescendingComparer.ComparePerimeter(System.Object,System.Object)">
            <summary> Compare two Chains by perimeter (length) - descending. </summary>
            <param name="x"> The first Chain to compare. </param>
            <param name="y"> The second Chain to compare. </param>
            <returns> 0 if equal,
          1 if Chain 1 length &lt; Chain 2 length,
         -1 if Chain 1 length &gt; Chain 2 length.
          </returns>
        </member>
        <member name="T:Mastercam.Database.SortChainsByPerimeterDescendingComparer">
            <summary> A sort chains by perimeter descending comparer. </summary>
        </member>
        <member name="M:Mastercam.Database.SortChainsByPerimeterAscendingComparer.ComparePerimeter(System.Object,System.Object)">
            <summary> Compare two Chains by perimeter (length) - ascending. </summary>
            <param name="x"> The first Chain to compare. </param>
            <param name="y"> The second Chain to compare. </param>
            <returns> 0 if equal,
          1 if Chain 1 length &gt; Chain 2 length,
         -1 if Chain 1 length &lt; Chain 2 length.
          </returns>
        </member>
        <member name="T:Mastercam.Database.SortChainsByPerimeterAscendingComparer">
            <summary> A sort chains by perimeter ascending comparer. </summary>
        </member>
        <member name="M:Mastercam.Database.SortChainsByAreaDescendingComparer.CompareArea(System.Object,System.Object)">
            <summary> Compare two Chains by area - descending. </summary>
            <param name="x"> The first Chain to compare. </param>
            <param name="y"> The second Chain to compare. </param>
            <returns> 0 if equal,
          1 if Chain 1 area &gt; Chain 2 area,
         -1 if Chain 1 area &lt; Chain 2 area.
          </returns>
        </member>
        <member name="T:Mastercam.Database.SortChainsByAreaDescendingComparer">
            <summary> A sort chains by area descending comparer. </summary>
        </member>
        <member name="M:Mastercam.Database.SortChainsByAreaAscendingComparer.CompareArea(System.Object,System.Object)">
            <summary> Compare two Chains by area - ascending. </summary>
            <param name="x"> The first Chain to compare. </param>
            <param name="y"> The second Chain to compare. </param>
            <returns> 0 if equal,
          1 if Chain 1 area &gt; Chain 2 area,
         -1 if Chain 1 area &lt; Chain 2 area.
          </returns>
        </member>
        <member name="T:Mastercam.Database.SortChainsByAreaAscendingComparer">
            <summary> A sort chains by area ascending comparer. </summary>
        </member>
        <member name="P:Mastercam.Database.Chain.FirstEntityId">
            <summary> Gets the identifier of the first entity in this Chain. </summary>
        </member>
        <member name="P:Mastercam.Database.Chain.ContainsSplines">
            <summary> Gets a value indicating if the Chain contains any Spline(s). </summary>
        </member>
        <member name="P:Mastercam.Database.Chain.Perimeter">
            <summary> Gets the perimeter (length) of this chain. </summary>
        </member>
        <member name="P:Mastercam.Database.Chain.CurvesCount">
            <summary> Gets the number of 'curves' (entities) in the this chain. </summary>
        </member>
        <member name="P:Mastercam.Database.Chain.Depth">
            <summary> Gets the depth below (or above) the Z plane of this chain. </summary>
        </member>
        <member name="P:Mastercam.Database.Chain.IsFlat">
            <summary> Gets a value indicating whether the chain is flat. </summary>
        </member>
        <member name="P:Mastercam.Database.Chain.IsClosed">
            <summary> Gets a value indicating whether the chain is a closed chain. </summary>
        </member>
        <member name="P:Mastercam.Database.Chain.Area">
            <summary> Gets the area within the chain, assuming it's closed. </summary>
        </member>
        <member name="P:Mastercam.Database.Chain.Direction">
            <summary> Gets or sets the direction of the chain. </summary>
        </member>
        <member name="M:Mastercam.Database.Chain.OffsetChain3D(Mastercam.Database.Types.OffsetSideType,System.Double,Mastercam.Database.Types.OffsetRollCornerType,System.Double,System.Boolean,System.Double,System.Boolean)">
            <summary> Offset the 3D Chain (contour). </summary>
            <param name="Side">              The <see cref="T:Mastercam.Database.Types.OffsetSideType" /></param>
            <param name="Radius">            The radius. </param>
            <param name="CornerRoll">        The <see cref="T:Mastercam.Database.Types.OffsetRollCornerType" /> mode. </param>
            <param name="Depth">             The linearization tolerance. </param>
            <param name="IncrementalDepth">  The depth mode; true=Incremental or false=Absolute. </param>
            <param name="Tolerance">         The linearization tolerance. </param>
            <param name="InfiniteLookAhead"> Use infinite look ahead?. </param>
            <returns> The "offset" Chain, else null if failed. </returns>
        </member>
        <member name="M:Mastercam.Database.Chain.OffsetChain2D(Mastercam.Database.Types.OffsetSideType,System.Double,Mastercam.Database.Types.OffsetRollCornerType,System.Double,System.Boolean,System.Double,System.Boolean)">
            <summary> Offset the 2D Chain (contour). </summary>
            <param name="Side">              The <see cref="T:Mastercam.Database.Types.OffsetSideType" /></param>
            <param name="Radius">            The radius. </param>
            <param name="CornerRoll">        The <see cref="T:Mastercam.Database.Types.OffsetRollCornerType" /> mode. </param>
            <param name="Depth">             The linearization tolerance. </param>
            <param name="IncrementalDepth">  The depth mode; true=Incremental or false=Absolute. </param>
            <param name="Tolerance">         The linearization tolerance. </param>
            <param name="InfiniteLookAhead"> Use infinite look ahead?. </param>
            <returns> The "offset" Chain, else null if failed. </returns>
        </member>
        <member name="F:Mastercam.Database.Chain.Data">
            <summary> The Mastercam chain type data being used in this chain object. </summary>
        </member>
        <member name="M:Mastercam.Database.Chain.#ctor(CHAIN*)">
            <summary> Initializes a new instance of the Chain class. </summary>
            <remarks> The Mastercam type constructor. This constructor takes a pointer to a Mastercam
       chain and creates a chain object from it.
       </remarks>
            <param name="PointerAddress"> The pointer to the Mastercam chain to base the chain object off of.
                           </param>
        </member>
        <member name="F:Mastercam.Database.Chain.m_FirstEntityId">
            <summary> This is the database ID of the first 'curve' entity in the chain object. </summary>
        </member>
        <member name="F:Mastercam.Database.Chain.m_ContainsSplines">
            <summary> This flag indicates if the Chain contains any Spline(s). </summary>
        </member>
        <member name="F:Mastercam.Database.Chain.m_Perimeter">
            <summary> This is the perimeter (length) of the chain, as calculated upon creation of the chain object. </summary>
        </member>
        <member name="F:Mastercam.Database.Chain.m_Depth">
            <summary> This is the Z-Depth of the chain object as calculated upon creation of the chain object. </summary>
        </member>
        <member name="F:Mastercam.Database.Chain.m_Flat">
            <summary>This indicates whether or not the chain is flat as calculated upon creation of the chain object. </summary>
        </member>
        <member name="F:Mastercam.Database.Chain.m_Area">
            <summary> This is the area of the chain, as calculated upon creation of the chain object. </summary>
        </member>
        <member name="F:Mastercam.Database.Chain.SavedDirection">
            <summary> This is the saved chain direction data. It's kept internally so that we don't
          have to constantly re-access the GetDirection method.
          </summary>
            <remarks> Note that the direction value should only ever be updated when the
          associated property's set is called and when the chain object is first created.
          </remarks>
        </member>
        <member name="M:Mastercam.Database.Chain.GetFirstEntityInChain">
            <summary> Gets the database ID of the first entity in chain. </summary>
            <returns> The id of first entity in chain. </returns>
        </member>
        <member name="M:Mastercam.Database.Chain.CalcIs3D(System.Int16,System.Boolean*,System.Boolean*)">
            <summary> Calculates the is Chain is 3D. </summary>
            <param name="viewNumber">   The view the Chain is in. </param>
            <param name="is3D">         [out] Is the CHain 3D?. </param>
            <param name="hasSplines">   [out] Does the Chain contains any Splines? </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Database.Chain.CalcAreaAndPerimeter(System.Int16,System.Double*,System.Double*)">
            <summary> Calculates the area and perimeter of the Chain. </summary>
            <param name="viewNumber">   The view the Chain is in. </param>
            <param name="area">         [out] The area enclosed by the Chain. </param>
            <param name="perimeter">    [out] The perimeter (length). </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Database.Chain.gt_to_ent(gt*,System.Int16,System.Double,ent*)">
            <summary> Convert a Geometry Type to an Entity. </summary>
            <param name="e">          [in] The Geometry Type data (2D line or 2D arc). </param>
            <param name="viewNumber"> The view number of the new entity. </param>
            <param name="z">           The Z depth of the new entity. </param>
            <param name="entity">      [out] The new entity (3D line or 3D arc). </param>
        </member>
        <member name="M:Mastercam.Database.Chain.save_bound(pock_bound*,System.Double,System.Int16)">
            <summary> Save off the entities in the offset boundary. </summary>
            <param name="pb">         The pock_bound to process. </param>
            <param name="z">          The Z depth of the new Chain. </param>
            <param name="new_op_idn"> The new operation id number. </param>
        </member>
        <member name="M:Mastercam.Database.Chain.ofs_ctour_depth(System.Double,System.Double,System.Boolean)">
            <summary> Calculate the offset contour depth. </summary>
            <param name="z_chnd">      The Z depth of the chain. </param>
            <param name="z_offset">    The Z offset to be applied. </param>
            <param name="incremental"> True = the Z depth is incremental, else it's absolute. </param>
            <returns> The (possibly) new Z depth. </returns>
        </member>
        <member name="M:Mastercam.Database.Chain.OffsetChainWorker3D(CHAIN*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int16,System.Double,System.Int16,System.Double,System.Boolean,System.Double,System.Boolean,CHAIN**)">
            <summary> Performs a 3D 'offset contour' operation. </summary>
            <param name="chain">             The chain being offset. </param>
            <param name="side">              The offset side ('L' or 'R'). </param>
            <param name="nCopies">           The number of copies. </param>
            <param name="radius">            The radius. </param>
            <param name="cornerMode">        The roll around corner mode (1 = none, 2 = sharp, 3 = all).
                                 </param>
            <param name="offsetZ">           The offset z coordinate. </param>
            <param name="incrementalZ">      true for incremental z coordinate. </param>
            <param name="lin_tol">           The linearization tolerance. </param>
            <param name="infiniteLookAhead"> Use infinite look ahead? </param>
            <param name="newChain">          [out] The new "offset" chain. </param>
            <returns> True if the offset succeeded, else false. </returns>
        </member>
        <member name="M:Mastercam.Database.Chain.OffsetChainWorker2D(CHAIN*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int16,System.Double,System.Int16,System.Double,System.Boolean,System.Double,System.Boolean,CHAIN**)">
            <summary> Performs a 2D 'offset contour' operation. </summary>
            <param name="chain">             The chain being offset. </param>
            <param name="side">              The offset side ('L' or 'R'). </param>
            <param name="nCopies">           The number of copies. </param>
            <param name="radius">            The radius. </param>
            <param name="cornerMode">        The roll around corner mode (1 = none, 2 = sharp, 3 = all).
                                 </param>
            <param name="offsetZ">           The offset z coordinate. </param>
            <param name="incrementalZ">      true for incremental z coordinate. </param>
            <param name="lin_tol">           The linearization tolerance. </param>
            <param name="infiniteLookAhead"> Use infinite look ahead? </param>
            <param name="newChain">          [out] The new "offset" chain. </param>
            <returns> True if the offset succeeded, else false. </returns>
        </member>
        <member name="M:Mastercam.Database.Chain.BreakContour(_iobuf*,CHAIN*,System.Double,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary> This method breaks a contour into individual lines. </summary>
            <param name="f_points"> The name and path of the boundary data file to use. </param>
            <param name="chain">    The data of the chain being broken. </param>
            <param name="ch_tol">   The chaining tolerance to use during the breaking process. </param>
            <param name="n_pts">    [out] The number of points being output by the breaking process.
                        </param>
            <returns> True if the contour was broken successfully, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Chain.GetDirection">
            <summary> This method returns the direction of the specified chain object. </summary>
            <returns> The direction of the chain object. </returns>
        </member>
        <member name="T:Mastercam.Database.Chain">
            <summary> The Chain class is used for passing and modifying Mastercam chains between operations.
          </summary>
            <remarks> Note that Chain objects cannot be user created via a constructor.
          See the <see cref="T:Mastercam.Database.ChainManager" /> class for information about creating chains.
       </remarks>
        </member>
        <member name="M:Mastercam.Database.Operation.LoadRotaryAxisParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's rotary axis values from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's rotary axis values from.
                  </param>
        </member>
        <member name="M:Mastercam.Database.Operation.LoadCoolantParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's coolant settings from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's coolant settings from.
                  </param>
        </member>
        <member name="M:Mastercam.Database.Operation.LoadMiscValuesParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's misc values from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's misc values from.
                  </param>
        </member>
        <member name="M:Mastercam.Database.Operation.LoadReferencepointsettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's reference point settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with reference point settings.
                  </param>
        </member>
        <member name="M:Mastercam.Database.Operation.LoadHomePositionSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method load this object's home position settings from the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with home position settings.
                  </param>
        </member>
        <member name="M:Mastercam.Database.Operation.LoadLinkingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method loads this object's linking parameters from the operation data member
          passed in.
          </summary>
            <param name="Op"> [in,out] The operation data member to load it's linking parameters from.
                  </param>
        </member>
        <member name="M:Mastercam.Database.Operation.SaveRotaryAxisParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'rotary axis' settings to the operation data
          member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> The operation data member to load with rotary settings. </param>
        </member>
        <member name="M:Mastercam.Database.Operation.SaveCoolantParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'coolant' settings to the operation data
          member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> The operation data member to load with coolant settings. </param>
        </member>
        <member name="M:Mastercam.Database.Operation.SaveMiscValuesParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'misc values' settings to the operation data
          member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> The operation data member to load with misc values settings. </param>
        </member>
        <member name="M:Mastercam.Database.Operation.SaveReferencepointsettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'reference point' settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with reference point settings.
                  </param>
        </member>
        <member name="M:Mastercam.Database.Operation.SaveHomePositionSettings(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'home position' settings to the operation data member
          passed in.
          </summary>
            <remarks> Mastercam X7 </remarks>
            <param name="Op"> [in,out] The operation data member to load with home position settings.
                  </param>
        </member>
        <member name="M:Mastercam.Database.Operation.SaveLinkingParams(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method saves this object's 'linking parameters' settings to the operation data
          member passed in.
          </summary>
            <remarks> Mastercam X7. </remarks>
            <param name="Op"> The operation data member to load with linking parameters settings. </param>
        </member>
        <member name="F:Mastercam.Database.Operation.m_OperationTool">
            <summary> The tool in the operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Operation.m_dirty">
            <summary> true if the operation is considered 'dirty'. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.DisplayToolpath">
            <summary> Gets or sets a value indicating whether to display the toolpath. </summary>
            <remarks> The operation must already exist in the Toolpath Manager. 
		  You do not need to .Commit() the operation after setting this option! 
		  The operation will be automatically updated if the on/off state of this option is changed.</remarks>
            <value> True if display toolpath, false if not. </value>
        </member>
        <member name="P:Mastercam.Database.Operation.TimeStamp">
            <summary> Gets the database Time Stamp for this operation. </summary>
            <remarks> The operation must have already been committed to Mastercam's database for this to be valid!
          If not, the DateTime returned is the "dawn of time" for a .NET DateTime - (midnight), January 1, 0001
          You can check for this by comparing the TimeStamp to .NET DateTime.MinValue </remarks>
        </member>
        <member name="F:Mastercam.Database.Operation.RotaryAxis">
            <summary> Gets or sets the Rotary Axis settings used in this operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="P:Mastercam.Database.Operation.UseCoolantFromPost">
            <summary> Gets or sets a value indicating whether this operation uses "old-style coolant" (from post processor). </summary>
            <remarks> A .Commit() of the Operation must have been already been done for this to be valid! </remarks>
        </member>
        <member name="F:Mastercam.Database.Operation.Coolant">
            <summary> Gets or sets the Coolant settings used in this operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Database.Operation.MiscValues">
            <summary> The Misc Values settings used in this operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Database.Operation.ReferencePoints">
            <summary> Gets or sets the Reference Points in this operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Database.Operation.HomePosition">
            <summary> Gets or sets the Home Position settings used in this operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="F:Mastercam.Database.Operation.Linking">
            <summary> Gets or sets the Linking Parameters settings used in this operation. </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="P:Mastercam.Database.Operation.Dirty">
            <summary> Gets a value indicating the 'dirty' status of the operation in the Operations Manager,
          which indicates whether or not the operation needs to be regenerated.
          </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.UseWCS">
            <summary> Gets or sets a value indicating whether or not this operation is using a specified WCS object.
          </summary>
        </member>
        <member name="F:Mastercam.Database.Operation.WCS">
            <summary> Gets or sets the WCS of this operation object. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.UseConstructionPlane">
            <summary> Gets or sets a value indicating whether or not this operation is to use the construction plane.
          </summary>
        </member>
        <member name="F:Mastercam.Database.Operation.ConstructionPlane">
            <summary> Gets or sets the construction plane this operation is set to work in. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.UseToolPlane">
            <summary> Gets or sets a value indicating whether or not this operation is to use the tool plane.
          </summary>
        </member>
        <member name="F:Mastercam.Database.Operation.ToolPlane">
            <summary> The tool plane this operation is set to work in. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.OperationTool">
            <summary> Gets or sets the Tool object to be used with this operation. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.ProgramNumber">
            <summary> Gets or sets the operation's Program Number. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.NCIName">
            <summary> Gets or sets the operation's output NCI name. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.Name">
            <summary> Gets or sets the operation's name (comment). </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.Selected">
            <summary> Gets or sets a value indicating this operation's 'selected' status in the Operation
          Manager.
          </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.Posting">
            <summary> Gets or sets a value indicating if posting is currently enabled for this operation.
          </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.ToolDisplayOn">
            <summary> Gets or sets a value indicating if tool display is on or off for this operation. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.Locked">
            <summary> Gets or sets a value indicating if the operation is locked or not. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.ToBatch">
            <summary> Gets or sets a value indicating whether or not the operation is to be output to a batch. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.ForceToolChangeOn">
            <summary> Gets or sets a value indicating if this operation is set to force tool changes or not.
          </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.RetractRate">
            <summary> Gets or sets the retract rate for this operation's tool. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.PlungeRate">
            <summary> Gets or sets the plunge rate for this operation's tool. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.FeedRate">
            <summary> Gets or sets the feed rate for this operation's tool. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.SpindleSpeed">
            <summary> Gets or sets the spindle speed for this operation's tool. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.DiameterOffset">
            <summary> Gets or sets the diameter offset value of this operation. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.LengthOffset">
            <summary> Gets or sets the length offset value of this operation. </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.GroupNumber">
            <summary> Gets or sets the group number identifying which Mastercam group this operation
          belongs to.
           </summary>
        </member>
        <member name="P:Mastercam.Database.Operation.Type">
            <summary> This operation's type. </summary>
        </member>
        <member name="M:Mastercam.Database.Operation.LoadDefaults">
            <summary> Loads the default values for a given operation object. </summary>
        </member>
        <member name="M:Mastercam.Database.Operation.CalcCycleTime">
            <summary> Calculates the cycle time of the operation </summary>
            <remarks> Note that this assumes the operation is not in a 'dirty' state!
		 This does not regenerate the operation if it is 'dirty', and the time returned will be 0.0
		 The time (in seconds) that's returned in the "raw" time of the operations.
		 Any additional time (for tool changes, etc.) would need to be added to this if desired. 
		 You can use the functionality in the .NET Framework's TimeSpan to format the time as desired.	
		 See the related CalcCycleTime functionality in the OperationsManager class. </remarks>
            <returns> The calculated cycle time (in seconds). </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.SetSelectedState(System.Boolean)">
            <summary> Sets the 'selected' state of the operation without the need to call a .Commit() on the operation </summary>
            <param name="state"> True to set as selected, false to mark as unselected. </param>
            <returns> True if it succeeds, false if it fails (the operation was not found in Mastercam's database). </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.GetMaximumZ">
            <summary> Gets the maximum Z coordinate (from the binary NCI) of the operation's toolpath. </summary>
            <remarks> If this fails, which will occur if the operation's toolpath is 'dirty'.
          The value returned will be the maximum value allowed in a Double. (Double::MaxValue)
          </remarks>
            <returns> The maximum z coordinate. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.GetMinimumZ">
            <summary> Gets the minimum Z coordinate (from the binary NCI) of the operation's toolpath.
          </summary>
            <remarks> If this fails, which will occur if the operation's toolpath is 'dirty'.
          The value returned will be the minimum value allowed in a Double. (Double::MinValue)
          </remarks>
            <returns> The minimum z coordinate. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.GetMaxAndMinZ(System.Double@,System.Double@)">
            <summary> Gets the maximum and minimum Z coordinates (from the binary NCI) of the operation's
          toolpath.
          </summary>
            <remarks> If this fails, which will occur if the operation's toolpath is 'dirty'.
          The values returned will be the maximum and minimum values allowed in a Double.
          (Double::MaxValue and Double::MinValue)
          </remarks>
            <param name="maxZ"> [out] The maximum Z coordinate. </param>
            <param name="minZ"> [out] The minimum Z coordinate. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.MarkDirty">
            <summary> Mark's the operation object as 'dirty' in the Operations Manager, indicating that
          it needs to be regenerated.
          </summary>
        </member>
        <member name="M:Mastercam.Database.Operation.UpdateToolSettings">
            <summary> Updates an operation's tool-specific settings from it's OperationTool member's tool data.
          </summary>
            <returns> True if the update and subsequent commit was successful. else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.AssignMillToolBySlot(System.Int32)">
            <summary> Assign mill tool to operation by slot number. </summary>
            <param name="slot"> The slot number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.GetOperationID">
            <summary> Gets the unique database identifier for the current Mastercam operation. </summary>
            <returns> The operation identifier. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Post(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Posts the current operation object. </summary>
            <param name="NCDestinationPath"> The path to output the NC file to upon completion
                                 of the posting process.
                                 </param>
            <param name="EditNCAfterwords">  This flag indicates whether the NC file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
            <param name="AlsoCreateNCIFile"> This flag dictates whether or not an NCI file is created
                                 for the operation during the posting process.
                                 </param>
            <param name="EditNCIAfterwords"> This flag indicates whether the NCI file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
            <returns> True if the operation was successfully posted, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Post(System.String,System.Boolean,System.Boolean)">
            <summary> Posts the current operation object. </summary>
            <remarks> Note that this method will disallow the editing of the NCI upon posting.
          </remarks>
            <param name="NCDestinationPath"> The path to output the NC file to upon completion
                                 of the posting process.
                                 </param>
            <param name="EditNCAfterwords">  This flag indicates whether the NC file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
            <param name="AlsoCreateNCIFile"> This flag dictates whether or not an NCI file is created
                                 for the operation during the posting process.
                                 </param>
            <returns> True if the operation was successfully posted, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Post(System.String,System.Boolean)">
            <summary> Posts the current operation object. </summary>
            <remarks> Note that this method will not create an associated NCI file by default.
          </remarks>
            <param name="NCDestinationPath"> The path to output the NC file to upon completion
                                 of the posting process.
                                 </param>
            <param name="EditNCAfterwords">  This flag indicates whether the NC file is to be opened by
                                 the default editor after the posting process is complete.
                                 </param>
            <returns> True if the operation was successfully posted, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Post(System.String)">
            <summary> Posts the current operation object. </summary>
            <param name="NCDestinationPath"> The path to output the NC file to upon completion
                                 of the posting process.
                                 </param>
            <returns> True if the operation was successfully posted, else false if not. </returns>
            <remarks> Note that this method will not create an associated NCI file and will disallow
          the editing of the subsequent NC file by default.
          </remarks>
        </member>
        <member name="M:Mastercam.Database.Operation.Post">
            <summary> Posts the current operation object. </summary>
            <returns> True if the operation was successfully posted, else false if not. </returns>
            <remarks> Note that this method will post to the default posting directory,
          will not create an associated NCI file, and will disallow the editing
          of the subsequent NC file by default.
          </remarks>
        </member>
        <member name="M:Mastercam.Database.Operation.Regenerate">
            <summary> Regenerates the current operation object. </summary>
            <returns> True if the operation was successfully regenerated, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.EditOperationGeometry">
            <summary> Displays either the Edit Drill Points or the Edit Chains dialog to the user in
          order to edit this operation object's geometry.
          </summary>
            <returns> True if the operation geometry was successfully updated, else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.EditOperation">
            <summary> Displays the Edit Operation dialog to the user in order to edit this operation object.
          </summary>
            <returns> True if the operation was successfully updated, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Retrieve">
            <summary> Updates the current operation object with any changes that have been made to the
          version in the Mastercam database.
          </summary>
            <returns> True if the operation was successfully updated, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Delete">
            <summary> Deletes the current operation object from the Mastercam database. </summary>
            <returns> True if the operation was successfully deleted from the Mastercam database and
          false if not.
          </returns>
            <remarks> Note that once the operation object has been deleted from the Mastercam
          database it will still exist locally, and can be re-committed at a later time.
          </remarks>
            <exception cref="T:Mastercam.App.Exceptions.EntityInvalidException">     This exception will be thrown if the object
                                              being deleted is already marked as an
                                              Invalid, indicating that it doesn't
                                              exist in the Mastercam database anyway.
                                              </exception>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException">        Thrown if for some reason this object is
                                              supposed to be valid but the entity is
                                              no longer in the Mastercam database.
                                              </exception>
            <exception cref="T:Mastercam.App.Exceptions.EntityWriteFailedException"> Thrown if Mastercam is unable to write the
                                              entity changes to the database for some reason.
                                              </exception>
        </member>
        <member name="M:Mastercam.Database.Operation.Validate">
            <summary> Validates whether or not the current operation object is a valid Mastercam database
          entry yet.
          </summary>
            <returns> True if the operation is already in the Mastercam database, else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Commit(System.Boolean)">
            <summary> Takes the current operation object and commits it to the Mastercam database.
          </summary>
            <param name="includeGeometry"> true to include, false to exclude the geometry. </param>
            <returns> True if the operation was successfully committed, else false if not. </returns>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown if for some reason this object is
                                       supposed to be valid but the entity is no
                                       longer in the Mastercam database.
                                       </exception>
            <exception cref="T:Mastercam.App.Exceptions.EntityWriteFailedException"> Thrown if Mastercam is unable to write the
                                              entity changes to the database for some reason.
                                              </exception>
        </member>
        <member name="M:Mastercam.Database.Operation.Commit">
            <summary> Takes the current operation object and commits it to the Mastercam database.
          </summary>
            <returns> True if the operation was successfully committed, else false if not. </returns>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown if for some reason this object is
                                       supposed to be valid but the entity is no
                                       longer in the Mastercam database.
                                       </exception>
            <exception cref="T:Mastercam.App.Exceptions.EntityWriteFailedException"> Thrown if Mastercam is unable to write the
                                              entity changes to the database for some reason.
                                              </exception>
        </member>
        <member name="M:Mastercam.Database.Operation.#ctor">
            <summary> Initializes a new instance of the abstract class. </summary>
            <remarks> All members are given default values. </remarks>
        </member>
        <member name="M:Mastercam.Database.Operation.SetCoolantData(Mastercam.Operations.Types.CoolantType,Mastercam.Operations.Types.CoolantStateType,System.Int32)">
            <summary> Sets the coolant data. </summary>
            <param name="index">   Index of the data item. </param>
            <param name="state">   The coolant (On/Off) state. </param>
            <param name="bwaFlag"> The coolant (Before/With/After) position data. </param>
        </member>
        <member name="M:Mastercam.Database.Operation.CreateCoolantCannedTextValue(Mastercam.Operations.Types.CoolantType,Mastercam.Operations.Types.CoolantIndices)">
            <summary> Calculate the X-style coolant value to be used in the operation's canned text. </summary>
            <param name="index"> Index of the Coolant type. </param>
            <param name="ci">    The Coolant item index. </param>
            <returns> A value to be place into the canned text array. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.UpdateToolInOperation(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the tool in operation described by Operation. </summary>
            <param name="Op"> [in,out] The operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.InitOp(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes a Mastercam operation structure with default values. </summary>
            <param name="Op"> [out] The operation structure to be initialized. </param>
        </member>
        <member name="M:Mastercam.Database.Operation.LoadDefaults(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads the default values for a given operation object from the operation structure passed in.</summary>
            <param name="Op">The operation structure to use as defaults for this operation object.</param>
        </member>
        <member name="M:Mastercam.Database.Operation.Retrieve(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves an operation structure from the Mastercam database. </summary>
            <param name="Op"> [out] The operation structure to be retrieved. </param>
            <returns> True if the operation structure was retrieved from the database successfully,
          false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Delete(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes an operation structure from the Mastercam database. </summary>
            <param name="Op"> The operation structure to be deleted. </param>
            <returns> True if the operation structure was deleted from the database successfully,
           false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Validate(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validates that a given operation structure is already in the Mastercam database.
          </summary>
            <param name="Op"> The operation structure to be validated. </param>
            <returns> True if the operation structure is already in the database, false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.Commit(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits an operation structure to the Mastercam database. </summary>
            <param name="Op"> The operation structure to be committed. </param>
            <returns> True if the commit was successful, false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.#ctor(System.Int32)">
            <summary> ID Lookup Constructor. Attempts to retrieve an operation entity with the given ID
          from the Mastercam database and use that to initialize this operation object.
          </summary>
            <remarks> If no matching operation entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="OpIDValue"> The ID of the operation entity to look up in the Mastercam database.
                         </param>
        </member>
        <member name="M:Mastercam.Database.Operation.UpdateOpView(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Mastercam.Database.MCView)">
            <summary> Updates a Mastercam op_view structure from a Mastercam view_ent structure.
          </summary>
            <param name="OpViewData"> Information describing the operation view. </param>
            <param name="ViewData">   Information describing the view. </param>
        </member>
        <member name="M:Mastercam.Database.Operation.RunChainManager(Mastercam.Database.Types.OperationType)">
            <summary> Runs the chain manager dialog for the given operation. </summary>
            <param name="OpType"> Type of the operation. </param>
            <returns> True if the chain manager dialog returned a successful completion value,
          false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Operation.RunPointManager">
            <summary> Runs the drill point manager dialog for the given operation. </summary>
            <returns> True if the drill point manager dialog returned a successful completion value,
          false if not.
          </returns>
        </member>
        <member name="T:Mastercam.Database.Operation">
            <summary> This class is used for modifying and creating toolpath operations in Mastercam. </summary>
        </member>
        <member name="M:SaveRestoreProductBits.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:SaveRestoreProductBits.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:SaveRestoreProductBits">
            <summary> Class to save the current product enable bits, and restore upon destruction. </summary>
        </member>
        <member name="M:OMisOpInMTMachineGroup(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Determines if the operation is in an MT Machine Group. </summary>
            <param name="op_idn"> The operation idn. </param>
            <returns> True if an MT Machine, false if not. </returns>
        </member>
        <member name="M:OMisGrpMachineMT(op_group*)">
            <summary> Determines if the Group Machine is an MT Machine. </summary>
            <param name="pTpGroup"> If non-null, group the TP belongs to. </param>
            <returns> True if an MT Machine, false if not. </returns>
        </member>
        <member name="M:OMisActiveMachineMT">
            <summary> Determines if the Active Machine is an MT Machine. </summary>
            <returns> True if an MT Machine, false if not. </returns>
        </member>
        <member name="M:IsMillOpSupported(System.Int16,System.Int16,System.Int16)">
            <summary> Checks whether a milling operation is supported by the current machine. </summary>
            <param name="minMillTurnLevel">		 Minimum MT product level needed to run this operation. </param>
            <param name="minMillLevelForOthers"> Minimum Mill product level needed to run this operation for products other than MillTurn. </param>
            <param name="opcode">				 Operation code to check. </param>
            <returns> True if the operation is supported. </returns>
        </member>
        <member name="M:SetAbandonedToolsToMachineGroup(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Set all abandoned tools to the specific machine group. </summary>
            <param name="GroupID"> Identifier for the group. </param>
        </member>
        <member name="M:SetAbandonedToolsToMachineGroup(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set all abandoned tools to the specific machine group. </summary>
            <param name="Group"> The group. </param>
        </member>
        <member name="M:RestoreToolpathMenu">
            <summary> Restore the toolpath menu. </summary>
        </member>
        <member name="M:SetUpProdEnableBitsForStoreEntAssoc">
            <summary> Temporarily manipulated product enable bits so store_ent_assoc () will work saving md components. </summary>
        </member>
        <member name="M:RestoreTemporaryEnableBits">
            <summary> Restore the saved temporary product bits. </summary>
        </member>
        <member name="M:SaveTemporaryEnableBits">
            <summary> Save the current product bits so they can be restored after getting mangled. </summary>
        </member>
        <member name="M:SetGviewFromMachine(System.Int16)">
            <summary> Set the current graphics view when changing machines. </summary>
            <param name="vwNum"> The view number, view number 1-7, or anything else for 'dynamic' </param>
        </member>
        <member name="M:GetMachineAxis(x_matrix*,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the spindle view of the machine and determines if this is a vertical or horizontal machine. </summary>
            <param name="spindleView"> The spindle view.  Updated to current active machine. </param>
            <param name="isVerticalMachine"> True if spindle is in Z direction.  </param>
            <returns> True if successful. </returns>
        </member>
        <member name="M:GetActiveMachineDecimalPrecision">
            <summary>	Get the active machine's floating point precision. </summary>
            <returns>	The number of significant digits (i.e. placed to the right of the decimal point). </returns>
        </member>
        <member name="M:OMgetOpMachineForMT(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Get the MT platform machine for the requested operation. </summary>
            <param name="op_idn"> The operation idn. </param>
            <returns> Null if it fails, else a CCNCMachine*. </returns>
        </member>
        <member name="M:OMgetOpMachine(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Get the machine for the requested operation. </summary>
            <param name="op_idn"> The operation idn. </param>
            <returns> Null if it fails, else a CCNCMachine*. </returns>
        </member>
        <member name="M:OMgetActiveMachine">
            <summary> Get the machine for the active toolpath group. </summary>
            <returns> Null if it fails, else a CCNCMachine*. </returns>
        </member>
        <member name="M:OMsetGrpMachine(op_group*)">
            <summary> Set (allocate) the machine for the requested toolpath group Return a pointer to the new machine. </summary>
            <param name="pTpGroup"> If non-null, toolpath group to get the machine for. </param>
            <returns> Null if it fails, else a CCNCMachine*. </returns>
        </member>
        <member name="M:OMgetGrpMachine(op_group!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
            <summary> Get the machine for the requested toolpath group. </summary>
            <param name="pTpGroup"> If non-null, toolpath group to get the machine for. </param>
            <param name="make_one"> (Optional) true - make a machine if none yet exists. </param>
            <returns> Null if it fails, else a CCNCMachine*. </returns>
        </member>
        <member name="M:RestoreProdEnableBitsFromMachineType">
            <summary> Restore the state of ProdEnableBits after using SetProdEnableBitsFromMachineType() </summary>
        </member>
        <member name="M:SetProdEnableBitsFromMachineType(System.Int32,System.Boolean)">
            <summary> Change ProdEnableBits based on machine type This is used so tools can be edited when in 'design' mode
		  when defining turrets, or setting up machine tooling Use RestoreProdEnableBitsFromMachineType() to
		  restore the state after using this function. </summary>
            <param name="mt">			    The mt. </param>
            <param name="forMT"> True, if this machine for the MT platform. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:UpdateX3PreAlphaMachCompEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> X3 pre-alpha cnc machine entity translator, entity to update. </summary>
            <param name="e"> The ent to process. </param>
        </member>
        <member name="F:CCNCMachine.m_pCtrl">
machine control parameters
</member>
        <member name="M:CCNCMachine.WaitThenCleanUpAfterDrawMachine(System.Int32,System.Boolean,System.Boolean,CWnd*)">
            <summary> Wait for user to hit key and then clean up after draw machine. </summary>
            <param name="mainLevelValueToRestore">	    The main level value to restore. </param>
            <param name="manageLevels">				    The manage levels. </param>
            <param name="previousToolpathRepaintValue"> The previous toolpath repaint value. </param>
            <param name="pDlg">						    If non-null, the dialog. </param>
            <param name="minScreen">					Original screen minimum extents. </param>
            <param name="maxScreen">					Original screen maximum extents. </param>
        </member>
        <member name="M:CCNCMachine.PrepareForDrawingMachine(CWnd*,System.Boolean)">
            <summary> Prepare for drawing machine. </summary>
            <param name="pDlg">		    If non-null, the dialog. </param>
            <param name="manageLevels"> Manage levels during drawing process. </param>
        </member>
        <member name="M:CCNCMachine.SaveMachiningModesToDb">
            <summary> Save the machining modes to the database. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitMachiningModesFromFile(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize machining modes from a file MUST be called AFTER all groups, components and axis combinations
			are in the database, and all ent_idn's are valid. </summary>
            <param name="fp"> The fp. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitMachiningModesFromDb">
            <summary> Initialize machining modes from the database MUST be called AFTER all groups, components and axis combinations
				are in the database, and all ent_idn's are valid. </summary>
        </member>
        <member name="M:CCNCMachine.MachModeList_ent_idn">
            <summary> Return the ent_idn of the machining mode entity list ent. </summary>
            <returns> A long&amp; </returns>
        </member>
        <member name="M:CCNCMachine.ValidateAxisCombinations">
            <summary> Validate the axis combinations, by removing multiple tool, part or tooling components. </summary>
            <returns> Return true if components were removed from the axis combination. </returns>
        </member>
        <member name="M:CCNCMachine.SaveAxisCombinationsToDb">
            <summary> Save the axis combinations to the database. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitAxisCombinationsFromFile(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize axis combinations from a file MUST be called AFTER all groups and components are in the
			database, and all group and component ent_idn's are valid. </summary>
            <param name="fp"> pointer to file to read from. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitAxisCombinationsFromDb">
            <summary> Initialize axis combinations from the database MUST be called AFTER all groups and components are in the
			database, and all group and component ent_idn's are valid. </summary>
        </member>
        <member name="M:CCNCMachine.InitMappedAxisCombinations">
            <summary> Generate copies of mapped axis combinations with tool storage and part holding components in in 'owner' axis combinations. </summary>
        </member>
        <member name="M:CCNCMachine.AxisComboList_ent_idn">
            <summary> Axis combo list ent idn. </summary>
            <returns> Return the ent_idn of the axis combination entity list ent </returns>
        </member>
        <member name="M:CCNCMachine.DfltCoolantOffCmdID(System.Int16)">
            <summary> Dflt coolant off command identifier. </summary>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1. </param>
            <returns> Return the resource ID for the default 'coolant off' string. </returns>
        </member>
        <member name="M:CCNCMachine.DfltCoolantOnCmdID(System.Int16)">
            <summary> Dflt coolant on command identifier. </summary>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1. </param>
            <returns> Return the resource ID for the default 'coolant on' string. </returns>
        </member>
        <member name="M:CCNCMachine.DfltCoolantCmdID(System.Int16)">
            <summary> Dflt coolant command identifier. </summary>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1. </param>
            <returns> Return the resource ID for the default 'base' string. </returns>
        </member>
        <member name="M:CCNCMachine.GetWireMachineType(System.Int32,System.Int32)">
            <summary> Gets wire machine type. </summary>
            <param name="startRange"> The start range. </param>
            <param name="endRange">   The end range. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CCNCMachine.TurnOffOperationSubProgramSetting(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Turn off operation sub program setting. </summary>
            <param name="op">   The operation to check. </param>
            <param name="data"> The compatibility data to fill in. </param>
            <returns> Machine/group/operation compatibility flag. </returns>
        </member>
        <member name="M:CCNCMachine.LatheQuickOpOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check lathe quick op against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Machine/group/operation compatibility flag. </returns>
        </member>
        <member name="M:CCNCMachine.PinchTurnOpOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check pinch turn op against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Machine/group/operation compatibility flag. </returns>
        </member>
        <member name="M:CCNCMachine.LatheMiscOpOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check lathe miscop against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.AxisSubstitutionOk(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check axis substitution status against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.LatheThreadCycleOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check lathe thread cycle status against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.LatheCannedCycleOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check lathe thread cycle status against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.CoolantOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check an operation's coolant setting against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.ToolChgPosOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check a turning operation's tool change position against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.FeedRateOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check an operation's feed rate against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SpindleSpeedOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check an operation's spindle speed against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.OpWCSOk(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Update the op WCS to use the machine group properties WCS, if necessary.. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.ToolCompOK(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Check an operation's tool compensation against the machine. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SetGroupCompatibilityData(System.Int32,CCompatibilityData*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Fill in compatibility data for a missing group. </summary>
            <param name="groupClass"> The group class. </param>
            <param name="pData">	  If non-null, data to fill in. </param>
            <param name="acId">		  (Optional) axis combination id. </param>
        </member>
        <member name="M:CCNCMachine.SetCompatibilityData(System.Int32,System.Int32,CCompatibilityData*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Set compatibility data. </summary>
            <param name="compatibility"> The compatibility. </param>
            <param name="errorCode">	 The error code. </param>
            <param name="pData">		 If non-null, data to fill in. </param>
            <param name="acId">			 (Optional) axis combination id. </param>
        </member>
        <member name="M:CCNCMachine.CompatibleACNoOpAC(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Determine if there is a machine axis combination compatible with the operation parameters
		This test is used if there is no valid axis combination stored with the operation. </summary>
            <param name="op">	   The operation to check. </param>
            <param name="compat"> The operation compatibility. </param>
            <param name="pData">  (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Return a pointer to the axis combination that is, or nullptr if none is found. </returns>
        </member>
        <member name="M:CCNCMachine.AxisComboIsCompatibleWithOp(CAxisCombination*,CAxisCombination*,System.Int32,System.Int32,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Axis combo is compatible with operation. </summary>
            <param name="pAC">		 If non-null, axis combination to check. </param>
            <param name="pOpAC">	 If non-null, the current operation axis combination. </param>
            <param name="partGroup"> part holding group from op params. </param>
            <param name="toolGroup"> tool storage group from op params. </param>
            <param name="op">		 The operation to check. </param>
            <param name="pData">	 (Optional) If non-null, (Optional) the data to fill in. </param>
            <returns> Return true if the machine's axis combination is compatible with the operation, based on operation parameters. </returns>
        </member>
        <member name="M:CCNCMachine.CompatibleACCompareACs(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Determine if the operation's axis combination is compatible with one of the machine axis combinations. </summary>
            <param name="op">	   The operation to check. </param>
            <param name="compat"> The operation compatibility. </param>
            <param name="pData">  (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Return a pointer to the axis combination that is, or nullptr if none is found. </returns>
        </member>
        <member name="M:CCNCMachine.AddAxisComboToList(CAxisCombination*,std.vector&lt;CAxisCombination**,std.allocator&lt;CAxisCombination**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Add an axis combination to a list, only if it already isn't in the list. </summary>
            <param name="pAC">		  If non-null, axis combo to add. </param>
            <param name="axisCombos"> list of axis combos. </param>
        </member>
        <member name="M:CCNCMachine.InitOpAxisInfo(System.Int32!System.Runtime.CompilerServices.IsLong,op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,operation*)">
            <summary> Initialize op info for world/WCS/NC coordinate mapping. </summary>
            <param name="axisComboID"> axis combination ID. </param>
            <param name="wcs">		   The WCS to use for mapping. </param>
            <param name="toolOrigin">  If non-null, the tool origin point (world coord). </param>
            <param name="pOp">		   If non-null, the operation to set into for. </param>
        </member>
        <member name="M:CCNCMachine.OpCompatibilityIncludingMT(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Op Compatibility Including MT, converting Ops if necessary and supporting Lathe and Mill. </summary>
            <param name="op">					  The operation. </param>
            <param name="compat">				  The current compatible value. </param>
            <param name="pData">				  If non-null, the data. </param>
            <param name="compareGroups"> (Optional) check to see if machine is for ops' group. </param>
            <param name="canDropCertainLatheOps"> (Optional) True if this object can drop certain lathe ops. </param>
            <param name="canDropCertainMillOps">  (Optional) True if this object can drop certain mill ops. </param>
            <returns> The operation converted to mt with the new current compatible value. </returns>
        </member>
        <member name="M:CCNCMachine.IsCAxisOpOKForMT(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*,System.Boolean)">
            <summary> Is c axis operation valid for mt. </summary>
            <param name="op">			 The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) the data. </param>
            <param name="compareGroups"> (Optional) check to see if machine is for ops' group. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.IsLatheOpOKForMT(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*,System.Boolean)">
            <summary> Is Lathe op valid for MT. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) the data. </param>
            <param name="compareGroups"> (Optional) check to see if machine is for ops' group. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.IsLatheOpCopmpatibleWithMT(System.Int16)">
            <summary> Is lathe operation copmpatible with mt. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.IsMillOpOKForMT(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*,System.Boolean)">
            <summary> Is Mill op valid for MT. </summary>
            <param name="op">    The operation. </param>
            <param name="pData"> (Optional) If non-null, (Optional) the data. </param>
            <param name="compareGroups"> (Optional) check to see if machine is for ops' group. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.SaveReferencePositionsToDb">
            <summary> Save the reference positions to the database. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SaveReferencePosition_ent_idns">
            <summary> Save ent_idns for all reference positions. </summary>
        </member>
        <member name="M:CCNCMachine.InitReferencePosition_ent_idns">
            <summary> Initialize ent_idns for all reference positions. </summary>
        </member>
        <member name="M:CCNCMachine.InitReferencePositionsFromFile(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize reference positions from a file. </summary>
            <param name="fp"> The pointer to file to read from. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitReferencePositionsFromDb">
            <summary> Initialize reference positions from the database. </summary>
        </member>
        <member name="M:CCNCMachine.UpdateSteadyRestFromMGData(System.Boolean)">
            <summary> Update a lathe steady rest component from MGP parameters. </summary>
            <param name="saveToDb">   The save new component to database. </param>
            <returns> null if it fails, else a CSteadyRestComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.CreateTailstockCenterFromMGData(System.Boolean)">
            <summary> Generate a lathe tailstock centre component from MGP parameters, if it doesn't exist. </summary>
            <param name="saveToDb">   The save new component to database. </param>
            <returns> null if it fails, else the new tailstock center from mg data. </returns>
        </member>
        <member name="M:CCNCMachine.CreateLatheChuckJawsFromMGData(System.Byte,System.Boolean)">
            <summary> Generate a lathe chuck jaws component from MGP parameters, if it doesn't exist. </summary>
            <param name="activeSpdl"> The LH_HEAD or RH_HEAD. </param>
            <param name="saveToDb">   The save new component to database. </param>
            <returns> null if it fails, else the new lathe chuck jaws from mg data. </returns>
        </member>
        <member name="M:CCNCMachine.CreateStockFromMGData(System.Boolean)">
            <summary> Generate a mill/router/wire stock component from MGP parameters, if it doesn't exist. </summary>
            <param name="saveToDb"> The save new component to database. </param>
        </member>
        <member name="M:CCNCMachine.CreateFixturesFromMGData(System.Boolean)">
            <summary> Generate mill/router/wire fixture component(s) from the previous machine. </summary>
            <param name="saveToDb"> The save new component to database. </param>
        </member>
        <member name="M:CCNCMachine.FindPartHoldingComponent(System.Boolean)">
            <summary> Find the part holding component for a mill/router/wire EDM. </summary>
            <param name="includeFixtures"> The include fixtures in search. </param>
            <returns> null if it fails, else the found part holding component. </returns>
        </member>
        <member name="M:CCNCMachine.FindFixedComponent(Cnc.MachineDef.Component.CStockComponent**,Cnc.MachineDef.Component.CChuckJawsComponent**,Cnc.MachineDef.Component.CLatheCenterComponent*)">
            <summary> Find the fixed base component from the newly defined lathe MGP components. </summary>
            <param name="pStocks">    If non-null, the stocks to search. </param>
            <param name="pChuckJaws"> If non-null, the chuck jaws to search. </param>
            <param name="pCenter">    If non-null, the tailstock centre to search. </param>
            <returns> null if it fails, else the found fixed component. </returns>
        </member>
        <member name="M:CCNCMachine.DeleteComponentEntities(Cnc.MachineDef.Component.CMachineComponent*,System.Boolean)">
            <summary> Recursively delete the component entities from the database. </summary>
            <param name="pComp">		If non-null, the component to use. </param>
            <param name="deleteMCGeo">  (Optional) the delete geometry also. </param>
        </member>
        <member name="M:CCNCMachine.DeleteComponentMCGeometry(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Delete the Mastercam component geometry (LBDRY, or solid). </summary>
            <param name="pComp"> If non-null, the component to use. </param>
        </member>
        <member name="M:CCNCMachine.SaveGroupsEntIdns">
            <summary> Save ent_idns for all groups. </summary>
        </member>
        <member name="M:CCNCMachine.InitGroupsEntIdns">
            <summary> Initialize ent_idns for all groups. </summary>
        </member>
        <member name="M:CCNCMachine.ImportAggregateEntities(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Import the stations and tl to the aggregate component. </summary>
            <param name="filename"> file to read from. </param>
            <param name="fp">		The MC file class. </param>
        </member>
        <member name="M:CCNCMachine.ImportComponentAggregate(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Import the stations and tl to the Aggregate component. </summary>
            <param name="filename"> file to read from. </param>
            <param name="fp">		The MC file class. </param>
            <param name="pComp">    If non-null, the component to save. </param>
        </member>
        <member name="M:CCNCMachine.ImportDrillBlockEntities(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Import the stations and tl to the drill block component. </summary>
            <param name="filename"> file to read from. </param>
            <param name="fp">		The MC file class. </param>
        </member>
        <member name="M:CCNCMachine.ImportComponentDrillBlock(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Import the stations and tl to the drill block component. </summary>
            <param name="filename"> file to read from. </param>
            <param name="fp">		The MC file class. </param>
            <param name="pComp">	If non-null, the component to save. </param>
        </member>
        <member name="M:CCNCMachine.EntIsComponentEnt(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Ent is component. </summary>
            <param name="ent_idn"> The id of component entity to check. </param>
            <param name="pComp">   If non-null, the component to check. </param>
            <returns> Return true if the component entity referenced by ent_idn is a currently used machine component. </returns>
        </member>
        <member name="M:CCNCMachine.SaveComponentsEntIdns(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Save ent_idns for all components. </summary>
            <param name="pComp"> If non-null, the component to initialize ent_idns for. </param>
        </member>
        <member name="M:CCNCMachine.InitComponentsEntIdns(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Initialize ent_idns for all components. </summary>
            <param name="pComp"> If non-null, the component to initialize ent_idns for. </param>
        </member>
        <member name="M:CCNCMachine.InitNamedViewsFromFile(MCFile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize array of named views from an MD file. </summary>
            <param name="fp"> [in,out] The pointer to open database file. </param>
            <returns> Number of planes added to m_MDFileViews. </returns>
        </member>
        <member name="M:CCNCMachine.InitGroupsFromFile(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize component groups from file entities
			-Component tree must be loaded from the database 1st
			-Every component must belong to a group. </summary>
            <param name="fp"> The pointer to open database file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitGroupsFromDb">
            <summary> Initialize component groups from database entities 
			-Component tree must be loaded from the database 1st
			-Every component must belong to a group. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.FixDisconnectedSteadyRest">
            <summary> Fix a steady rest that somehow became disconnected from its component group. This happens in some X2 files. </summary>
        </member>
        <member name="M:CCNCMachine.InitComponentsFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineDef.Component.CMachineComponent*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Initialize machine components from file entities. </summary>
            <param name="filename"> name of file to read from. </param>
            <param name="fp">	    The pointer to open database file. </param>
            <param name="pParent">  If non-null, the parent component. </param>
            <param name="ent_idn">  The ent_idn of component entity. </param>
            <param name="loadGeo">  true = load machine geometry from the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.ConvertUnits">
            <summary> Convert to parameters to current system units. </summary>
        </member>
        <member name="M:CCNCMachine.SetUnitConversionType(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> et flag indicating if the MD in the file is not in the current system units. </summary>
            <param name="fp"> The pointer to open database file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitializeAllEntIdnsUsedByMachine">
            <summary> Initialize all ent_idns to 0 (except control def entity). </summary>
        </member>
        <member name="M:CCNCMachine.VerifyViewNumber(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Verify view number is valid and warn if it isn't. </summary>
            <param name="viewMatrix"> The view matrix. </param>
            <returns> A short viewNum. </returns>
        </member>
        <member name="M:CCNCMachine.BelongToToolPathGroup">
            <summary> Determines if we can belong to tool path group. </summary>
            <returns> true if it belong to a toolpath group, false if not. </returns>
        </member>
        <member name="M:CCNCMachine.SetName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a name. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:CCNCMachine.GetName">
            <summary> Gets the name. </summary>
            <returns> The name. </returns>
        </member>
        <member name="M:CCNCMachine.GetTokenDefaultsMap">
            <summary> Gets token defaults map. </summary>
            <returns> The token defaults map. </returns>
        </member>
        <member name="M:CCNCMachine.SetTokenDefaultsMap(TokenDefaultsMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets token defaults map. </summary>
            <param name="tokenDefaultMap"> The token default map. </param>
        </member>
        <member name="M:CCNCMachine.NCXZToWldXYZ(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16)">
            <summary> Convert a turning NC XZ coordinate to a world XYZ coordinate. </summary>
            <param name="wldPt">	The world (X,Y,Z) coordinates. </param>
            <param name="x">		The NC X coordinate. </param>
            <param name="z">		The NC Z coordinate. </param>
            <param name="op">		The operation with values to use. </param>
            <param name="coordDisp"> (Optional) the Is NC X a raidus or diameter? </param>
        </member>
        <member name="M:CCNCMachine.MWRestoreTurretFaces">
            <summary> Restore m_Curface for all turrets. This is done after a MachineWorks session. </summary>
        </member>
        <member name="M:CCNCMachine.MWInitTurretFaces">
            <summary> Back up and set m_Curface = 1 for all turrets. This is done prior to a MachineWorks session. </summary>
        </member>
        <member name="M:CCNCMachine.ChuckFaceDistance(System.Boolean)">
            <summary> Chuck face distance. Optionally taking into account channel depth. </summary>
            <param name="incChannelDepth"> (Optional) include chuck jaw channel depth. </param>
            <returns> Return the distance from the front of the left spindle chuck face to the front of the right spindle chuck face. </returns>
        </member>
        <member name="M:CCNCMachine.GetMachine2MastercamVector(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Compute the vector to map a point in machine coordinates to MGP stock view coordinates. </summary>
            <param name="v">	   The desired vector, MAXREAL if not defined. </param>
            <param name="pNoComp"> (Optional) If non-null, (Optional) the component NOT to use to compute vector. </param>
            <returns> The machine 2 mastercam vector. </returns>
        </member>
        <member name="M:CCNCMachine.GetMastercam2MachineVector(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Compute the vector to map a point in MGP stock view coordinates to machine coordinates. </summary>
            <param name="v">	   The desired vector, MAXREAL if not defined. </param>
            <param name="pNoComp"> (Optional) If non-null, (Optional) the component NOT to use to compute vector. </param>
            <returns> The mastercam 2 machine vector. </returns>
        </member>
        <member name="M:CCNCMachine.InitMasterStock">
            <summary> Verify that Master stock has been initialized. </summary>
        </member>
        <member name="M:CCNCMachine.MasterStock">
            <summary> Master stock. </summary>
            <returns> Return a pointer to the Master stock on the machine. </returns>
        </member>
        <member name="M:CCNCMachine.GetStockViewOrigin(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets stock view origin. </summary>
            <param name="origin"> The origin for stock view (world coord.). </param>
            <returns> Return the view origin for the stock view for this machine's group. Return false, if this isn't a group machine. </returns>
        </member>
        <member name="M:CCNCMachine.GetStockViewMatrix(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets stock view matrix. </summary>
            <param name="m33"> The 3x3 view matrix. </param>
            <returns> Return the view matrix for the stock view for this machine's group. Return false, if this isn't a group machine. </returns>
        </member>
        <member name="M:CCNCMachine.StockViewNumber">
            <summary> Stock view number. </summary>
            <returns> Return the view number for the stock view for this machine's group. Return INVALID, if this isn't a group machine. </returns>
        </member>
        <member name="M:CCNCMachine.StockView">
            <summary> Stock view. </summary>
            <returns> Return a pointer to the stock view from this machine's group. Return nullptr, if this isn't a group machine. </returns>
        </member>
        <member name="M:CCNCMachine.CoordDisp">
            <summary> Coordinate disp. </summary>
            <returns> Return lathe coordinate display state for the machine Cplane. </returns>
        </member>
        <member name="M:CCNCMachine.CplaneDefined">
            <summary> Cplane defined. </summary>
            <returns> Return whether or not the Cplane has been defined. </returns>
        </member>
        <member name="M:CCNCMachine.Cplane">
            <summary> Gets the cplane. </summary>
            <returns> Return / define the default Cplane for the machine. </returns>
        </member>
        <member name="M:CCNCMachine.GetMachineViewIDs(Cnc.MachineDef.Component.CMachineComponent*,std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Get the v_idn's for the named views associated with this machine
			Don't add duplicate id's
				This is a re - entrant method - seed it with MachineBase () to do the entire machine </summary>
            <param name="pComp">		  If non-null, the current component to get values for. </param>
            <param name="vids">			  The array of view ids. </param>
            <param name="addSystemViews"> (Optional) the add system views to the list. </param>
        </member>
        <member name="M:CCNCMachine.SetTurningOpViews(operation*,System.Boolean)">
            <summary> Set Cplane, Tplane for a turning operation. </summary>
            <param name="pOp">    The operation to set views for. </param>
            <param name="updWCS"> (Optional) true = update WCS also. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SetMillingOpPlanes(operation*,System.Boolean)">
            <summary> Set Cplane, Tplane for a milling operation. </summary>
            <param name="pOp">   If non-null, the operation to set tplane for. </param>
            <param name="force"> (Optional) true = force update even current plane is already valid. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SetCAxisFaceOrCrossOpPlanes(operation*,System.Boolean)">
            <summary> Set the appropriate tool plane for a mill face or cross operation on a lathe. </summary>
            <param name="pOp">   If non-null, the operation to set tplane for. </param>
            <param name="force"> (Optional) true = force update even current plane is already valid. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SetRotaryOpPlanes(operation*)">
            <summary> Set the appropriate tool plane for a mill rotary axis operation. </summary>
            <param name="pOp"> If non-null, the operation to set tplane for. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.OpMillingTplane(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Get the appropriate mill tool plane based on operation X and Z axes. </summary>
            <param name="op">	    The operation to get tplane for. </param>
            <param name="relToWCS"> (Optional) view number relative to the op WCS. </param>
            <returns> A short. </returns>
        </member>
        <member name="M:CCNCMachine.OpMillingTplane(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Get the appropriate mill tool plane based on operation X and Z axes. </summary>
            <param name="op">		  The operation to get tplane for. </param>
            <param name="viewMatrix"> The tool plane view matrix. </param>
            <param name="relToWCS">   (Optional) view number relative to the op WCS. </param>
            <returns> Return INVALID as the view number, if the view isn't in the database. </returns>
        </member>
        <member name="M:CCNCMachine.OpNamedView(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return the CString corresponding to the named view for a turning, or C - axis operation. </summary>
            <param name="op"> The operation to get tplane named view for. </param>
            <returns> A CString. </returns>
        </member>
        <member name="M:CCNCMachine.SetTurningOpCplane(operation*)">
            <summary> Set the appropriate construction plane for a turning operation. </summary>
            <param name="pOp"> If non-null, the operation to set cplane for. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SetTurningOpTplane(operation*)">
            <summary> Set the appropriate tool plane for a turning operation. </summary>
            <param name="pOp"> If non-null, the operation to set tplane for. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SaveOpTView(operation*,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> The op tview "named view" is changing so save the new "named view". </summary>
            <param name="pOp">				 [in,out] If non-null, the operation to save new tool view "named view" for. </param>
            <param name="m33">				 The matrix to save in a new plane. </param>
            <param name="axisComboViewName"> The new plane name. </param>
            <param name="newPlane">			 [in,out] The new plane. </param>
            <returns> Return true if new "named view" was successfully saved. </returns>
        </member>
        <member name="M:CCNCMachine.OpTurningTplane(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Get the appropriate turning tool plane based on operation X and Z axes. </summary>
            <param name="op">		  The operation to get tplane for. </param>
            <param name="relToWCS">   (Optional) view number relative to the op WCS. </param>
            <returns> A short. </returns>
        </member>
        <member name="M:CCNCMachine.OpTurningTplane(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>  Get the appropriate turning tool plane based on operation X and Z axes. </summary>
            <param name="op">		  The operation to get tplane for. </param>
            <param name="viewMatrix"> The tool plane view matrix. </param>
            <param name="relToWCS">   (Optional) view number relative to the op WCS. </param>
            <returns> Return INVALID as the view number, if the view isn't in the database. </returns>
        </member>
        <member name="M:CCNCMachine.AxisComboTurningTplane(CAxisCombination*,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the appropriate turning tool plane based on axis combo X and Z axes. </summary>
            <param name="pAC">		  If non-null, axis combo to get tplane for. </param>
            <param name="viewMatrix"> The tool plane view matrix. </param>
            <param name="relToWCS">   The view number relative to the op WCS. </param>
            <param name="wcsMatrix">  The WCS view matrix. </param>
            <param name="wcsOrigin">  The WCS origin. </param>
            <returns> Return INVALID as the view number, if the view isn't in the database. </returns>
        </member>
        <member name="M:CCNCMachine.CAxisFaceTplaneFromComponents(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.MachineDef.Component.CLinearAxisComponent*,Cnc.MachineDef.Component.CLinearAxisComponent*,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the appropriate C-axis face op tool plane based on X and Z axis components. </summary>
            <param name="acID">		  Identifier for the axis combination to reference. </param>
            <param name="pXAxis">	  If non-null, the x coordinate axis. </param>
            <param name="pZAxis">	  If non-null, the z coordinate axis. </param>
            <param name="viewMatrix"> The tool plane view matrix. </param>
            <returns> Return INVALID as the view number, if the view isn't in the database. </returns>
        </member>
        <member name="M:CCNCMachine.TurningTplaneFromComponents(Cnc.MachineDef.Component.CLinearAxisComponent*,Cnc.MachineDef.Component.CLinearAxisComponent*,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the appropriate turning op tool plane based on X and Z axis components. </summary>
            <param name="pXAxis">	  If non-null, the x coordinate axis. </param>
            <param name="pZAxis">	  If non-null, the z coordinate axis. </param>
            <param name="viewMatrix"> The view matrix. </param>
            <returns> Return INVALID as the view number, if the view isn't in the database. </returns>
        </member>
        <member name="M:CCNCMachine.GetCompsThatUseNamedView(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineDef.Component.CMachineComponent*,System.Int16)">
            <summary> Gets comps that use named view, Return all the components that use a named view. </summary>
            <param name="comps">  The array of components that use this view. </param>
            <param name="pComp">  If non-null, the first component to check. </param>
            <param name="viewID"> named view ID. </param>
        </member>
        <member name="M:CCNCMachine.WrappedOpNamedView(System.Int16)">
            <summary> Wrapped operation named view. </summary>
            <param name="axisView"> The view number (from linear machine axes). </param>
            <returns> Return the CString corresponding to the named view for a C-Axis contour, or drill operation. </returns>
        </member>
        <member name="M:CCNCMachine.CrossOpNamedView(System.Int16)">
            <summary> Cross operation named view. </summary>
            <param name="axisView"> The view number (from linear machine axes). </param>
            <returns> Return the CString corresponding to the named view for a C-Axis cross contour, or drill operation. </returns>
        </member>
        <member name="M:CCNCMachine.FaceOpNamedView(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary> Face operation named view. </summary>
            <param name="axis_combo_id"> op axis combo. </param>
            <param name="axisView">		 The view number (from linear machine axes). </param>
            <returns> Return the CString corresponding to the named view for a C-Axis face contour, or drill operation. </returns>
        </member>
        <member name="M:CCNCMachine.TurningOpNamedView(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary> Turning operation named view. </summary>
            <param name="axis_combo_id"> op axis combo. </param>
            <param name="axisView">		 view number (from linear machine axes). </param>
            <returns> Return the CString corresponding to the named view for a turning operation. </returns>
        </member>
        <member name="M:CCNCMachine.WriteAxisCombinationsToNCI(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Write the ent_idn, UID, mapped status and name for all axis combinations to the ASCII NCI. </summary>
            <param name="fp"> open NCI file to write to. </param>
        </member>
        <member name="M:CCNCMachine.WriteComponentUIDsToNCI(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Write the ent_idn, UID, name for all components to the ASCII NCI. </summary>
            <param name="fp"> open NCI file to write to. </param>
        </member>
        <member name="M:CCNCMachine.WriteComponentUIDToNCI(Cnc.MachineDef.Component.CMachineComponent*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Write the ent_idn, UID, name for a component and all children / siblings to the ASCII NCI. </summary>
            <param name="pComp"> If non-null, component to write the information for. </param>
            <param name="fp">    open NCI file to write to. </param>
        </member>
        <member name="M:CCNCMachine.MakeAxisComboList(std.vector&lt;post_axis_combo_type,std.allocator&lt;post_axis_combo_type&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Make a list of all axis combination entities on the machine. </summary>
            <param name="axisCombos"> List of axis combinations. </param>
        </member>
        <member name="M:CCNCMachine.MakePostCircuit(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Make a post circuit of machine components (Cnc::MachineDef::Component::CMachineComponents) for the operation
		The circuit starts at the 'base most' axis in the part holding
		list, works it's way out to the part holding component, then
		works its way back towards the base along the tool storage component list. </summary>
            <param name="op">    operation to get circuit for. </param>
            <param name="comps"> ordered array of components' ent_idn's. </param>
            <returns> An int. </returns>
        </member>
        <member name="M:CCNCMachine.MakePostCircuit(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Make a post circuit of machine components (Cnc::MachineDef::Component::CMachineComponents) for the operation
		The circuit starts at the 'base most' axis in the part holding
		list, works it's way out to the part holding component, then
		works its way back towards the base along the tool storage component list. </summary>
            <param name="op">    operation to get circuit for. </param>
            <param name="comps"> ordered array of components (Cnc::MachineDef::Component::CMachineComponent). </param>
            <returns> Return number of components in list. </returns>
        </member>
        <member name="M:CCNCMachine.SetOpStreamFromAxisCombo(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set the operation's data stream from the operations axis combo and machine mode. </summary>
            <param name="op"> The operation to update. </param>
        </member>
        <member name="M:CCNCMachine.SetOpActiveTurretFromAxisCombo(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Use the operation's axis combo to define the active turret for the operation (used for mill ops in lathe). </summary>
            <param name="op"> The operation to update. </param>
        </member>
        <member name="M:CCNCMachine.SetOpActiveSpindleFromAxisCombo(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Use the operation's axis combo to define the active spindle for the operation. </summary>
            <param name="op"> The operation to update. </param>
        </member>
        <member name="M:CCNCMachine.AxisComboFromLatheToolInfo(System.Byte,System.Byte,System.Boolean)">
            <summary> Find an axis combination based on a lathe tool's active turret and spindle. </summary>
            <param name="activeSpindle"> LH_HEAD, RH_HEAD. </param>
            <param name="activeTurret">  UL_TURRET, LL_TURRET. </param>
            <param name="defaultToFirstAC"> true = If the axis combo isn't found then use the first axis combo. </param>
            <returns> null if it fails, else a CAxisCombination*. </returns>
        </member>
        <member name="M:CCNCMachine.SetOpAlternateTurretIndexPosition(System.Byte,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set/clear op.cmn.use_alt_turret_index_pos based on active spindle and
			whether or not the op's axis combination has a turret that supports an alternate index position. </summary>
            <param name="activeSpindle"> LH_HEAD, RH_HEAD. </param>
            <param name="op">			 operation to set the flag in. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.OpTurretIndexedSpindle(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operation turret indexed spindle. </summary>
            <param name="op"> operation to check turret in. </param>
            <returns> Return LH_HEAD or RH_HEAD for the spindle toward which the op's turret is indexed. </returns>
        </member>
        <member name="M:CCNCMachine.OpUsesAlternateTurretIndexPosition(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operation uses alternate turret index position. </summary>
            <param name="op"> operation to check turret in. </param>
            <returns> Return true if op.cmn.use_alt_turret_index_pos is true and the op's axis combination has a turret that supports an alternate index position. </returns>
        </member>
        <member name="M:CCNCMachine.HasAlternateIndexPositionTurret">
            <summary> Has alternate index position turret. </summary>
            <returns> Return true if the machine has a turret that supports an alternate index position. </returns>
        </member>
        <member name="M:CCNCMachine.HasAlternateIndexPositionTurret(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Has alternate index position turret. </summary>
            <param name="op"> operation to check turret in. </param>
            <returns> Return true if the op's axis combination has a turret that supports an alternate index position. </returns>
        </member>
        <member name="M:CCNCMachine.HasAlternateIndexPositionTurret(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Has alternate index position turret. </summary>
            <param name="acId"> axis combination identifier. </param>
            <returns> Return true if this axis combination has a turret that supports an alternate index position. </returns>
        </member>
        <member name="M:CCNCMachine.MapRefPtsToOp(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Map the machine reference points for the active axis combination to an operation. </summary>
            <param name="op">   operation to map information for. </param>
            <param name="idOp"> (Optional) true = this is an ID lathe operation. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.MaxToolSpindleRPM(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CAxisCombination*)">
            <summary> Maximum tool spindle rpm. </summary>
            <param name="op">  mill operation. </param>
            <param name="pAC"> (Optional) If non-null, (Optional) axis combination to get position from. </param>
            <returns> Return maximum tool spindle speed. </returns>
        </member>
        <member name="M:CCNCMachine.MaxToolSpindleRPM(System.Int32)">
            <summary> Maximum tool spindle rpm. </summary>
            <param name="toolGroup"> tool group the tool belongs to. </param>
            <returns> Return maximum tool spindle speed. </returns>
        </member>
        <member name="M:CCNCMachine.MaxToolSpindleRPM(Cnc.MachineDef.Component.CComponentGroup*)">
            <summary> Maximum tool spindle rpm. </summary>
            <param name="pGroup"> If non-null, the tool group. </param>
            <returns> Return maximum tool spindle speed. </returns>
        </member>
        <member name="M:CCNCMachine.MaxToolSpindleRPM(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*)">
            <summary> Maximum tool spindle rpm. </summary>
            <param name="pComps"> If non-null, list of components to check. </param>
            <returns> Return maximum tool spindle speed. </returns>
        </member>
        <member name="M:CCNCMachine.MinToolSpindleRPM(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CAxisCombination*)">
            <summary> Minimum tool spindle rpm. </summary>
            <param name="op">  mill operation. </param>
            <param name="pAC"> (Optional) If non-null, (Optional) axis combination to get position from. </param>
            <returns> Return minimum tool spindle speed. </returns>
        </member>
        <member name="M:CCNCMachine.MinToolSpindleRPM(System.Int32)">
            <summary> Minimum tool spindle rpm. </summary>
            <param name="toolGroup"> Group the tool belongs to. </param>
            <returns> Return minimum tool spindle speed. </returns>
        </member>
        <member name="M:CCNCMachine.MinToolSpindleRPM(Cnc.MachineDef.Component.CComponentGroup*)">
            <summary> Minimum tool spindle rpm. </summary>
            <param name="pGroup"> If non-null, tool group. </param>
            <returns> Return minimum tool spindle speed. </returns>
        </member>
        <member name="M:CCNCMachine.MinToolSpindleRPM(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*)">
            <summary> Minimum tool spindle rpm. </summary>
            <param name="pComps"> If non-null, list of components to check. </param>
            <returns>  Return minimum tool spindle speed. </returns>
        </member>
        <member name="M:CCNCMachine.MaxLatheSpindleRPM(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CAxisCombination*)">
            <summary> Maximum lathe spindle rpm. </summary>
            <param name="op">  lathe operation with active spindle flag. </param>
            <param name="pAC"> (Optional) If non-null, (Optional) axis combination to get position from. </param>
            <returns> Return maximum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.MaxLatheSpindleRPM(Cnc.Tool.LATHETOOL*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Maximum lathe spindle rpm. </summary>
            <param name="ltl"> lathe tool with active spindle flag. </param>
            <returns> Return maximum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.MaxLatheSpindleRPM(System.Int32)">
            <summary> Maximum lathe spindle rpm. </summary>
            <param name="activeSpindle"> The active spindle. </param>
            <returns> Return maximum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.MaxLatheSpindleRPM(Cnc.MachineDef.Component.CComponentGroup*)">
            <summary> Maximum lathe spindle rpm. </summary>
            <param name="pGroup"> If non-null, active spindle group. </param>
            <returns> Return maximum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.MaxLatheSpindleRPM(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*)">
            <summary> Maximum lathe spindle rpm. </summary>
            <param name="pComps"> If non-null, list of components to check. </param>
            <returns> Return maximum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.MinLatheSpindleRPM(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CAxisCombination*)">
            <summary> Minimum lathe spindle rpm. </summary>
            <param name="op">  lathe operation. </param>
            <param name="pAC"> (Optional) If non-null, (Optional) axis combination to get position from. </param>
            <returns> Return minimum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.MinLatheSpindleRPM(Cnc.Tool.LATHETOOL*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Minimum lathe spindle rpm. </summary>
            <param name="ltl"> lathe tool with active spindle flag. </param>
            <returns> Return minimum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.MinLatheSpindleRPM(System.Int32)">
            <summary> Minimum lathe spindle rpm. </summary>
            <param name="activeSpindle"> The active spindle. </param>
            <returns>  Return minimum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.MinLatheSpindleRPM(Cnc.MachineDef.Component.CComponentGroup*)">
            <summary> Minimum lathe spindle rpm. </summary>
            <param name="pGroup"> If non-null, active spindle group. </param>
            <returns> Return minimum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.MinLatheSpindleRPM(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*)">
            <summary> Minimum lathe spindle rpm. </summary>
            <param name="pComps"> If non-null, list of components to check. </param>
            <returns> Return minimum spindle speed for right or left spindle. </returns>
        </member>
        <member name="M:CCNCMachine.GetWireStartPos(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte,CAxisCombination*)">
            <summary> Get the machine axis combination wire EDM startpoint (3D) for an operation.The WCS Z coordinate is always 0. </summary>
            <param name="op">	    operation to get point for. </param>
            <param name="tcPt">	    start point. </param>
            <param name="coordsys"> (Optional) 0 = world, 1 = tplane, 2 = WCS WRT world origin. </param>
            <param name="pAC">	    (Optional) If non-null, (Optional) axis combination to get position from. </param>
            <returns> Return false, if it can't be found. </returns>
        </member>
        <member name="M:CCNCMachine.GetToolChgPos(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte,CAxisCombination*)">
            <summary> Get the machine axis combination tool change 3D point for an operation. </summary>
            <param name="op">	    operation to get point for. </param>
            <param name="tcPt">	    tool change point. </param>
            <param name="coordsys"> (Optional) 0 = world, 1 = tplane, 2 = WCS WRT world origin. </param>
            <param name="pAC">	    (Optional) If non-null, (Optional) axis combination to get position from. </param>
            <returns> Return false, if it can't be found. </returns>
        </member>
        <member name="M:CCNCMachine.GetMillToolAxisVector(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return the tool axis vector for rotary axis simulation of a milling tool
			in backplot or verify.The tool axis vector will be assumed parallel to
			the machine Z axis and thus, does NOT work for right angle heads.
			The vector returned is WRT the WCS of the operation. </summary>
            <param name="op">	   operation to check. </param>
            <param name="axisVec"> tool axis vector. </param>
            <returns> The mill tool axis vector. </returns>
        </member>
        <member name="M:CCNCMachine.RotAxisDirection(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return rotary direction of the specified rotary axis. The operation must be a milling operation with rotary axis enabled. </summary>
            <param name="op"> operation to check. </param>
            <returns> 1 for CW, -1 for CCW, 0 if not found. </returns>
        </member>
        <member name="M:CCNCMachine.RotAxisZeroAngle(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Rot axis zero angle. </summary>
            <param name="op">  operation to check. </param>
            <param name="deg"> (Optional) true = return angle in degrees. </param>
            <returns>Return "0 degree" angle of the specified rotary axis wrt 3:00 when looking 'up' the rotary axis.
		The operation must be a milling operation with rotary axis enabled. </returns>
        </member>
        <member name="M:CCNCMachine.OpRotAxis(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Operation rot axis. </summary>
            <param name="op">			   operation to check. </param>
            <param name="includeYAxisOps"> (Optional) return true if Y axis toolpath. </param>
            <returns> Return the rotary axis component for an 'axis substitution' type operation. </returns>
        </member>
        <member name="M:CCNCMachine.IsCAxisLathe(System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*)">
            <summary> true if this lathe with 'C' axis in the op axis combination
			The 'C' axis is assumed to rotate about the WCS X axis, as this is the lathe NC Z axis
			If pOp = nullptr, check the entire machine </summary>
            <param name="isContinuous"> true is the axis can be interpolated. </param>
            <param name="pOp">		    (Optional) If non-null, (Optional) operation to checkaxis combinations for. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.IsXYZAxisLathe(operation*)">
            <summary> Is xyz axis lathe. </summary>
            <param name="pOp">    (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return true if this lathe with X,Y,Z axes in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.HasZRotaryAxis(operation*)">
            <summary> Has z coordinate rotary axis. </summary>
            <param name="pOp">    (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return true if there is an Z/-Z rotary axis in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.HasZLinearAxis(operation*)">
            <summary> Has z coordinate linear axis. </summary>
            <param name="pOp">    (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return true if there is an Z/-Z linear axis in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.HasYRotaryAxis(operation*)">
            <summary> Has y coordinate rotary axis. </summary>
            <param name="pOp">    (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return true if there is an Y/-Y rotary axis in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.HasYLinearAxis(operation*)">
            <summary> Has y coordinate linear axis. </summary>
            <param name="pOp">    (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return true if there is an Y/-Y linear axis in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.HasXRotaryAxis(operation*)">
            <summary> Has x coordinate rotary axis. </summary>
            <param name="pOp">    (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return true if there is an X/-X rotary axis in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.HasXLinearAxis(operation*)">
            <summary> Has x coordinate linear axis. </summary>
            <param name="pOp">    (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return true if there is an X/-X linear axis in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.RotaryAxis(System.Int32,operation*)">
            <summary> Rotary axis. </summary>
            <param name="axisID"> Machine (WCS) axis to get. </param>
            <param name="pOp">    (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return the requested rotary axis in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.LinearAxis(System.Int32,operation*)">
            <summary> Linear axis. </summary>
            <param name="axisID"> Machine (WCS) axis to get. </param>
            <param name="pOp">    (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return the requested linear axis in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.NumRotaryAxes(operation*,System.Boolean)">
            <summary> Number rotary axes. </summary>
            <param name="pOp">			   (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <param name="includeAggHeads"> (Optional) include aggregate heads as rotary axes. </param>
            <returns> Return number of rotary axes on machine in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.NumLinearAxes(operation*)">
            <summary> Number linear axes. </summary>
            <param name="pOp"> (Optional) If non-null, (Optional) operation to check axis combinations for. </param>
            <returns> Return number of linear axes on machine in the op axis combination. If pOp = nullptr, check the entire machine. </returns>
        </member>
        <member name="M:CCNCMachine.FindComponentsByType(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Find all occurrences of components on the machine by component type. </summary>
            <param name="comps">	 Matching components found. </param>
            <param name="startType"> First type to check. </param>
            <param name="endType">   (Optional) Last component type to check. </param>
            <param name="p1stComp">  (Optional) If non-null, (Optional) first component in machine tree to try. </param>
        </member>
        <member name="M:CCNCMachine.TurretGroupName(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Turret group name. </summary>
            <param name="op"> operation to check. </param>
            <returns> Return name of turret sub-ass'y for operation. </returns>
        </member>
        <member name="M:CCNCMachine.SpindleGroupName(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Spindle group name. </summary>
            <param name="op"> operation to check. </param>
            <returns> Return name of spindle sub-ass'y for operation. </returns>
        </member>
        <member name="M:CCNCMachine.OpCanBeProgrammed(System.Int16)">
            <summary> Operation can be programmed. </summary>
            <param name="opcode"> operation to check. </param>
            <returns> Return true if the operation can be programmed on this machine based on opcode and number of machine axes. </returns>
        </member>
        <member name="M:CCNCMachine.DroppedOpCompatibility(IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CMachineOpCompatibility*)">
            <summary> Return on of the following machine / operation compatibility flags.
			The worst case flag for all of the operations will be returned. </summary>
            <param name="op_idns">		 op_idns to check. </param>
            <param name="grp_idns">		 ops' original toolpath groups. </param>
            <param name="pMachOpCompat"> (Optional) If non-null, (Optional) compatibility data. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.PastedOpCompatibility(std.vector&lt;operation,std.allocator&lt;operation&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CMachineOpCompatibility*,System.Boolean)">
            <summary> Return on of the following machine / operation compatibility flags.
			The worst case flag for all of the operations will be returned. </summary>
            <param name="ops">			 operations to check. </param>
            <param name="grp_idns">		 ops' original toolpath groups. </param>
            <param name="pMachOpCompat"> (Optional) If non-null, (Optional) compatibility data. </param>
            <param name="compareGroups"> (Optional) check to see if machine is for ops' group. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.TpGroupCompatibility(op_group*,CMachineOpCompatibility*)">
            <summary> Return one of the following machine / operation compatibility flags:
		NOT_COMPATIBLE - machine can't cut (all of) the operation(s)
		AXES_INCOMPATIBLE - machine doesn't have appropriate axes for the op(s)
		EDITING_REQUIRED - editing of (some) operation (s) is req'd for machine
		REGEN_REQUIRED - regen is required for (some of) the operation (s)
		COMPATIBLE - machine can cut (all of) the operation (s)
		The worst case flag for all of the operations in the group will be returned. </summary>
            <param name="pTpGroup">		 If non-null, group to check. </param>
            <param name="pMachOpCompat"> (Optional) If non-null, (Optional) compatibility data. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.AxisCombinationsFromOpType(System.Int16,std.vector&lt;CAxisCombination**,std.allocator&lt;CAxisCombination**&gt;&gt;*)">
            <summary> Get all of the axis combinations compatible with an operation based on opcode alone. </summary>
            <param name="opcode">	   operation type to check. </param>
            <param name="pAxisCombos"> (Optional) If non-null, axis combinations found. </param>
            <returns> Return number found. </returns>
        </member>
        <member name="M:CCNCMachine.AllAxisCombosBelongToMachModes">
            <summary> See if all axis combinations belong to at least one machining mode, if machining modes are used. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.HasValidAxisCombination">
            <summary> See if there is an axis combination to perform the simplest operation for this type of machine. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.AxisCombinationFromOpType(System.Int16)">
            <summary> Find an axis combination with enough axes for the operation based on opcode alone. </summary>
            <param name="opcode"> operation type to check. </param>
            <returns> null if it fails, else a CAxisCombination*. </returns>
        </member>
        <member name="M:CCNCMachine.EnoughAxesForOpType(System.Int16,CAxisCombination**)">
            <summary> Enough axes for operation type. </summary>
            <param name="opcode">	  operation type to check. </param>
            <param name="pAxisCombo"> (Optional) If non-null, (Optional) pointer to valid axis combination. </param>
            <returns> Return true if there are enough axes in one of the axis combinations to generate the desired operation typeL. </returns>
        </member>
        <member name="M:CCNCMachine.CompatibleAxisCombination(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Determine if the operation's axis combination is compatible with one of the machine axis combination. </summary>
            <param name="op">	  operation to check. </param>
            <param name="compat"> operation compatibility. </param>
            <param name="pData">  (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns>Return a pointer to the axis combination that is, or nullptr if none is found. </returns>
        </member>
        <member name="M:CCNCMachine.OpcodeIsValid(System.Int16,CCompatibilityData*)">
            <summary>  Quick check of the opcode against the machine type eg.to prevent a wire op from being dropped on a lathe. </summary>
            <param name="opcode"> operation type to check. </param>
            <param name="pData">  (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.FixOpRotAxes(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize an operation's parameters based on machine's rotary axis capabilities. </summary>
            <param name="op"> operation to fix. </param>
            <returns> Return true if fixed, false if not, INVALID, if it can't be fixed. </returns>
        </member>
        <member name="M:CCNCMachine.FixMultiAxRotAxes(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*,System.Int16,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Fix rotary axis setting for multi-axis operations. </summary>
            <param name="op">		 operation to fix. </param>
            <param name="hasRotAx">  true/false for presence of rot axes. </param>
            <param name="dfltRotAx"> default rotary axis to use. </param>
            <param name="outputFmt"> 0 = 3 axis, 1 = 4 axis, 2 = 5 axis. </param>
            <param name="f4thAxis">  X, Y, Z 4th rotary axis. </param>
            <returns> Return true if fixed, false if not, INVALID, if it can't be fixed. </returns>
        </member>
        <member name="M:CCNCMachine.ValidateOpAxisCombination(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find a valid axis combination, if one exists and assign it to an operation. </summary>
            <param name="op"> operation to validate. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.EnoughMachineAxes(System.Int16,System.Int32*,CCompatibilityData*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Test a machine_axis_data array for a specific opcode. </summary>
            <param name="opcode"> operation type to check. </param>
            <param name="axes">   array of defined axes. </param>
            <param name="pData">  (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <param name="acId">   (Optional) axis combination Id. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.AxesTo_machine_axis_data(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*)">
            <summary> Set the X,Y,Z,A,B,C_AXIS entries a machine_axis_data array according
			to whether or not the axes are present in an array of axis components </summary>
            <param name="comps"> axis components. </param>
            <param name="axes">  array of defined axes. </param>
        </member>
        <member name="M:CCNCMachine.GetAxisComponents(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Return array of all linear and/or rotary axis components. </summary>
            <param name="comps">	 pointers to axis components. </param>
            <param name="incLinear"> (Optional) include linear axes. </param>
            <param name="incRotary"> (Optional) include rotary axes. </param>
        </member>
        <member name="M:CCNCMachine.AllAxisGeometryIsDefined">
            <summary> Determine if geometry has been defined for the machine axes.
If geometry hasn't been defined for any axis, it's assumed that the machine hasn't been set up for simulation. If this is true, the MDI
	button won't be shown in the stock, chuck, chuck jaws, tailstock, tailstock centre or steady rest component dialogs. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.GetAxisComponents(System.Int32,System.Int32,std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean)">
            <summary> Return array of axis component(s) for input tool storage and part holding groups. </summary>
            <param name="toolGroup">	  tool storage group to check. </param>
            <param name="partGroup">	  part holding group to check. </param>
            <param name="comps">		  pointers to axis components. </param>
            <param name="axis">			  (Optional) FIXED(ALL), X,Y,Z,A,B,C, (_AXIS). </param>
            <param name="tryOppositeDir"> (Optional) true = try negative of axis, if not found (for WCS axes). </param>
            <param name="useMachineAxis"> (Optional) true = search for component with matching machine axis
										false[default] = search for matching WCS axis. </param>
        </member>
        <member name="M:CCNCMachine.ActiveSteadyRest">
            <summary> Return a pointer to the steady rest component for the active lathe spindle. </summary>
            <returns> null if it fails, else a CSteadyRestComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.ActiveLatheCenter">
            <summary> Return a pointer to the lathe center component for the active lathe spindle. </summary>
            <returns> null if it fails, else a CLatheCenterComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.ActiveTailstock">
            <summary> Return a pointer to the tailstock component for the active lathe spindle. </summary>
            <returns> null if it fails, else a CTailstockComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.ActiveChuckJaws(System.Byte)">
            <summary>Return a pointer to the chuck jaws component for the active lathe spindle. </summary>
            <param name="activeSpdl"> LH_HEAD or RH_HEAD. </param>
            <returns> null if it fails, else a CChuckJawsComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.ActiveChuck(System.Byte)">
            <summary> Return a pointer to the chuck component for the active lathe spindle. </summary>
            <param name="activeSpdl"> LH_HEAD or RH_HEAD. </param>
            <returns> null if it fails, else a CChuckComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.ActiveStock(System.Byte)">
            <summary> Return a pointer to the stock component for the active lathe spindle. </summary>
            <param name="activeSpdl"> LH_HEAD or RH_HEAD. </param>
            <returns> null if it fails, else a CStockComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.ActiveSpindle(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return either LH_HEAD, RH_HEAD, or INVALID based on location of a component on the machine. </summary>
            <param name="id"> unique component id. </param>
            <returns> A short. </returns>
        </member>
        <member name="M:CCNCMachine.ActiveSpindle(Cnc.MachineDef.Component.CMachineComponent!System.Runtime.CompilerServices.IsConst*)">
            <summary> Return either LH_HEAD, RH_HEAD, or INVALID based on location of a component on the machine. </summary>
            <param name="pComp"> If non-null, component to test. </param>
            <returns> A short. </returns>
        </member>
        <member name="M:CCNCMachine.ActiveSpindle(Cnc.MachineDef.Component.CComponentGroup!System.Runtime.CompilerServices.IsConst*)">
            <summary> Return either LH_HEAD, RH_HEAD, or INVALID based on location of a component group on the machine. </summary>
            <param name="pSpdlGrp"> If non-null, component group to test. </param>
            <returns> A short. </returns>
        </member>
        <member name="M:CCNCMachine.ActiveComp(System.Int32,System.Int16)">
            <summary> Active component. </summary>
            <param name="compType">   Type of the component. </param>
            <param name="activeSpdl"> (Optional) INVALID, LH_HEAD or RH_HEAD. </param>
            <returns> Return a pointer to the component for the active lathe spindle.
			Return the first component found if activeSpdl = INVALID. </returns>
        </member>
        <member name="M:CCNCMachine.FindComponentByID(System.Byte(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N24])">
            <summary> Searches for the first component by identifier. </summary>
            <param name="id"> unique component id. </param>
            <returns> Return the component with the specified unique ID. </returns>
        </member>
        <member name="M:CCNCMachine.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for the first component by identifier. </summary>
            <param name="id"> unique component idr. </param>
            <returns> Return the component with the specified unique ID. </returns>
        </member>
        <member name="M:CCNCMachine.SteadyRest(Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)">
            <summary> Steady Rest. </summary>
            <param name="p1stGroup"> If non-null, first group at which to start search. </param>
            <param name="checkComp"> (Optional) make sure group has a steady rest component. </param>
            <returns> Return pointer to steady rest group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.Tailstock(Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)">
            <summary> Tailstock. </summary>
            <param name="p1stGroup"> If non-null, first group at which to start search. </param>
            <param name="checkComp"> (Optional) make sure group has a tailstock component. </param>
            <returns> Return pointer to tailstock group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.RightSpindleDefault(System.Boolean)">
            <summary> Right spindle default. </summary>
            <param name="checkComp"> (Optional) make sure group has a part holding component. </param>
            <returns> Return pointer to right spindle group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.LeftSpindleDefault(System.Boolean)">
            <summary> Left spindle default. </summary>
            <param name="checkComp"> (Optional) make sure group has a part holding component. </param>
            <returns> Return pointer to left spindle group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.RightSpindle(System.Boolean)">
            <summary> Right spindle. </summary>
            <param name="checkComp"> (Optional) make sure group has a part holding component. </param>
            <returns> Return pointer to right spindle group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.LeftSpindle(System.Boolean)">
            <summary> Left spindle. </summary>
            <param name="checkComp"> (Optional) make sure group has a part holding component. </param>
            <returns> Return pointer to left spindle group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.FixedTools(System.Boolean)">
            <summary> Fixed tools. </summary>
            <param name="checkComp"> (Optional) make sure group has a tool storage component. </param>
            <returns> Return pointer to fixed tooling group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.LRTools(System.Boolean)">
            <summary> LR tools. </summary>
            <param name="checkComp"> (Optional) make sure group has a tool storage component. </param>
            <returns> Return pointer to lower right turret group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.LLTools(System.Boolean)">
            <summary> LL tools. </summary>
            <param name="checkComp"> (Optional) make sure group has a tool storage component. </param>
            <returns> Return pointer to lower left turret group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.URTools(System.Boolean)">
            <summary> UR tools. </summary>
            <param name="checkComp"> (Optional) make sure group has a tool storage component. </param>
            <returns> Return pointer to upper right turret group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.ULTools(System.Boolean)">
            <summary> UL tools. </summary>
            <param name="checkComp"> (Optional) make sure group has a tool storage component. </param>
            <returns> Return pointer to upper left tools group, or nullptr if non-existent. </returns>
        </member>
        <member name="M:CCNCMachine.ToolingGroup(System.Int32,System.Boolean)">
            <summary> Tooling group. </summary>
            <param name="groupType"> tooling group type. </param>
            <param name="checkComp"> (Optional) make sure group has a tooling component. </param>
            <returns> Return pointer to appropriate misc. tooling group. </returns>
        </member>
        <member name="M:CCNCMachine.ToolStorageGroup(System.Int32,System.Boolean)">
            <summary> Tool storage group. </summary>
            <param name="groupType"> tool storage group type. </param>
            <param name="checkComp"> (Optional) make sure group has a tool storage component. </param>
            <returns> Return pointer to appropriate tool storage group. </returns>
        </member>
        <member name="M:CCNCMachine.PartHoldingGroup(System.Int32,System.Boolean)">
            <summary> Part holding group. </summary>
            <param name="groupType"> part holding group type. </param>
            <param name="checkComp"> (Optional) make sure group has a part holding component. </param>
            <returns> Return pointer to appropriate part holding group. </returns>
        </member>
        <member name="M:CCNCMachine.ValidateCoolant(System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*)">
            <summary> Validate coolant settings against the machine. Return true, if the settings were changed. </summary>
            <param name="coolant"> pre-X coolant value. </param>
            <param name="cantxt">  If non-null, X canned text values. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.AllOpToolsAreSetup(System.Boolean)">
            <summary> Return true, if all of the machine group's tools have been setup on the machine as machine components. </summary>
            <param name="selectedOnly"> (Optional) true = test selected operations only. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.OpToolComponent(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Return the tool component used in this operation
			Return nullptr, if the operation's tool hasn't been set up. </summary>
            <param name="op_idn"> id of operation to check. </param>
            <returns> null if it fails, else a CToolComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.OpToolComponent(op_list*)">
            <summary> Return the tool component used in this operation
			Return nullptr, if the operation's tool hasn't been set up. </summary>
            <param name="op"> operation to check. </param>
            <returns> null if it fails, else a CToolComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.OpToolComponent(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return the tool component used in this operation
			Return nullptr, if the operation's tool hasn't been set up. </summary>
            <param name="op"> operation to check. </param>
            <returns> null if it fails, else a CToolComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.FindToolComponent(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Return the tool component that uses the tool with the matching ent_idn. </summary>
            <param name="ent_idn"> ID of tool entity. </param>
            <returns> null if it fails, else the found tool component. </returns>
        </member>
        <member name="M:CCNCMachine.ImportOpCompatibility(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*)">
            <summary> Return on of the following machine / operation compatibiltiy flags.
			Use this to filter list of operation to be imported from a library - other file. </summary>
            <param name="op">			 operation to check. </param>
            <param name="pData">		 (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.FixOpAxisComboIDs">
            <summary> Fix invalid op axis combo id's in the event they get trashed with a best guess from op active spindle and turret. </summary>
        </member>
        <member name="M:CCNCMachine.OpCompatibilityCompareMachines(CCNCMachine*,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*,System.Boolean)">
            <summary> Purpose: Return on of the following machine / operation compatibiltiy flags.
		    Use this to check operations when switching the group machine or copying operations between machine groups. </summary>
            <param name="pGroupMachine"> If non-null, the group machine. </param>
            <param name="op">			 operation to check. </param>
            <param name="pData">		 (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <param name="compareGroups"> (Optional) check to see if machine is for ops' group. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.OpCompatibility(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCompatibilityData*,System.Boolean)">
            <summary> Purpose: Return on of the following machine / operation compatibiltiy flags.
		    Use this to check operations within the Current Machine. </summary>
            <param name="op">			 operation to check. </param>
            <param name="pData">		 (Optional) If non-null, (Optional) compatibility data to fill in. </param>
            <param name="compareGroups"> (Optional) check to see if machine is for ops' group. </param>
            <returns> Compatibilty level for operation. </returns>
        </member>
        <member name="M:CCNCMachine.AddMachiningMode(CMachiningMode*)">
            <summary> Add an machining mode to the list. </summary>
            <param name="pMMode"> If non-null, machining mode to add. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DeleteMachiningModes(System.Boolean)">
            <summary> Delete machining mode objects. </summary>
            <param name="deleteEnts"> (Optional) delete associated entities also. </param>
        </member>
        <member name="M:CCNCMachine.DeleteMachiningModeFromID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Delete a single machining mode from the list based on index in the list. </summary>
            <param name="idx">		  index of machining mode to read. </param>
            <param name="deleteEnts"> (Optional) delete associated entities also. </param>
        </member>
        <member name="M:CCNCMachine.DeleteMachiningModeFromIndex(System.Int32,System.Boolean)">
            <summary> Delete a single machining mode from the list based on index in the list. </summary>
            <param name="idx">		  index of machining mode to read. </param>
            <param name="deleteEnts"> (Optional) delete associated entities also. </param>
        </member>
        <member name="M:CCNCMachine.SaveMachiningMode_ent_idns">
            <summary> Save ent_idns for all machining modes </summary>
        </member>
        <member name="M:CCNCMachine.InitMachiningMode_ent_idns">
            <summary> Initialize ent_idns for all machining modes </summary>
        </member>
        <member name="M:CCNCMachine.GetDefinedStreamIndices(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Get an array of data stream indices/channels used on the machine. </summary>
            <param name="streamIndexes">   	array of defined stream indices. </param>
            <param name="zeroBasedIndexes">	true add indexes as zero-based indexes, false add indezes starting from 1. </param>
        </member>
        <member name="M:CCNCMachine.StreamIndexFromOp(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Stream index from operation. </summary>
            <param name="op"> operation to check. </param>
            <returns> the data stream index (or channel) for a given operation. Return INVALID, if it can't be found. </returns>
        </member>
        <member name="M:CCNCMachine.StreamInfoFromMachModeAndAxisCombo(CMachiningMode*,CAxisCombination*)">
            <summary> Stream information from mach mode and axis combo. </summary>
            <param name="pMMode"> If non-null, pointer to machining mode to match. </param>
            <param name="pAC">    If non-null, pointer to axis combination to match </param>
            <returns> the data stream information for a given machining mode / axis combination </returns>
        </member>
        <member name="M:CCNCMachine.MachiningModeFromAxisCombo(CAxisCombination*)">
            <summary> Machining mode from axis combo. </summary>
            <param name="pAC">    If non-null, pointer to axis combination to match </param>
            <returns> a pointer to the first machining mode containing a specific axis combination.Return nullptr if not found. </returns>
        </member>
        <member name="M:CCNCMachine.FindMachiningModesWithAxisCombo(CAxisCombination*,std.vector&lt;CMachiningMode**,std.allocator&lt;CMachiningMode**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for the first machining modes with axis combo. </summary>
            <param name="pAC">    If non-null, pointer to axis combination to match </param>
            <param name="mModes"> If non-null, array of machining modes. </param>
        </member>
        <member name="M:CCNCMachine.MachiningModeFromCode(System.Int32)">
            <summary> Machining mode from code. </summary>
            <param name="code"> code to match on. </param>
            <returns> a pointer to a specific machining mode based on its code.Return nullptr if not found. </returns>
        </member>
        <member name="M:CCNCMachine.MachModeIndexFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Mach mode index from UID. </summary>
            <param name="uid"> unique machining mode identifier. </param>
            <returns> the index of a specific machining mode based on its UNIQUE identifier.Return INVALID if not found. </returns>
        </member>
        <member name="M:CCNCMachine.MachiningModeFromID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Machining mode from identifier. </summary>
            <param name="id"> ent_idn machining mode identifier. </param>
            <returns> a pointer to a specific machining mode based on its identifier.Return nullptr if not found. </returns>
        </member>
        <member name="M:CCNCMachine.MachModeIndexFromID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Mach mode index from identifier. </summary>
            <param name="id"> ent_idn machining mode identifier. </param>
            <returns> the index of a specific machining mode based on its identifier.Return INVALID if not found. </returns>
        </member>
        <member name="M:CCNCMachine.MachiningModeFromIndex(System.Int32)">
            <summary> Machining mode from index. </summary>
            <param name="idx"> index of machining mode to read. </param>
            <returns> a pointer to a specific machining mode based on it's index in the array. Return nullptr if not found. </returns>
        </member>
        <member name="M:CCNCMachine.NumMachiningModes">
            <summary> Return the number of machining modes defined. </summary>
            <returns> The total number of machining modes. </returns>
        </member>
        <member name="M:CCNCMachine.MakeDefaultAxisCombination">
            <summary> Make a default axis combination for the machine, if none exist.The machine must hsve a tool and part holding component group for this to work </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.AddAxisCombination(CAxisCombination*)">
            <summary> Add an axis combination to the list </summary>
            <param name="pAxisCombo"> If non-null, axis combination to add. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DeleteAxisCombinations(System.Boolean)">
            <summary> Delete axis combination objects </summary>
            <param name="deleteEnts"> (Optional) delete associated entities also. </param>
        </member>
        <member name="M:CCNCMachine.DeleteAxisCombinationFromID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Delete a single axis combination from the list based on index in the list </summary>
            <param name="id">		  unique axis combination identifier. </param>
            <param name="deleteEnts"> (Optional) delete associated entities also. </param>
        </member>
        <member name="M:CCNCMachine.DeleteAxisCombinationFromIndex(System.Int32,System.Boolean)">
            <summary> Delete a single axis combination from the list based on index in the list </summary>
            <param name="idx">		  index of axis combination to read. </param>
            <param name="deleteEnts"> (Optional) delete associated entities also. </param>
        </member>
        <member name="M:CCNCMachine.SaveAxisCombination_ent_idns">
            <summary> Save ent_idns for all axis combinations </summary>
        </member>
        <member name="M:CCNCMachine.InitAxisCombination_ent_idns">
            <summary> Initialize ent_idns for all axis combinations </summary>
        </member>
        <member name="M:CCNCMachine.GetAxisInfoFromAxisId(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets axis information from axis identifier. </summary>
            <param name="axisId">	   ent_idn of axis component. </param>
            <param name="axisComboId"> ent_idn of axis combo with this axis (0 = none). </param>
            <param name="incLabel">    true = incremental, false = absolute axis label. </param>
            <param name="axisLabel">   incremental or absolute axis label. </param>
            <returns> WCS axis of input axis axis, or INVALID (-1) if not found also return the ent_idn of the first axis combination that uses
				this axis and the appropriate axis label. </returns>
        </member>
        <member name="M:CCNCMachine.GetAxisInfoFromAxisId(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets axis information from axis identifier. </summary>
            <param name="axisId">    ent_idn of axis component. </param>
            <param name="incLabel">  true = incremental, false = absolute axis label. </param>
            <param name="axisLabel"> incremental or absolute axis label. </param>
            <returns> WCS axis of input axis axis, or INVALID (-1) if not found also return the appropriate axis label. </returns>
        </member>
        <member name="M:CCNCMachine.GetDiameterOutputFromAxisId(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets diameter output from axis identifier. </summary>
            <param name="axisId"> ent_idn of axis component. </param>
            <returns>true if output is diameter</returns>
        </member>
        <member name="M:CCNCMachine.GetRotaryCwOutputFromAxisId(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets rotary cw output from axis identifier. </summary>
            <param name="axisId"> ent_idn of axis component. </param>
            <returns> true if CW rotary. </returns>
        </member>
        <member name="M:CCNCMachine.GetRotaryOutputFromAxisId(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets rotary output from axis identifier. </summary>
            <param name="axisId"> ent_idn of axis component. </param>
            <returns> Return value for rotary output form : -1 = not valid, 0 = continuous, 1 = signed direction 0 - 360, 2 = short distance 0 - 360. </returns>
        </member>
        <member name="M:CCNCMachine.SetMachinePositions(MachinePositionList!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Define the list of machine positions </summary>
            <param name="refPosList"> machine position list. </param>
        </member>
        <member name="M:CCNCMachine.GetMachinePositions">
            <summary> Return the list of machine positions. </summary>
            <returns> The machine positions. </returns>
        </member>
        <member name="M:CCNCMachine.AddMachinePosition(MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Add a machine reference position. </summary>
            <param name="machPos"> machine position list </param>
            <returns> A DWORD_PTR. </returns>
        </member>
        <member name="M:CCNCMachine.GetMachinePosition(System.Byte!System.Runtime.CompilerServices.IsConst(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N24],MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return a specific machine position. </summary>
            <param name="uid">	   The UID. </param>
            <param name="machPos"> The mach position. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CCNCMachine.AxisComboIdFromAxisId(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return WCS axis of input axis axis, or INVALID (-1) if not found also return the ent_idn of the first axis combination that uses
				this axis and the appropriate axis label. </summary>
            <param name="axisId">	   ent_idn of axis component. </param>
            <param name="axisComboId"> ent_idn of axis combo with this axis (0 = none) </param>
            <returns> The eComponentAxes. </returns>
        </member>
        <member name="M:CCNCMachine.AxisCombinationsFromComponent(Cnc.MachineDef.Component.CMachineComponent*,System.Boolean,System.Boolean,std.vector&lt;CAxisCombination**,std.allocator&lt;CAxisCombination**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find all of the axis combinations that contain a specific component. </summary>
            <param name="pComp">		  If non-null, machine component to search for. </param>
            <param name="searchUnMapped"> search un-mapped axis combinations. </param>
            <param name="searchMapped">   search mapped axis combinations </param>
            <param name="acs">			  If non-null, list of axis combinations. </param>
        </member>
        <member name="M:CCNCMachine.GetAxisCombinationsFromStreamChannel(System.Int32!System.Runtime.CompilerServices.IsConst,std.vector&lt;CAxisCombination**,std.allocator&lt;CAxisCombination**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return a list of axis combinations that use the input 1-based stream channel. </summary>
            <param name="channel">    1-based index (axis combo stream index + 1). </param>
            <param name="axisCombos"> list of axis combinations found. </param>
        </member>
        <member name="M:CCNCMachine.AxisCombinationFromStreamChannel(System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Return the index of a specific axis combination based on its 1 - based stream channel </summary>
            <param name="channel"> 1-based index (axis combo stream index + 1). </param>
            <param name="allownullptr"> (Optional) false = if no axis combo is found from the channel then return the first axis combo. </param>
            <returns> null if it fails, else a CAxisCombination*. </returns>
        </member>
        <member name="M:CCNCMachine.AxisComboIndexFromStreamChannel(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Return the index of a specific axis combination based on its 1 - based stream channel </summary>
            <param name="channel"> 1-based index (axis combo stream index + 1). </param>
            <returns> An int. </returns>
        </member>
        <member name="M:CCNCMachine.AxisCombinationFromUID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Return a pointer to a specific axis combination based on its UNIQUE identifier. </summary>
            <param name="uid">		 unique axis combination identifier. </param>
            <param name="allownullptr"> (Optional) false = if no axis combo is found from the id number then return the first axis combo. </param>
            <returns> null if it fails, else a CAxisCombination*. </returns>
        </member>
        <member name="M:CCNCMachine.AxisComboIndexFromUID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return the index of a specific axis combination based on its UNIQUE identifier.Return INVALID if not found. </summary>
            <param name="uid"> unique axis combination identifier. </param>
            <returns> An int. </returns>
        </member>
        <member name="M:CCNCMachine.AxisCombinationFromID(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Return a pointer to a specific axis combination based on its identifier. </summary>
            <param name="id">		 ent_idn axis combination identifier. </param>
            <param name="allownullptr"> (Optional) false = if no axis combo is found from the id number then return the first axis combo. </param>
            <returns> null if it fails, else a CAxisCombination*. </returns>
        </member>
        <member name="M:CCNCMachine.AxisComboIndexFromID(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Return the index of a specific axis combination based on its identifier.Return INVALID if not found. </summary>
            <param name="id"> Tent_idn axis combination identifier. </param>
            <returns> An int. </returns>
        </member>
        <member name="M:CCNCMachine.AxisCombinationFromIndex(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Return a pointer to a specific axis combination based on it's index in the array. Return nullptr if not found. </summary>
            <param name="idx"> index of axis combination to read. </param>
            <returns> null if it fails, else a CAxisCombination*. </returns>
        </member>
        <member name="M:CCNCMachine.NumAxisCombinations">
            <summary> Return the number of axis combinations defined. </summary>
            <returns> The total number of axis combinations. </returns>
        </member>
        <member name="M:CCNCMachine.StreamChannelFromMachModeAndAxisID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Return the stream channel # for a machining mode containing a given axis </summary>
            <param name="axisId">	  axis ID. </param>
            <param name="machModeId"> machining mode that contains the axis. </param>
            <returns> INVALID, if not the axis or stream can't be found </returns>
        </member>
        <member name="M:CCNCMachine.DataStreams_ent_idn">
            <summary> Return the ent_idn of the stream names entity </summary>
            <returns> A long&amp; </returns>
        </member>
        <member name="M:CCNCMachine.CreateAndAttachTailstockCenterToolComponent(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates and attach tailstock center tool component. </summary>
            <param name="toolDbEntity"> The tool database entity. </param>
            <param name="errorCode">    The error code. </param>
            <returns> null if it fails, else the new and attach tailstock center tool component. </returns>
        </member>
        <member name="M:CCNCMachine.SetToolOrientService(Cnc.MachineDef.Component.CToolComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineDef.Component.CMachineComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets tool orient service for a tool component. </summary>
            <param name="toolComp">		The tool component. </param>
            <param name="parentComp">   The parent component. </param>
            <param name="toolDbEntity"> The tool database entity. </param>
        </member>
        <member name="M:CCNCMachine.MtParseRefPosName(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given an mt reference position name, extract the separate pieces. </summary>
            <param name="name">		  mt reference position name. </param>
            <param name="type">		  type (0 = unknown, 1 = ref position, 2 = home position). </param>
            <param name="stream_id">  data stream. </param>
            <param name="postString"> post string recognized by the post. </param>
            <param name="userString"> user string customizable for language translation. </param>
        </member>
        <member name="M:CCNCMachine.GetPassword(CWnd*)">
            <summary> Get a new password, or disable the password </summary>
            <param name="pParent"> (Optional) If non-null, (Optional) the parent. </param>
        </member>
        <member name="M:CCNCMachine.UnlockDb(CWnd*)">
            <summary> (Attempt to) unlock the machine definition so it can be saved to the database </summary>
            <param name="pParent"> (Optional) If non-null, (Optional) the parent. </param>
        </member>
        <member name="M:CCNCMachine.IsPasswordProtected">
            <summary> Is this machine password protected </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DecodePassword(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Decode the password into the cnc_machine entity </summary>
            <param name="password"> The password. </param>
            <param name="level">    The level. </param>
        </member>
        <member name="M:CCNCMachine.EncodePassword(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
            <summary> Encode the password into the cnc_machine entity </summary>
            <param name="password"> The password. </param>
            <param name="level">    The level. </param>
        </member>
        <member name="M:CCNCMachine.EditStreamNames(CWnd*)">
            <summary> Edit the data stream names </summary>
            <param name="pParentWnd"> (Optional) If non-null, (Optional) the parent window. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.GetMachiningMode(CMachiningMode**,CWnd*)">
            <summary>Get a machining mode and macros in the MT Manager. </summary>
            <param name="pMMode">	  If non-null, selected machining mode. </param>
            <param name="pParentWnd"> (Optional) If non-null, (Optional) the parent window. </param>
            <returns> The machining mode. </returns>
        </member>
        <member name="M:CCNCMachine.EditMachiningModes(std.vector&lt;CMachiningMode**,std.allocator&lt;CMachiningMode**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Edit the machining modes
			This does NOT immediately save the machining modes back to the
				the machine.The members of machModes, must be saved to the
				machine by the calling module.If they are not saved, the
				CMachiningMode objects in the array should be freed using
				delete </summary>
            <param name="machModes">  If non-null, modifiable list of machining modes. </param>
            <param name="pParentWnd"> (Optional) If non-null, (Optional) the parent window. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.GetAxisCombination(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Gets axis combination. </summary>
            <param name="op">		  operation to get axis combo for. </param>
            <param name="pParentWnd"> (Optional) If non-null, (Optional) the parent window. </param>
            <returns> The axis combination. </returns>
        </member>
        <member name="M:CCNCMachine.EditReferencePositions(CWnd*)">
            <summary> Edit reference positions. </summary>
            <param name="pParentWnd"> (Optional) If non-null, (Optional) the parent window. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.MCSolidMenuDisplay(CWnd*,System.Boolean,Cnc.MachineDef.Component.CMachineComponent*,System.Boolean)">
            <summary> Display the machine, or a sub-assembly using Mastercam solids display a menu for user passing nullptr, 
			causes the entire machine to be drawn </summary>
            <param name="pDlg">		     (Optional) If non-null, (Optional) owner dialog, null for none </param>
            <param name="manageLevels">  (Optional) false = machine level managed by calling fnc. </param>
            <param name="p1stComp">	     (Optional) If non-null, (Optional) 1st component to display.  If null then start at machine base component.</param>
            <param name="drawChildren">	 (Optional) traverse and display all children (default = true).</param>
        </member>
        <member name="M:CCNCMachine.MCSolidDisplay(Cnc.MachineDef.Component.CMachineComponent*,System.Boolean)">
            <summary> Display the machine, or a sub-assembly using Mastercam solids passing nullptr, causes the entire machine to be drawn </summary>
            <param name="p1stComp"> (Optional) If non-null, (Optional) 1st component to display. </param>
            <param name="drawChildren">	 (Optional) traverse and display all children (default = true).</param>
        </member>
        <member name="M:CCNCMachine.CreateComponent(Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,System.Int32,CWnd*,Cnc.MachineDef.Component.MachineTreeDisplayContext)">
            <summary> Create a new component and insert it at the proper location </summary>
            <param name="pParent">    If non-null, the parent. </param>
            <param name="pGroup">	  If non-null, the group. </param>
            <param name="compType">   Type of the component to create. </param>
            <param name="pParentWnd"> (Optional) If non-null, (Optional) the parent window. </param>
            <param name="displayContext">	Display context to indicate where the new component is created. </param>
            <returns> null if it fails, else the new component. </returns>
        </member>
        <member name="M:CCNCMachine.GetGenParams(CWnd*,System.Boolean)">
            <summary>	Get general parameters. </summary>
            <param name="pParentWnd">	(Optional) If non-null, (Optional) the parent window. </param>
            <param name="showInMT">  	(Optional) true if dialog is launched for MillTurn machine. </param>
            <returns>	The generate parameters. </returns>
        </member>
        <member name="M:CCNCMachine.GetPoint(System.UInt32,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Get a point on the machine This point is converted to MGP stock setup coordinates if 
			required, since the machine is defined in MGP stock setup coordinates. </summary>
            <param name="pmptID">   resource ID for prompt for user. </param>
            <param name="pt">	    point, in proper coordinates. </param>
            <param name="mapToWCS"> (Optional) map to WCS in MGP copy. </param>
            <returns> The point. </returns>
        </member>
        <member name="M:CCNCMachine.GetMDMViewBmpIDs(System.UInt32*)">
            <summary> Return the resource ID's for the View Machine, View Group and View Component bitmaps </summary>
            <param name="bmpIDs"> resource ID's for the 3 bitmaps. </param>
        </member>
        <member name="M:CCNCMachine.Edit(CWnd*)">
            <summary> Edit parameters </summary>
            <param name="pParentWnd"> (Optional) If non-null, (Optional) the parent window. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.MoveGroup(Cnc.MachineDef.Component.CComponentGroup*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)">
            <summary> Move group.</summary>
            <param name="pSrcGroup">    If non-null, group the source belongs to. </param>
            <param name="pDstGroup">    If non-null, group the destination belongs to. </param>
            <param name="insertBefore"> (Optional) the insert before. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.GetGroupPtrs">
            <summary>	Gets group ptrs. </summary>
            <returns>	Null if it fails, else the group ptrs. </returns>
        </member>
        <member name="M:CCNCMachine.SwapGroups(Cnc.MachineDef.Component.CComponentGroup*,Cnc.MachineDef.Component.CComponentGroup*)">
            <summary> Swap 2 component groups </summary>
            <param name="pGroup1"> If non-null, 1st group to swap </param>
            <param name="pGroup2"> If non-null, 2nd group to swap. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.IsGroupPtr(System.Void*)">
            <summary> Determine if a pointer is a pointer to a component group. </summary>
            <param name="ptr"> If non-null, the pointer. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.IsGroupInstalled(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Determine whether or not a specific component group is part of the machine. </summary>
            <param name="classAndType"> group class and type to check. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.IsGroupInstalled(System.Int32,System.Int32)">
            <summary> Determine whether or not a specific component group is part of the machine </summary>
            <param name="groupClass"> group class to check. </param>
            <param name="groupType">  group type to check. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.GetGroupByClassAndType(System.Int32,System.Int32,Cnc.MachineDef.Component.CComponentGroup*,System.Int32,System.Int32,System.Boolean)">
            <summary> Return next component group (after p1stGroup) with the specified type
            p1stGroup == nullptr-&gt;search entire machine
            compType != nullptr, find group based on specified component type </summary>
            <param name="groupClass">    group class to get </param>
            <param name="groupType">     group type to get. </param>
            <param name="p1stGroup">     (Optional) If non-null, (Optional) first group at which to start search </param>
            <param name="firstCompType"> (Optional) first component type to identify the group. </param>
            <param name="lastCompType">  (Optional) first component type to identify the group. </param>
            <param name="matchOnBoth">   (Optional) match on both group and component types. </param>
            <returns> null if it fails, else the group by class and type. </returns>
        </member>
        <member name="M:CCNCMachine.DeleteGroup(Cnc.MachineDef.Component.CComponentGroup*)">
            <summary> Delete a component group, and all of its components from the list </summary>
            <param name="pGroup"> If non-null, the group. </param>
        </member>
        <member name="M:CCNCMachine.DeleteLatheTCAComponent(Cnc.MachineDef.Component.CMachineComponent*,System.Boolean,System.Boolean)">
            <summary> Delete a component, its lathe TCA boundary and (optionally) all of its descendents from the list </summary>
            <param name="pComp">       If non-null, the component to delete. </param>
            <param name="delEntity">   true = delete the component entity. </param>
            <param name="delChildren"> (Optional) true = delete descendents too. </param>
        </member>
        <member name="M:CCNCMachine.DeleteComponent(Cnc.MachineDef.Component.CMachineComponent*,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Delete a component and (optionally) all of its descendents from the list </summary>
            <param name="pComp">       If non-null, component to delete. </param>
            <param name="delChildren"> (Optional) true = delete descendents too </param>
            <param name="delTCABdrys"> (Optional) true = delete lathe TCA boundaries. </param>
            <param name="forceDeleteEntity"> (Optional) true to force delete entity even if the component (for classEnt components)
                                  is not attached to the entity (via ent.u.classEnt). Only effective DeleteEntity property set to true. </param>
        </member>
        <member name="M:CCNCMachine.FindGroupFromByEntIdn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Find the group whose db entity matches the input ent_idn. </summary>
            <param name="ent_idn"> id of group's database entity. </param>
            <returns> null if it fails, else the found group from ent idn. </returns>
        </member>
        <member name="M:CCNCMachine.FindComponentsGroup(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> check groups to see which one a component belongs to. </summary>
            <param name="pComp"> If non-null, the component. </param>
            <returns> null if it fails, else the found components group. </returns>
        </member>
        <member name="M:CCNCMachine.CheckGroupComponents(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Check groups to see if a component is the base component for 1 of them. </summary>
            <param name="pComp"> If non-null, the component. </param>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CComponentGroup*. </returns>
        </member>
        <member name="M:CCNCMachine.AddGroup(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Add a component group to the end of the list, identify by group class-type </summary>
            <param name="classAndType"> initial group class and type. </param>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CComponentGroup*. </returns>
        </member>
        <member name="M:CCNCMachine.AddGroup(System.Int32,System.Int32)">
            <summary> Add a component group to the end of the list, identify by group class/type </summary>
            <param name="groupClass"> initial group class. </param>
            <param name="groupType">  initial group type. </param>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CComponentGroup*. </returns>
        </member>
        <member name="M:CCNCMachine.InsertGroup(Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Inserts a group, identify by initial group class and type. </summary>
            <param name="pRefGroup">    If non-null, reference component group. </param>
            <param name="insertBefore"> T = insert before ref group, F = after. </param>
            <param name="classAndType"> initial group class and type. </param>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CComponentGroup*. </returns>
        </member>
        <member name="M:CCNCMachine.InsertGroup(Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,System.Int32,System.Int32)">
            <summary> Inserts a group, identify by initial group class and type. </summary>
            <param name="pRefGroup">    If non-null, reference component group. </param>
            <param name="insertBefore"> T = insert before ref group, F = after </param>
            <param name="groupClass">   initial group class. </param>
            <param name="groupType">    initial group type. </param>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CComponentGroup*. </returns>
        </member>
        <member name="M:CCNCMachine.InsertGroup(Cnc.MachineDef.Component.CComponentGroup*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)">
            <summary> Inserts a group already created. </summary>
            <param name="groupToInsert"> The group to insert. </param>
            <param name="pRefGroup">    If non-null, reference component group. </param>
            <param name="insertBefore"> T = insert before ref group, F = after </param>
        </member>
        <member name="M:CCNCMachine.InsertComponent(Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Boolean)">
            <summary> Inserts a component. </summary>
            <param name="pParent">		 If non-null, the parent. </param>
            <param name="pGroup">		 If non-null, group to which component will belong. </param>
            <param name="pParams">		 If non-null, parameters for component. </param>
            <param name="addToExisting"> true = add to existing children. </param>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CMachineComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.DeleteEntsFromDb(System.Boolean)">
            <summary> Delete the machine entities from the database </summary>
            <param name="deleteMCGeo"> (Optional) delete geometry also </param>
        </member>
        <member name="M:CCNCMachine.DeleteMCGeometry">
            <summary> Delete the Mastercam geometry (LBDRY, or solid) associated with the components
			Also delete the Mastercam solids used to display the components in their
			machine positions, along with the dependent wireframe geometry </summary>
        </member>
        <member name="M:CCNCMachine.SaveParamsToDb">
            <summary> Save - rewrite the cnc_machine entity in the database. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SaveControlToDb">
            <summary> Save - rewrite the control definition in the database. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.ResetAxisG28Positions(System.Boolean)">
            <summary>  Set the axis simulation start positions/angles to be the same as the the initial positions, angles </summary>
            <param name="updateAll"> (Optional) true = all, false = update INFINITY only. </param>
        </member>
        <member name="M:CCNCMachine.InitForMTFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean)">
            <summary> Initialize a machine from machine entity and components in a Mastercam file for the MT Platform. </summary>
            <param name="filename"> Filename of the file. </param>
            <param name="dbSave">   (Optional) true = save entities, false = don't. </param>
            <param name="loadGeo">  (Optional) true = load machine geometry from the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Initialize a machine from machine entity and components in a file. If ent_idn = 0, the 1st machine in the file will be read in. </summary>
            <param name="filename">		   Filename of the file. </param>
            <param name="ent_idn">		   (Optional) ID of machine to read. </param>
            <param name="dbSave">		   (Optional)true = save entities, false = don't. </param>
            <param name="loadGeo">		   (Optional) true = load machine geometry from the file. </param>
            <param name="preserveEntIdns"> (Optional) true to preserve the entity ids as they are in the file, or false to reset them all to 0. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitFromDb(op_group*,System.Boolean,System.Boolean)">
            <summary> Initialize a machine from toolpath group info 1st try uses pTpGroup-&gt;pg1.machine_ent_idn to load the machine from  entities in the database
			If this fails, and getFromFile = true, try to load the machine from the file : pTpGroup-&gt;pg1.machine, and if successful, 
			save it back to the database.. </summary>
            <param name="pTpGroup">	    If non-null, toolpath group to initialize from. </param>
            <param name="getFromFile">  (Optional) try to load the machine from file. </param>
            <param name="showWarnings"> (Optional) the show warnings. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitFromDb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Initialize a machine from a machine entity and components in the database. If ent_idn = 0, find 1st machine in the database. </summary>
            <param name="ent_idn">	    (Optional) ID of CNC machine entity </param>
            <param name="showWarnings"> (Optional) the show warnings. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DeleteMachineSolids">
            <summary> Delete the Mastercam solids used to display the components in their machine positions. </summary>
        </member>
        <member name="M:CCNCMachine.DeleteAllComponents(System.Boolean)">
            <summary>	Deletes all components. </summary>
        </member>
        <member name="M:CCNCMachine.InitCtrlFromFile">
            <summary> Initializes the control from file. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitCtrlFromDb">
            <summary> Initializes the control from database. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.LastGroup">
            <summary> Last group. </summary>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CComponentGroup*. </returns>
        </member>
        <member name="M:CCNCMachine.SetFirstGroup(Cnc.MachineDef.Component.CComponentGroup*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set first group. </summary>
            <param name="firstGroup"> The group to set as the first one. </param>
        </member>
        <member name="M:CCNCMachine.FirstGroup">
            <summary> First group. </summary>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CComponentGroup*. </returns>
        </member>
        <member name="M:CCNCMachine.GetStockComponent(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Gets stock component. </summary>
            <param name="pCompStart"> If non-null, the component start. </param>
            <returns> null if it fails, else the stock component. </returns>
        </member>
        <member name="M:CCNCMachine.SetMachineBaseComponent(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary>	Sets pointer to the machine base/root component. </summary>
            <param name="pRootComp">	If non-null, the root component. </param>
        </member>
        <member name="M:CCNCMachine.MachineBase">
            <summary> Machine base. </summary>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CMachineComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.GuessToolStorageComponent(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Make a EWAG at the tool storage component for a tool not used in an opt. </summary>
            <param name="tlEnt"> entity of tool to find component for. </param>
            <returns> null if it fails, else a Cnc::MachineDef::Component::CMachineComponent*. </returns>
        </member>
        <member name="M:CCNCMachine.ValidateToolAddress(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Validates the tool address. </summary>
            <param name="tlEnt">   entity of tool to check. </param>
            <param name="pTSComp"> If non-null, tool storage component to check. </param>
            <returns> a flag indicating whether or not the tool address (station or tool #) are in the valid range for the corresponding tool storage component </returns>
        </member>
        <member name="M:CCNCMachine.OpToolStorageComponent(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Operation tool storage component. </summary>
            <param name="tlEnt">	    entity of tool to find component for. </param>
            <param name="maskSelected"> (Optional)true - only check selected operations. </param>
            <returns>the tool storage component for a tool used in an op. </returns>
        </member>
        <member name="M:CCNCMachine.OpToolStorageComponent(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operation tool storage component. </summary>
            <param name="op"> operation to get component for. </param>
            <returns> the tool storage component for a tool used in an op. </returns>
        </member>
        <member name="M:CCNCMachine.OpToolInMultipleTurrets(ToolsUsed*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CArray&lt;operation**,operation**&gt;*,std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*)">
            <summary> Determine if a tool is used &gt; 1 tool storage component. </summary>
            <param name="toolsUsed"> list of tools used in ops. </param>
            <param name="tlEnt">	 entity of tool to test. </param>
            <param name="toolOps">   (Optional) If non-null, (Optional) list of operations for the tool. </param>
            <param name="tsComps">   (Optional) If non-null, (Optional) list of tool storage comps for the tool. </param>
            <returns> true/false. </returns>
        </member>
        <member name="M:CCNCMachine.ValidMtOpTool(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ToolsUsed*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check if the given tool can be used with the given op. </summary>
            <param name="assocID">   TL_ID or LTL_ID. </param>
            <param name="slot">		 tool slot. </param>
            <param name="op">		 op parameters. </param>
            <param name="toolsUsed"> list of used tools. </param>
            <returns> true/false. </returns>
        </member>
        <member name="M:CCNCMachine.ValidOpToolAxisCombinations(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,std.vector&lt;CAxisCombination**,std.allocator&lt;CAxisCombination**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return a list of valid axis combos for a tool. </summary>
            <param name="assocID">	  TL_ID or LTL_ID. </param>
            <param name="slot">		  tool slot. </param>
            <param name="axisCombos"> list of valid axis combos for the tool. </param>
        </member>
        <member name="M:CCNCMachine.InsertFileComponent(System.Char!System.Runtime.CompilerServices.IsConst*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,Cnc.MachineDef.Component.CMachineComponent*,eTreeFlags,System.Boolean)">
            <summary> Insert a component initialized from an external file using GenComp() into the tree. </summary>
            <param name="filename">			  Filename of the file. </param>
            <param name="pParent">			  If non-null, the parent. </param>
            <param name="pGroup">			  If non-null, the group. </param>
            <param name="pComp">			  If non-null, the component. </param>
            <param name="treeFlag">			  The tree flag. </param>
            <param name="convertSolidsToSTL"> (Optional) true to convert solids to STL. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DeleteTurretSolids">
            <summary> Delete all Mastercam machine position solids associated with turret components and all 'downstream' components.
		  These entities must always be re - created from scratch as the turret orientation will not be known in advance. </summary>
        </member>
        <member name="M:CCNCMachine.DeleteComponentMachineSolids(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Delete the Mastercam solids used to display the components in their machine positions, along with the dependent wireframe geometry. </summary>
            <param name="pComp"> If non-null, the component. </param>
        </member>
        <member name="M:CCNCMachine.UpdateLatheTCABdrys">
            <summary> Update Lathe TCA boundaries from the appropriate components </summary>
        </member>
        <member name="M:CCNCMachine.UpdateStockFromMGData(group_pg3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update the mill/router/wire stock component from MGP parameters. </summary>
            <param name="pg3"> machine group page 3 data to use. </param>
        </member>
        <member name="M:CCNCMachine.CreateComponentsFromMGData(System.Boolean)">
            <summary>  Generate components from MGP parameters, if they don't exist </summary>
            <param name="saveToDb"> True to save components to database. </param>
        </member>
        <member name="M:CCNCMachine.UnDefineDeadTCABdrys">
            <summary> Delete the TCA boundaries for which there are no machine components. </summary>
        </member>
        <member name="M:CCNCMachine.SaveComponentsToDb(Cnc.MachineDef.Component.CMachineComponent*,System.Boolean)">
            <summary> Save component and all of its descendents to database as entitites. </summary>
            <param name="pComp">   If non-null, the component. </param>
            <param name="rewrite"> (Optional) true = Rewrite to db, rather than save. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SaveGroupsToDb(System.Boolean)">
            <summary> Save component groups to database as entities. </summary>
            <param name="rewrite"> (Optional) true = Rewrite to db, rather than save. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.CreateLatheStockFromMGData(System.Byte,System.Boolean)">
            <summary> Generate a lathe stock component from MGP parameters, if it doesn't exist. </summary>
            <param name="activeSpdl"> LH_HEAD or RH_HEAD. </param>
            <param name="saveToDb">   save new component to database. </param>
            <returns> null if it fails, else the new lathe stock from mg data. </returns>
        </member>
        <member name="M:CCNCMachine.ConvertSolidComponentsToMCO(Cnc.MachineDef.Component.CMachineComponent*,System.Boolean,System.Double,System.Boolean,System.Boolean)">
            <summary> Recursively convert all solid component geometry to MCO meshes. </summary>
            <param name="pComp">			    (Optional) If non-null, (Optional) component from which to start search (nullptr for Machine Base) </param>
            <param name="useComponentChordTol"> (Optional) flag indicating to use machine component chord tolerance as the tesselation tolerance. </param>
            <param name="tessellationTol">	    (Optional) Tesselation tolerance (used only if useComponentChordTol == false). </param>
            <param name="convertSTLs">		    (Optional) true to convert st ls. </param>
            <param name="deleteSolid">		    (Optional) delete solid after replaced. </param>
        </member>
        <member name="M:CCNCMachine.FindComponentByEntIdn(Cnc.MachineDef.Component.CMachineComponent*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Find the component whose db entity matches the input ent_idn </summary>
            <param name="pStartingComp">	Non-null component pointer from which to start search. </param>
            <param name="ent_idn"> 			The end_idn value to match during search. </param>
            <returns> null if it fails, else the found component by ent idn. </returns>
        </member>
        <member name="M:CCNCMachine.AdjustToBiStable">
            <summary> Adjust to bi stable. </summary>
            <returns>'adjust machine to bi-stable position when limits' status. </returns>
        </member>
        <member name="M:CCNCMachine.BreakRapidRotary">
            <summary> Break rapid rotary. </summary>
            <returns> 'break rapid rotary moves' status. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlRotaryMotion">
            <summary> Control rotary motion. </summary>
            <returns> control rotary motion parameters. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlArcMotion(System.Boolean)">
            <summary> Control arc motion. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT(). </param>
            <returns> control arc motion parameters CCNCControl::GetArc () - millTurn = false, CCNCControl::GetArcMT () - millTurn = true. </returns>
        </member>
        <member name="M:CCNCMachine.LinAxRapidOutput(System.Boolean)">
            <summary> Lin ax rapid output. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT(). </param>
            <returns>linear axis rapid move control method</returns>
        </member>
        <member name="M:CCNCMachine.CtrlLinearMotion(System.Boolean)">
            <summary> Control linear motion. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT(). </param>
            <returns> control linear motion parameters CCNCControl::GetLinear () - millTurn = false, CCNCControl::GetLinearMT () - millTurn = true. </returns>
        </member>
        <member name="M:CCNCMachine.DoFirstStartCloseMultAlt">
            <summary> DoFirstStartCloseMultAlt. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoFirstStartFarMultAlt">
            <summary> DoFirstStartFarMultAlt. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoAllowThreadMultipleStartsAlt">
            <summary> DoAllowThreadMultipleStartsAlt. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoFirstStartCloseMultBox">
            <summary> DoFirstStartCloseMultBox. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoFirstStartFarMultBox">
            <summary> DoFirstStartFarMultBox </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoAllowThreadMultipleStartsBox">
            <summary> DoAllowThreadMultipleStartsBox </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoFirstStartCloseMultCan">
            <summary> DoFirstStartCloseMultCan </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoFirstStartFarMultCan">
            <summary> DoFirstStartFarMultCan </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoAllowThreadMultipleStartsCan">
            <summary> DoAllowThreadMultipleStartsCan </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadAlternatePulloff">
            <summary> DoThreadAlternatePulloff </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadAlternateMultipleStarts">
            <summary> DoThreadAlternateMultipleStarts </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadAlternateEqualArea">
            <summary> DoThreadAlternateEqualArea </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadAlternateEqualDepths">
            <summary> DoThreadAlternateEqualDepths </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadBoxPulloff">
            <summary> DoThreadBoxPulloff </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadBoxMultipleStarts">
            <summary> DoThreadBoxMultipleStarts </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadBoxEqualArea">
            <summary> DoThreadBoxEqualArea </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadBoxEqualDepths">
            <summary> DoThreadBoxEqualDepths </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadLonghandPulloff">
            <summary> DoThreadLonghandPulloff </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadCanPulloff">
            <summary> DoThreadCanPulloff </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadCanMultipleStarts">
            <summary />
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadCanEqualArea">
            <summary> DoThreadCanEqualArea </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoThreadCanEqualDepths">
            <summary> DoThreadCanEqualDepths </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCangrvDwell">
            <summary> DoLCangrvDwell. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCangrvRghDepths">
            <summary> DoLCangrvRghDepths. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCangrvRghPeck">
            <summary> DoLCangrvRghPecks. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCangrvChamferRad">
            <summary> DoLCangrvChamferRads. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCangrvCornerRad">
            <summary> 	bool DoLCangrvCornerRad ();
. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCangrvCornerChamfer">
            <summary> DoLCangrvCornerChamfer. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCangrvWallTaper">
            <summary> DoLCangrvWallTaper. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoCannedRoughUndercut">
            <summary> DoCannedRoughUndercut. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCannedFinish">
            <summary> DoLCannedFinish. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCannedThread">
            <summary> DoLCannedThread. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCannedGroove">
            <summary> DoLCannedGroove </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCannedPattern">
            <summary> DoLCannedPattern. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.DoLCannedRough">
            <summary> DoLCannedRough. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlLatheCannedCycles">
            <summary> Control lathe canned cycles. </summary>
            <returns> control drilling canned cycle parameters, or nullptr if control isn't defined. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlLatheDrillCannedCycles">
            <summary> Control lathe drill canned cycles. </summary>
            <returns> control lathe drilling canned cycle parameters, or nullptr if control isn't defined. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlDrillCannedCycles">
            <summary> Control drill canned cycles. </summary>
            <returns> control drilling canned cycle parameters, or nullptr if control isn't defined. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlGenCannedCycles">
            <summary> Control generate canned cycles. </summary>
            <returns> control general canned cycle parameters, or nullptr if control sint' defined </returns>
        </member>
        <member name="M:CCNCMachine.SetCtrlFeedInfo(nc_path_feed_ctrl*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> Sets control feed information using:
		  CCNCControl::SetFeed () - ctrlFlag = CTRL_SET_TOOL
		  CCNCControl::SetFeedMT () - ctrlFlag = CTRL_SET_MILLTURN
		  Both - ctrlFlag = CTRL_SET_BOTH	</summary>
            <param name="feedInfo"> Information describing the feed. </param>
            <param name="ctrlFlag"> (Optional) indicates what CD params to set </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.AdjustArcFeedrates(System.Boolean)">
            <summary> Adjust arc feedrates. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetFeedMT(). </param>
            <returns> whether or not to adjust arc feedrates. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlFeedInfo(System.Boolean)">
            <summary> Control feed information. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetFeedMT(). </param>
            <returns> control feed rate information using: CCNCControl::GetFeed () - millTurn = false, CCNCControl::GetFeedMT () - millTurn = true. </returns>
        </member>
        <member name="M:CCNCMachine.SupportsReverseWearComp">
            <summary> Supports reverse wear component. </summary>
            <returns> whether or not the machine supports wear comp in control </returns>
        </member>
        <member name="M:CCNCMachine.SupportsWearComp">
            <summary> Supports wear component. </summary>
            <returns> whether or not the machine supports wear comp in control. </returns>
        </member>
        <member name="M:CCNCMachine.SupportsCtrlComp">
            <summary> Supports control component. </summary>
            <returns> whether or not the machine supports comp in control. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlToolComp">
            <summary> Control tool component. </summary>
            <returns> control tool compensation parameters, or nullptr if control isn't defined. </returns>
        </member>
        <member name="M:CCNCMachine.SetCtrlToolInfo(nc_path_tool_ctrl*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> Define control tool information using: 
			CCNCControl::SetTool () - ctrlFlag = CTRL_SET_TOOL
			  CCNCControl::SetToolMT () - ctrlFlag = CTRL_SET_MILLTURN
			  Both - ctrlFlag = CTRL_SET_BOTH </summary>
            <param name="toolInfo"> Information describing the tool. </param>
            <param name="ctrlFlag"> (Optional) indicates what CD params to set. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.BOfsAmt(System.Boolean)">
            <summary> BOfsAmt. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT(). </param>
            <returns> control amount to add to tool number to get back offset </returns>
        </member>
        <member name="M:CCNCMachine.TlOfsAmt(System.Boolean)">
            <summary> TlOfsAmt. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT(). </param>
            <returns> control amount to add to tool number to get lathe tool offset </returns>
        </member>
        <member name="M:CCNCMachine.DOfsAmt(System.Boolean)">
            <summary> DOfsAmt. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT(). </param>
            <returns> control amount to add to tool number to get diameter offset. </returns>
        </member>
        <member name="M:CCNCMachine.LOfsAmt(System.Boolean)">
            <summary> Ofs amount. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT(). </param>
            <returns> control amount to add to tool number to get length offset. </returns>
        </member>
        <member name="M:CCNCMachine.AddToToolRegister(System.Boolean)">
            <summary> Adds to the tool register. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT(). </param>
            <returns>control flag indicating how tool offsets are related to the tool number.Values are : CTRL_FROM_TOOL, CTRL_ADD, CTRL_FROM_DEFAULTS. </returns>
        </member>
        <member name="M:CCNCMachine.UseHeadForTool(System.Boolean)">
            <summary> Use head for tool. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT(). </param>
            <returns> control tool number = head/station number flag. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlToolInfo(System.Boolean)">
            <summary> Control tool information. </summary>
            <param name="millTurn"> (Optional) true = Use CCNCControl::GetToolMT() </param>
            <returns>  control tool information using: CCNCControl::GetTool () - millTurn = false; CCNCControl::GetToolMT () - millTurn = true </returns>
        </member>
        <member name="M:CCNCMachine.SetCtrlNCDlg(nc_dialog_ctrl*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets control NC dialog parameters. </summary>
            <param name="ncDlg"> values to set </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlNCDlg(System.Boolean)">
            <summary> Control NC dialog. </summary>
            <param name="millForLathe"> (Optional) get mill settings for a lathe. </param>
            <returns> control NC dialog parameters, or nullptr if control isn't defined. </returns>
        </member>
        <member name="M:CCNCMachine.SetCtrlNCOutput(nc_output_ctrl*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set the control NC output parameters </summary>
            <param name="output"> values to set. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SeqNumInc">
            <summary> Sequence number increment. </summary>
            <returns> control sequence number increment. </returns>
        </member>
        <member name="M:CCNCMachine.StartSeqNum">
            <summary> Starts sequence number. </summary>
            <returns> control start sequence number. </returns>
        </member>
        <member name="M:CCNCMachine.OutputOpComment">
            <summary> Output operation comment. </summary>
            <returns> control flag for output of operation comment. </returns>
        </member>
        <member name="M:CCNCMachine.OutputGroupComment">
            <summary> Output group comment. </summary>
            <returns> control flag for output of group comment. </returns>
        </member>
        <member name="M:CCNCMachine.OutputGroupName">
            <summary> Output group name. </summary>
            <returns>control flag for output of group name. </returns>
        </member>
        <member name="M:CCNCMachine.OutputMachineName">
            <summary> Output machine name. </summary>
            <returns> control flag for output of machine name. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlNCOutput">
            <summary> Control NC output. </summary>
            <returns> control NC output parameters, or nullptr if control isn't defined </returns>
        </member>
        <member name="M:CCNCMachine.Ctrl_ent_idn">
            <summary> Control ent idn. </summary>
            <returns> ent_idn for the control definition</returns>
        </member>
        <member name="M:CCNCMachine.Machine_ent_idn">
            <summary> Machine ent idn. </summary>
            <returns> ent_idn for the control definition </returns>
        </member>
        <member name="M:CCNCMachine.SubmergedWire">
            <summary> use coolant to control cubmerged wire. </summary>
            <returns> A bool&amp; </returns>
        </member>
        <member name="M:CCNCMachine.IsAnyCoolantOptionEnabled">
            <summary> Is any coolant option on the machine enabled?. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.IsCoolantOptionEnabled(System.Int16)">
            <summary> Is a specific coolant option enabled on the machine. </summary>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.UseCoolantEventList">
            <summary> Use coolant event list. </summary>
            <returns> Use event list to activate coolant</returns>
        </member>
        <member name="M:CCNCMachine.UseCoolantFromPost">
            <summary> Use coolant from post, Use coolant commants in post-processor, (provided for backward compatibility) </summary>
            <returns> A bool&amp; </returns>
        </member>
        <member name="M:CCNCMachine.FirstCoolantOffShutsOffAll">
            <summary> First coolant off shuts off all. </summary>
            <returns> 'first coolant off command shuts off all others' status </returns>
        </member>
        <member name="M:CCNCMachine.CoolantOffCmd(System.Int16)">
            <summary> Coolant 'off' command. </summary>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1. </param>
            <returns>a 'coolant off' command built from baseTxt + onTxt; nullptr, if idx is invalid, text is "", or base text is ""</returns>
        </member>
        <member name="M:CCNCMachine.CoolantOnCmd(System.Int16)">
            <summary> Coolant 'on' command. </summary>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1. </param>
            <returns>a 'coolant on' command built from baseTxt + onText; nullptr, if idx is invalid, text is "", or base text is ""</returns>
        </member>
        <member name="M:CCNCMachine.SetCoolantOffTxt(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16)">
            <summary> Sets coolant 'off' text. </summary>
            <param name="txt"> The text. </param>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1. </param>
        </member>
        <member name="M:CCNCMachine.CoolantOffTxt(System.Int16)">
            <summary> Coolant 'off' text. </summary>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1</param>
            <returns>coolant 'off' text; default resource string if the string is empty; empty string, if idx is invalid, or text is "" (disabled)</returns>
        </member>
        <member name="M:CCNCMachine.SetCoolantOnTxt(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16)">
            <summary> Sets coolant 'on' text. </summary>
            <param name="txt"> The text. </param>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1</param>
        </member>
        <member name="M:CCNCMachine.CoolantOnTxt(System.Int16)">
            <summary> Coolant on text. </summary>
            <param name="idx">index 0-MAX_COOLANT_CMDS-1. </param>
            <returns> coolant 'on' text; default resource string if the string is empty; empty string, if idx is invalid, or text is "" (disabled). </returns>
        </member>
        <member name="M:CCNCMachine.SetCoolantBaseTxt(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16)">
            <summary> Sets coolant base text, 'base' coolant text </summary>
            <param name="txt"> The text. </param>
            <param name="idx"> index 0-MAX_COOLANT_CMDS-1. </param>
        </member>
        <member name="M:CCNCMachine.CoolantBaseTxt(System.Int16)">
            <summary> Coolant base text. </summary>
            <param name="idx"> The index. </param>
            <returns>'base' coolant text. default resource string if the string is empty; empty string, if idx is invalid, or text is "" (disabled) </returns>
        </member>
        <member name="M:CCNCMachine.SetCoolantButtonTxt(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets coolant button text to appear on Coolant button of tool parameters page </summary>
            <param name="txt"> The text. </param>
        </member>
        <member name="M:CCNCMachine.CoolantButtonTxt">
            <summary> Coolant button text.  default resource string if the string is empty empty string, the string is "" </summary>
            <returns>text to appear on Coolant button of tool parameters page</returns>
        </member>
        <member name="M:CCNCMachine.Coolant">
            <summary> Gets the coolant. </summary>
            <returns>coolant parameters</returns>
        </member>
        <member name="M:CCNCMachine.DisplayMappedParams">
            <summary> Displays a mapped parameters. </summary>
            <returns>true if mapped machine display is enabled </returns>
        </member>
        <member name="M:CCNCMachine.NumDataStreams">
            <summary> Number data streams. </summary>
            <returns> The total number of data streams. </returns>
        </member>
        <member name="M:CCNCMachine.SupportsMachiningModes">
            <summary> Supports machining modes. </summary>
            <returns>whether the machine supports machining modes</returns>
        </member>
        <member name="M:CCNCMachine.IsMTComponentLibrary">
            <summary> Is this machine for the MT component library. </summary>
            <returns> True if this machine has been created for the MT component library. </returns>
        </member>
        <member name="M:CCNCMachine.SetForMT(System.Boolean)">
            <summary> Sets whether this machine for the MT platform. </summary>
            <param name="forMT"> (Optional) for MT platform value. </param>
        </member>
        <member name="M:CCNCMachine.IsForMT">
Multi-tasking related parameters
<summary> Is this machine for the MT platform. </summary><returns> True if this machine has been created for the MT platform (MT, MT-Lathe, MT-Swiss). </returns></member>
        <member name="M:CCNCMachine.OpInverseTimeFeedrates(System.Int32)">
            <summary> Operation inverse time feedrates. </summary>
            <param name="units">inches (INCH_IDX) or mm (MM_IDX). </param>
            <returns> operation min,max inverse time feedrates </returns>
        </member>
        <member name="M:CCNCMachine.OpFeedPerRev(System.Int32)">
            <summary> Operation feed per reverse. </summary>
            <param name="units"> inches (INCH_IDX) or mm (MM_IDX). </param>
            <returns>  operation min,max feed/rev feedrates</returns>
        </member>
        <member name="M:CCNCMachine.OpFeedPerMin(System.Int32)">
            <summary> Operation feed per minimum. </summary>
            <param name="units">inches (INCH_IDX) or mm (MM_IDX). </param>
            <returns> operation min,max feed/min feedrates </returns>
        </member>
        <member name="M:CCNCMachine.OpFeedRates(System.Int32)">
Return/Define operation feed rate limits
<summary> Operation feed rates. </summary><param name="units"> inches (INCH_IDX) or mm (MM_IDX). </param><returns> operation feed rates </returns></member>
        <member name="M:CCNCMachine.SetLinearAxisMaxFeedrates(System.Double*)">
            <summary> Set machine max feedrate and all axis component max feed rates Used when creating an MD from a V9.pst file.. </summary>
            <param name="maxFrs"> max. inch/min and mm/min feed rates. </param>
        </member>
        <member name="M:CCNCMachine.SetAxisFeedrates">
            <summary> Set axis component feed rates from machine values, if required Generic version. </summary>
        </member>
        <member name="M:CCNCMachine.SetAxisFeedrates(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Set axis component feed rates from machine values, if required Recursive version. </summary>
            <param name="pComp"> If non-null, the component to set. </param>
        </member>
        <member name="M:CCNCMachine.UseMaxRotaryFeedrate">
            <summary> Use maximum rotary feedrate. </summary>
            <returns> whether or not to use machine maximum rotary axis feedrate </returns>
        </member>
        <member name="M:CCNCMachine.UseMaxLinearFeedrate">
            <summary> Use maximum linear feedrate. </summary>
            <returns> whether or not to use machine maximum linear axis feedrate </returns>
        </member>
        <member name="M:CCNCMachine.SetMaxRotaryFeedrate(System.Double)">
            <summary> Sets maximum rotary axis deg/min feedrate. </summary>
            <param name="maxFr"> maximum feed rate to set. </param>
        </member>
        <member name="M:CCNCMachine.MaxRotaryFeedrate">
            <summary> Maximum rotary feedrate. </summary>
            <returns> maximum rotary axis deg/min feedrate </returns>
        </member>
        <member name="M:CCNCMachine.SetMaxLinearFeedrate(System.Double,System.Int32)">
            <summary> Sets maximum linear feedrate. (rapid traverse rate) </summary>
            <param name="maxFr"> maximum feed rate to set. </param>
            <param name="units"> inches (INCH_IDX) or mm (MM_IDX). </param>
        </member>
        <member name="M:CCNCMachine.SetMachineAcceleration(System.Double,System.Int32)">
            <summary> Sets machine acceleration. </summary>
            <param name="accel"> machine acceleration (&gt; 0) </param>
            <param name="units"> inches (INCH_IDX) or mm (MM_IDX). </param>
        </member>
        <member name="M:CCNCMachine.MachineAcceleration(System.Int32)">
            <summary> Machine acceleration. </summary>
            <param name="units"> inches (INCH_IDX) or mm (MM_IDX). </param>
            <returns> machine acceleration value. </returns>
        </member>
        <member name="M:CCNCMachine.SetSyncTimingStep(System.Double)">
            <summary> Sets sync list timing step (sec). </summary>
            <param name="step"> timing step (sec, &gt; 0). </param>
        </member>
        <member name="M:CCNCMachine.SyncTimingStep">
            <summary> Synchronises the timing step. </summary>
            <returns> sync list timing step (sec). </returns>
        </member>
        <member name="M:CCNCMachine.SetMinArcFeedRate(System.Double)">
            <summary> Sets minimum arc feed rate. </summary>
            <param name="fr"> feed rate to set. </param>
        </member>
        <member name="M:CCNCMachine.MinArcFeedRate">
            <summary> Minimum arc feed rate. </summary>
            <returns> minimum arc feedrate in machine dynamics </returns>
        </member>
        <member name="M:CCNCMachine.GetHighFeedDynamics(MACHINE_DYNAMICS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the Map high feed dynamic properties to a MACHINE_DYNAMICS structure </summary>
            <param name="hfDynamics"> high feed dynamics properties. </param>
        </member>
        <member name="M:CCNCMachine.Dynamics">
Return/Define machine dynamic properties
<summary> Gets the dynamics. </summary><returns> Return/Define machine dynamic properties </returns></member>
        <member name="M:CCNCMachine.SetRTCPSupport(System.Boolean)">
            <summary> Turn RTCP support for the machine on/off </summary>
            <param name="supported"> true or false. </param>
            <returns> false if it can't be supported. </returns>
        </member>
        <member name="M:CCNCMachine.SupportsRTCP">
            <summary> Supports rtcp. </summary>
            <returns> RTCP support for the machine </returns>
        </member>
        <member name="M:CCNCMachine.SetMaxCombinedRotaryAngle(System.Double,System.Boolean)">
            <summary> Sets maximum combined angle before break is required. </summary>
            <param name="angle"> The angle. </param>
            <param name="deg">   (Optional) true = deg, false = rad. </param>
        </member>
        <member name="M:CCNCMachine.MaxCombinedRotaryAngle(System.Boolean)">
            <summary> Maximum combined rotary angle. </summary>
            <param name="deg"> (Optional) true = deg, false = rad. </param>
            <returns>the maximum combined angle before break is required. </returns>
        </member>
        <member name="M:CCNCMachine.BreakRotaryCombined">
            <summary> Break rotary combined. </summary>
            <returns> 'break combined rotary axis motion' status. </returns>
        </member>
        <member name="M:CCNCMachine.MultiAxMotion">
Return/Define multi-axis motion control parameters
<summary> Multi ax motion. </summary><returns> multi-axis motion control parameters </returns></member>
        <member name="M:CCNCMachine.SetMaxWireTaperAngle(System.Double,System.Boolean)">
            <summary> Sets maximum wire taper angle. </summary>
            <param name="maxAng"> The maximum angle. </param>
            <param name="deg">    (Optional) true = deg, false = rad. </param>
        </member>
        <member name="M:CCNCMachine.MaxWireTaperAngle(System.Boolean)">
Return/Define wire EDM parameters
<summary> Maximum wire taper angle. </summary><param name="deg"> (Optional) true = deg, false = rad. </param><returns> Return maximum wire taper angle. </returns></member>
        <member name="M:CCNCMachine.FixTbState">
            <summary> Set toolbar state to a valid value, if not found in user's list </summary>
        </member>
        <member name="M:CCNCMachine.FixMTPathsAndFiles(op_group*)">
            <summary> Set MT-specific file and paths to valid values, if possible </summary>
            <param name="pMachGroup"> If non-null, group the mach belongs to. </param>
        </member>
        <member name="M:CCNCMachine.FixPathsAndFiles(System.Boolean)">
            <summary> Set file and paths to valid values, if possible </summary>
            <param name="showWarnings"> (Optional) the show warnings. </param>
        </member>
        <member name="M:CCNCMachine.FindPostFileInSearchPaths(CArray&lt;CFindMCFile,CFindMCFile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find a post file in the search paths. The post must either support event lists or not, according to the switch in the machine</summary>
            <param name="searchPaths">filled in array of paths to search. </param>
            <returns> The found post file in search paths. </returns>
        </member>
        <member name="M:CCNCMachine.MakeCDPostSearchPaths(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,CArray&lt;CFindMCFile,CFindMCFile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Make up the search paths for finding a control definition or post - processor file
				The following paths are added, in order :
					-path of current database file
					-path stored with control definition or post - processor file
					-path of the current machine definition file
					-Mastercam install path (current_dir) </summary>
            <param name="file">		   CD or post-processor file. </param>
            <param name="dfltPath">    default path to library file. </param>
            <param name="searchPaths"> filled in array of paths to search. </param>
        </member>
        <member name="M:CCNCMachine.MakeLibSearchPaths(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,CArray&lt;CFindMCFile,CFindMCFile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Make up the search paths for finding a library file
			The following paths are added, in order :
				-path stored with lib file name
				-path of default library / catalogue
				-path of current database file
				-Mastercam install path (current_dir). </summary>
            <param name="file">		   library file. </param>
            <param name="dfltPath">    default path to library file </param>
            <param name="searchPaths"> filled in array of paths to search. </param>
        </member>
        <member name="M:CCNCMachine.SetNCSuffix(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets  NC suffix. </summary>
            <param name="path"> Full pathname of the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.NCSuffix(System.Boolean)">
            <summary>NC suffix. </summary>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object. </param>
            <returns> the NC file extension </returns>
        </member>
        <member name="M:CCNCMachine.SetNCPrefix(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets NC prefix. </summary>
            <param name="path"> Full pathname of the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.NCPrefix(System.Boolean)">
            <summary> NC prefix. </summary>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object </param>
            <returns> the NC file path </returns>
        </member>
        <member name="M:CCNCMachine.SetNCIPrefix(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets nci prefix. </summary>
            <param name="path"> Full pathname of the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.NCIPrefix(System.Boolean)">
            <summary> Nci prefix. </summary>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object. </param>
            <returns> the NCI file path </returns>
        </member>
        <member name="M:CCNCMachine.SetWireAuxRegChookFile(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets wire auxiliary register chook file. </summary>
            <param name="fname"> Filename of the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.WireAuxRegChookFile(System.Boolean)">
            <summary> Wire auxiliary register chook file. </summary>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object </param>
            <returns> the wire auxilliary registers C-Hook file </returns>
        </member>
        <member name="M:CCNCMachine.SetMiscValsChookFile(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets misc vals chook file. </summary>
            <param name="fname"> Filename of the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.MiscValsChookFile(System.Boolean)">
            <summary> Misc vals chook file. </summary>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object. </param>
            <returns> the misc. values C-Hook file </returns>
        </member>
        <member name="M:CCNCMachine.SetSetupSheetFile(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets setup sheet file. </summary>
            <param name="fname"> Filename of the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SetupSheetFile(System.Boolean)">
            <summary> Sets up the sheet file. </summary>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object. </param>
            <returns> the setup sheet file </returns>
        </member>
        <member name="M:CCNCMachine.SetPostExeFile(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets post executable file. </summary>
            <param name="fname"> Filename of the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.PostExeFile(System.Boolean)">
            <summary> Posts an executable file. </summary>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object. </param>
            <returns>the post-processor executable file </returns>
        </member>
        <member name="M:CCNCMachine.SetOpDfltsFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Sets operation dflts file. </summary>
            <param name="fname"> Filename of the file. </param>
            <param name="units"> inches (INCH_IDX) or mm (MM_IDX). </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.OpDfltsFile(System.Int32,System.Boolean)">
            <summary> Operation dflts file. </summary>
            <param name="units">    inches (INCH_IDX) or mm (MM_IDX). </param>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object. </param>
            <returns> the operation defaults file </returns>
        </member>
        <member name="M:CCNCMachine.SetOpLibFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Sets operation library file. </summary>
            <param name="fname"> Filename of the file. </param>
            <param name="units"> inches (INCH_IDX) or mm (MM_IDX). </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.OpLibFile(System.Int32,System.Boolean)">
            <summary> Operation library file. </summary>
            <param name="units">    inches (INCH_IDX) or mm (MM_IDX). </param>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object. </param>
            <returns>Return the operation library file </returns>
        </member>
        <member name="M:CCNCMachine.SetPowerLibFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Define the wire EDM power library file. </summary>
            <param name="fname"> Filename of the file. </param>
            <param name="units">inches (INCH_IDX) or mm (MM_IDX) </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.PowerLibFile(System.Int32,System.Boolean)">
            <summary> Power library file. </summary>
            <param name="units">    inches (INCH_IDX) or mm (MM_IDX). </param>
            <param name="tryDb1st"> (Optional) 1st try to get control from database rather than object. </param>
            <returns>  Return the wire EDM power library file </returns>
        </member>
        <member name="M:CCNCMachine.PathsToTokens">
            <summary> Replace the Mastercam directory in the MD-related files with the Mastercam directory token. </summary>
        </member>
        <member name="M:CCNCMachine.TokensToPaths">
            <summary>Replace the Mastercam directory token in the MD-related files	with the local Mastercam directory. </summary>
        </member>
        <member name="M:CCNCMachine.HolderCatalogFile(System.Int32)">
            <summary> Holder catalog file. </summary>
            <param name="units"> The units. </param>
            <returns>Return the lathe holder catalog file. </returns>
        </member>
        <member name="M:CCNCMachine.InsertCatalogFile(System.Int32)">
            <summary> Inserts a catalog file described by units. </summary>
            <param name="units"> The units. </param>
            <returns>Return the lathe insert catalog file. </returns>
        </member>
        <member name="M:CCNCMachine.SetMatlLibFile(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets matl library file. </summary>
            <param name="fname"> Filename of the file. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.MatlLibFile">
            <summary> Matl library file. </summary>
            <returns>Return material library file. </returns>
        </member>
        <member name="M:CCNCMachine.SetToolLibFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Sets tool library file. </summary>
            <param name="fname"> Filename of the file. </param>
            <param name="units">inches (INCH_IDX) or mm (MM_IDX) </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.ToolLibFile(System.Int32)">
            <summary> Tool library file. </summary>
            <param name="units">inches (INCH_IDX) or mm (MM_IDX) </param>
            <returns>Return tool library file. </returns>
        </member>
        <member name="M:CCNCMachine.CtrlDefFile">
            <summary> Control definition file. </summary>
            <returns>Return control definition file. </returns>
        </member>
        <member name="M:CCNCMachine.PostProcFile">
            <summary> Posts the proc file. </summary>
            <returns>Return post-processor file. </returns>
        </member>
        <member name="M:CCNCMachine.ReplacePostDlg(System.Char!System.Runtime.CompilerServices.IsConst*,CWnd*)">
            <summary> Return user-defined 'replace post' state when the post path is wrong, but a post with the same name is found
	   in the user's default post path </summary>
            <param name="postPath">   path to local copy of post. </param>
            <param name="pParentWnd"> parent window for dialog. </param>
            <returns> An int. </returns>
        </member>
        <member name="M:CCNCMachine.SetWCSToLatheDefault(System.Boolean)">
            <summary> Set the system default to Top or Lathe Z = World Z based on m_Params.dfltLatheWCS. </summary>
            <param name="prvMachWasVTL"> was the previous machine a VTL? </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.AdjustForWcs(Plane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adjust a view for the WCS (make relative to world WCS). </summary>
            <param name="thePlane"> the plane. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SetDefaultLatheWCS(System.Int16)">
            <summary> Define default lathe WCS </summary>
            <param name="wcsFlag"> LATHE_WCS_NO_DFLT,TOP,LATHE_Z_EQ_WORLD_Z. </param>
            <returns> return false, if not a LATHE. </returns>
        </member>
        <member name="M:CCNCMachine.DefaultLatheWCS">
            <summary> DefaultLatheWCS </summary>
            <returns> Return default lathe WCS:LATHE_WCS_NO_DFLT, LATHE_WCS_TOP, LATHE_WCS_LATHE_Z_EQ_WORLD_Z. </returns>
        </member>
        <member name="M:CCNCMachine.SetDefaultCplane">
            <summary> Set the default Cplane for a machine group. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.UseTbState">
            <summary> UseTbState. </summary>
            <returns> Return whether or not to use the toolbar state. </returns>
        </member>
        <member name="M:CCNCMachine.TbState">
            <summary> TbState. </summary>
            <returns> Return toolbar state associated with the machine. </returns>
        </member>
        <member name="M:CCNCMachine.GetComment">
            <summary> GetComment. </summary>
            <returns> Return comment to describe the machine. </returns>
        </member>
        <member name="M:CCNCMachine.Comment">
            <summary> Comment. </summary>
            <returns> Return comment to describe the machine. </returns>
        </member>
        <member name="M:CCNCMachine.VTL">
            <summary> Return VTL status. </summary>
            <returns> Return VTL status. </returns>
        </member>
        <member name="M:CCNCMachine.IsNewTechMachine">
            <summary> Return true if control defines machine as an Mitsubishi. </summary>
            <returns> true if it's machine that uses tech power library data, false if not. </returns>
        </member>
        <member name="M:CCNCMachine.IsGenericTechMachine">
            <summary> Return true if control defines machine as a generic tech machine. </summary>
            <returns> true if a generic tech machine, false if not. </returns>
        </member>
        <member name="M:CCNCMachine.IsMakinoMachine">
            <summary> Return true if control defines machine as an Makino. </summary>
            <returns> true if Makino machine, false if not. </returns>
        </member>
        <member name="M:CCNCMachine.IsMitsubishiMachine">
            <summary> Return true if control defines machine as an Mitsubishi. </summary>
            <returns> true if Mitsubishi machine, false if not. </returns>
        </member>
        <member name="M:CCNCMachine.IsAgieMachine">
            <summary> Return true if control defines machine as an Agie. </summary>
            <returns> true if Agie machine, false if not. </returns>
        </member>
        <member name="M:CCNCMachine.GetImportedGeometryLevel">
            <summary> Return the imported geometry level. </summary>
            <returns> the imported geometry level. </returns>
        </member>
        <member name="M:CCNCMachine.IsSimpleMachine">
            <summary> Checks if this machine is a simple MT machine. </summary>
            <returns> True if this is a simple MT machine. </returns>
        </member>
        <member name="M:CCNCMachine.SetProductCode(System.Int32)">
            <summary> Sets the product code of this MT machine. </summary>
            <param name="value"> Product code of this MT machine. </param>
        </member>
        <member name="M:CCNCMachine.GetProductCode">
            <summary> Gets the product code of this MT machine. </summary>
            <returns> Product code of this MT machine. </returns>
        </member>
        <member name="M:CCNCMachine.ConfigurationIdEquals(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true, if mdCompId = m_Params.configurationId. </summary>
            <param name="mdCompId"> component id (guid) to compare. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CCNCMachine.ConfigurationIdEquals(System.Byte!System.Runtime.CompilerServices.IsConst(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N24])">
            <summary> Configuration identifier equals. </summary>
            <param name="compId"> Identifier for the component. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CCNCMachine.SetConfigurationId(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Define the machine configuration GUID for this machine (initially valid MT only). </summary>
            <param name="mdCompId"> Identifier for the component. </param>
        </member>
        <member name="M:CCNCMachine.SetConfigurationId(System.Byte!System.Runtime.CompilerServices.IsConst(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N24])">
            <summary> Define the machine configuration GUID for this machine (initially valid MT only). </summary>
            <param name="compId"> Identifier for the component. </param>
        </member>
        <member name="M:CCNCMachine.ConfigurationId">
            <summary> Return the machine configuration GUID for this machine (initially valid MT only). </summary>
            <returns> the machine configuration GUID. </returns>
        </member>
        <member name="M:CCNCMachine.Control">
            <summary> Return pointer to CNC control. </summary>
            <returns> A CCNCControl Type. </returns>
        </member>
        <member name="M:CCNCMachine.ProductType">
            <summary> Return machine product type. </summary>
            <returns> A Product Type. </returns>
        </member>
        <member name="M:CCNCMachine.SetType(System.Int32)">
            <summary> Sets a machine type. </summary>
            <param name="machType"> Type of the machine to create. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.GetType">
            <summary> Gets the machine type. </summary>
            <returns> Returns the code value that identifies the machine type (i.e. MACHINE_LATHE). </returns>
        </member>
        <member name="M:CCNCMachine.VersionIsNewerThan(System.Double)">
            <summary> Return true if MD was created after the specified version. </summary>
            <param name="version"> The version to compare the machine to. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.VersionIsOlderThan(System.Double)">
            <summary> Return true if MD was created before the specified version. </summary>
            <param name="version"> The version to compare the machine to. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.VersionEquals(System.Double)">
            <summary> Return true if MD was created with the specified version. </summary>
            <param name="version"> The version to compare the machine to. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.SetVersion">
            <summary> Sets the current version. </summary>
        </member>
        <member name="M:CCNCMachine.Version">
            <summary> Gets the current version. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:CCNCMachine.SetParams(cnc_machine_type*)">
            <summary> Sets the current parameters. </summary>
            <param name="pParams"> If non-null, machine parameters. </param>
        </member>
        <member name="M:CCNCMachine.GetParams(cnc_machine_type*)">
            <summary> Gets the current parameters. </summary>
            <param name="pParams"> If non-null, machine parameters. </param>
        </member>
        <member name="M:CCNCMachine.Params">
            <summary> Gets the current parameters. </summary>
            <returns> null if it fails, else a cnc_machine_type*. </returns>
        </member>
        <member name="M:CCNCMachine.MachTypeToCtrlType">
            <summary> Define a default control type for a given machine type. </summary>
            <returns> A short. </returns>
        </member>
        <member name="M:CCNCMachine.SetDeleteEntities(System.Boolean)">
            <summary> Sets flag indicating wether to deletes the db entities when deleting components. </summary>
            <param name="val"> true = delete db entities, false = don't. </param>
        </member>
        <member name="M:CCNCMachine.GetDeleteEntities">
            <summary> Gets flag indicating wether to deletes the db entities when deleting components. </summary>
            <returns> true = delete db entities, false = don't. </returns>
        </member>
        <member name="M:CCNCMachine.WriteReplacePostDlgValToRegistry(System.Int32)">
            <summary> Write the 'replace post with local copy' state to the registry This value is used if ReadReplacePostFromRegistry () </summary>
            <param name="replacePost"> The replace post. REPLACE_PST, PST_TO_NONE, PST_PROMPT</param>
        </member>
        <member name="M:CCNCMachine.ReadReplacePostDlgValFromRegistry">
            <summary> Read the 'replace post with local copy' state from the registry This value is used if ReadReplacePostFromRegistry () </summary>
            <returns>PST_PROMPT, and sets the initial radio button value in the dialog It is either : REPLACE_PST, PST_TO_NONE</returns>
        </member>
        <member name="M:CCNCMachine.WriteReplacePostToRegistry(System.Int32)">
            <summary>  Write the 'replace post with local copy' state to the registry. </summary>
            <param name="replacePost"> The replace post. REPLACE_PST, PST_TO_NONE, PST_PROMPT</param>
        </member>
        <member name="M:CCNCMachine.ReadReplacePostFromRegistry">
            <summary> Read the 'replace post with local copy' state from the registry. It is one of : REPLACE_PST, PST_TO_NONE, PST_PROMPT. </summary>
            <returns> The replace post from registry. </returns>
        </member>
        <member name="M:CCNCMachine.DeleteCtrl(System.Boolean)">
            <summary> Deletes the control described by deleteEntities. </summary>
            <param name="deleteEntities"> (Optional) delete control entities. </param>
        </member>
        <member name="M:CCNCMachine.InitCtrl(System.Boolean,System.Boolean)">
            <summary> Initializes the control. </summary>
            <param name="forceFileInit"> (Optional) true = force initialization from file. </param>
            <param name="forceCtrlInit"> (Optional) true = force CD initialization from defaults. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.InitSuccf">
            <summary>	Determines if machine object initialized successfully. </summary>
            <returns>	true if was initialized successfully else false. </returns>
        </member>
        <member name="M:CCNCMachine.CopyUid(System.Byte(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N24])">
            <summary> Copies the UID described by ID. </summary>
            <param name="id"> The identifier. </param>
        </member>
        <member name="M:CCNCMachine.CopyUid(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the UID described by ID. </summary>
            <param name="id"> The identifier. </param>
        </member>
        <member name="M:CCNCMachine.UidIsDefined">
            <summary> UID is defined. </summary>
            <returns> A bool. </returns>
        </member>
        <member name="M:CCNCMachine.UidEquals(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return true if the unique ID matches the one input. </summary>
            <param name="id"> (Optional) ID to compare. </param>
        </member>
        <member name="M:CCNCMachine.DeleteUnusedEnts">
            <summary> Delete all entities that used to be, but are no longer used by this machine. </summary>
        </member>
        <member name="M:CCNCMachine.SaveEntInds">
            <summary> Save all ent_idns to m_EntIdnList array. </summary>
        </member>
        <member name="M:CCNCMachine.SetTpGroup(op_group*)">
            <summary> Sets TP group. </summary>
            <param name="pTpGroup"> (Optional) If non-null, (Optional) group the TP belongs to. </param>
            <returns> null if it fails, else an op_group*. </returns>
        </member>
        <member name="M:CCNCMachine.TpGroup">
            <summary> Return pointer to owner toolpath group. </summary>
            <returns> null if it fails, else an op_group*. </returns>
            <summary> Return pointer to owner toolpath group. </summary>
            <returns> null if not owned, else an const pointer to the owner toolpath group. </returns>
        </member>
        <member name="M:CCNCMachine.RemovePointingGroup(Cnc.MachineDef.Component.MdClassEnt*)">
            <summary> Remove pointing object to track them. </summary>
            <param name="pMdClassEnt"> Ptr of the group pointing on the machine. </param>
        </member>
        <member name="M:CCNCMachine.AddPointingGroup(Cnc.MachineDef.Component.MdClassEnt*)">
            <summary> Add pointing object to track them. </summary>
            <param name="pMdClassEnt"> Ptr of the group pointing on the machine. </param>
        </member>
        <member name="M:CCNCMachine.CreateLevelForComponentImport(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates level for component import. </summary>
            <param name="Name"> The name for the level. </param>
        </member>
        <member name="M:CCNCMachine.SaveChuckJawOrigins">
            <summary> Save chuck jaw origin positions for all chucks. </summary>
        </member>
        <member name="M:CCNCMachine.InitCoolant">
            <summary> Initialize coolant values. </summary>
        </member>
        <member name="M:CCNCMachine.InitDynamics">
            <summary> Initialize machine dynamics values. </summary>
        </member>
        <member name="M:CCNCMachine.InitFiles">
            <summary> Initializes the files. </summary>
        </member>
        <member name="M:CCNCMachine.InitComment">
            <summary> Initializes the comment. </summary>
        </member>
        <member name="M:CCNCMachine.InitData">
            <summary> Initializes the data. </summary>
        </member>
        <member name="M:CCNCMachine.InitUid">
            <summary> Initializes the UID. </summary>
        </member>
        <member name="M:CCNCMachine.Accept(IMdComponentVisitor*)">
            <summary> Accepts the given visitor. </summary>
            <param name="visitor"> The visitor. </param>
        </member>
        <member name="M:CCNCMachine.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CCNCMachine.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Constructor.
		  Initialize from machine entity and components in a file
			If ent_idn = 0, the 1st machine in the file will be read in
</summary>
            <param name="filename">		   name of file to read from. </param>
            <param name="ent_idn">		   (Optional) ID of machine to read. </param>
            <param name="paramsOnly">	   (Optional) true = load only the machine parameters. </param>
            <param name="dbSave">		   (Optional) true = save entities, false = don't. </param>
            <param name="loadGeo">		   (Optional) true = load machine geometry from the file. </param>
            <param name="preserveEntIdns"> (Optional) True to preserve the entity ids as they are in the file, or false to reset them all to 0. </param>
        </member>
        <member name="M:CCNCMachine.#ctor(op_group*,System.Boolean,System.Byte,System.Boolean)">
            <summary> Constructor. 
		  Initialize based on a toolpath group.
		  Optionally load the machine into the database from the machine file for the group if it's not already loaded
			getFromFile states :
				false = try the database only
				true = try the database, try the file, if the database fails
				TRY_FILE_ONLY = try the file only
</summary>
            <param name="pTpGroup">    If non-null, pointer to toolpath manager group. </param>
            <param name="paramsOnly">  (Optional) true = load only the machine parameters. </param>
            <param name="getFromFile"> (Optional) try to load the machine from file. </param>
            <param name="loadGeo">	   (Optional) true = load machine geometry from the file (getFromFile = true). </param>
        </member>
        <member name="M:CCNCMachine.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Constructor. 
		  Initialize from cnc_machine entity
			-no machine group affiliation
			-used for initializing the machine in an MD file
</summary>
            <param name="ent_idn">    The ent_idn of cnc_machine entity. </param>
            <param name="paramsOnly"> (Optional) true = load only the machine parameters. </param>
        </member>
        <member name="M:CCNCMachine.#ctor(System.Boolean,System.Int32)">
            <summary> Constructor.
		  Default Constructor
</summary>
            <param name="createIfNotInDb"> (Optional) create an 'empty' machine, if required. </param>
            <param name="type">			   (Optional) default machine type. </param>
        </member>
        <member name="T:CCNCMachine">
            <summary>	 Main machine tool class </summary>
            <remarks>	This class is used to provide an intelligent machine tool database to the
			rest of the Mastercam modules. The class can be initialized as follows:
				1. no initialization - an empty machine tool with or without a machine base is created
				2. machine base entity - the machine database will be initialized from a CNC machine entity in the database.
				3. toolpath group - the machine database will be initialized from the machine tool information in a toolpath group
				4. external file - the machine will be initialized from an external file. As the first
				
			CNC machine entity encountered will be used to define the machine, therefore, the file should only contain
			ONE machine tool. This intended for reading in a machine definition file
			Setting the paramsOnly parameter in the last 2 constructors to true, is
			beneficial for quickly loading a machine object when only general parameters
			are required (paths, coolant, name, etc) and will GREATLY speed up loading time
			when the machine must be created in a loop. The control definition IS however
			loaded with the machine definition in this case, as many toolpath parameters reside
			in the control definition.
			
			Once a CCNCMachine object is created, it can be 'interrogated' by the
			software to provide necessary information, used to update operation
			information, or used for simulation purposes For example:
			
				CCNCMachine theMachine (currentToolpathGroup);
				if (theMachine.EnoughAxesForOpType (opcode))
					ProgramTheOperation(opcode);
					
			</remarks>
        </member>
        <member name="M:ToolLoadErrorDlg(CCNCMachine*,std.vector&lt;ToolLoadInfo,std.allocator&lt;ToolLoadInfo&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Tool load error dialog. </summary>
            <param name="pMachine">   If non-null, the machine. </param>
            <param name="loadInfo">   info for failed tools. </param>
            <param name="pParentWnd"> If non-null, the parent window. </param>
        </member>
        <member name="M:ToolLoadInfo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ToolLoadInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:PrivateMachineInfo.GetEntType">
            <summary> Gets the assoc_id representing the ClassEnt type (i.e. OP_ID). </summary>
            <returns> The assoc_id representing the ClassEnt type. </returns>
        </member>
        <member name="M:PrivateMachineInfo.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Writes/Serializes the entity from a given archive. </summary>
            <param name="archive"> The archive to write to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PrivateMachineInfo.SetProductCode(System.Int32)">
            <summary> Sets the product code of the machine. </summary>
            <param name="value"> Product code of the machine. </param>
        </member>
        <member name="M:PrivateMachineInfo.GetProductCode">
            <summary> Gets the product code of the machine. </summary>
            <returns> Product code of the machine. </returns>
        </member>
        <member name="M:PrivateMachineInfo.op_Assign(PrivateMachineInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Finalizes an instance of the PrivateMachineInfo class. </summary>
            <summary> Assignment operator. </summary>
            <param name="src"> Source object to copy. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="T:PrivateMachineInfo">
            <summary> Stores additional information about a machine that should NOT be exposed in the SDK. </summary>
        </member>
        <member name="T:unit_conversion_type">
unit conversion flags
</member>
        <member name="M:Cnc.MachineDef.Component.ToolOrientServiceFactory.CreateServiceW(Cnc.MachineDef.Component.CMachineComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates tool orientation service. </summary>
            <param name="parentComponent"> Type of the parent component. </param>
            <param name="toolEnt"> Tool entity. </param>
            <returns> The newly created tool orientation service. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.ToolOrientServiceFactory.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.ToolOrientServiceFactory.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.MachineDef.Component.ToolOrientServiceFactory">
            <summary> Tool orientation service factory. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.IToolOrientService.SwapParentComponent(Cnc.MachineDef.Component.IMdComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Swap parent component. </summary>
            <param name="parentComp"> The new parent component. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.IToolOrientService.CalcToolInitXform(Cnc.MachineDef.Component.CToolComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16)">
            <summary> Computes the default tool orientation - InitXform() for a tool. </summary>
            <param name="toolComp"> The tool component. </param>
            <param name="orientMatrix">   The tool orientation matrix. </param>
            <param name="planeViewID"> Plane view ID for tool orientation matrix. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.IToolOrientService.InitRefPt(Cnc.MachineDef.Component.CToolComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize the component's reference point (RefPt())
		  based on the parent tool holding component. </summary>
            <param name="toolComp"> The tool component. </param>
            <param name="toolEnt">	The tool entity. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.IToolOrientService.InitMachPosAndOrient(Cnc.MachineDef.Component.CToolComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Destructor. </summary>
            <summary> Initialize the component's machine position (InitPt()) and 
		  orientation (InitXform()) based on the parent tool holding 
		  component. </summary>
            <param name="toolComp"> The tool component. </param>
            <param name="toolEnt">  The tool entity. </param>
        </member>
        <member name="T:Cnc.MachineDef.Component.IToolOrientService">
            <summary> Interface class to provide tool orient service for computing and assisting in modifying 
		  the tool component's orientation when assembling the tool and locator components on the
		  machine. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(machine_component_type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a component. </summary>
            <param name="data"> The data. </param>
            <returns> An IMdComponentUniquePtr. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.ComponentFactory.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.ComponentFactory.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.MachineDef.Component.ComponentFactory">
            <summary> Machine definition component factory. </summary>
        </member>
        <member name="M:GetCenterToolsUsedInTailstock(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get a list of center tools used in tailstock operations. </summary>
            <param name="centerToolsUsed"> The center tools used. </param>
        </member>
        <member name="M:GetToolsUsed(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ToolsUsed*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets tools used. </summary>
            <param name="selOpIds"> 	List of identifiers for the selected operations. </param>
            <param name="toolsUsed">	The populated collection of tools used data. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:GetToolsUsed(ToolsUsed*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get a list of tools used in operations. 
		  Note: Tools used in dirty xform ops are not counted. 
		  Note: Tools used in fbm op are not counted since fbm has no toolpath. </summary>
            <param name="toolsUsed"> List of tools used. </param>
        </member>
        <member name="M:TokenDefaultsMap.Reload">
            <summary> Reloads the Token Map. </summary>
        </member>
        <member name="M:TokenDefaultsMap.Insert(System.Char!System.Runtime.CompilerServices.IsConst*,TokenRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inserts entry into the map. </summary>
            <param name="subFxnName"> Map key which is the name of the token subfunction. </param>
            <param name="tokenItem">  The token item. </param>
        </member>
        <member name="M:TokenDefaultsMap.Clear">
            <summary> Clears this map to its blank/initial state. </summary>
        </member>
        <member name="M:TokenDefaultsMap.GetSize">
            <summary> Gets the size. </summary>
            <returns> The size. </returns>
        </member>
        <member name="M:TokenDefaultsMap.SetSuccessfulReceiveFlagOnAll(System.Boolean)">
            <summary> Sets successful receive flag on all. </summary>
            <param name="successfullReadFromCodeExpert"> true to successfull read from code expert. </param>
        </member>
        <member name="M:TokenDefaultsMap.GetTokenValue(System.Char!System.Runtime.CompilerServices.IsConst*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets CString/State token value out of token map/dictionary. </summary>
            <param name="subFxnName"> Key string identifying token </param>
            <param name="value"> token state/string value. </param>
            <returns> true/false = success/token not found or bad value type. </returns>
        </member>
        <member name="M:TokenDefaultsMap.GetTokenValue(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets double token value out of token map/dictionary. </summary>
            <param name="subFxnName"> Key string identifying token </param>
            <param name="value"> token double value. </param>
            <returns> true/false = success/token not found or bad value type. </returns>
        </member>
        <member name="M:TokenDefaultsMap.GetTokenValue(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets integer token value out of token map/dictionary. </summary>
            <param name="subFxnName"> Key string identifying token </param>
            <param name="value"> token integer value. </param>
            <returns> true/false = success/token not found or bad value type. </returns>
        </member>
        <member name="M:TokenDefaultsMap.GetTokenValue(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets bool token value out of token map/dictionary. </summary>
            <param name="subFxnName"> Key string identifying token </param>
            <param name="value"> token bool value. </param>
            <returns> true/false = success/token not found or bad value type. </returns>
        </member>
        <member name="M:TokenDefaultsMap.Dispose">
            <summary> Finalizes an instance of the TokenDefaultsMap class. </summary>
        </member>
        <member name="M:TokenDefaultsMap.#ctor">
            <summary> Initializes a new instance of the TokenDefaultsMap class. </summary>
        </member>
        <member name="T:TokenDefaultsMap">
            <summary> Map of token request objects which will be filled through a query to CodeExpert. </summary>
        </member>
        <member name="M:MachinePositionList.PositionGuidExistsInList(MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Checks if position unique identifier exists in list. </summary>
            <param name="machPos"> The machine position with the GUID to check. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MachinePositionList.TryToParseAndAddX7MachinePosition(MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Try to parse and interpret the X7 reference position name into X8 reference position properties. </summary>
            <remarks> Will attempt to delete the entity from the database if fails to create a valid newer type machine position </remarks>
            <param name="machPos">				The mach position. </param>
            <param name="machPosEnt">			The mach position ent. </param>
            <param name="deleteInvalidEntity"> true to delete the invalid entity. </param>
        </member>
        <member name="M:MachinePositionList.InitFromX7File(machine_position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize the list of reference positions from an open file (X7 and older versions). </summary>
            <param name="firstMachPos"> The first machine position in the list. </param>
            <param name="fp">			The file. </param>
        </member>
        <member name="M:MachinePositionList.InitFromCurrentVersionFile(ent_idn_list!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Initialize the list from an open file (current version). </summary>
            <param name="entList">	List of machine position entities. </param>
            <param name="fp">   	The (open) file information. </param>
        </member>
        <member name="M:MachinePositionList.InitFromX7Db(machine_position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Initialize the list from the database (X7 and older versions). </summary>
            <param name="firstMachPos">	The first machine position. </param>
        </member>
        <member name="M:MachinePositionList.InitFromCurrentVersionDb(ent_idn_list!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Initialize the list from the database (current version). </summary>
            <param name="entList">	List of machine position entities. </param>
        </member>
        <member name="M:MachinePositionList.FindPosition(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Find a position from the list by unique ID. </summary>
            <param name="guid">	The unique ID for the position </param>
            <returns>	The (unmodifiable) position found. </returns>
        </member>
        <member name="M:MachinePositionList.Position(System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary>	Find a position from the list by listId. </summary>
            <param name="listId">	List id for the position. </param>
            <returns>	The (modifiable) position found. </returns>
        </member>
        <member name="M:MachinePositionList.FindPosition(System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary>	Find a position from the list by listId. </summary>
            <param name="listId">	List id for the ent. </param>
            <returns>	The (unmodifiable) position found. </returns>
        </member>
        <member name="M:MachinePositionList.Position(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary>	Find a position from the list by entId. </summary>
            <param name="entId">	Entity id for the position. </param>
            <returns>	The (modifiable) position found. </returns>
        </member>
        <member name="M:MachinePositionList.FindPosition(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary>	Find a position from the list by entId. </summary>
            <param name="entId">	Entity id for the ent. </param>
            <returns>	The (unmodifiable) position found. </returns>
        </member>
        <member name="M:MachinePositionList.NextListId">
            <summary>	Finds the next unique list identifier. </summary>
            <returns>	The next unique list identifier. </returns>
        </member>
        <member name="M:MachinePositionList.end">
            <summary> Returns a const iterator to the end of the embedded position vector. </summary>
            <remarks> This allows us to use the range base for directly on this class. </remarks>
            <returns>  Const iterator to the end of the embeded position vector. </returns>
        </member>
        <member name="M:MachinePositionList.begin">
            <summary> Returns a const iterator to the beginning of the embedded position vector. </summary>
            <remarks> This allows us to use the range base for directly on this class. </remarks>
            <returns> Const iterator to the beginning of the embeded position vector </returns>
        </member>
        <member name="M:MachinePositionList.SaveEntIds(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Save the entity id's . </summary>
            <param name="entIds"> List of identifiers for the entitiess. </param>
        </member>
        <member name="M:MachinePositionList.InitEntIdsTo0">
            <summary> Initialises the entity id's to 0. </summary>
        </member>
        <member name="M:MachinePositionList.InitFromFile(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize the list from an open file. </summary>
            <param name="entListId"> Entity id for the list. </param>
            <param name="fp">		The (open) file information. </param>
        </member>
        <member name="M:MachinePositionList.SaveToDb">
            <summary> Saves the list to the database. </summary>
            <returns> The entity id list entity id if it succeeds, 0 otherwise. </returns>
        </member>
        <member name="M:MachinePositionList.InitFromDb(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Initialize the list from the database. </summary>
            <param name="entListId"> Entity id for the list. </param>
        </member>
        <member name="M:MachinePositionList.UpdatePosition(System.Int32!System.Runtime.CompilerServices.IsConst,MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update a position in the list. </summary>
            <param name="index">  index for the position to update. </param>
            <param name="machPos"> The new machine position parameters. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.UpdatePosition(System.UInt64!System.Runtime.CompilerServices.IsConst,MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update a position in the list. </summary>
            <param name="listId">  List id for the position to update. </param>
            <param name="machPos"> The new machine position parameters. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.UpdatePosition(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update a position in the list. </summary>
            <param name="entId">   Entity id for the position to update. </param>
            <param name="machPos"> The new machine position parameters. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.DeleteAll(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Delete all positions from the list. </summary>
            <param name="deleteEnts"> Delete the entities too. </param>
        </member>
        <member name="M:MachinePositionList.DeleteAllEnts">
            <summary> Delete entities for all positions in the list. </summary>
        </member>
        <member name="M:MachinePositionList.DeletePositionUsingAxisCombo(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes all positions using the axis combination. </summary>
            <param name="axisComboGuid"> The axis combination component ID. </param>
        </member>
        <member name="M:MachinePositionList.DeletePosition(System.UInt64!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Delete a position by list id. </summary>
            <param name="listId">    List identifier for the position to delete. </param>
            <param name="deleteEnt"> true = delete the entity also. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.DeletePosition(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Delete a position by entity id. </summary>
            <param name="entId">		Identifier for the position to delete. </param>
            <param name="deleteEnt">	true = delete the entity also. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.DeleteAt(System.UInt64!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Delete a position by index. </summary>
            <param name="index">		Zero-based index of the position to delete. </param>
            <param name="deleteEnt">	true = delete the entity also. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.AddPosition(MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a position to the list. </summary>
            <remarks> If the GUID of the machine position being added has a match in the current list then a new unique GUID will be 
		  assigned to the newly added position. </remarks>
            <param name="machPos"> The machine position. </param>
            <returns> The list id of position added to the list. </returns>
        </member>
        <member name="M:MachinePositionList.GetHomePosition(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets the home position in the list for a given axis combo. </summary>
            <param name="axisComboId">	Identifier for the axis combo. </param>
            <param name="homePos">		The home position found. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MachinePositionList.GetPosition(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a position. </summary>
            <param name="guid">    Unique identifier. </param>
            <param name="machPos"> The machine position. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.GetPosition(System.UInt64!System.Runtime.CompilerServices.IsConst,MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a position by list id. </summary>
            <param name="listId">  List id for the position. </param>
            <param name="machPos"> The machine position. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.GetPosition(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a position by entity id. </summary>
            <param name="entId">   Entity id for the position. </param>
            <param name="machPos"> The machine position. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.PositionExists(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Queries if a given position exists. </summary>
            <param name="entId"> Entity id for the position. </param>
            <returns> true if the position is in the list, false if it isn't. </returns>
        </member>
        <member name="M:MachinePositionList.GetAt(System.UInt64!System.Runtime.CompilerServices.IsConst,MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get a position from the list by index. </summary>
            <param name="index">   Zero-based index of the position in the list. </param>
            <param name="machPos"> The mach position. </param>
            <returns> true if it succeeds, false if the index is invalid. </returns>
        </member>
        <member name="M:MachinePositionList.NumPositions">
            <summary> Return the number of machine positions defined. </summary>
            <returns> The number of machine positions defined. </returns>
        </member>
        <member name="M:MachinePositionList.HasAxisCombination(CAxisCombination*)">
            <summary> Determines if this list has a position that uses the input axis combination. </summary>
            <param name="pAC"> The axis combination to check. </param>
            <returns> true if it does, false otherwise. </returns>
        </member>
        <member name="M:MachinePositionList.HasMGMachine">
            <summary> Determines if this a list from an MGP machine. </summary>
            <returns> true if this a list from an MGP machine, false otherwise. </returns>
        </member>
        <member name="M:MachinePositionList.SetMachine(CCNCMachine*)">
            <summary> Sets a machine for this list. </summary>
            <param name="pMachine"> The machine to use. </param>
        </member>
        <member name="M:MachinePositionList.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:MachinePositionList.#ctor(CCNCMachine*)">
            <summary> Initializes a new instance of the MachinePositionList class. </summary>
            <param name="pMachine"> If non-null, the machine object to which the MachinePositions refer to. </param>
        </member>
        <member name="M:MachinePositionList.#ctor(MachinePositionList!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes a new instance of the MachinePositionList class. </summary>
            <param name="src"> Source for the. </param>
        </member>
        <member name="M:MachinePositionList.#ctor">
            <summary> Initializes a new instance of the MachinePositionList class. </summary>
        </member>
        <member name="T:MachinePositionList">
            <summary> Class to manage a list of machine positions. </summary>
        </member>
        <member name="M:CControlInterface.GetControlNcWirePath(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the NC wire path information for the given control definition

 @return			Returns a wire_nc_path_ctrl pointer with the control's NC wire path information; NULL if the control definition cannot be found or the data cannot be found

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlNcCycles(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the NC cycle information for the given control definition

 @return			Returns a cycles_ctrl pointer with the control's NC cycle information; NULL if the control definition cannot be found or the data cannot be found

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlNcPath(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the NC path information for the given control definition

 @return			Returns a nc_path_ctrl pointer with the control's NC path information; NULL if the control definition cannot be found or the data cannot be found

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlNcOutput(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the NC output information for the given control definition

 @return			Returns a nc_output_ctrl pointer with the control's NC output information; NULL if the control definition cannot be found or the data cannot be found

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlNcWire(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the Wire information for the given control definition

 @return			Returns a nc_dialog_wire_ctrl pointer with the control's Wire information; NULL if the control definition cannot be found or if the given id is not for a Wire control

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlNcLathe(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the Lathe information for the given control definition

 @return			Returns a nc_dialog_lathe_ctrl pointer with the control's Lathe information; NULL if the control definition cannot be found or if the given id is not for a Lathe control

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlNcRouter(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the Router information for the given control definition

 @return			Returns a nc_dialog_router_ctrl pointer with the control's Router information; NULL if the control definition cannot be found or if the given id is not for a Router control

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlNcMill(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the Mill information for the given control definition

 @return			Returns a nc_dialog_mill_ctrl pointer with the control's Mill information; NULL if the control definition cannot be found or if the given id is not for a Mill control

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlPostFile(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the post file structure information for the given control definition

 @return			Returns a file_postlist_ctrl pointer with the control's post file information; NULL if the control definition cannot be found or the data cannot be found

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlFiles(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the file structure information for the given control definition

 @return			Returns a file_ctrl pointer with the control's file information; NULL if the control definition cannot be found or the data cannot be found

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlCommunication(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the communication information for the given control definition

 @return			Returns a communication_ctrl pointer with the control's communication information; NULL if the control definition cannot be found or the data cannot be found

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControlTolerance(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the control tolerance of the given control definition

 @return			Returns a tolerance_ctrl pointer with the control's tolerance; NULL if the control definition cannot be found or the data cannot be found

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.GetControl(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets a control based on it's control definition id

 @return			Returns a control_type pointer with the type of the returned control; NULL if the control definition cannot be found

 @param[in]		ulBaseEntIdn			control def entity id


</member>
        <member name="M:CControlInterface.MDMControlDialog(CCNCControl*,CWnd*)">

 @par Purpose:
			This method launches the control dialog via the machine def dialogs to edit or view a given control

 @return			The value returned by the dialog's DoModal() function; in the case of a bad control, CNC_ERR_BAD_CONTROL is returned

 @param[in,out]	pControl				pointer to the control to edit or view
 @param[in]		pCWnd					pointer to the CWnd parent dialog


</member>
        <member name="M:CControlInterface.ControlDialogFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,CWnd*)">

 @par Purpose:
			This method launches the control dialog to open the given control file.  Currently it is only used
			for control files specified as command line arguments (or dragged and dropped)
			to open the control def dialog instead of opening the control file as a part file.

 @return			The value returned by the dialog's DoModal() function.


</member>
        <member name="M:CControlInterface.ToolBarControlButton">

 @par Purpose:
			This method launches the control dialog via the tool bar to edit or view the current control

 @return			The value returned by the dialog's DoModal() function.


</member>
        <member name="M:GetUpdateControlFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Int32)">

 @par Purpose:
			This method calls the open file dialog with options to generate messages and file exists prompts

 @return			true if the control file is selected and not cancel; false if not

 @param[in/out]	strControlFileName						specifies the control file name
 @param[in]		strOriginalControlFileNameForMessage	Original control file name when generating message
 @param[in]		snMessage								message type to generate, FILE_MSG_NONE, FILE_MSG_VERSION_EQ_EXT, FILE_MSG_OLDER_VERSION 
 @param[in]		nMajor									version number (internal Mastercam) when generating message


</member>
        <member name="M:PromptControlFileVersionUpdate(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method tests the passed control file for current version

 @return			true if the control was written/updated/matched; false if not

 @param[in/out]	strControlFileName			specifies the control file name result of interaction
 @param[in]		strPassedControlFileName	specifies the control file name passed for processing
 @param[out]		snControlErr				fills a user-provided short with a control error value if there was an error


</member>
        <member name="M:CopyControlToFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method copies a control file to a control file

 @return			true if the control was written successfully; false if not

 @param[in]		strSourceControlFileName		specifies the control file name to be written
 @param[in]		strTargetControlFileName		specifies the control's post name


</member>
        <member name="M:CCNCControl.Dispose">

 @par Purpose:
			Destructor


</member>
        <member name="M:CCNCControl.#ctor(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Int16,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_group*,CtrlDefLoadData)">
            <summary> Constructor. </summary>
            <param name="strControlFile">  the name of the control file to be used. </param>
            <param name="strPostFile">	   the name of the post file to be used. </param>
            <param name="ulEntIdnForBase"> a base entity id number for the database to use (0 means it has no database yet). </param>
            <param name="snControlType">   control type to set the control to, as per the controldb_ch3 types. </param>
            <param name="snCallSource">    the bitwise controldb value specifying the origin of the control dialog call. </param>
            <param name="snControlErr">    fills a user-provided short with a control error value if there was an error. </param>
            <param name="snPostErr">	   fills a user-provided short with a post error value if there was an error. </param>
            <param name="pMachGrp">		   (Optional) If non-null, (Optional) group for machine which owns this control. </param>
            <param name="dialogCase">	   (Optional) the dialog case. </param>
        </member>
        <member name="M:CCNCControl.#ctor(CCNCMachine*)">

 @par Purpose:
			Default constructor for MT


</member>
        <member name="M:CCNCControl.#ctor">

 @par Purpose:
			Default constructor


</member>
        <member name="M:CCNCControl.PostAndControlTypeAEB(System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the post and control type from the product bits. </summary>
            <param name="controlType"> Type of the control. </param>
            <param name="productType"> Type of the product. </param>
            <returns> Nothing. </returns>
        </member>
        <member name="M:CCNCControl.GetPassedPostFileName">
            <summary> Gets passed post file name. </summary>
            <returns> The passed post file name. </returns>
        </member>
        <member name="M:CCNCControl.GetPassedControlFileName">
            <summary> Gets passed control file name. </summary>
            <returns> The passed control file name. </returns>
        </member>
        <member name="M:CCNCControl.GetPostFileName">
            <summary> Gets post file name. </summary>
            <returns> The post file name. </returns>
        </member>
        <member name="M:CCNCControl.GetCDPassword(CWnd*)">

 @par Purpose:
			This method brings up the Set a CD Password dialog

 @note			there is no status value returned by this function; the best way to tell if the user was successful
				in locking the CD is to follow this with a call to IsFileLocked()

 @param[in]		pParent			the CWnd pointer to the parent dialog that this call spawned from


</member>
        <member name="M:CCNCControl.UnlockCDDefinition(CWnd*)">

 @par Purpose:
			This method brings up the Unlock Control Definition dialog

 @note			there is no status value returned by this function; the best way to tell if the user was successful
				in unlocking the CD is to follow this with a call to IsFileLocked()

 @param[in]		pParent			the CWnd pointer to the parent dialog that this call spawned from


</member>
        <member name="M:CCNCControl.ReadPasswordFromFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method internally reads in the password from a given control definition file

 @return			true if the control file password was read in successfully; false if not

 @param[in]		strControlFileName	the control file to read in the password for
 @param[in]		strPostName			the name of the active post in the specified control file
 @param[in]		snControlType		the type of control being read, as per the controldb_ch3 types
 @param[out]		snControlErr		if the function returns false, fills a user-provided short with a control error value
 @param[out]		snPostErr			if the function returns false, fills a user-provided short with a post error value if there is one


</member>
        <member name="M:CCNCControl.IsFileLocked(System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method determines whether the current control file is locked

 @return			true if the file is locked; false if not

 @param[in]		snLockType		the type of lock being used
 @param[in]		bytLockLevel	unused


</member>
        <member name="M:CCNCControl.HasFileDefinition">

 @par Purpose:
			This method determines if the current control has an associated control file with it

 @return			true if the current control has a file definition associated with it; false if not


</member>
        <member name="M:CCNCControl.PermissionWriteToFile">

 @par Purpose:
			This method determines whether or not their are write permissions for the current control

 @return			true if the current control has write permissions; false if not


</member>
        <member name="M:CCNCControl.ResetPassword">

 @par Purpose:
			This method resets the password of the current control to a NULL value


</member>
        <member name="M:CCNCControl.OpenControlFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 @par Purpose:
			This method attempts to open (or create)

 @return			true if the opening of the control file was successful; false if not

 @param[in]		strControlFileName	the name of the control file to open
 @param[out]		snControlErr		if the function returns false, fills a user-provided short with a control error value
 @param[in]		bCreate				specifies whether the file is to be opened with write access or, in the case of it not existing yet, whether it is to be created


</member>
        <member name="M:CCNCControl.ConvertTypeToProdType(System.Int16)">

 @par Purpose:
			This method converts the control type (controldb_ch3) to the file default routine type

 @return			a byte value holding the file routine's control type

 @param[in]		snControlType	the type of control being converted, as per the controldb_ch3 types


</member>
        <member name="M:CCNCControl.DeleteCopyDB(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method deletes the local copy of the database through a list traversal

 @return			true if the deletion of the local copy was successful; false if not

 @param[in]		ulBaseEntIdn	the entity id of the db's base entity


</member>
        <member name="M:CCNCControl.OnControlTypeExitOk(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CArray&lt;file_postlist_ctrl,file_postlist_ctrl&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method goes through the dialog post list and compares to the files, removing deleted or dead records

 @return			true if all of the dead or deleted records were removed successfully; false if not

 @note			This is generally only called when the control type changes or when the user exits on OK

 @param[in]		strControlFileName	the name of the control file to check
 @param[in]		aFilePostsIn		the post file list array to check against
 @param[in]		nFilePostsIn		the number of post files listed in the above array
 @param[in]		snControlType		the type of control being checked, as per the controldb_ch3 types


</member>
        <member name="M:CCNCControl.DeleteRecord(ent*,System.Boolean*)">

 @par Purpose:
			This method deletes a control entity from the database

 @param[in]		entDB			the control entity to be deleted
 @param[out]		bOk				returns true if the deletion was successful; false if not


</member>
        <member name="M:CCNCControl.OpenControlRead(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method opens a control file for reading

 @param[in]		strControlFileName	the name of the control file to read
 @param[out]		snControlErr		fills a user-provided short with a control error value if there was an error


</member>
        <member name="M:CCNCControl.ReadEntToControl(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 @par Purpose:
			This method sets dialog control variables based on the given control entity's information

 @param[in]		entDB			the control entity to set a dialog page with
 @param[out]		snRecordsFound	returns the bitwise or of all of the pages which have been updated
 @param[in]		bReadingFile	specifies whether or not this is just in the process of reading in a file


</member>
        <member name="M:CCNCControl.RewriteUpdateEnt(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Byte)">

 @par Purpose:
			This method rewrites and updates a given control entity

 @param[in]		entDB			the control entity to be updated
 @param[out]		snUpdated		returns the bitwise or of all of the pages which have been updated
 @param[out]		bReadingFile	specifies whether or not this is just in the process of reading in a file
 @param[out]		bytAccess		specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types


</member>
        <member name="M:CCNCControl.RewriteLink(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Byte)">

 @par Purpose:
			This method resets the links for the last entity entered into the database

 @param[in,out]	entLast			the control entity to be re-linked; returns the newly linked entity structure
 @param[in]		ulPrevIdn		the entity id of the previous control entity
 @param[in]		ulNextIdn		the entity id of the next control entity
 @param[in]		lPostId			the entity id of the post entity to be associated with this control entity
 @param[in]		snControlType	the type of control being relinked, as per the controldb_ch3 types
 @param[in]		bFirstOnAppend	specifies if the database is already at it's end and this entity is to be appended
 @param[in]		bytAccess		specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types


</member>
        <member name="M:CCNCControl.AddPostToDB(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Post data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB			should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast			should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn		the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess		specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetControlPostStatus(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			This method sets the post status of a given post

 @return			the control's new post status, of type controldb_ch6

 @param[in]		szDefault		the post's default post status name
 @param[in]		szPostName		the name of the post to change the status of


</member>
        <member name="M:CCNCControl.SetActivePostFile(file_postlist_ctrl*)">

 @par Purpose:
			This method sets the post information for the currently active post

 @param[in]		filelist		the data with which to set the currently active post


</member>
        <member name="M:CCNCControl.GetActivePostFile(file_postlist_ctrl*)">

 @par Purpose:
			This method gets the post information for the currently active post

 @param[out]		filelist		fills a user_provided file_postlist_ctrl with the data of the currently active post


</member>
        <member name="M:CCNCControl.AssignUniqueControlId(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method assigns a unique id to a control definition file

 @return			the new, unique id of the specified control

 @param[in]		strControlName	  the name of the control to assign a unique id for


</member>
        <member name="M:CCNCControl.AssignUniquePostId(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method assigns a unique id to a specified post

 @return			the new, unique id of the specified post

 @param[in]		strPostName		the name of the post to assign a unique id for


</member>
        <member name="M:CCNCControl.GetIdFromPost(System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			This method finds the id number of a given post in the post list

 @return			the matching post's id number

 @param[in]		szPostName		the name of the post to find an id for


</member>
        <member name="M:CCNCControl.AddToPostFileList(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method adds a post to the post file list

 @param[in]		strPostName		the name to assign to the newly added post
 @param[in]		lUniqueId		a unique Id to assign to the post being added


</member>
        <member name="M:CCNCControl.GetRecordFromPost(System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			This method returns the pertinent post information based on an available post's name

 @return			a file_postlist_ctrl which holds the pertinent post's information

 @param[in]		szPostName		the name of the post to get information for


</member>
        <member name="M:CCNCControl.GetPostFilesList(CArray&lt;file_postlist_ctrl,file_postlist_ctrl&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method gets the list of available posts from the current control

 @param[out]		aFilePostsIn	fills a user-provided CArray with the available posts, to be passed back in the type file_postlist_ctrl
 @param[out]		nFilePostsIn	number of available posts listed in the above array


</member>
        <member name="M:CCNCControl.GetBaseEntIdn">

 @par Purpose:
			This method gets the current control's base entity id number

 @return			current control's base entity id number


</member>
        <member name="M:CCNCControl.AddNcWirePath(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Wire NC Path data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB			should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast			should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn		the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess		specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetNocore(nc_wire_nocore_ctrl*)">

 @par Purpose:
			This method sets the current Wire No Core information

 @param[in]		nocore			sets the current control's Wire No Core information by copying it from a user-provided nc_wire_nocore_ctrl variable


</member>
        <member name="M:CCNCControl.GetNocore(nc_wire_nocore_ctrl*)">

 @par Purpose:
			This method gets the current Wire No Core information

 @param[out]		nocore			fills a user-provided nc_wire_nocore_ctrl variable with the current control's Wire No Core information


</member>
        <member name="M:CCNCControl.SetTaper(nc_wire_taper_ctrl*)">

 @par Purpose:
			This method sets the current Wire Taper information

 @param[in]		taper			sets the current control's Wire Taper information by copying it from a user-provided nc_wire_taper_ctrl variable


</member>
        <member name="M:CCNCControl.GetTaper(nc_wire_taper_ctrl*)">

 @par Purpose:
			This method gets the current Wire Taper information

 @param[out]		taper			fills a user-provided nc_wire_taper_ctrl variable with the current control's Wire Taper information


</member>
        <member name="M:CCNCControl.SetRevAux(nc_wire_aux_rev_ctrl*)">

 @par Purpose:
			This method sets the current Wire Auxiliary Reverse information

 @param[in]		rev_aux			sets the current control's Wire Auxiliary Reverse information by copying it from a user-provided nc_wire_aux_rev_ctrl variable


</member>
        <member name="M:CCNCControl.GetRevAux(nc_wire_aux_rev_ctrl*)">

 @par Purpose:
			This method gets the current Wire Auxiliary Reverse information

 @param[out]		rev_aux			fills a user-provided nc_wire_aux_rev_ctrl variable with the current control's Wire Auxiliary Reverse information


</member>
        <member name="M:CCNCControl.SetReverse(nc_wire_reverse_ctrl*)">

 @par Purpose:
			This method sets the current Wire Reverse information

 @param[in]		rev_ctr			sets the current control's Wire Reverse information by copying it from a user-provided nc_wire_reverse_ctrl variable


</member>
        <member name="M:CCNCControl.GetReverse(nc_wire_reverse_ctrl*)">

 @par Purpose:
			This method gets the current Wire Reverse information

 @param[out]		rev_ctr			fills a user-provided nc_wire_reverse_ctrl variable with the current control's Wire Reverse information


</member>
        <member name="M:CCNCControl.SetCorner(nc_wire_corner_ctrl*)">

 @par Purpose:
			This method sets the current Wire Corner information

 @param[in]		corner			sets the current control's Wire Corner information by copying it from a user-provided nc_wire_corner_ctrl variable


</member>
        <member name="M:CCNCControl.GetCorner(nc_wire_corner_ctrl*)">

 @par Purpose:
			This method gets the current Wire Corner information

 @param[out]		corner			fills a user-provided nc_wire_corner_ctrl variable with the current control's Wire Corner information


</member>
        <member name="M:CCNCControl.SetCut(nc_wire_cuts_ctrl*)">

 @par Purpose:
			This method sets the current Wire Cut information

 @param[in]		cuts			sets the current control's Wire Cut information by copying it from a user-provided nc_wire_cuts_ctrl variable


</member>
        <member name="M:CCNCControl.GetCut(nc_wire_cuts_ctrl*)">

 @par Purpose:
			This method gets the current Wire Cut information

 @param[out]		cuts			fills a user-provided nc_wire_cuts_ctrl variable with the current control's Wire Cut information


</member>
        <member name="M:CCNCControl.SetLead(nc_wire_leads_ctrl*)">

 @par Purpose:
			This method sets the current Wire Lead information

 @param[in]		leads			sets the current control's Wire Lead information by copying it from a user-provided nc_wire_leads_ctrl variable


</member>
        <member name="M:CCNCControl.GetLead(nc_wire_leads_ctrl*)">

 @par Purpose:
			This method gets the current Wire Lead information

 @param[out]		leads			fills a user-provided nc_wire_leads_ctrlnc_wire_leads_ctrl variable with the current control's Wire Lead information


</member>
        <member name="M:CCNCControl.AddNcCycles(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Cycles data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetCycles_L(nc_lathe_cycles_ctrl*)">

 @par Purpose:
			This method sets the current Lathe Cycle information

 @param[in]		lathe			sets the current control's Lathe Cycle information by copying it from a user-provided nc_lathe_cycles_ctrl variable


</member>
        <member name="M:CCNCControl.GetCycles_L(nc_lathe_cycles_ctrl*)">

 @par Purpose:
			This method gets the current Lathe Cycle information

 @param[out]		lathe			fills a user-provided nc_lathe_cycles_ctrl variable with the current control's Lathe Cycle information


</member>
        <member name="M:CCNCControl.SetDrillMT(nc_drill_cycles_ctrl*)">

 @par Purpose:
			This method sets the current Drill Mill/Turn information

 @param[in]		drill_mt		sets the current control's Drill Mill/Turn information by copying it from a user-provided nc_drill_cycles_ctrl variable


</member>
        <member name="M:CCNCControl.GetDrillMT(nc_drill_cycles_ctrl*)">

 @par Purpose:
			This method gets the current Drill Mill/Turn information

 @param[out]		drill_mt		fills a user-provided nc_drill_cycles_ctrl variable with the current control's Drill Mill/Turn information


</member>
        <member name="M:CCNCControl.SetDrill(nc_drill_cycles_ctrl*)">

 @par Purpose:
			This method sets the current Drill information

 @param[in]		drill			sets the current control's Drill information by copying it from a user-provided nc_drill_cycles_ctrl variable


</member>
        <member name="M:CCNCControl.GetDrill(nc_drill_cycles_ctrl*)">

 @par Purpose:
			This method gets the current Drill information

 @param[out]		drill			fills a user-provided nc_drill_cycles_ctrl variable with the current control's Drill information


</member>
        <member name="M:CCNCControl.SetCyclesGen(nc_gen_cycles_ctrl*)">

 @par Purpose:
			This method sets the current General Cycle information

 @param[in]		gen				sets the current control's General Cycle information by copying it from a user-provided nc_gen_cycles_ctrl variable


</member>
        <member name="M:CCNCControl.GetCyclesGen(nc_gen_cycles_ctrl*)">

 @par Purpose:
			This method gets the current General Cycle information

 @param[out]		gen				fills a user-provided nc_gen_cycles_ctrl variable with the current control's General Cycle information


</member>
        <member name="M:CCNCControl.SetDrillBool(System.Boolean*)">

 @par Purpose:
			Sets the current control's setting for seperate Mill and Lathe drilling cycle options

 @param[in]		bUseMillandLatheDrillCycles		specifies if the control is to have seperate Mill and Lathe drilling cycle options or not


</member>
        <member name="M:CCNCControl.GetDrillBool">

 @par Purpose:
			Gets the current control's setting for seperate Mill and Lathe drilling cycle options

 @return			true if the control is currently set for seperate Mill and Lathe drilling cycle options; false if not


</member>
        <member name="M:CCNCControl.AddNcPath(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new NC Path data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetSubprogram(nc_path_subs_ctrl*)">

 @par Purpose:
			This method sets the current Subprogram information

 @param[in]		subs			sets the current control's Subprogram information by copying it from a user-provided nc_path_subs_ctrl variable


</member>
        <member name="M:CCNCControl.GetSubprogram(nc_path_subs_ctrl*)">

 @par Purpose:
			This method gets the current Subprogram information

 @param[out]		subs			fills a user-provided nc_path_subs_ctrl variable with the current control's Subprogram information


</member>
        <member name="M:CCNCControl.SetComp(nc_path_comp_ctrl*)">

 @par Purpose:
			This method sets the current Cutter Compensation information

 @param[in]		comp			sets the current control's Cutter Compensation information by copying it from a user-provided nc_path_comp_ctrl variable


</member>
        <member name="M:CCNCControl.GetComp(nc_path_comp_ctrl*)">

 @par Purpose:
			This method gets the current Cutter Compensation information

 @param[out]		comp			fills a user-provided nc_path_comp_ctrl variable with the current control's Cutter Compensation information


</member>
        <member name="M:CCNCControl.SetFeedMT(nc_path_feed_ctrl*)">

 @par Purpose:
			This method sets the current Feed Mill/Turn information

 @param[in]		feed_mt			sets the current control's Feed Mill/Turn information by copying it from a user-provided nc_path_feed_ctrl variable


</member>
        <member name="M:CCNCControl.GetFeedMT(nc_path_feed_ctrl*)">

 @par Purpose:
			This method gets the current Feed Mill/Turn information

 @param[out]		feed_mt			fills a user-provided nc_path_feed_ctrl variable with the current control's Feed Mill/Turn information


</member>
        <member name="M:CCNCControl.SetFeed(nc_path_feed_ctrl*)">

 @par Purpose:
			This method sets the current Feed information

 @param[in]		feed			sets the current control's Feed information by copying it from a user-provided nc_path_feed_ctrl variable


</member>
        <member name="M:CCNCControl.GetFeed(nc_path_feed_ctrl*)">

 @par Purpose:
			This method gets the current Feed information

 @param[out]		feed			fills a user-provided nc_path_feed_ctrl variable with the current control's Feed information


</member>
        <member name="M:CCNCControl.SetRotary(nc_path_rotary_ctrl*)">

 @par Purpose:
			This method sets the current Rotary information

 @param[in]		rotary			sets the current control's Rotary information by copying it from a user-provided nc_path_rotary_ctrl variable


</member>
        <member name="M:CCNCControl.GetRotary(nc_path_rotary_ctrl*)">

 @par Purpose:
			This method gets the current Rotary information

 @param[out]		rotary			fills a user-provided nc_path_rotary_ctrl variable with the current control's Rotary information


</member>
        <member name="M:CCNCControl.SetArcMT(nc_path_arc_ctrl*)">

 @par Purpose:
			This method sets the current Arc Mill/Turn information

 @param[in]		arc_mt			sets the current control's Arc Mill/Turn information by copying it from a user-provided nc_path_arc_ctrl variable


</member>
        <member name="M:CCNCControl.GetArcMT(nc_path_arc_ctrl*)">

 @par Purpose:
			This method gets the current Arc Mill/Turn information

 @param[out]		arc_mt			fills a user-provided nc_path_arc_ctrl variable with the current control's Arc Mill/Turn information


</member>
        <member name="M:CCNCControl.SetArc(nc_path_arc_ctrl*)">

 @par Purpose:
			This method sets the current Arc information

 @param[in]		arc				sets the current control's Arc information by copying it from a user-provided nc_path_arc_ctrl variable


</member>
        <member name="M:CCNCControl.GetArc(nc_path_arc_ctrl*)">

 @par Purpose:
			This method gets the current Arc information

 @param[out]		arc				fills a user-provided nc_path_arc_ctrl variable with the current control's Arc information


</member>
        <member name="M:CCNCControl.SetLinearMT(nc_path_linear_ctrl*)">

 @par Purpose:
			This method sets the current Linear Mill/Turn information

 @param[in]		linear_mt		sets the current control's Linear Mill/Turn information by copying it from a user-provided nc_path_linear_ctrl variable


</member>
        <member name="M:CCNCControl.GetLinearMT(nc_path_linear_ctrl*)">

 @par Purpose:
			This method gets the current Linear Mill/Turn information

 @param[out]		linear_mt		fills a user-provided nc_path_linear_ctrl variable with the current control's Linear Mill/Turn information


</member>
        <member name="M:CCNCControl.SetLinear(nc_path_linear_ctrl*)">

 @par Purpose:
			This method sets the current Linear information

 @param[in]		linear			sets the current control's Linear information by copying it from a user-provided nc_path_linear_ctrl variable


</member>
        <member name="M:CCNCControl.GetLinear(nc_path_linear_ctrl*)">

 @par Purpose:
			This method gets the current Linear information

 @param[out]		linear			fills a user-provided nc_path_linear_ctrl variable with the current control's Linear information


</member>
        <member name="M:CCNCControl.SetToolMT(nc_path_tool_ctrl*)">

 @par Purpose:
			This method sets the current Tool Mill/Turn information

 @param[in]		tool_mt			sets the current control's Tool Mill/Turn information by copying it from a user-provided nc_path_tool_ctrl variable


</member>
        <member name="M:CCNCControl.GetToolMT(nc_path_tool_ctrl*)">

 @par Purpose:
			This method gets the current Tool Mill/Turn information

 @param[out]		tool_mt			fills a user-provided nc_path_tool_ctrl variable with the current control's Tool Mill/Turn information


</member>
        <member name="M:CCNCControl.SetTool(nc_path_tool_ctrl*)">

 @par Purpose:
			This method sets the current Tool information

 @param[in]		tool			sets the current control's Tool information by copying it from a user-provided nc_path_tool_ctrl variable


</member>
        <member name="M:CCNCControl.GetTool(nc_path_tool_ctrl*)">

 @par Purpose:
			This method gets the current Tool information

 @param[out]		tool			fills a user-provided nc_path_tool_ctrl variable with the current control's Tool information


</member>
        <member name="M:CCNCControl.SetWorksys(nc_path_worksys_ctrl*)">

 @par Purpose:
			This method sets the current Work System information

 @param[in]		worksys			sets the current control's Work System information by copying it from a user-provided nc_path_worksys_ctrl variable


</member>
        <member name="M:CCNCControl.GetWorksys(nc_path_worksys_ctrl*)">

 @par Purpose:
			This method gets the current Work System information

 @param[out]		worksys			fills a user-provided nc_path_worksys_ctrl variable with the current control's Work System information


</member>
        <member name="M:CCNCControl.SetMiscIntRealOpModal(System.Boolean*)">

 @par Purpose:
			This method sets the setting specifying if the Misc. values are to be set only on the first operation of each type

 @param[in]		bMiscOpModal	true if Misc. values are currently only setting on the first operation of each type; false if not


</member>
        <member name="M:CCNCControl.GetMiscIntRealOpModal(System.Boolean*)">

 @par Purpose:
			This method returns the setting specifying if the Misc. values are to be set only on the first operation of each type

 @param[out]		bMiscOpModal	true if Misc. values are currently only setting on the first operation of each type; false if not


</member>
        <member name="M:CCNCControl.SetMiscIntRealFromOpDefs(System.Int16*)">

 @par Purpose:
			This method sets the current Misellaneous Int initialization location setting, as per the controldb_ch12 types

 @param[in]		snMiscOpDefs	The value of the Misc. Int initialization location setting to set to, as per the controldb_ch12 types


</member>
        <member name="M:CCNCControl.GetMiscIntRealFromOpDefs(System.Int16*)">

 @par Purpose:
			This method returns the current Misellaneous Int initialization location setting, as per the controldb_ch12 types

 @param[out]		snMiscOpDefs	The value of the current Misc. Int initialization location setting, as per the controldb_ch12 types


</member>
        <member name="M:CCNCControl.SetMiscBool(System.Boolean*)">

 @par Purpose:
			Sets the current control's setting for seperate Mill and Lathe drilling cycle options

 @param[in]		bUseMillandLatheMiscIntReal		specifies if the control is to have seperate Mill and Lathe drilling cycle options or not


</member>
        <member name="M:CCNCControl.GetMiscBool(System.Boolean*)">

 @par Purpose:
			Gets the current control's setting for seperate Mill and Lathe Misc. Int dialog options

 @param[in]		bUseMillandLatheMiscIntReal		specifies if the control is to have seperate Mill and Lathe Misc. Int dialog options or not


</member>
        <member name="M:CCNCControl.AddNcoutput(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Output data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetNcoutputModel(System.Char!System.Runtime.CompilerServices.IsConst*)">

 @par Purpose:
			This method sets the current NC Output Model information

 @param[in]		model			sets the current control's NC Output Model information by copying it from the user-provided string pointer


</member>
        <member name="M:CCNCControl.GetNcoutputModel(System.Char*)">

 @par Purpose:
			This method gets the current NC Output Model information

 @param[out]		model			fills a user-provided string with the current control's NC Output Model information


</member>
        <member name="M:CCNCControl.SetNcoutput(nc_output_ctrl*)">

 @par Purpose:
			This method sets the current NC Output information

 @param[in]		output			sets the current control's NC Output information by copying it from the user-provided nc_output_ctrl variable


</member>
        <member name="M:CCNCControl.GetNcoutput(nc_output_ctrl*)">

 @par Purpose:
			This method gets the current NC Output information

 @param[out]		output			fills a user-provided nc_output_ctrl variable with the current control's NC Output information


</member>
        <member name="M:CCNCControl.AddNcdialog_W(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Wire NC Dialog data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetNcdialog_W(nc_dialog_wire_ctrl*)">

 @par Purpose:
			This method sets the current Wire NC Dialog information

 @param[in]		wire_nc			sets the current control's Wire NC Dialog information based on the provided nc_dialog_wire_ctrl variable


</member>
        <member name="M:CCNCControl.GetNcdialog_W(nc_dialog_wire_ctrl*)">

 @par Purpose:
			This method gets the current Wire NC Dialog information

 @param[out]		wire_nc			fills a user-provided nc_dialog_wire_ctrl variable with the current control's Wire NC Dialog information


</member>
        <member name="M:CCNCControl.AddNcdialog_L(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Lathe NC Dialog data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetNcdialog_L(nc_dialog_lathe_ctrl*)">

 @par Purpose:
			This method sets the current Lathe NC Dialog information

 @param[in]		lathe_nc		 sets the current control's Lathe NC Dialog information based on the provided nc_dialog_lathe_ctrl variable


</member>
        <member name="M:CCNCControl.GetNcdialog_L(nc_dialog_lathe_ctrl*)">

 @par Purpose:
			This method gets the current Lathe NC Dialog information

 @param[out]		lathe_nc		 fills a user-provided nc_dialog_lathe_ctrl variable with the current control's Lathe NC Dialog information


</member>
        <member name="M:CCNCControl.AddNcdialog_R(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Router NC Dialog data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetNcdialog_R(nc_dialog_router_ctrl*)">

 @par Purpose:
			This method sets the current Router NC Dialog information

 @param[in]		router_nc		  sets the current control's Router NC Dialog information based on the provided nc_dialog_router_ctrl variable


</member>
        <member name="M:CCNCControl.GetNcdialog_R(nc_dialog_router_ctrl*)">

 @par Purpose:
			This method gets the current Router NC Dialog information

 @param[out]		router_nc		  fills a user-provided nc_dialog_router_ctrl variable with the current control's Router NC Dialog information


</member>
        <member name="M:CCNCControl.AddNcdialog_M(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Mill NC Dialog data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetNcdialog_M(nc_dialog_mill_ctrl*)">

 @par Purpose:
			This method sets the current Mill NC Dialog information

 @param[in]		mill_nc			sets the current control's Mill NC Dialog information based on the provided nc_dialog_mill_ctrl variable


</member>
        <member name="M:CCNCControl.GetNcdialog_M(nc_dialog_mill_ctrl*)">

 @par Purpose:
			This method gets the current Mill NC Dialog information

 @param[out]		mill_nc			fills a user-provided nc_dialog_mill_ctrl variable with the current control's Mill NC Dialog information


</member>
        <member name="M:CCNCControl.AddFileCommon(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new File data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetFileCommon(file_ctrl*,System.Boolean)">

 @par Purpose:
			This method sets the entire current control's file_ctrl structure

 @param[in]		file			user-provided file_ctrl variable to copy into the current control
 @param[in]		bCheckPath		specifies whether you want the method to double-check the file path first


</member>
        <member name="M:CCNCControl.GetFileCommon(file_ctrl*,System.Boolean)">

 @par Purpose:
			This method returns the entire current control's file_ctrl structure

 @param[out]		file			fills a user-provided file_ctrl variable with a copy of the current file_ctrl info
 @param[in]		bCheckPath		specifies whether you want the method to double-check the file path first


</member>
        <member name="M:CCNCControl.SetPostSettings(post_dlg_settings*)">

 @par Purpose:
			This method sets the current post settings

 @param[in]		strtPostDlg			 the new post settings


</member>
        <member name="M:CCNCControl.GetPostSettings(post_dlg_settings*)">

 @par Purpose:
			This method returns the current post settings

 @param[out]		strtPostDlg			 the current post settings


</member>
        <member name="M:CCNCControl.SetNcSuffix(System.Char*)">

 @par Purpose:
			This method sets the current NC file suffix

 @param[in]		szPath			the new NC file suffix string


</member>
        <member name="M:CCNCControl.GetNcSuffix(System.Char*)">

 @par Purpose:
			This method returns the current NC file suffix

 @param[out]		szPath			the current NC file suffix


</member>
        <member name="M:CCNCControl.SetPowerFileMetric(System.Char*)">

 @par Purpose:
			This method sets the current metric power file path

 @param[in]		szPath			the path to set the metric power file path to


</member>
        <member name="M:CCNCControl.GetPowerFileMetric(System.Char*)">

 @par Purpose:
			This method returns the current metric power file path

 @param[out]		szPath			the current metric power file path


</member>
        <member name="M:CCNCControl.SetPowerFileInch(System.Char*)">

 @par Purpose:
			This method sets the current english power file path

 @param[in]		szPath			the path to set the english power file path to


</member>
        <member name="M:CCNCControl.GetPowerFileInch(System.Char*)">

 @par Purpose:
			This method returns the current english power file path

 @param[out]		szPath			the current english power file path


</member>
        <member name="M:CCNCControl.SetAuxChookFile(System.Char*)">

 @par Purpose:
			This method sets the current auxiliary chook file path

 @param[in]		szPath			the path to set the auxiliary chook file path to


</member>
        <member name="M:CCNCControl.GetAuxChookFile(System.Char*)">

 @par Purpose:
			This method returns the current auxiliary chook file path

 @param[out]		szPath			the current auxiliary chook file path


</member>
        <member name="M:CCNCControl.SetMiscChookFile(System.Char*)">

 @par Purpose:
			This method sets the current miscellaneous values chook file path

 @param[in]		szPath			the path to set the miscellaneous values chook file path to


</member>
        <member name="M:CCNCControl.GetMiscChookFile(System.Char*)">

 @par Purpose:
			This method returns the current miscellaneous values chook file path

 @param[out]		szPath			the current miscellaneous values chook file path


</member>
        <member name="M:CCNCControl.SetDefaultMetricFile(System.Char*)">

 @par Purpose:
			This method sets the current Metric defaults file path

 @param[in]		szPath			the path to set the Metric defaults file path to


</member>
        <member name="M:CCNCControl.GetDefaultMetricFile(System.Char*)">

 @par Purpose:
			This method returns the current Metric defaults file path

 @param[out]		szPath			the current Metric defaults file path


</member>
        <member name="M:CCNCControl.SetDefaultInchFile(System.Char*)">

 @par Purpose:
			This method sets the current English defaults file path

 @param[in]		szPath			the path to set the English defaults file path to


</member>
        <member name="M:CCNCControl.GetDefaultInchFile(System.Char*)">

 @par Purpose:
			This method returns the current English defaults file path

 @param[out]		szPath			the current English defaults file path


</member>
        <member name="M:CCNCControl.SetOpLibraryMetricFile(System.Char*)">

 @par Purpose:
			This method sets the current Metric operations library file path

 @param[in]		szPath			the path to set the Metric operations library file path to


</member>
        <member name="M:CCNCControl.GetOpLibraryMetricFile(System.Char*)">

 @par Purpose:
			This method returns the current Metric operations library file path

 @param[out]		szPath			the current Metric operations library file path


</member>
        <member name="M:CCNCControl.SetOpLibraryInchFile(System.Char*)">

 @par Purpose:
			This method sets the current English operations library file path

 @param[in]		szPath			the path to set the English operations library file path to


</member>
        <member name="M:CCNCControl.GetOpLibraryInchFile(System.Char*)">

 @par Purpose:
			This method returns the current English operations library file path

 @param[out]		szPath			the current English operations library file path


</member>
        <member name="M:CCNCControl.SetPostExeFile(System.Char*)">

 @par Purpose:
			This method sets the current post exe file path

 @param[in]		szPath			the path to set the post exe file path to


</member>
        <member name="M:CCNCControl.GetPostExeFile(System.Char*)">

 @par Purpose:
			This method returns the current post exe file path

 @param[out]		szPath			the current post exe file path


</member>
        <member name="M:CCNCControl.SetSetSheetFile(System.Char*)">

 @par Purpose:
			This method sets the current setup sheet file path

 @param[in]		szPath			the path to set the setup sheet file path to


</member>
        <member name="M:CCNCControl.GetSetSheetFile(System.Char*)">

 @par Purpose:
			This method returns the current setup sheet file path

 @param[out]		szPath			the current setup sheet file path


</member>
        <member name="M:CCNCControl.SetNciPath(System.Char*)">

 @par Purpose:
			This method sets the current NCI file path

 @param[in]		szPath			the path to set the NCI file path to


</member>
        <member name="M:CCNCControl.GetNciPath(System.Char*)">

 @par Purpose:
			This method returns the current NCI file path

 @param[out]		szPath			the current NCI file path


</member>
        <member name="M:CCNCControl.SetNcPath(System.Char*)">

 @par Purpose:
			This method sets the current NC file path

 @param[in]		szPath			the path to set the NC file path to


</member>
        <member name="M:CCNCControl.GetNcPath(System.Char*)">

 @par Purpose:
			This method returns the current NC file path

 @param[out]		szPath			the current NC file path


</member>
        <member name="M:CCNCControl.CheckFilePathName">

 @par Purpose:
			Checks the data paths and files for validity. Uses defaults if non-valid files are found.


</member>
        <member name="M:CCNCControl.AddCommunication(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Communication data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetCommunication(communication_ctrl*)">

 @par Purpose:
			This method sets the current communication_ctrl information

 @param[in]		comm			communication_ctrl structure to replace the current communication information with


</member>
        <member name="M:CCNCControl.GetCommunication(communication_ctrl*)">

 @par Purpose:
			This method gets the current communication information

 @param[out]		comm			fills a user_supplied communication_ctrl structure with the current communication information


</member>
        <member name="M:CCNCControl.AddTolerance(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new Tolerance data structure to the specified database

 @return			true if the data addition was successful; false if not

 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a database, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.SetTolerance(tolerance_ctrl*)">

 @par Purpose:
			This method sets the current tolerance_ctrl information

 @param[in]		tol				tolerance_ctrl structure to replace the current tolerance information with


</member>
        <member name="M:CCNCControl.GetTolerance(tolerance_ctrl*)">

 @par Purpose:
			This method gets the current tolerance_ctrl information

 @param[out]		tol				fills a user_supplied tolerance_ctrl structure with the current tolerance information


</member>
        <member name="M:CCNCControl.AddBase(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">

 @par Purpose:
			This method adds a new base entity to whatever database is specified

 @return			true if the control base was added successfully; false if not

 @param[out]		entDB			fills a user-provided ent structure with the new control base information
 @param[out]		ulPrevIdn		returns the entity id of the previous entity (should return as zero since this is a new base)
 @param[out]		bytAccess		specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types


</member>
        <member name="M:CCNCControl.FindBaseDB(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method finds the base database entity of the current control

 @return			true if the control base was found; false if not

 @param[in]		ulEntIdn		specifies the control entity id of the control base to find
 @param[out]		entDB			fills a user-supplied ent structure with the appropriate control base entity


</member>
        <member name="M:CCNCControl.FindBaseFile(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method finds the base file of the current control

 @return			true if the file was found; false if not

 @param[out]		entDB			fills a user-supplied ent structure with the appropriate control file entity


</member>
        <member name="M:CCNCControl.GetMainPage(control_type*)">

 @par Purpose:
			This method gets the current main page in the control dialog

 @param[out]		control			fills a user-provided control_type pointer with the current main page


</member>
        <member name="M:CCNCControl.SetMainPageManufacturer(control_type*)">

 @par Purpose:
			This method sets the main page manufacturer of the current control dialog

 @param[in]		control			specifies a control_type pointer to a new main page value


</member>
        <member name="M:CCNCControl.GetMainPageManufacturer(control_type*)">

 @par Purpose:
			This method gets the current manufacturer main page in the control dialog

 @param[out]		control			fills a user-provided control_type pointer with the current main page manufacturer


</member>
        <member name="M:CCNCControl.AddNewData(System.Int32!System.Runtime.CompilerServices.IsLong,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Byte)">

 @par Purpose:
			This method adds data for one specified control component to the appropriate database

 @return			true if the data addition was successful; false if not

 @param[in]		ulWhichComponent	component to add data to, based on the controldb_ch1 type
 @param[in,out]	entDB				should be set to what the previous call's entDB returned going in; should return the new component's entity structure
 @param[in,out]	entLast				should be set to the previous call's entLast return going in; should return the entity that was at the top of the stack before we added the new one
 @param[in]		ulPrevIdn			the entity id value of the entity that was entLast going into this function call
 @param[in]		bFirstOnAppend		specifies if the database is already at it's end and this entity is to be appended
 @param[in]		bytAccess			specifies whether to access the internal DB, the file DB, or both, as per the controldb_ch10 types

 @note			if this is the first time through a file, entDB and entLast should both be set to the same base entity initially


</member>
        <member name="M:CCNCControl.GetAllDefinitionsFromFile(CArray&lt;file_postlist_ctrl,file_postlist_ctrl&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> This method returns pertinent post file definition information. </summary>
            <param name="aFilePostsIn"> fills a user-supplied CArray with a list of post files. </param>
            <param name="nFilePostsIn"> returns the number of post files in the returned array. </param>
            <param name="openFile">	    (Optional) true to open the file. </param>
        </member>
        <member name="M:CCNCControl.GetInternalPostListFromFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 @par Purpose:
			This method fills the post list with the posts listed in the specified post file

 @return			true if the file was found successfully; false if not

 @param[in]		strPostName				name of the post file
 @param[in]		snControlType			the control type, as specified by controldb_ch3
 @param[in]		bNoneDefined			return if the default definition was written\n
 @param[in]		bHaveFile				specifies whether or not there is even a post file to be reading\n
											 (if not, it fills the post list with the post name passed (and default if applicable) only)


</member>
        <member name="M:CCNCControl.GetControlTypePostFromFile(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CtrlDefLoadData)">
            <summary> Gets control data from file. </summary>
            <param name="entDB">		 The database entity, must be set. </param>
            <param name="strPostName">   Name of the post. </param>
            <param name="snControlType"> Type of the control. </param>
            <param name="snPostErr">	 The post error. </param>
            <param name="dialogCase">    The dialog call case. </param>
            <returns> The bit markers for data read from the file. </returns>
        </member>
        <member name="M:CCNCControl.FindControlTypeDefaultFromFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for the control type and post file when loading a file. </summary>
            <param name="strPostName">   Name of the post. </param>
            <param name="snControlType"> Type of the control. </param>
        </member>
        <member name="M:CCNCControl.WriteControlToDB(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method writes a control to the database

 @return			true if the control was written successfully; false if not

 @param[in]		strControlFileName		specifies the control file name to be written
 @param[in,out]	ulEntIdn				the control entity id of the control to be written (pass in a zero to use the class id); returns the control entity id
 @param[in]		strPostName				specifies the control's post name
 @param[in]		snControlType			specifies the control's type, as specified by controldb_ch3
 @param[out]		snControlErr			fills a user-provided short with a control error value if there was an error
 @param[out]		snPostErr				fills a user-provided short with a post error value if there was an error


</member>
        <member name="M:CCNCControl.WriteControlToFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method writes a control to a file

 @return			true if the control was written successfully; false if not

 @param[in]		strControlFileName		specifies the control file name to be written
 @param[in]		strPostName				specifies the control's post name
 @param[in]		snControlType			specifies the control's type, as specified by controldb_ch3
 @param[out]		snControlErr			fills a user-provided short with a control error value if there was an error
 @param[out]		snPostErr				fills a user-provided short with a post error value if there was an error


</member>
        <member name="M:CCNCControl.WriteControl(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method writes a control

 @return			true if the control was written successfully; false if not

 @param[in]		strControlFileName		specifies the control file name to be written
 @param[in,out]	ulEntIdn				the control entity id of the control to be written (pass in a zero to use the class id); returns the control entity id
 @param[in]		strPostName				specifies the control's post name
 @param[in]		snControlType			specifies the control's type, as specified by controldb_ch3
 @param[out]		snControlErr			fills a user-provided short with a control error value if there was an error
 @param[out]		snPostErr				fills a user-provided short with a post error value if there was an error


</member>
        <member name="M:CCNCControl.ReadControlTypePostFromDB(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method reads in a control from the database

 @return			true if the control was read in successfully; false if not

 @param[in]		strControlFileName		specifies the control file name to be read in
 @param[in,out]	ulEntIdn				the control entity id of the control to be read (pass in a zero to use the class id); returns the control entity id
 @param[out]		strPostName				fills a user-provided CString with the control's post name
 @param[out]		snControlType			fills a user-provided short with the control's type, as specified by controldb_ch3
 @param[out]		snControlErr			fills a user-provided short with a control error value if there was an error
 @param[out]		snPostErr				fills a user-provided short with a post error value if there was an error


</member>
        <member name="M:CCNCControl.ReadControlTypePostFromFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CtrlDefLoadData)">

 @par Purpose:
			This method reads in a control from a file

 @return			true if the control was read in successfully; false if not

 @param[in]		strControlFileName		specifies the control file name to be read in
 @param[out]		strPostName				fills a user-provided CString with the control's post name
 @param[out]		snControlType			fills a user-provided short with the control's type, as specified by controldb_ch3
 @param[out]		snControlErr			fills a user-provided short with a control error value if there was an error
 @param[out]		snPostErr				fills a user-provided short with a post error value if there was an error
 @param[in]		dialogCase				specifies case with dialog interaction, IGNORE_ARG, INIT_FROM_FILE, SET_FROM_FILE 


</member>
        <member name="M:CCNCControl.ReadControl(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CtrlDefLoadData)">

 @par Purpose:
			This method reads in a new control file

 @return			true if the control was read in successfully; false if not

 @param[in]		strControlFileName		specifies the control file name to be read in
 @param[in,out]	ulEntIdn				the control entity id of the control to be read (pass in a zero to use the class id); returns the control entity id
 @param[out]		strPostName				fills a user-provided CString with the control's post name
 @param[out]		snControlType			fills a user-provided short with the control's type, as specified by controldb_ch3
 @param[out]		snControlErr			fills a user-provided short with a control error value if there was an error
 @param[out]		snPostErr				fills a user-provided short with a post error value if there was an error
 @param[in]		dialogCase				specifies case with dialog interaction, IGNORE_ARG, INIT_FROM_FILE, SET_FROM_FILE 


</member>
        <member name="M:CCNCControl.SetTempDbActive(System.Boolean)">

 @par Purpose:
			This method sets the temporary control database flag as active

 @param[in]		bTempDbActive		true to set the current control database as temporary; false to set it as a non-temporary database

 @note			temporary databases are generally only used for default operation or operations library work


</member>
        <member name="M:CCNCControl.GetTempDbActive">

 @par Purpose:
			This method determines whether there is currently a temporary control database active

 @return			true if a temporary database is indeed active; false if not

 @note			temporary databases are generally only used for default operation or operations library work


</member>
        <member name="M:CCNCControl.ConvertToEdit">

 @par Purpose:
			This method converts the current control into an editable control


</member>
        <member name="M:CCNCControl.CanConvertToEdit">

 @par Purpose:
			This method specifies whether or not the current control can be converted to an editable control

 @return			true if the control can be converted to editable; false if not


</member>
        <member name="M:CCNCControl.GetControlType">

 @par Purpose:
			This method returns the current control's type

 @return			The controldb_ch3 value representing the current control's type


</member>
        <member name="M:CCNCControl.DataSources">

 @par Purpose:
			This method gets the source of the control data for the user

 @return			The source of the control data (2 if from the database, 1 if from a file, otherwise 0)


</member>
        <member name="M:CCNCControl.GetControlCall">

 @par Purpose:
			This method gets the source of the Control dialog call

 @return			The controldb_ch5 bitwise value which represents where and how the control dialog was called


</member>
        <member name="M:CCNCControl.GetMachineName">

 @par Purpose:
			This method gets the name of the machine associated with the current control

 @return			A pointer to a CString which holds the machine's name associated with the current control


</member>
        <member name="M:CCNCControl.GetGroupName">

 @par Purpose:
			This method gets the machine group name associataed with this control definition

 @return			A pointer to a CString which holds the current control's machine group name


</member>
        <member name="M:CCNCControl.GetGroupList">

 @par Purpose:
			This method gets the machine group list pointer associated with this control definition

 @return			A pointer to the machine group list


</member>
        <member name="M:CCNCControl.SetUniqueControlID(System.UInt32!System.Runtime.CompilerServices.IsLong)">

 @par Purpose:
			This method sets the current control's ID

 @param[in]		ulUniqueControlID			   unsigned long containing the new control's ID


</member>
        <member name="M:CCNCControl.GetUniqueControlID">

 @par Purpose:
			This method gets the current control's ID

 @return			An unsigned long which holds the current control's ID


</member>
        <member name="M:CCNCControl.SetControlName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method sets the current control's name

 @return			true if change was successful; false if not

 @param[in]		strControlFileName				CString containing the new control's name


</member>
        <member name="M:CCNCControl.GetControlName">

 @par Purpose:
			This method gets the current control's name

 @return			A pointer to a CString which holds the current control's name


</member>
        <member name="M:CCNCControl.GetControlMainData(System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			Gets the main control definition file data

 @param[out]		snCallSource					fills a user-provided short with the bitwise controldb_ch5 values specifying the origin of the control dialog call
 @param[out]		strPostName						fills a user-provided CString with the post name
 @param[out]		strManufacturer					fills a user-provided CString with the manufacturer
 @param[out]		strModel						fills a user-provided CString with the model name
 @param[out]		strControlFileName				fills a user-provided CString with the control file name
 @param[out]		snComboControl					fills a user-provided short with the control combo selection value


</member>
        <member name="M:CCNCControl.ControlDefaultsViaTokenMap(CCNCMachine*)">

 @par Purpose:
			This method sets the control values to defaults from Tokens of Extensions

 @param[in]		pMachine						passed in pointer to Machine


</member>
        <member name="M:CCNCControl.ControlDefaults(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 @par Purpose:
			This method sets the control values to defaults

 @param[in]		strControlFileName				passed in control file name (unused)
 @param[in]		strPostName						passed in post name (unused)
 @param[in]		snControlType					control type to set the control to, as per the controldb_ch3 types
 @param[in]		bNoneDefaults					defaults the post name and the control name to 'NONE'


</member>
        <member name="T:CCNCControl">
@}
<summary> Defines all control bits read. </summary></member>
        <member name="T:CtrlDefLoadData">
            <summary> Control Definition dialog interaction. </summary>
        </member>
        <member name="M:CMachiningMode.Edit(std.vector&lt;CMachiningMode**,std.allocator&lt;CMachiningMode**&gt;&gt;*,System.Boolean,CWnd*)">
            <summary> Edit a machining mode. </summary>
            <param name="pMachModes"> If non-null, the machining modes. </param>
            <param name="isNew">	  True if it is a new machining mode. </param>
            <param name="pParentWnd"> If non-null, the parent window. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CMachiningMode.Save_ent_idns(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Save entity IDs to a list. </summary>
            <param name="entityIdList"> List of entity ids. </param>
        </member>
        <member name="M:CMachiningMode.GetUnusedStreams(std.vector&lt;System.Int32,std.allocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get an array unused data streams. </summary>
            <param name="si"> List of unused streams. </param>
        </member>
        <member name="M:CAxisCombination.CompList(System.Int16)">
            <summary> Return a component list by index. </summary>
            <param name="idx"> index of array (0-2). </param>
            <returns> null if it fails, else a vector pointer. </returns>
        </member>
        <member name="M:CAxisCombination.IsRightHanded">
            <summary>	Determine if the CS defined by the linear axes is right handed. </summary>
            <returns>	true if right handed, false if not. </returns>
        </member>
        <member name="M:CAxisCombination.ComputeAxisComboMatrix(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Computes axis combo matrix. </summary>
            <param name="matrix"> The computed axis combo matrix. </param>
            <param name="useMachineAxisLabels"> true observe machine axis labels else use WCS axis labels to identify axes. </param>
            <returns> true = success, false = error(s). </returns>
        </member>
        <member name="M:CAxisCombination.GroupsMatch(CAxisCombination*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Do the component group classes and types exactly match the ones in this axis
			combination? </summary>
            <param name="axisCombo">	The axis combination to compare this one to. </param>
            <returns>	True if it matches else false. </returns>
        </member>
        <member name="M:CAxisCombination.GroupsMatchByClassAndType(System.Int32,CAxisCombination*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Do the component groups of the specific class match on type also? </summary>
            <param name="groupClass">	The group class to match. </param>
            <param name="axisCombo">	The axis combo to compare this one to. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CAxisCombination.Save_ent_idns(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Save ent_idns to an array. </summary>
            <param name="entityIdList"> List of entity IDs. </param>
        </member>
        <member name="M:CAxisCombination.GetStationAndToolNumberData(System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the maximum tool number and station number data that the tool changer for this axis combo supports. </summary>
            <param name="toolStorageIsMTTurret"> Flag to indicate the tool storage is MT turret or tool spindle. </param>
            <param name="maxStationNumber">		 The maximum station number. </param>
        </member>
        <member name="M:CAxisCombination.MaxStationNumberForTurret(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Maximum station number for turret. </summary>
            <param name="pTurretComp"> The turret component. </param>
            <returns> Max station number. </returns>
        </member>
        <member name="M:CAxisCombination.MaxStationNumberForSpindle(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Maximum station number supported for spindle. </summary>
            <param name="pSpindleComp">	The spindle component. </param>
            <returns> Max station number. </returns>
        </member>
        <member name="M:CAxisCombination.MakePostCircuit(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Make a post circuit of machine components (ent_idns of comp. entities)
		  The circuit starts at the part holding component and works its way through the axes that drive the
		  part back to the machine base, then works its way from the machine base through the axes that drive
		  the tool and out to the tool storage component Return number of components in list. </summary>
            <param name="comps"> List of machine component entity IDs. </param>
            <returns> Number of components in the axis combination. </returns>
        </member>
        <member name="M:CAxisCombination.MakePostCircuit(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Make a post circuit of machine components (Cnc::MachineDef::Component::CMachineComponents)
		  The circuit starts at the part holding component and works its way through the axes that drive the
		  part back to the machine base, then works its way from the machine base through the axes that drive
		  the tool and out to the tool storage component Return number of components in list. </summary>
            <param name="comps"> list of machine components in circuit. </param>
            <returns> Number of components in the list. </returns>
        </member>
        <member name="M:CAxisCombination.MtOpAxisSubTplane(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Return the default toolplane for the mt 'axis substitution' operation

 @return false, if not found

 @param[in]		wcs				operation wcs
 @param[out]		matrix			default toolplane matrix


</member>
        <member name="M:CAxisCombination.CompListIsTooling(System.Int16)">
            <summary> Is the requested component list the tooling list. </summary>
            <param name="idx"> The index of array (0-2). </param>
            <returns> true if it is, otherwise false. </returns>
        </member>
        <member name="M:CAxisCombination.CompListIsPart(System.Int16)">
            <summary> Is the requested component list the part holding list. </summary>
            <param name="idx"> The index of array (0-2). </param>
            <returns> true if it is, otherwise false. </returns>
        </member>
        <member name="M:CAxisCombination.CompListIsTool(System.Int16)">
            <summary> Is the requested component list the tool storage list. </summary>
            <param name="idx"> The index of array (0-2). </param>
            <returns> true if it is, otherwise false. </returns>
        </member>
        <member name="M:CAxisCombination.FindListComponentsByType(std.set&lt;System.Int32,std.less&lt;System.Int32&gt;,std.allocator&lt;System.Int32&gt;&gt;)">
            <summary>	Searches for and returns the components of the axis combo whose types match one
			of the types in the given list of types. </summary>
            <param name="compTypeToMatch">	A set containing the component types to match. </param>
            <returns>	The list of matching components by type. </returns>
        </member>
        <member name="M:CAxisCombination.FindListComponentsByType(System.Int16,std.set&lt;System.Int32,std.less&lt;System.Int32&gt;,std.allocator&lt;System.Int32&gt;&gt;)">
            <summary>	Searches for and returns the components of the axis combo whose types match one
			of the types in the given list of types. </summary>
            <param name="compListIndex">  	The index of the internal component list (0 = part handling,
								1 = tool handling). </param>
            <param name="compTypeToMatch">	A set containing the component types to match. </param>
            <returns>	The list of matching components by type. </returns>
        </member>
        <member name="M:CAxisCombination.FindListComponentsByType(System.Int16,std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">
            <summary> Check the component list for the existence of a range of components by type - 
		  return components found if endType = INVALID, or is not specified, startType 
		  is the only type checked for. </summary>
            <param name="idx">		 The index of component list (0-2). </param>
            <param name="comps">	 The matching components. </param>
            <param name="startType"> First component type to check. </param>
            <param name="endType">   (Optional) Last component type to check. </param>
        </member>
        <member name="M:CAxisCombination.SetCompPtrsFromList(System.Int32,std.vector&lt;Cnc.MachineDef.Component.IMdComponent**,std.allocator&lt;Cnc.MachineDef.Component.IMdComponent**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets machine component raw pointers from list into internal array. </summary>
            <param name="listIndex">	Zero-based index of the internal component lists to observe ((0-2). </param>
            <param name="compPtrs"> 	The component ptrs. </param>
        </member>
        <member name="M:CAxisCombination.GetCompPtrsFromList(System.Int32)">
            <summary> Gets machine component ptrs from list. </summary>
            <param name="listIdx"> Zero-based index of the list. </param>
            <returns> null if it fails, else the component ptrs from list. </returns>
        </member>
        <member name="M:CAxisCombination.ReplaceGroupWithClonedGroup(Cnc.MachineDef.Component.CComponentGroup*,System.Int16)">
            <summary> Replace group data at a specific index with its cloned group. </summary>
            <remarks> When a group is cloned, we need to update the axis combo data if this group
		  was used in the axis combo. </remarks>
            <param name="pClonedGroup"> Cloned group to be replaced with. </param>
            <param name="idx"> Index of group in the list (0-2). </param>
        </member>
        <member name="M:CAxisCombination.MappedACName(std.vector&lt;CAxisCombination**,std.allocator&lt;CAxisCombination**&gt;&gt;*)">
            <summary> Return mapped axis combination name, or NONE, if there is none. </summary>
            <param name="pACs"> (Optional) List of axis combos to search, Null to use machine's axis combo list. </param>
            <returns> A reference to a CString. </returns>
        </member>
        <member name="M:CAxisCombination.MappedAxisCombo(System.Boolean,std.vector&lt;CAxisCombination**,std.allocator&lt;CAxisCombination**&gt;&gt;*)">
            <summary> Return a pointer to the mapped axis combination for this one, return nullptr if there isn't one. </summary>
            <param name="includeToolAndPart"> (Optional) True to include this axis combo's tool storage part holding components. </param>
            <param name="pACs">				  (Optional) If non-null, list of axis combos to search. Null to use machine's axis combo list. </param>
            <returns> Null if it fails, else a pointer to a CAxisCombination. </returns>
        </member>
        <member name="M:UpdateX7AxisCombo(VX7_axis_combination_type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,axis_combination_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update an axis combination from an X7 axis combination. </summary>
            <param name="x7AxisCombo"> The X7 axis combination. </param>
            <param name="axisCombo">   The current version axis combination. </param>
        </member>
        <member name="M:UpdateX7MachinePosition(VX7_machine_position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,machine_position*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <remarks> X7 data format converters for X8 (2014? 2015?) data </remarks>
            <summary> Update a machine position from an X7 machine position. </summary>
            <param name="x7MachPos"> The X7 machine position. </param>
            <param name="machPos">   The current version machine position. </param>
        </member>
        <member name="F:MachinePosition.m_listId">
            <summary> Identifier for the list. </summary>
        </member>
        <member name="F:MachinePosition.m_pMachine">
            <summary> The machine to which this position belongs. </summary>
        </member>
        <member name="F:MachinePosition.m_position">
            <summary> position data for axis </summary>
        </member>
        <member name="M:MachinePosition.UpdateX7AxisPosition(VX7_axis_coord!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AxisCoordinate*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update an axis position from an X7 axis position. </summary>
            <param name="x7AxisPos"> The X7 axis position. </param>
            <param name="axisPos">   The current version axis position. </param>
        </member>
        <member name="M:MachinePosition.UpdateX7Source(System.Byte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ReferencePositionSource*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update the source from an X7 data source. </summary>
            <param name="x7Source"> The X7 data source. </param>
            <param name="source">   The current version source. </param>
        </member>
        <member name="M:MachinePosition.InitUid">
            <summary> Initalize the unique ID for this machine position. </summary>
        </member>
        <member name="M:MachinePosition.op_Inequality(MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="posn"> position to compare. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:MachinePosition.op_Equality(MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="posn"> position to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:MachinePosition.op_Assign(MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="posn"> The position. </param>
        </member>
        <member name="M:MachinePosition.CanBeDeletedFromList">
            <summary>	Determine if we can be delete this reference position from its list. </summary>
            <returns>	true if it can be deleted, false if not (i.e it's used in an operation). </returns>
        </member>
        <member name="M:MachinePosition.Restore(MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Restore data in this position with data from parameter. </summary>
            <param name="restorePosition"> The position to use for restoring the data. </param>
        </member>
        <member name="M:MachinePosition.MakeNewCopyWithNewGuid(MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes new copy with new unique identifier. </summary>
            <param name="newDuplicatePosition"> The new duplicate position. </param>
        </member>
        <member name="M:MachinePosition.IsValid">
            <summary> Query if this object is valid. </summary>
            <remarks> Determines if object content is complete and valid. </remarks>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:MachinePosition.DetermineAvailableAxes(System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determine available axes in the axis combo (X,Y,Z,B only). </summary>
            <param name="xFound"> X axis exists in axis combo. </param>
            <param name="yFound"> Y axis exists in axis combo. </param>
            <param name="zFound"> Z axis exists in axis combo. </param>
            <param name="bFound"> B axis exists in axis combo. </param>
        </member>
        <member name="M:MachinePosition.MapToOpRefPt(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Map this machine position to an operation reference point. </summary>
            <param name="op">    The operation with the reference point. </param>
            <param name="entry"> true = entry, false = retract. </param>
        </member>
        <member name="M:MachinePosition.SaveToDb">
            <summary> Save the machine position entity to the database. </summary>
            <returns> true if the entity was saved, false otherwise. </returns>
        </member>
        <member name="M:MachinePosition.InitFromX7Struct(VX7_machine_position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize from a X7 version of the machine_position structure. This structure is
			used in pre-Sept 2013 'X8' files. </summary>
            <param name="x7MachPos"> The X7 machine position. </param>
        </member>
        <member name="M:MachinePosition.ParseX7RefPosNameAndSetProperties(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Parse a x7 reference position name for type and sets appropriate axis combo. </summary>
            <param name="name"> Position name. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MachinePosition.GetFromFile(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Define the machine position from an entity in a file. </summary>
            <param name="entId"> Identifier for the entity. </param>
            <param name="fp">    The (open) file information. </param>
            <returns> true if the entity was read in, false otherwise. </returns>
        </member>
        <member name="M:MachinePosition.GetFromDb(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Define the machine position from a database entity. </summary>
            <param name="entId"> Identifier for the entity. </param>
            <returns> true if the entity was read in, false otherwise. </returns>
        </member>
        <member name="M:MachinePosition.DeleteEnt">
            <summary> Delete the machine position entity from the database. </summary>
            <returns> true if the entity was deleted, false otherwise. </returns>
        </member>
        <member name="M:MachinePosition.ConvertUnits">
            <summary> Convert machine position units inch-&gt; mm or mm -&gt; inch. </summary>
        </member>
        <member name="M:MachinePosition.AxisPositionType(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Return the axis position type. </summary>
            <param name="axis"> The axis (X_AXIS, Y_AXIS, etc.). </param>
            <returns> . </returns>
        </member>
        <member name="M:MachinePosition.AxisCoordinateValue(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Return the axis coordinate value. </summary>
            <param name="axis"> The axis (X_AXIS, Y_AXIS, etc.). </param>
            <returns> The axis coordinate value. </returns>
        </member>
        <member name="M:MachinePosition.SetAxisPosition(AxisCoordinate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets axis position. </summary>
            <param name="coord"> The information for the axis. </param>
            <param name="axis">  The axis (X_AXIS, Y_AXIS, etc.). </param>
        </member>
        <member name="M:MachinePosition.AxisPosition(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Return the information for a specific axis. </summary>
            <param name="axis"> The axis (X_AXIS, Y_AXIS, etc.). </param>
            <returns> The information for the axis. </returns>
        </member>
        <member name="M:MachinePosition.GetAxisPositions">
            <summary> Gets axis positions. </summary>
            <returns> The axis positions. </returns>
        </member>
        <member name="M:MachinePosition.SetSource(ReferencePositionSource!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets the module in which this position was defined (machine vs job setup).. </summary>
            <param name="source"> The source (machine or job setup). </param>
        </member>
        <member name="M:MachinePosition.Source">
            <summary> Return the module in which this position was defined (machine vs job setup). </summary>
            <returns> The source (machine or job setup). </returns>
        </member>
        <member name="M:MachinePosition.SetIsDefaultReferenceReturn(System.Boolean)">
            <summary> Sets a value indicating whether this machine position is the default reference return position for its associated stream. </summary>
            <param name="value"> Value indicating whether this machine position is the default reference return position for its associated stream. </param>
        </member>
        <member name="M:MachinePosition.GetIsDefaultReferenceReturn">
            <summary> Gets a value indicating whether this machine position is the default reference return position for its associated stream. </summary>
            <returns> Value indicating whether this machine position is the default reference return position for its associated stream. </returns>
        </member>
        <member name="M:MachinePosition.SetNCOutput(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the NC output generated for this reference position. </summary>
            <param name="value"> the NC output generated for this reference position. </param>
        </member>
        <member name="M:MachinePosition.GetNCOutput">
            <summary> Gets the NC output generated for this reference position. </summary>
            <returns> the NC output generated for this reference position. </returns>
        </member>
        <member name="M:MachinePosition.SetType(ReferencePositionType!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets the reference position type. </summary>
            <param name="type"> The reference position type. </param>
        </member>
        <member name="M:MachinePosition.Type">
            <summary> Return the reference position type. </summary>
            <returns> The reference position type. </returns>
        </member>
        <member name="M:MachinePosition.SetComment(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the comment for this machine position. </summary>
            <param name="comment"> The comment. </param>
        </member>
        <member name="M:MachinePosition.Comment">
            <summary> Return the comment for this machine position. </summary>
            <returns> The comment for this machine position. </returns>
        </member>
        <member name="M:MachinePosition.SetName(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the name of this machine position. </summary>
            <param name="name"> The name. </param>
        </member>
        <member name="M:MachinePosition.Name">
            <summary> Return the name of this machine position. </summary>
            <returns> The name of this machine position. </returns>
        </member>
        <member name="M:MachinePosition.SetUid(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set the unique ID of the machine position from string. </summary>
            <param name="strUId"> The string of unique ID. </param>
        </member>
        <member name="M:MachinePosition.CopyUid(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy the unique ID to id. </summary>
            <param name="id"> The unique ID. </param>
        </member>
        <member name="M:MachinePosition.UidIsDefined">
            <summary> Return true if the unique ID has been defined (not all 0's). </summary>
            <returns> true if the unique ID has been defined. </returns>
        </member>
        <member name="M:MachinePosition.UidEquals(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return true if the unique ID matches the one to test. </summary>
            <param name="id"> The identifier to compare. </param>
            <returns> true if the unique ID matches the one to test, false otherwise. </returns>
        </member>
        <member name="M:MachinePosition.AxisCombination">
            <summary> Gets the axis combination. </summary>
            <returns> The axis combination for this position or NULL if it fails. </returns>
        </member>
        <member name="M:MachinePosition.AxisComboEntId">
            <summary> Gets the axis combo entity id. </summary>
            <returns> The axis combo entity id. </returns>
        </member>
        <member name="M:MachinePosition.SetAxisComboId(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets axis combination unique id. </summary>
            <param name="axisComboEntId"> The axis combination entity id. </param>
        </member>
        <member name="M:MachinePosition.SetAxisComboId(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets axis combination unique id. </summary>
            <param name="axisComboId"> The axis combination unique id. </param>
        </member>
        <member name="M:MachinePosition.AxisComboId">
            <summary> Gets the axis combo unique id. </summary>
            <returns> The axis combo unique id. </returns>
        </member>
        <member name="M:MachinePosition.SetListId(System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets the list id for this position. </summary>
            <param name="listId"> List id for this position. </param>
        </member>
        <member name="M:MachinePosition.ListId">
            <summary> Gets list id for this position. </summary>
            <returns> The list id for this position. </returns>
        </member>
        <member name="M:MachinePosition.SetEntId(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets the entity id for this position. </summary>
            <param name="entId"> Entity id for this position. </param>
        </member>
        <member name="M:MachinePosition.EntId">
            <summary> Gets entity id for this position. </summary>
            <returns> The entity id for this position. </returns>
        </member>
        <member name="M:MachinePosition.SetMachine(CCNCMachine*)">
            <summary> Sets the machine. </summary>
            <param name="pMachine"> The machine. </param>
        </member>
        <member name="M:MachinePosition.Machine">
            <summary> Gets the machine. </summary>
            <returns> The machine for this position. </returns>
        </member>
        <member name="M:MachinePosition.SetParams(machine_position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the parameters. </summary>
            <param name="posn"> The position. </param>
        </member>
        <member name="M:MachinePosition.Params">
            <summary> Return the machine position structure. </summary>
            <returns> the machine position structure. </returns>
        </member>
        <member name="M:MachinePosition.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:MachinePosition.#ctor(CCNCMachine*,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> 'From database' Constructor. </summary>
            <param name="pMachine"> machine for this position. </param>
            <param name="entId">    ID of entity to initialize from. </param>
        </member>
        <member name="M:MachinePosition.#ctor(CCNCMachine*,machine_position!System.Runtime.CompilerServices.IsConst*)">
            <summary> Parameter Constructor. </summary>
            <param name="pMachine"> machine for this position. </param>
            <param name="pPosn">    (Optional) position to initialize from. </param>
        </member>
        <member name="M:MachinePosition.#ctor(MachinePosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy Constructor. </summary>
            <param name="machPos"> position to initialize from. </param>
        </member>
        <member name="M:MachinePosition.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:MachinePosition">
            <summary> Machine Position Class &lt;br&gt;
		  A machine position consists of the following parameters:&lt;br&gt;
		  - name&lt;br&gt;
		  - comment&lt;br&gt;
		  - type&lt;br&gt;
		  - source definition module (machine vs job setup)&lt;br&gt;
		  - an axis combination&lt;br&gt;
		  - coordinate for each axis in the axis combination (or no motion flag)   
</summary>
            <remarks>
  	 Used for:
		- absolute machine axis positioning
		- axis retraction (ex. G28) and home position moves
</remarks>
        </member>
        <member name="F:VX7_axis_combination_type.streamIdx">
0-based index of data stream for this axis combination
</member>
        <member name="F:VX7_axis_combination_type.tcNull">
list of null tool change event lists
</member>
        <member name="F:VX7_axis_combination_type.tcRetract">
list of tool change retract event lists
</member>
        <member name="F:VX7_axis_combination_type.tcApproach">
list of tool change approach event lists
</member>
        <member name="F:VX7_axis_combination_type.mappedACId">
unique identifier for related mapped axis combination
</member>
        <member name="F:VX7_axis_combination_type.id">
unique identifier for this axis combination
</member>
        <member name="F:VX7_axis_combination_type.upperGuideCompList_ent_idn">
ent_idn for wire upper guide group component list
</member>
        <member name="F:VX7_axis_combination_type.upperGuideGroup_ent_idn">
ent_idn for wire upper guides
</member>
        <member name="F:VX7_axis_combination_type.compList_ent_idns">
ent_idn for lists of components (this list is stored in the database as an ent_idn_list)
</member>
        <member name="F:VX7_axis_combination_type.refPts">
Reference points (1st array: OD/ID. 2nd Array: Inch, mm. 3rd Array: Entry, retract)
</member>
        <member name="F:VX7_axis_combination_type.toolChgPos">
Tool change (V9 home) position (inch, mm)
</member>
        <member name="F:VX7_axis_combination_type.name">
Axis combination name
</member>
        <member name="T:VX7_machine_position">
Machine position type and method of positioning (actual position vs mach ref pt)  (it can be used more universally for other things)
</member>
        <member name="T:VX7_axis_positions">
Positions (coordinates + method of getting there) for all axes
<summary>	X7 axis positions. </summary></member>
        <member name="T:VX7_axis_coord">
Axis coordinate
</member>
        <member name="D:ComponentGroupUniquePtr">
            <summary> Defines an alias representing a std::unique_ptr to a CComponentGroup. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.DeserializeV2(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Deserialize version 2. </summary>
            <remarks>  Version two added the property m_AllowedOnlyOneChildComponent. </remarks>
            <param name="archive">	The archive. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.DeserializeV1(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deserialize version 1. </summary>
            <remarks> Deserializing of the second Class Ent version. (old struct data member removed). </remarks>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.DeserializeV0(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deserialize version 0. </summary>
            <remarks> Deserializing of the first Class Ent version with the old struct data member. </remarks>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.AllCompsAreHidden(Cnc.MachineDef.Component.IMdComponent*)">
            <summary> Indicates whether or not all components in this group	are hidden in Simulation. </summary>
            <param name="pComp"> (Optional) If non-null base component to test (NULL = 1st component). </param>
            <returns> true = all groups components are to be hidden in the Simulation. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.DeleteFromAxisCombos">
            <summary>	Purpose: Delete this component group from any of the machine's axis
			  		combinations. This will also remove all of the components from this group's
			  		component list in the axis combinations. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.DeleteFromAxisCombo(CAxisCombination*)">
            <summary>	Purpose: Delete this component group from an axis combinations.
			  		This will also remove all of the components from this group's component list
			  		in the axis combination. </summary>
            <param name="pAC">	Axis combination to check. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsInAxisCombos(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*)">
            <summary>	Determine whether or not this group is in any of the machine's
			  		axis combinations. Optionally:
			  		- fill in an array of axis combinations which contain this
			  		  component group
			  		- remove this group and all of this group's components from the
			  		  list in the axis combinations </summary>
            <param name="pGroupAxisCombos">	axis combo's which use this group. </param>
            <returns>	True if in axis combos, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsInAxisCombo(CAxisCombination*)">
            <summary>	Determine whether or not this group is in an axis combination.</summary>
            <param name="pAC">	Axis combination to check. </param>
            <returns>	True if in axis combo, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.CanBeInAxisCombo(CAxisCombination*)">
            <summary>	Determine whether or not this group can be in an axis combination. </summary>
            <param name="pAC">	Axis combination to check </param>
            <returns>	True if we can be in axis combo, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.MaxToolSpindleRPM">
            <summary>	Purpose: Return maximum RPM for the tool spindle component in this group. </summary>
            <returns>	Tool Spindle RPM </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.MinToolSpindleRPM">
            <summary>	Purpose: Return minimum RPM for the tool spindle component in this group. </summary>
            <returns>	Tool Spindle RPM. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.MaxLatheSpindleRPM">
            <summary>	Return maximum RPM for the chuck component in this group. </summary>
            <returns>	Spindle RPM. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.MinLatheSpindleRPM">
            <summary>	Return minimum RPM for the chuck component in this group. </summary>
            <returns>	Spindle RPM. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsFixed">
            <summary>	Return whether this group is fixed, or has any moving axes defined. </summary>
            <returns>	True if fixed, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.ToolStorageComponent">
            <summary>	Return the tool storage component for this group. </summary>
            <returns>	Null if it fails, else a pointer to a CMachineComponent. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.PartHoldingComponent">
            <summary>	Return the part holding component for this group. </summary>
            <returns>	Null if it fails, else a pointer to a CMachineComponent. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetAxes(System.Int32,System.Int32*)">
            <summary>	Purpose: Return defined axes in machine_axis_data for this group. </summary>
            <param name="groupClass"> 	Group class to flag in defined axes. </param>
            <param name="definedAxes">	Array of defined axes. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetAxisComponents(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean)">
            <summary>	Purpose: Return array of linear and rotary axis components for this group. </summary>
            <param name="axisComps">	 	Array of pointers to axis components. </param>
            <param name="axis">			 	default axis to get, FIXED_AXIS = ALL. </param>
            <param name="tryOppositeDir">	true = try negative of axis, if not found (for WCS axes). </param>
            <param name="useMachineAxis">	true = search for component with matching machine axis
			  					false [default] = search for matching WCS axis. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetRotaryAxisComponents(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean)">
            <summary>	Return array of rotary axis components for this group. </summary>
            <param name="axisComps">	 	Array of pointers to axis components. </param>
            <param name="axis">			 	Default axis to get, FIXED_AXIS = ALL. </param>
            <param name="tryOppositeDir">	true = try negative of axis, if not found (for WCS axes). </param>
            <param name="useMachineAxis">	true = search for component with matching machine axis
			  					false [default] = search for matching WCS axis. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetLinearAxisComponents(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean)">
            <summary> Return array of linear axis components for this group. </summary>
            <param name="axisComps">	 	array of pointers to axis components. </param>
            <param name="axis">			 	default axis to get, FIXED_AXIS = ALL. </param>
            <param name="tryOppositeDir">	true = try negative of axis, if not found (for WCS axes). </param>
            <param name="useMachineAxis">	true = search for component with matching machine axis
			  					false [default] = search for matching WCS axis. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.TurretComponent">
            <summary>	Return turret component in this group. </summary>
            <returns>	Null if it fails, else a pointer to a CMachineComponent. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.HasToolingComponents">
            <summary>	See if there are any tooling components in the group. </summary>
            <returns>	True if tooling components, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.HasToolStorageComponents">
            <summary>	See if there are any tool storage components in the group. </summary>
            <returns>	True if tool storage components, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.HasPartHoldingComponents">
            <summary>	See if there are any part holding components in the group. </summary>
            <returns>	True if part holding components, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.HasComponentsByType(System.Int32,System.Int32)">
            <summary>	See if any components in the group by component type exist. </summary>
            <param name="startType">	First type to check. </param>
            <param name="endType">  	Last component type to check. </param>
            <returns>	True if components by type, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsCompInChildList(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary>	Return whether the component pointer is in the group or not. </summary>
            <param name="pCompToLookFor">	Pointer to component to look at. </param>
            <returns>	True if component given by parameter is part of the group child list. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.ReplaceComp(Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CMachineComponent*)">
            <summary>	Replace a component pointer by another one. </summary>
            <param name="pCompToReplace"> Pointer to component to replace. </param>
            <param name="pNewComp">	Pointer to new component. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.AddComponents(std.vector&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Add a vector of component ptr to the list. </summary>
            <param name="vectComps"> Pointer to new component. </param>
            <param name="addEntIdn"> TRUE : adding the comp ent idns in the list, FALSE adding only the ptr. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.AddComp(Cnc.MachineDef.Component.CMachineComponent*,System.Boolean)">
            <summary>	Add a component pointer to the group. </summary>
            <param name="pNewComp">	Pointer to new component. </param>
            <param name="addEntIdn"> Wether adding the comp ent idn in the list or not. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetLastComponent">
            <summary>	Return pointer to last component. </summary>
            <returns>	Null if it fails, else the last component. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Get1stComponent">
            <summary>	Return pointer to 1st component. </summary>
            <returns>	Null if it fails, else the 1st component. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.DeleteComponents(std.list&lt;Cnc.MachineDef.Component.CMachineComponent**,std.allocator&lt;Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;,System.Boolean)">
            <summary>	Deletes the components listed from the group if they are direct children of the group. </summary>
            <param name="compsToDelete">   	The pointers to components to delete. </param>
            <param name="deleteEntsFromDb">	(Optional) True to delete the actual DB entities. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.DeleteComponents(System.Boolean)">
            <summary> Delete the components associated with this group. </summary>
            <param name="deleteEnts"> The delete the corresponding db entities. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.MatchClass(System.Int32)">
            <summary>	Return the 1st set of parameters encountered in the list matching the
			specified class only. </summary>
            <param name="groupClass"> 	Group class to match on. </param>
            <returns>	Return the 1st set of parameters encountered in the list matching the
			specified class only or an empty list. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.MatchParams(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Return the set of parameters encountered in the list matching the
			specified class and type classAndType is represented as: (100000 x group class) +
			group type </summary>
            <param name="classAndType">	Variable with class and type info. </param>
            <returns>	false if it fails, else true. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.MatchParams(System.Int32,System.Int32)">
            <summary>	Return a set of parameters matching a specified class and type. </summary>
            <param name="groupClass">	Group class to match on. </param>
            <param name="groupType"> 	Group type to match on. </param>
            <returns>	false if it fails, else true. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.AddParams(System.Int32,System.Int32)">
            <summary>	Add a set of group parameters to the end of the list Return a pointer to
			the new parameters. </summary>
            <param name="groupClass">	Specified class. </param>
            <param name="groupType"> 	Specified type. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.InsertParams(System.Int32,System.Int32)">
            <summary>	Insert a set of group parameters into the list Return a pointer to the
			new parameters. </summary>
            <param name="groupClass">	Specified class. </param>
            <param name="groupType"> 	Specified type. </param>
            <returns>	false if it fails, else true. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.ParamList">
            <summary>	Return a list of group parameters. </summary>
            <returns>	Return a list of group parameters.  </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.RewriteToDb">
            <summary>	Rewrite this component group to the database. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.SaveToDb">
            <summary>	Saves this component group to the database. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.DeleteEnt">
            <summary>	Delete the entity associated with this component group. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.EntIsGroupEnt(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Return true if the entity referenced by ent_idn is in this group. </summary>
            <param name="ent_idn">	Id of entity to check. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Save_ent_idns(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Save ent_idns to a list. </summary>
            <param name="entityList"> List of entity ids. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Init_ent_idns">
            <summary>	Initialize ent_idns to 0. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.CopyUid(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the UID described by ID. </summary>
            <param name="id"> The identifier to copy in. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.AddToList(Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)">
            <summary>	Add this group to the list. </summary>
            <param name="pRefGroup">   	Pointer to reference group. </param>
            <param name="insertBefore">	T = insert before ref, F = after. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.SetNext(Cnc.MachineDef.Component.CComponentGroup*)">
            <summary>	Define pointer to next component group. </summary>
            <param name="pNextGroup">	Pointer to next group. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetNext">
            <summary>	Return pointer to next component group. </summary>
            <returns>	Null if it fails, else the next. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.SetPrev(Cnc.MachineDef.Component.CComponentGroup*)">
            <summary>	Define pointer to previous component group. </summary>
            <param name="pPrevGroup">	Pointer to previous group. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetPrev">
            <summary>	Return pointer to previous component group. </summary>
            <returns>	Null if it fails, else the previous. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.MachineType">
            <summary>	Return type of machine that this group belongs to. </summary>
            <returns>	The eMachineTypes. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Descriptor">
            <summary>	Return component group descriptor for dialog controls. </summary>
            <returns>	A reference to the Descriptor (CString). </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.SetDefaultName">
            <summary>	Set default group name. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.SetName(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>	Set new group name. </summary>
            <param name="name">	The name. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Name">
            <summary>	Return component name (use only to access, not to modify!). </summary>
            <returns>	A LPCTSTR. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.UnMappedGroup">
            <summary>	Return the un-mapped component group for this mapped component group.</summary>
            <returns>	Null if it fails, else a pointer to a CComponentGroup. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.MappedGroup">
            <summary>	Return the mapped component group for this component group. </summary>
            <returns>	Null if it fails, else a pointer to a CComponentGroup. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsClassAndType(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Return true if group is of the specified class and type classAndType is
			represented as: (100000 x group class) + group type. </summary>
            <param name="classAndType">	Cariable with class and type info. </param>
            <returns>	True if class and type, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsClassAndType(System.Int32,System.Int32)">
            <summary>	Return true if group is of the specified class and type. </summary>
            <param name="groupClass">	Specified class. </param>
            <param name="groupType"> 	Specified type. </param>
            <returns>	True if class and type, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsType(System.Int32,System.Boolean)">
            <summary>	Return true if group is of the specified type. </summary>
            <param name="groupType"> 	Specified type. </param>
            <param name="exactMatch">	Exact match only. </param>
            <returns>	True if type, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsTooling(System.Boolean)">
            <summary>	Purpose: Is this a tooling component group? </summary>
            <param name="exactMatch"> Exact match only. </param>
            <returns>	True if tooling, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsToolStorage(System.Boolean,System.Boolean)">
            <summary> Is this a tool storage component group?</summary>
            <param name="exactMatch"> Exact match only. </param>
            <param name="mapped"> Check mapped tool storage group. </param>
            <returns>	True if tool storage, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsPartHolding(System.Boolean,System.Boolean)">
            <summary> Is this a part holding component group? </summary>
            <param name="exactMatch"> Exact match only. </param>
            <param name="mapped"> Check mapped part holding group. </param>
            <returns>	True if part holding, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsMisc(System.Boolean)">
            <summary> Is this a miscellaneous component group? </summary>
            <param name="exactMatch"> Exact match only. </param>
            <returns> True if misc, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsMapped">
            <summary> Is this a mapped component group. </summary>
            <returns> Exact match only. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsClass(System.Int32,System.Boolean)">
            <summary> Return true if group is of the specified class. </summary>
            <param name="groupClass"> Specified class. </param>
            <param name="exactMatch"> Exact match only. </param>
            <returns>	True if class, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.ClassAndType(System.Int32*,System.Int32*)">
            <summary>	make a group_class_and_type variable from indivisible class and type. </summary>
            <returns>	True if class and type, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Type">
            <summary>	Return type for group parameters. </summary>
            <returns>	The eComponentGroups. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Class">
            <summary>	Return class for group parameters. </summary>
            <returns>	The eComponentGroupClasses. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetEntType">
            <summary> Gets entity type (i.e. assoc_id). </summary>
            <returns> The ent type. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.InitFromParam(component_group_type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initialize group from old component_group_type struct. </summary>
            <param name="param"> Deprecated old struct object. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.RemoveComponentFromGroupList(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary>	Removes the component info from group's internal lists. </summary>
            <param name="pComponent">	If non-null, the component whose data is to be removed. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetComponentList">
            <summary>	Gets component pointer list. </summary>
            <returns>	The component pointer list. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.SetAllowedOnlyOneChildComponent(System.Boolean)">
            <summary>	Sets flag indicating that the group is allowed only one child component. </summary>
            <param name="val">	True if the group is allowed only one child component else false. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetAllowedOnlyOneChildComponent">
            <summary>	Gets property "allowed only one child component". </summary>
            <returns>	True if the group can directly contain only one component else false. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Accept(IMdComponentVisitor*)">
            <summary> Accepts the given visitor. </summary>
            <param name="visitor"> The visitor interface implementation object. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsClassEnt">
            <summary> Query if this component object is follows the ClassEnt design. </summary>
            <remarks> Component Group is a ClassEnt. </remarks>
            <returns> true if ClassEnt, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serialize this object to the given stream. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsComponentEnabled(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return whether or not there the component type by parameter is enabled. </summary>
            <param name="compType"> The component type to test. </param>
            <returns> Flag component type enabled or not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.IsComponentTypeFilterEnabled">
            <summary> Return whether or not there is a filter activated on some component types. </summary>
            <returns> Flag component filter enabled or not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.AddAllowedComponentType(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Add an component type that the group can accept. </summary>
            <param name="compType"> The new component type that the group can accept. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.SetAllowedComponentTypes(std.set&lt;System.Int32,std.less&lt;System.Int32&gt;,std.allocator&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set the ent idn of the first component. </summary>
            <param name="newAllowedCompTypeSet"> New set of allowed components. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetAllowedComponentTypes">
            <summary> Return the list of component types allowed to be in the group. </summary>
            <returns> The list of component types allowed to be in the group. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetComponentEntIdnList">
            <summary> Get the ent idn list of all components belonging to this group. </summary>
            <returns> The ent idn list of all components belonging to this group. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Get1stComponentEntIdn">
            <summary> Get the ent idn of the first component. </summary>
            <returns> Ent idn of the first component. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.SetEntIdns(ent_idn_type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set the ent_idns of this and related entities in database. </summary>
            <param name="entIdns"> Ent_idns of this and related entities in database. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetEntIdns">
            <summary> Get the ent_idns of this and related entities in database. </summary>
            <returns> Ent_idns of this and related entities in database. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.GetXMLVersion">
            <summary> Get Version (used in XML serialization). </summary>
            <returns> the version </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Copy(Cnc.MachineDef.Component.CComponentGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the contents of the given source component. </summary>
            <param name="src"> Source to copy from. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.op_Equality(Cnc.MachineDef.Component.CComponentGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare with another component group to see if they have same parameters. </summary>
            <param name="other"> The component group to be compared with. </param>
            <returns> True if two component groups have same parameters. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.op_Assign(Cnc.MachineDef.Component.CComponentGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="src"> Source for the copy. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.#ctor(Cnc.MachineDef.Component.CComponentGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="src">	Source for the component group. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.#ctor(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)">
            <summary>	Constructor to initialize the class and add a set of parameters of a
			specified class and type </summary>
            <param name="groupClass"> Class for 1st parameter set. </param>
            <param name="groupType"> Type for 1st parameter set. </param>
            <param name="pMachine"> Owner machine for group. </param>
            <param name="pRefGroup"> Pointer to reference group. </param>
            <param name="insertBefore">	T = insert before ref, F = after. </param>
            <param name="pParams"> Parameters for group. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CComponentGroup.#ctor(CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)">
            <summary> Default constructor. </summary>
            <param name="pMachine"> Owner machine for group. </param>
            <param name="pRefGroup"> Pointer to reference group. </param>
            <param name="insertBefore">	T = insert before ref, F = after. </param>
            <param name="pParams"> Parameters for group. </param>
        </member>
        <member name="T:Cnc.MachineDef.Component.CComponentGroup">
            <summary> Component Group class. </summary>
        </member>
        <member name="D:Cnc.MachineDef.Component.ComponentGroupParameterList">
            <summary> A list of Group parameter (new style). </summary>
        </member>
        <member name="D:Cnc.MachineDef.Component.ComponentGroupParameter">
            <summary> Represent the link between a group class (@eComponentGroupClasses)
		 and its "type" (@eComponentGroups) </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.ComponentGroupFactory.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="T:Cnc.MachineDef.Component.ComponentGroupFactory">
            <summary> Machine definition component factory. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CopyDataContentOnly(Cnc.MachineDef.Component.CMachineComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the data content but keeps the original pointers and entity IDs for the parent, 
		  child, and siblings so that the original relationships between the components stay the same. </summary>
            <remarks> This function is added to support the replacement of default component in MT component library.
		  When we drag a component from upper machine tree to the default component tree, if there is already
		  a default component at the drop node, this function will be called to copy the data content
		  for the component but the relationships between components won't be changed. </remarks>
            <param name="srcComp"> Source component to copy data from. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DisableCompMenus(CMenu*)">

 Purpose: Disable menu items for components that can't be added
			to this component

 @param[in,out]		pPopup			menu to disable items in


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetView(CWnd*,System.Boolean,System.Boolean,System.Boolean)">

 Purpose: Get view to map component on the turret/machine

 @param[in]		pDlg			calling dialog, NULL for none
 @param[in]		showAdapters	display tool adapters
 @param[in]		showTools		display the tools
 @param[in]		showOthers		display other child components


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetRefPt(CWnd*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Get reference point on the component

 @param[in]		pDlg			calling dialog, NULL for none
 @param[out]		x				X world coordinate of point
 @param[out]		y				Y world coordinate of point
 @param[out]		z				Z world coordinate of point


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetAnchorPtUI(CWnd*,System.UInt32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Get anchor point on the component

 @param[in]		pDlg			calling dialog, NULL for none
 @param[in]		pmptID			prompt string resource ID
 @param[out]		x				X world coordinate of point
 @param[out]		y				Y world coordinate of point
 @param[out]		z				Z world coordinate of point


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetInitPt(CWnd*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">

 Purpose: Get component's initial position on the machine

 @param[in]		pDlg			calling dialog, NULL for none
 @param[out]		x				X world coordinate of point
 @param[out]		y				Y world coordinate of point
 @param[out]		z				Z world coordinate of point
 @param[in]		showThis		display this component
 @param[in]		showAdapters	display tool adapters
 @param[in]		showTools		display the tools
 @param[in]		showOthers		display the other child components


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.EditRevolvedWFGeo(System.Boolean)">
            <summary> Edit wireframe geometry for a revolved solid. </summary>
            <param name="blankChainedGeometry"> (Optional) true to blank the chained geometry. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.EditExtrudedWFGeo">

 Purpose: Edit wireframe geometry for an extruded solid


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MenuDisplayOwnerMachine(CWnd*,System.Boolean)">

 Purpose: Dsiaply this component in machine position, then
 display the entire machine, or component group using Mastercam solids, and
 display a menu for user

 @param[in]		pDlg			owner dialog, null for none
 @param[in]		showGroupOnly	show only components in this comp's group


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MenuDisplay(CWnd*)">
s
	 *
	 * Purpose: Draw the component on the screen in component position,
	 * display a menu for user
	 *
	 * @param[in]		pDlg			owner dialog, null for none
	 *

</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Edit(CWnd*,System.Boolean,Cnc.MachineDef.Component.MachineTreeDisplayContext)">

 Purpose: Edit component parameters

 @param[in]		pParentWnd			parent window
 @param[in]		newComp				true = newly created component


<summary>	Edit component parameters via dialog. </summary><param name="pParentWnd">	 	(Optional) If non-null, the parent window. </param><param name="newComp">		 	(Optional) true = on creating new component object. (default
								= false). </param><param name="displayContext">	(Optional) Context for the display. (default
								= MachineTreeDisplayContext::NotAssigned). </param><returns>	true = success and OK button pushed, false = cancel button hit. </returns></member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetViewStr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Make string describing the view for component as position on the machine

 @param[out]		viewStr				view text string


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DestroyPosnOrientDlg">

 Purpose: Destroy the component position/orientation modeless dialog
			Over-ride this member in inherited class for a custom dialog


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CreatePosnOrientDlg(CComponentDlg*)">

 Purpose: Create the component position/orientation modeless dialog
			Over-ride this member in inherited class for a custom dialog

 @param[in]		pCompDlg			component dialog window


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.PosnOrientIDD">

 Purpose: Return dialog resource ID for the position/orientation modeless dialog
			Return 0, if there isn't one
			Over-ride this member in inherited class for a custom dialog


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.NumGeoDlgs">
            <summary> Return the number of (non-null) geometry dialogs. </summary>
            <returns> The total number of (non-null) geometry dialogs. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CreateChainGeometryDialogs(CComponentDlg*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates an array of available chain geometry dialogs. If the component does not support them then the dialog pointers will be null. </summary>
            <param name="parentWindow"> Parent window. </param>
            <returns> Array of chain geometry dialogs. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CreateGeoDlg(CComponentDlg*)">
            <summary> Creates geo dialog. </summary>
            <param name="pCompDlg">  Create the component parametric geometry modeless dialog
			Return NULL, if there isn't one. </param>
            <returns> null if it fails, else a pointer to the new geo dialog. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CreateGeoDlg(CComponentDlg*,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Creates geo dialog. </summary>
            <param name="pCompDlg">  Create the component parametric geometry modeless dialog
			Return NULL, if there isn't one. </param>
            <param name="index">    Zero-based index of the dlg to create. </param>
            <returns> null if it fails, else a pointer to the new geo dialog. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetGeoDlg(CComponentGeoDlg*)">
            <summary> Define the pointer to the current component geometry modeless dialog. </summary>
            <param name="pDlg">  If non-null, the dialog. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetGeoDlg(CComponentGeoDlg*,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Define the pointer to the current component geometry modeless dialog. </summary>
            <param name="pDlg">  If non-null, the dialog. </param>
            <param name="index"> Zero-based index of the dlg pointer to set. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GeoDlg">
            <summary> Return the pointer to the current component geometry modeless dialog. </summary>
            <returns> null if it fails, else a pointer to the appropriate dialog. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GeoDlg(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Return the pointer to the current component geometry modeless dialog. </summary>
            <param name="index"> Zero-based index of the dlg to return (0 or 1). </param>
            <returns> null if it fails, else a pointer to the appropriate dialog. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GeoIDD">
            <summary> Return dialog resource ID for the appropriate parametric geometry modeless dialog
*Return 0, if there isn't one </summary>
            <returns> dialog resource ID. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GeoIDD(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Return dialog resource ID for the appropriate parametric geometry modeless dialog
*Return 0, if there isn't one </summary>
            <param name="index"> Zero-based index of the dlg to return (0 or 1). </param>
            <returns> dialog resource ID. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DestroyAdditionalParamsDlg">
            <summary> Destroys the additional parameters modeless dialog. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CreateAdditionalParamsDlg(CComponentDlg*)">
            <summary> Create the component parameters modeless dialog. Return NULL, if there isn't one </summary>
            <param name="pCompDlg"> If non-null, the component dialog. </param>
            <returns> null if it fails, else the new additional parameters dialog. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AdditionalParamsIDD">
            <summary>  Return dialog resource ID for the component additional parameters modeless dialog
Return 0, if there isn't one </summary>
            <returns> The resource ID. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DestroyParamsDlg">

 Purpose: Destroy the component parameters modeless dialog


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CreateParamsDlg(CComponentDlg*)">

 Purpose: Create the component parameters modeless dialog
			Return NULL, if there isn't one

 @param[in]		pCompDlg			component dialog window


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ParamsIDD">

 Purpose: Return dialog resource ID for the component parameters modeless dialog
			Return 0, if there isn't one


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetFromDlg(System.Int32)">

 Purpose: Get appropriate parameters from component dialog based on
 the active tab page

 @param[in]		activePg		0, 1, 2 (3, 4)


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ShowTabDlg(System.Int32,System.Int32)">

 Purpose: Display the appropriate tab dialog
			May be over-written for specific components

 @param[in]		activePg		0, 1, 2
 @param[in]		nShow			SW_SHOW or SW_HIDE


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitComponentDefDlg(machine_component_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Boolean,Cnc.MachineDef.Component.MachineTreeDisplayContext)">
            <summary>	Purpose: Initialize the component definition dialog. </summary>
            <param name="bkpParams">	 	Component's backup parameters. </param>
            <param name="pParentWnd">	 	(Optional) If non-null, the parent window (Default = nullptr). </param>
            <param name="newComp">		 	(Optional) true for new component, false = pre-existing	component (Default = false). </param>
            <param name="displayContext">	(Optional) Context for the display. (Default = NotAssigned) </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitDialogIDs">

 Purpose: Initialize array of component definition modeless dialog ID's


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AdjustTabStringIds(Cnc.MachineDef.Component.MachineTreeDisplayContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Modifies the component's tab ID list based on the context. </summary>
            <param name="displayContext">	Context for the display. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitTabIDs">

 Purpose: Initialize tab ID's for component definition dialog
			Override in inherited class, if component doesn't have 3 tab pages


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitGeoTypes">

 Purpose: Initialize valid geometry types for this component
			Override in inherited class, if required
			Default assumes a parametric geometry definition


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetAllowedGeoTypes">
            <summary> Gets the allowed geometric types list. </summary>
            <remarks> Since 2020, we can customize by component types the allowed geometric types. </remarks>
            <returns> Allowed geometric types list. </returns>
        </member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_GeoTypes">
id's for valid geometry types for this component
</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteMCGeometry">

 Purpose: Delete the MC geometry for a component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteSTLEnt">

 Purpose: Delete the STL geometry for a component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteMCSolid">

 Purpose: Delete the MC solid for an MCSolid


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteLBdry">

 Purpose: Delete the lathe_bdry entity for an extruded or revolved solid


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ImportMCGeometry(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 Purpose: Import the required geometry from a file

 @param[in]		filename			file to read geometry from
 @param[in]		fp					file class, if open use it otherwise open filename
 @param[in]		convertSolidsToSTL  convert solid machine geometry to STL on import


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetTransparencyPropertyInDisplayList">
            <summary>	Visits all solid/pmesh entities associated with the component and sets
			 transparency property in display list./ </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DisplayOnMachine(System.Boolean)">
            <summary> Display a machine component and all of its descendents in machine position using Mastercam solids. </summary>
            <param name="drawChildren"> (Optional) true to draw all children (default = true). </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Display">
            <summary> Draw the component on the screen in component position. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MakeMCSolids(System.Boolean)">

 Purpose: Make solid entities for this component

 @param[in]		locateOnMachine		true = draw in machine position


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolidFromSTL(System.Byte,System.Int32)">

 Purpose: Make Mastercam component geometry from an STL entity

 @param[in]	color		color to create geometry in
 @param[in]	level		level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolidFromSolid(System.Byte,System.Int32)">

 Purpose: Make a Mastercam component solid from another solid entity

 @param[in]	color		color to create geometry in
 @param[in]	level		level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolidFromRevolution(CHAIN*,l_3d*,System.Byte,System.Int32)">

 Purpose: Make a Mastercam solid from revolve parameters

 @param[in]		chain		chain to make the extrusion from
 @param[in]		pAxisLine	axis to revolve about
 @param[in]		color		color to create geometry in
 @param[in]		level		level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolidFromExtrusion(CHAIN*,System.Double,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte,System.Int32)">

 Purpose: Make a Mastercam solid from extrude parameters

 @param[in]		chain			chain to make the extrusion from
 @param[in]		distance		distance to extrude
 @param[in]		direction		extrude direction
 @param[in]		color			color to create geometry in
 @param[in]		level			level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolidFromCone(SLD_CONE_PARAMS*,System.Byte,System.Int32)">

 Purpose: Make a Mastercam solid from cone parameters

 @param[in]		pParams		solid parameters
 @param[in]		color		color to create geometry in
 @param[in]		level		level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolidFromCylinder(SLD_CYL_PARAMS*,System.Byte,System.Int32)">

 Purpose: Make a Mastercam solid from cylinder parameters

 @param[in]		pParams			solid parameters
 @param[in]		color			color to create geometry in
 @param[in]		level			level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolidFromBlock(SLD_BLOCK_PARAMS*,System.Byte,System.Int32)">

 Purpose: Make a Mastercam solid from block parameters

 @param[in]		pParams			solid parameters
 @param[in]		color			color to create geometry in
 @param[in]		level			level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Set_initXform">

 Purpose: Define initXform transformation matrix based on component type


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteSolidEntities(std.vector&lt;DB_LIST_ENT**,std.allocator&lt;DB_LIST_ENT**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Deletes the solid entities described by solidEntEptrs. </summary>
            <param name="solidEntEptrs">	The eptrs of the solid entities to delete from the DB. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteMachineSolids">

 Purpose: Delete all machine position solids for this component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CopyGeo(Cnc.MachineDef.Component.CMachineComponent*)">

 Purpose: Copy component dependent geometry to another component

	@param[in,out]		 pComp		component to copy geometry to

</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Setup_x_matrix(x_matrix*,System.Boolean)">

 Purpose: Setup transformation matrix for moving a solid to machine position

 @param[in,out]		pXm			transformation matrix


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.PreviewLatheTCABdrys(CWnd*)">

 Purpose: Preview the TCA boundaries (go to graphics window...)
			from the component definition dialog
			Does nothing in the base class

 @param[in]		pParentWnd			parent dialog window


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DrawLatheTCABdrys">

 Purpose: Draw the TCA boundaries
			Does nothing in the base class


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetMachine2MastercamVector(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Compute the vector to map a point in machine coordinates
			to MGP stock view coordinates

 @param[out]		v			desired vector MAXREAL if no master stock


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetMastercam2MachineVector(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Compute the vector to map a point in MGP stock view coordinates
			to machine coordinates

 @param[out]		v			desired vector, MAXREAL if no master stock
 @param[in]		pNoComp		component NOT to use to compute vector


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteLatheTCABdrys">

 Purpose: Delete the lathe TCA boundary for this component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.UpdateLatheTCABdrys(System.Void*)">

 Purpose: Update the TCA boundaries for the component when MapToComponent()
			is called
			Does nothing in the base class

 @param[in]			pParam		optional method-specific parameter


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AdjustInitPtX(System.Double,System.Boolean,Cnc.MachineDef.Component.CMachineComponent*)">

 Purpose: Move the X coordinate of the InitPt() by dx. dx is computed
			from a change in the X position of a LATHE TCA component defined
			in the local copy of the MD
			Applies to this component and all children and siblings, 
			after the 1st call

 @param[in]			dx			amount to move InitPt() X coordinate
 @param[in			doSiblings	do the siblings of this component
 @param[in]			pNoComp		component NOT to adjust


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MakeLatheTCABdrys(System.Byte*,System.UInt32)">

 Purpose: Make the lathe TCA boundaries for the component

 @param[in]			bdryIDs		Boundary Manager boundary IDs
 @param[in]			msgID		status bar message ID


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MakeLatheSolidTCABdrys(System.Byte*,System.UInt32)">

 Purpose: Make the lathe TCA boundaries for a component from the
			silhouette boundary of the solid revolved about the X axis

 @param[in]			bdryIDs		Boundary Manager boundary IDs
 @param[in]			msgID		status bar message ID


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.IFMakeLatheSolidTCABdrys(System.Byte*,System.UInt32)">

 Purpose: Make the lathe TCA boundaries for a component from the
			silhouette boundary of the solid revolved about the X axis
			Uses Interfacial module

 @param[in]			bdryIDs		Boundary Manager boundary IDs
 @param[in]			msgID		status bar message ID


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MakeLatheRevolvedTCABdrys(System.Byte*)">

 Purpose: Make the lathe TCA boundaries for a component
			that is revolved about the X axis

 @param[in]			bdryIDs		Boundary Manager boundary IDs


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MakeLatheCylinderTCABdrys(System.Byte*)">

 Purpose: Make the lathe TCA boundaries for a cylindrical component
			that is revolved about the X axis

 @param[in]			bdryIDs		Boundary Manager boundary IDs


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CreateSolidsFromChainGeometry">
            <summary> Creates solids from chain geometry. </summary>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCParametricComponent">

 Purpose: Make Mastercam solids from chuck parameters


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetupTranslationVector(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Initialize translation vector before setting up the transformation 
			matrix for drawing the component. This can be over-ridden in the 
			inherited component	classes

 @param[in]		v	translation vector to initialize with, may be ignored


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetupRotationMatrix(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Initialize rotation matrix before setting up the transformation 
			matrix for drawing the component. This can be over-ridden in the 
			inherited component	classes

 @param[in]		rm	rotation matrix to initialize with, may be ignored


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ImportSTLEnt(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Import the STL entity for an STL component

 @param[in]		filename			file that component came from
 @param[in]		fp					file class; if open, use it otherwise open filename


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ImportMCSolidAsSTLEnt(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Import the MC solid for an MCSolid as a STL Mesh Entity

 @param[in]		filename			file that component came from
 @param[in]		fp					file class; if open, use it otherwise open filename


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ImportMCSolid(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Import the MC solid for an MCSolid

 @param[in]		filename			file that component came from
 @param[in]		fp					file class; if open use it otherwise open filename


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetImportedGeometryLevel">
            <summary> Gets imported geometry level. </summary>
            <returns> The imported geometry level. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ImportLBdry(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Import the lathe_bdry entity for an extruded or revolved solid

 @param[in]		filename			file to read geometry from
 @param[in]		fp					file class, if open use it otherwise open filename


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MachineSolidsExist">

 Purpose: See if ALL solid entities for component in machine position already exist
 If they don't, delete the ones that do


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolidFromGeometry">

 Purpose: Make solid entities for this component from primitive, extrude or revolve


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCRevolvedComponent(System.Int32)">

 Purpose: Make a Mastercam solid from revolve parameters

 @param[in]		level			level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCExtrudedComponent(System.Int32)">

 Purpose: Make a Mastercam solid from extrude parameters

 @param[in]		level			level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCCylinderComponent(System.Int32)">

 Purpose: Make a Mastercam solid cylinder component

 @param[in]	level			level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCBlockComponent(System.Int32)">

 Purpose: Make a Mastercam solid black component

 @param[in]		level			level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSTLComponent(System.Int32)">

 Purpose: Make STL component geometry from an STL entity

 @param[in]	   level   level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolidComponent(System.Int32)">

 Purpose: Make a Mastercam solid component from a solid entity

 @param[in]	   level   level to create geometry on


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteGeo(DB_LIST_ENT*)">

 Purpose: Delete geometry after a geometry display function

 @param[in]		startPos			point in database at which to start


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.XformBdryEntProfile(tp_ent*,System.Int16,x_matrix*)">

 Purpose: Transform a tp_ent array used as an extrude-revolve profile

 @param[in,out]	bdryEnts			array of tp_ents
 @param[in]		numEnts				number to tp_ents in array
 @param[in]		pXm					transformation matrix


</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_DeleteMGPGeo">
global flag to control deletion of geometry for the component 
when deleting the component, used to control deletion of geometry
for machine setup components in the MGP copy of the machine
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_XformMatrix">
transformation matrix to move component from InitPos() when drawing the machine
</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Save3DToolSolidEptr(Cnc.Tool.TlSolidPackage!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves 3D tool solid eptrs in the eptr list. </summary>
            <param name="toolSolids"> The tool solids. </param>
        </member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_MakeMachineSolids">
generate the solid in machine position, if not already created
should ALWAYS be true, except when setting a component's
machine position or view
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_Sld_eptrs">
pointers to solids used for drawing the part on the machine
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_InMachinePos">
true = create the solids in the machine position and orientation
</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetMC_ent_idn(System.Int32!System.Runtime.CompilerServices.IsLong)">

 Purpose: Define ent_idn of related mastercam entity, 0, if none

 @param[in]		ent_idn			value to set


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MC_ent_idn">

 Purpose: Return ent_idn of related Mastercam entity, 0, if none


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Revolu2ion">

 Purpose: Return revolved solid definition


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Extrusion">

 Purpose: Return extruded solid definition


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Cylinder">

 Purpose: Return cylinder definition


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Block">

 Purpose: Return block definition


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.STL">

 Purpose: Return 'solid from STL' definition


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MCSolid">

 Purpose: Return 'solid from solid' definition


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CanBeInAxisCombo(CAxisCombination*)">

 Purpose: Can this component be in the axis combination?

 @param[in]		pAC			axis combination to check


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.IsInAxisCombo(CAxisCombination*)">

 Purpose: Is this component in the axis combination?

 @param[in]		pAC			axis combination to check


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DefinedInMachinePosition">

 Purpose: Return true if the machine component was drawn in position on the
			the machine (RefPt() = InitPos(), InitXform() = Top view


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AddVIdToArray(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 Purpose: Add the v_idn for the named view associated with InitXform to the array
			Don't add duplicate id's

 @param[in,out]		vids				array of view ids 
 @param[in]			addSystemViews		add system views to the list


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AddVIdToArray(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 Purpose: Add the v_idn for the named view identified by viewID to the array
			Don't add duplicate id's

 @param[in,out]		vids				array of view ids 
 @param[in]			viewID				view id to add
 @param[in]			viewMatrix			view matrix for view
 @param[in]			addSystemViews		add system views to the list


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CurXform">

 Purpose: transformation matrix to put component @ current NC position


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitXform">

 Purpose: transformation matrix to put component on machine @ initial position


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AxisPosToEventCoord(System.Double)">

 Purpose: Compute the event coordinate for this component based on the 
			'event axis' position

 @param[in]		axisPos				position of the event axis


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ApplyEventAxisLimits(Cnc.MachineDef.Component.CLinearAxisComponent*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Apply the travel limits of the event axis to update an axis 
 position and associated event coordinate
 The axis position and event coordinate remain unchanged if the axis 
 position lies within the axis limits

 @param[in]			pLinAx			event axis
 @param[in/out]		axisPos			axis position to check
 @param[in/out]		limEVCoord		event coordinate to update


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.EventCoordToEventAxisPos(System.Double)">

 Purpose: Compute the 'event axis' position based on the event coordinate
			for this component
			Does nothing in base class

 @param[in]		evCoord				event coordinate for this component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.PutPointInMachinePosition(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Put a point in machine position using the vector from the 
			reference point to the initial point

 @param[in]		ptIn				point to translate
 @param[out]		ptOut				translated point


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.PrevPos">

 Purpose: Return previous position of anchor point (world coordinates)


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CurPos">

 Purpose: Return current position of anchor point (world coordinates)


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetAnchorPt(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 Purpose: Return position of anchor point, optionally with component 
			on machine @ initial position in world coordinates

 @param[out]		pt				anchor point
 @param[in]		inMachPos		true = in machine pos, false = raw data


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AnchorPt">

 Purpose: Return position of anchor point WRT component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitPt">

 Purpose: Return position of reference point with component on machine @ initial
 position in world coordinate


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.RefPt">

 Purpose: Return reference point on component (world coordinates)


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AxisVectorFromIndex(System.Int32,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Convert an axis index to an axis vector

 @param[in]		axisIndex			index (X_AXIS, Y_AXIS, etc...)
 @param[out]		axisVec				resulting axis vector


</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_PrevPos">
previous position of the anchor point
</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MappedAxis(System.Boolean)">
            <summary> Purpose: Find the 'equivalent' mapped axis component (linear &amp; rotary axes only). </summary>
            <remarks> This method seems to be not used anymore. @TODO figure out what is this mapped axis, 
		  and decide if we can remove it (mxs). </remarks>
            <param name="useMachineAxis">	(Optional) True to use machine axis. </param>
            <returns> Null if it fails, else a pointer to a CMachineComponent. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentByType(System.Int32,System.Int32)">

 Purpose: Find first 'parent' component of one of the desired types
			Recursively search parents, starting with this component's parent
			Return NULL if none found

 @param[in]		startType			first type to check
 @param[in]		endType				last component type to check


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.FindNextComponentByType(System.Int32,System.Boolean)">

 Purpose: Find next component of the desired component type

 @param[in]			compType		component type to search for
 @param[in]		checkSiblings		check siblings of this component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

 Purpose: Component specific initialization when read from a file
			Add specific initialization in the derived class for the component type

 @param[in]		filename			name of file to read from
 @param[in]		fp					open database file
 @param[in]		loadGeo				true = load machine geometry from the file 

</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.RewriteToDb">

 Purpose: Rewrite this component to the database


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ResolveRelationPtrsToEntIdsAndSaveToDb(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Resolve relation ptrs to ent identifiers and save to database. </summary>
            <param name="compEnt"> The entity data struct representing the component. </param>
            <returns> A bool. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SaveToDb">

 Purpose: Save this component to the database


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.FindEntByID(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
 Purpose: Retrieve the entity for this component from the database
			using its unique id

 @param[out]		compEnt				component entity
 @param[int]		compEnt				component entity


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetAttachedDbEntityIdn">
            <summary> Gets attached database entity's idn. </summary>
            <returns> The attached database entity's idn. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Machine_ent_idn">

 Purpose: Return the ent_idn of the owner machine


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Ent_idns">

 Purpose: Return current ent_idn info




 Purpose: Return current const ent_idn info


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.UsesNamedView(System.Int16)">
 Purpose: Return true if this component uses the input named view

 @param[in]			viewID				named view ID


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.OnAddedToTree">
            <summary> This function is called after this component is added to the machine tree. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ConvertUnits">

 Purpose: Convert the component units, if required


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ConvertGeometryUnits">

 Purpose: Convert the (non-parametric) component geometry units, if required


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SaveViewToDb(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*)">

 Purpose: Save a view to the database

 @param[in]			viewMatrix				view matrix
 @param[in,out]		namedViewID				named view id
 @param[in]			pVwName					view name, if not an MD view


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.FindViewFromMDFileList(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16)">

 Purpose: Find a view from the list of views saved in the MD file
			for the machine that owns this component

 @param[in]			viewMatrix				view matrix
 @param[in]			namedViewID				named view id


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.MakeInitXformViewName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Make a view name for the InitXform() matrix for this
			component

 @param[out]			viewName				named view name


</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_DoUnitConversion">
use this to suppress unit conversion in the base class so it can
be called at the proper time when reading a component in from a file
</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteDescendents(System.Boolean,System.Boolean,System.Boolean)">
            <summary> Deletes the descendents of the given component. </summary>
            <param name="deleteCompEnts">    true = delete component's corresponding database entities also. </param>
            <param name="delTCABdrys">		 (Optional) true = delete lathe TCA boundaries. </param>
            <param name="forceDeleteEntity"> (Optional) true to force delete entity even if the 
									component (for classEnt components) is not attached to the entity (via ent.u.classEnt). </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetDescendents(System.UInt64**,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Get pointers to descendants of this component
 (initialize numDescendents to 0 1st!)

 @param[out]		pCompList			list of descendants
 @param[in,out]	numDescendents		number of descendants


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CountDescendents(System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Count descendants of this component (initialize numCOunted to 0 1st!)

 @param[in,out]	numCounted			number of descendants


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.IsChildOfEntIdnBased(Cnc.MachineDef.Component.CMachineComponent*)">
            <summary> Determines if this component is represented as a decendant of the parent component in the machine tree. </summary>
            <param name="pParent"> Non-null, the parent or root of the search. </param>
            <returns> true if this comonent's Db Id is found while traversing to the leaves from the starting component, else false. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.IsChildOf(Cnc.MachineDef.Component.CMachineComponent*)">

 Purpose: Return true if this component is a descendent of the input component

 @param[in]		pParent				component to test against


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DeleteFromAxisCombinations">

 Purpose: Delete this component from any of the machine's axis
			combinations.


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.UsedInAxisCombinations(std.vector&lt;CAxisCombination**,std.allocator&lt;CAxisCombination**&gt;&gt;*,System.Boolean)">

 Purpose: Determine whether or not this component is in any of the
			machine's axis combinations. Optionally fill in an array of
			axis combinations which contain this component.

 @param[out]		pCompAxisCombos		axis combo's which use this group
 @param[in]		deleteIfFound		delete from axis combo's if found

</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetGroup(Cnc.MachineDef.Component.CComponentGroup*)">

 Purpose: Define owner group for component

 @param[in]		pGroup			owner group for component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Group">

 Purpose: Return owner group for component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Machine">

 Purpose: Return owner machine for component




 Purpose: Return const owner machine for component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitGUIDWithMachine(CCNCMachine*,System.Boolean)">
            <summary> Initialises the component's GUID with given owning machine. </summary>
            <remarks> Sets the component's owning machine pointer to the given. </remarks>
            <param name="pOwnerMachine"> If non-null, the machine that owns this component. </param>
            <param name="noDuplicates"> true = check validity and if duplicate. If duplicate then generate a new GUID value. false = skip this. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AddToTree(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,System.Boolean)">

 Purpose: Add this component to the machine tree

 @param[in]		pMachine			owner machine for component
 @param[in]		pParentComp			parent component (NULL for base)
 @param[in]		addToExisting		true = add to existing children


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AddToTree(eTreeFlags)">

 Purpose: Add this component to the machine tree

 @param[in]		treeFlag			defines how to add to tree


</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_pChildren">
pointers to components which are attached to the this one
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_pNextSibling">
pointer to next sibling component attached to pParent
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_pPrevSibling">
pointer to previous sibling component attached to pParent
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_pParent">
pointer to component to which this one is attached, NULL = machine base (ground)
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_pGroup">
component group to which this component belongs
</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.WriteUIDToNCI(SysFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Write the ent_idn, UID and name to a line in the ASCII NCI

 @param[in]				fp		open NCI file to write to


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.BdryMgr">

 Purpose:  Return pointer to boundary manager


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.HideInMW">

 Purpose: Flag whether or not to hide this component in MachineWorks simulation


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetChordTol(System.Double)">
            <summary>	Sets chord height tolerance used for tesselating solids for simulation. </summary>
            <remarks>	If the given tolerance values saved is smaller than the minimum allowed then
			the minimum allowed value will be set. </remarks>
            <param name="chordtol">	The chord height tolerance value. </param>
            <returns>	true if it succeeds, false if it fails (tolerance to small). </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ChordTol">
            <summary>	Gets chord height tolerance used for tesselating solids for simulation. </summary>
            <remarks>	If the tolerance values saved on the object is smaller than the minimum allowed then
			the minimum allowed value will be assigned and returned. </remarks>
            <returns>	The chord height tolerance value. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.TypeStrID">

 Purpose: Return resource string ID describing component type


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetTransparency(System.Byte)">

 Purpose: Define component transparency

 @param[in]		transparency		   new component transparency   TODO: [Remove]


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Transparency">

 Purpose: Return component transparency  TODO: [Remove]


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetColor(System.Byte)">

 Purpose: Define component colour

 @param[in]		color			new component colour


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Color">

 Purpose: Return component colour


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Descriptor">

 Purpose: Return component descriptor for dialog controls


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.AddGroupNameToString(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Add the group name in brackets (without the word group) to a string

 @param[in/out] string to append the group name to


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitName">

 Purpose: Initialize component name


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Name">

 Purpose: Return component name (use only to access, not to modify!)


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetGeoType(System.Int32)">

 Purpose: Define geometry type

 @param[in]		geomType				component geometry type


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GeoType">

 Purpose: Return geometry type


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.IsTooling">

 Purpose: Return whether component is a misc. tooling component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.IsToolStorage">

 Purpose: Return whether component is a tool storage component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.IsPartHolding">

 Purpose: Return whether component is a part holding component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.IsClass(System.Int32)">

 Purpose: Return whether component is of the requested group class

 @param[in]		groupClass			group class to check


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.UidIsDuplicate">

 Purpose: Determine if the unique ID is a duplicate of another one on the 
			machine


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.UidIsDuplicate(Cnc.MachineDef.Component.CMachineComponent*)">

 Purpose: Determine if the unique ID is a duplicate of another one on the 
			machine

 @param[in]		 pComp				component to compare


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CopyUid(System.Byte(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N24])">

 Purpose: Copy the unique identifier

 @param[out]		 id				ID to return


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CopyUid(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Copy the unique identifier

 @param[out]		 id				ID to return


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.UidEquals(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Return true if the UID matches the one input

 @param[in]		id				UID to compare


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetType(System.Int32)">

 Purpose: Define component type

 @param[in]		compType			component type


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Type">

 Purpose: Return component type


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SolidGeo">

 Purpose: Return the general solid geometry parameters


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetParams(machine_component_type*)">

 Purpose: Set current parameters

 @param[in]		pParams			component parameters


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetParams(machine_component_type*)">

 Purpose: Return current parameters

 @param[out]		pParams			component parameters


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetGeometryTypeIfValidAndNotParametricOrChain(System.Int32)">
            <summary> Sets geometry type on this component if the type is a valid type value and it is neither a parametric or chain type. </summary>
            <param name="geometryType"> Type of the geometry. </param>
            <returns> True if the geometry type was set, and false otherwise. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetParamsFromMachineSetupComp(Cnc.MachineDef.Component.CMachineComponent*)">

 Purpose: Set selected parameters from a machine setup component

 @param[in]	pComp			component to set the parameters from


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Params">

 Purpose: Return a reference to internal parameter structure




 Purpose: Returns a constant reference to internal parameter structure


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SaveToDflts">

 Purpose: Map component parameters back to the defaults


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SaveGeoToDflts">

 Purpose: Map geometry parameters back to the defaults

 @param[out]	 dfltGeo		 default solid geometry


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetGeoFromDflts">

 Purpose: Map default geometry parameters to a component

 @param[in]	dfltGeo		default solid geometry


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.CopyComponentId(Cnc.MachineDef.Component.CMachineComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the component identifier described by src. </summary>
            <param name="src"> Component object possessing the ID to copy. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.IsClassEnt">
            <summary> Query if this component object is follows the ClassEnt design. </summary>
            <remarks> Even though the CMachineComponent derives from the ClassEnt, only the newer components
		  actually implement it properly.  The older component types store themselves to the entity
		  using the mach_comp structure in the entity's union. The new components hang off of
		  the entity struct via the u.classEnt member of it's super union. </remarks>
            <returns> true if ClassEnt, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InternalAcceptTraversal(IMdComponentVisitor*)">
            <summary> Internal accept traversal. </summary>
            <param name="pVisitor"> If non-null, the visitor. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Accept(IMdComponentVisitor*,System.Boolean)">
            <summary> Accepts the given visitor. </summary>
            <param name="visitor"> The visitor. </param>
            <param name="processChildren"> Whether the visitor will process the children or not. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SaveSolidGeoToDflts(solid_geo_dflts*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Map solid geometry parameters back to the defaults

 @param[out]	 dfltGeo		 default solid geometry


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetSolidGeoFromDflts(solid_geo_dflts*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Map default solid geometry parameters to a component

 @param[in]	dfltGeo		default solid geometry


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetFromDflts">

 Purpose: Map default parameters to a component 


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.RestoreAndFixParams">

 Purpose: Restore parameters that backed up at the start of the 
			call to GetFromDflts() and fix anything that may be invalid


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.BackupParams">

 Purpose: Backup parameters that need to be restored at the end of the 
			call to GetFromDflts()


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.DefinedInMGP">

 Purpose: Return true if the component was defined in the MGP copy of the machine


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitUid">

 Purpose: Initalize the unique ID for this component
			- called from GetFromDflts() for any component


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SaveDflts">

 Purpose: Save default parameters (called only once per session)


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitDflts">

 Purpose: Initialize default parameters (called only once per session)


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetEntType">
            <summary> Gets the assoc_id representing the ClassEnt type (i.e. OP_ID). </summary>
            <remarks> Override necessary to derive components that don't use the classent mechanism. </remarks>
            <returns> The assoc_id representing the ClassEnt type. </returns>
        </member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_ent_idns">
these are parameters that must be backed up before and restored after
a call to GetFromDflts()
</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitData(System.Int32,eTreeFlags)">

 Purpose: Initialize class data on creation

 @param[in]	compType			component type
 @param[in]	treeFlag			defines how to add to tree


</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_Descriptor">
control text descriptor for component
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_pTCAMgr">
lathe tool collision avoidance manager TODO: Remove and access the global in the clients
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_pProjectMgr">
lathe project manager TODO: Remove and access the global in the clients
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_pBdryMgr">
lathe boundary manager TODO: Remove and access the global in the clients
</member>
        <member name="F:Cnc.MachineDef.Component.CMachineComponent.m_Params">
component parameters
</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetChildPtrs">
            <summary>	Gets a collection filled with the pointers to the component's children. </summary>
            <returns>	Pointers to the component's children. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetOwningMachine">
            <summary> Gets owning machine. </summary>
            <returns> null if no owner, else the owning machine. </returns>
            <summary> Gets owning machine. </summary>
            <returns> null if no owner, else the owning machine. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetNextSiblingPtr">
            <summary> Gets the next sibling component pointer. </summary>
            <returns> null if it fails, else the next sibling component pointer. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetNextSiblingPtr(Cnc.MachineDef.Component.IMdComponent*)">
            <summary> Sets next sibling component pointer. </summary>
            <param name="component"> If non-null, the component pointer. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetPrevSiblingPtr">
            <summary> Gets the previous sibling component pointer. </summary>
            <returns> null if it fails, else the previous sibling component pointer. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetPrevSiblingPtr(Cnc.MachineDef.Component.IMdComponent*)">
            <summary> Sets previous sibling component pointer. </summary>
            <param name="component"> If non-null, the component pointer. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetFirstChildPtr">
            <summary> Gets the first child component pointer. </summary>
            <returns> null if it fails, else the first child component pointer. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetFirstChildPtr(Cnc.MachineDef.Component.IMdComponent*)">
            <summary> Sets first child component pointer. </summary>
            <param name="component"> If non-null, the component pointer. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetParentPtr">
            <summary> Gets the parent component pointer. </summary>
            <returns> null if it fails, else the parent component pointer. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetParentPtr(Cnc.MachineDef.Component.IMdComponent*)">
            <summary> Sets parent component pointer. </summary>
            <param name="component"> If non-null, the component pointer. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetCompId">
            <summary>	Gets component ID (GUID). </summary>
            <param name="id">	The component ID. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetType">
            <summary> Gets the component type code. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetDescription(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a description string. </summary>
            <param name="value"> The new description string to set. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetDescription">
            <summary> Gets the description string. </summary>
            <returns> The description string. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a description string. </summary>
            <param name="value"> The new description string to set. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetName">
            <summary> Gets the description string. </summary>
            <returns> The description string. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serialize this object to the given stream. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.GetXMLVersion">
            <summary> Get Version (used in XML serialization). </summary>
            <returns> the version </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.InitializeParameters">
            <summary>	Initializes the parameters. </summary>
            <remarks>	This methods is intended to invoke all virtual functions that used to be invoked from the constructor</remarks>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.ResetClassEntIDN">
            <summary> Resets the class ent idn. </summary>
            <remarks> The reset is not allowed if the classEnt is currently bound to a DB Entity. </remarks>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Copy(Cnc.MachineDef.Component.CMachineComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the contents of the given src. </summary>
            <param name="src"> Source to copy from. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.op_Assign(Cnc.MachineDef.Component.CMachineComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="src"> Source object to copy. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.Dispose">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.#ctor(Cnc.MachineDef.Component.CMachineComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="src"> Source for the. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.#ctor(CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,Cnc.MachineDef.Component.CMachineComponent*,machine_component_type*,eTreeFlags)">

 Purpose: Existing component parameter Constructor

 @param[in]		pMachine			owner machine for component
 @param[in]		pGroup				owner group for component (NULL for base)
 @param[in]		pParentComp			parent component (NULL for base)
 @param[in]		pParams				parameters for component
 @param[in]		treeFlag			defines how to add to tree


</member>
        <member name="M:Cnc.MachineDef.Component.CMachineComponent.#ctor(CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,Cnc.MachineDef.Component.CMachineComponent*,System.Int32,eTreeFlags)">

 Purpose: Default Constructor

 @param[in]		pMachine			owner machine for component
 @param[in]		pGroup				owner group for component (NULL for base)
 @param[in]		pParentComp			parent component (NULL for base)
 @param[in]		compType			component type to create
 @param[in]		treeFlag			defines how to add to tree


</member>
        <member name="T:Cnc.MachineDef.Component.CMachineComponent.ChildToolSearchCondition">
            <summary> Descibes the search condition to use for component search </summary>
        </member>
        <member name="T:Cnc.MachineDef.Component.CMachineComponent">
            <summary> Machine Component Modeling Base Class. </summary>
            <remarks> all machine components should be sub-classed from this class, 
or other component classes which have been sub-classed from it </remarks>
        </member>
        <member name="M:SaveDefaultComponentParams(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,machine_component_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,solid_geo_dflts*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Save component parameters

 @param[in]	filename			name of defaults file
 @param[in]	comp				component parameters to initialize
 @param[in]	geo					geometry parameters to initialize


</member>
        <member name="M:DisableComponentMenus(CMenu*,CCNCMachine*)">
            <summary> Disable menu items for components that can't be added to this component. </summary>
            <param name="pPopup">   menu to disable items in. </param>
            <param name="pMachine"> [machine being edited. </param>
        </member>
        <member name="M:InitDefaultComponentParams(System.Int32,machine_component_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,solid_geo_dflts*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Initialize component parameters. </summary>
            <param name="compType">	Type of the component. </param>
            <param name="comp">	   	component parameters to initialize. </param>
            <param name="geo">	   	geometry parameters to initialize. </param>
        </member>
        <member name="T:Cnc.MachineDef.Component.MachineTreeDisplayContext">
            <summary> Enum represents the machine tree's display context. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.V2019ToV2020Migration.UpdateTo2020AndSaveJawComponents(CCNCMachine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Update legacy jaws to 2020 version. </summary>
            <param name="machine"> Machine that contains the jaws to update. </param>
            <remarks> This method aims to update the local copy of legacy part file. It will look at the chuck channel depth property and will update the jaws accordingly. </remarks>
        </member>
        <member name="M:Cnc.MachineDef.Component.V2019ToV2020Migration.ExtendChuckJawWidthFromChannelDepth(std.map&lt;System.Double,Cnc.MachineDef.Component.CMachineComponent**,std.less&lt;System.Double&gt;,std.allocator&lt;std.pair&lt;System.Double!System.Runtime.CompilerServices.IsConst,Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Double,Cnc.MachineDef.Component.CMachineComponent**,std.less&lt;System.Double&gt;,std.allocator&lt;std.pair&lt;System.Double!System.Runtime.CompilerServices.IsConst,Cnc.MachineDef.Component.CMachineComponent**&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Extend jaw geometry "width" of the chuck channel width if required. </summary>
            <param name="initPtToChuckJawPtrMap"> Jaw map ordered from left to right spindle based on the init pos property. This map contains ptr on jaws whose will be extended. </param>
            <param name="initPtToChuckPtrMap"> Chuck map ordered from left to right spindle based on the init pos property. This map contains ptr on chucks that provide the channel depth value. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.V2019ToV2020Migration.MakeCNCMachineGMDCompliant(CCNCMachine*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Modify a CCNCMachine to make it GMD compliant. </summary>
            <param name="machine"> The machine to make GMD compliant.  </param>
            <param name="gmdFilePath"> The filepath of the new gmd file.  </param>
            <returns> TRUE : machine is GMD compliant, FALSE : an issue occurred. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.V2019ToV2020Migration.GenerateGMDFilePath(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Generates a gmd file path. Keep the path but changes the name of the "gmdPathToUpdate" parameter.</summary>
            <param name="gmdPathToUpdate"> Gmd file path to update. </param>
            <param name="metricGMD"> TRUE : gmd in metric, FALSE in imperial.  </param>
            <remarks> Knowing about the unit system is required to construct the gmd file name as we have a gmd for each unit system. </remarks>
            <returns> TRUE : GMD filepath generated correctly, FALSE : an issue occurred  </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.V2019ToV2020Migration.UpdateGMDFile(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Add and fill new groups (Chuck, Chuck Jaws, Default left and right spindle)  to a 2019 gmd file. </summary>
            <param name="gmdToUpdatePath"> The 2019 gmd filename to update. If empty will be generated. </param>
            <param name="lmdSourcePath"> The 2019 lmd filename to look at to extract chuck components. </param>
            <param name="defaultFilePath"> The 2019 default op. filename to look at to extract chuck jaws components . </param>
            <param name="metricGMD"> TRUE : gmd in metric, FALSE in imperial.  </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.V2019ToV2020Migration.ConvertGMDFiles(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsCons">
            <summary> Convert V2019 gmd to V2020. </summary>
            <param name="gmdFileNameImperial2019">   The 2019 inch gmd file name, will be filled if empty. </param>
            <param name="gmdFileNameMetric2019"> The 2019 metric gmd file name, will be filled if empty. </param>
            <param name="lmdFileName2019">		 The 2019 lmd file name. </param>
            <param name="defaultFileNameImperial2019">   The 2019 inch default op file name. </param>
            <param name="defaultFileNameMetric2019"> The 2019 metric default op file name. </param>
            <returns> TRUE : GMD files converted correctly, FALSE : an issue occurred  </returns>
        </member>
        <member name="M:Cnc.MachineDef.IMdMachine.BelongToToolPathGroup">
            <summary> Determines if we can belong to tool path group. </summary>
            <returns> true if it belong to a toolpath group, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.IMdMachine.GetType">
            <summary> Gets the machine type. </summary>
            <returns> Returns the code value that identifies the machine type. </returns>
        </member>
        <member name="M:Cnc.MachineDef.IMdMachine.SetName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a name. </summary>
            <param name="name"> The name. </param>
        </member>
        <member name="M:Cnc.MachineDef.IMdMachine.GetName">
            <summary> Destructor. </summary>
            <summary> Gets the name. </summary>
            <returns> The name. </returns>
        </member>
        <member name="T:Cnc.MachineDef.IMdMachine">
            <summary> Interface describing a machine definition component. </summary>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.MTTurretComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CTurretComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CToolSpindleComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.ComponentTurretToolLocator*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.ComponentSpindleToolLocator*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.MdToolLocator*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CToolComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CTailstockComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CStockComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CSteadyRestComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CRotaryAxisComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CRectTableComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CMultiHeadPiggyComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CMultiHeadComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CMiscComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CMachineBaseComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CLowerGuideComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.ComponentMTQuill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CLinearAxisComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CLatheCenterComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given Lathe Center component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CGuideBushingComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given "guide bushing" component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CGangToolComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given "gang tool holder" component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CFixtureComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given fixture component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CDrillBlockComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given "drill block" component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CChuckJawsComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given "jaws" component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CChuckComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given "chuck" component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CAggregateComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given aggregate head component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CATCComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given "automated tool changer" (ATC) component. </summary>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CMachineComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given machine component (generic). </summary>
            <remarks> This will be invoked if an component subclass is visited that does
		   not have its own specialize version of this method. </remarks>
            <param name="component"> The component to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(Cnc.MachineDef.Component.CComponentGroup*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given reference position list. </summary>
            <param name="list"> The reference position list to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(MachinePositionList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given reference position list. </summary>
            <param name="list"> The reference position list to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(MachinePosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given reference position. </summary>
            <param name="position"> The reference position to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(CAxisCombination*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the given axis combo. </summary>
            <param name="axisCombo"> The axis combo to visit. </param>
        </member>
        <member name="M:IMdComponentVisitor.Visit(CCNCMachine*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Destructor. </summary>
            <summary> Visits the given machine. </summary>
            <param name="machine"> The machine to visit. </param>
        </member>
        <member name="T:IMdComponentVisitor">
            <summary> Interface for a visitor class intended for visiting the CNCMachine and its components. </summary>
            <remarks> We must remember to add and remove Visit abstract methods to corresponding to any
		   changes with the component subclasses </remarks>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.Copy(Cnc.MachineDef.Component.MdClassEnt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the contents of the given src. </summary>
            <param name="src"> Source to copy from. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.InitUid(System.Byte(*)[N24])">
            <summary> Initialize the unique ID for this component
		  - called from GetFromDflts() for any component. </summary>
            <param name="pSrc"> The identifier source I/O. Initialized if NULL. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.GetOwnerMachine">
            <summary> Get the owner machine. </summary>
            <returns> Ptr on the owner machine. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.SetOwnerMachine(CCNCMachine*)">
            <summary> Set the owner machine. </summary>
            <param name="pMachine"> The owner machine. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.GetAssocEntityType">
            <summary> Gets the component's "Assoc" entity type value. </summary>
            <returns> The component's "Assoc" entity type value. (see AssocEntityTypes_CH.h) </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.CopyUid(System.Byte(*)[N24],MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies the UID described by ID. </summary>
            <param name="pSrc"> The component id type to copy from.  I/O. Initialized if NULL. </param>
            <param name="compId"> The identifier to copy in. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.UidIsDefined">
            <summary> Return true if the ID has been defined (not all 0's) </summary>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.UidEquals(System.Byte(*)[N24],MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return true if the UID matches the one input. </summary>
            <param name="pSrc"> The component id type to compare.  I/O. Initialized if NULL </param>
            <param name="id"> The identifier to compare with. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.GetXMLVersion">
            <summary> Get Version (used in XML serialization). </summary>
            <returns> the version </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.Dispose">
            <summary> Finalizes an instance of the ClassEnt class. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.MdClassEnt.#ctor(CCNCMachine*,MdComponentId*)">
            <summary> Initializes a new instance of the MdClassEnt class. </summary>
            <param name="m_pOwnerMachine"> (Optional) If non-null, the machine that owns this item. </param>
            <param name="m_pUID">		   (Optional) If non-null, the UID. </param>
        </member>
        <member name="T:Cnc.MachineDef.Component.MdClassEnt">
            <summary> Class that provides specific feature for machine component ClassEnt style. The main purpose is to factorize data member and behavior between component groups and components. </summary>
        </member>
        <member name="D:IMdClassEntUniquePtr">
            <summary> Defines an alias representing a std::unique_ptr to a IMdClassEnt. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdClassEnt.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdClassEnt.IsClassEnt">
            <summary> Query if this component object is follows the ClassEnt design. </summary>
            <remarks> Even though the CMachineComponent derives from the ClassEnt, only the newer components
		  actually implement it properly.  The older component types store themselves to the entity
		  using the mach_comp structure in the entity's union. The new components hang off of
		  the entity struct via the u.classEnt member of it's super union. </remarks>
            <returns> true if ClassEnt, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdClassEnt.GetAssocEntityType">
            <summary> Gets the component's "Assoc" entity type value. </summary>
            <returns> The component's "Assoc" entity type value. (see AssocEntityTypes_CH.h) </returns>
        </member>
        <member name="T:Cnc.MachineDef.Component.IMdClassEnt">
            <summary> Common classEnt interface for components and component groups. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.Encode(System.Int32,System.Int32)">

 Purpose: Encode the group class and type from individual components
 Return the encoded value

 @param[in]		gc			group class
 @param[in]		gt			group type


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.Decode(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 Purpose: Return the group class and type from the value

 @param[out]		gc		group class
 @param[out]		gt		group type


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.SetType(System.Int32)">

 Purpose: Set the group type

 @param[in]		gt			group type


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.Type">

 Purpose: Return group type


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.SetClass(System.Int32)">

 Purpose: Set the group class

 @param[in]		gc			group class


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.Class">

 Purpose: Return the group class


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.SetValue(System.Int32!System.Runtime.CompilerServices.IsLong)">

 Purpose: Set the class and type

 @param[in]		gct			group class and type data


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.GetValue">

 Purpose: Return the class and type


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.Dispose">

 Purpose: Destructor


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.#ctor(System.Int32,System.Int32)">

 Purpose: Constructor

 @param			gc			group class
 @param			gt			group type


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">

 Purpose: Constructor

 @param		gct				initial value


</member>
        <member name="M:Cnc.MachineDef.Component.CGroupClassAndType.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong*)">

 Purpose: Constructor

 @param		pGct			pointer to initial value


</member>
        <member name="M:Cnc.MachineDef.Component.DecodeClassAndType(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Decode the class and type from the encoded value. </summary>
            <param name="classAndType">	Variable with class and type info. </param>
            <param name="pGroupClass"> 	The group class. </param>
            <param name="pGroupType">  	Type of the group. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.EncodeClassAndType(System.Int32,System.Int32)">
            <summary>Encode the class and type to a single coded value. </summary>
            <param name="groupClass">	The group class. </param>
            <param name="groupType"> 	Type of the group. </param>
            <returns>	A group_class_and_type all in one. </returns>
        </member>
        <member name="M:CMachineInterfaceParams.RemoveEmptyTemporaryDrawingLevels">
            <summary>	Removes any of the two temporary drawing levels if there are no entities in them. </summary>
        </member>
        <member name="T:MachineUpdaterInterface.ReplaceMachineErrorCode">
            <summary> Replace Machine Error Code enumeration. </summary>
        </member>
        <member name="M:MachineUpdaterInterface.SelectMachine(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Select machine. </summary>
            <param name="machineFile"> The machine file. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MachineUpdaterInterface.ReplaceMTMachineMessageBox(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Replace MT machine message box. </summary>
            <param name="group">	   The group. </param>
            <param name="forceReload"> true to force reload. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MachineUpdaterInterface.ReplaceMachine(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Replace machine. </summary>
            <param name="machineFile">    The machine file. </param>
            <param name="group">		  The group. </param>
            <param name="forceReload">    true to force reload. </param>
            <param name="mgpSettingsWin"> (Optional) true to mgp settings window. </param>
            <returns> Error Code showing where it failed during Replace. </returns>
        </member>
        <member name="M:MachineUpdaterInterface.ReLoadMtMachineFromFile(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Re load MT machine from file. </summary>
            <param name="group"> The group. </param>
            <returns> null if it fails, else a CCNCMachine* with the new MT machine. </returns>
        </member>
        <member name="M:MachineUpdaterInterface.ProcessMachineGroup(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Process the machine group. </summary>
            <param name="group">	   The group. </param>
            <param name="forceReload"> true to force reload. </param>
        </member>
        <member name="M:MachineUpdaterInterface.ProcessMachineGroups(System.Boolean)">
            <summary> Process the machine groups. </summary>
            <param name="forceReload"> true to force reload. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:MachineUpdaterInterface.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:MachineUpdaterInterface.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:MachineUpdaterInterface">
            <summary> update any machines/files that are missing in the MT machine groups. </summary>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.GetAllFileTypes(std.vector&lt;Cnc.MachineFileMgr.FileType,std.allocator&lt;Cnc.MachineFileMgr.FileType&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets all file types. </summary>
            <param name="fileTypes">	[in,out] List of types of files supported. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.GetNCOutputFolder">
            <summary> Gets the string identifier, which represents the NC Output folder, of the active machine configuration used to program the current part. </summary>
            <returns> String representation of the machine configuration NC Output folder. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.SetNCOutputFolder(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Sets the string identifier, which represents the NC Output folder, of the active machine configuration used to program the current part. </summary>
            <param name="configurationId"> String representation of the machine configuration NC Output Folder. </param>
            <param name="override"> Boolean flag for MGP overriding of the machine map. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.InitFromMachine(CCNCMachine*)">
            <summary> Initializes this object from the given initialise from machine. </summary>
            <param name="pMachine"> If non-null, the machine. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.InitFromMachineGroup(op_group*)">
            <summary> Initializes this object from the given initialise from machine group. </summary>
            <param name="pMachGroup"> If non-null, group the mach belongs to. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.SetProductCode(System.Int32)">
            <summary> Sets the product of the machine. </summary>
            <param name="value"> Product code of the machine. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.GetProductCode">
            <summary> Gets the product code of the machine. </summary>
            <returns> Product code of the machine. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.SetConfigurationId(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the string identifier, which represents a Guid, of the active machine configuration used to program the current part. </summary>
            <param name="configIdStr"> String representation of the machine configuration Guid. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.SetConfigurationId(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the string identifier, which represents a Guid, of the active machine configuration used to program the current part. </summary>
            <param name="configId"> String representation of the machine configuration Guid. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.ConfigurationId">
            <summary> Gets the dentifier, which represents a Guid, of the active machine configuration used to program the current part. </summary>
            <returns> The machine configuration Guid. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.SetFileName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.MachineFileMgr.FileType!System.Runtime.CompilerServices.IsConst,System.Boolean)">
            <summary> Sets file name. </summary>
            <param name="fname">    Filename of the file. </param>
            <param name="fileType"> Type of the file. </param>
            <param name="override"> (Optional) true to override. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.FileName(Cnc.MachineFileMgr.FileType!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> File name. </summary>
            <param name="fileType">   Type of the file. </param>
            <param name="adjustPath"> (Optional) full pathname of the adjust file. </param>
            <returns> A CString. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.File(Cnc.MachineFileMgr.FileType!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Files the given file. </summary>
            <param name="fileType">   Type of the file. </param>
            <param name="adjustPath"> (Optional) full pathname of the adjust file. </param>
            <returns> A CSystemFile. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.AdjustPath(Cnc.MachineFileMgr.FileType!System.Runtime.CompilerServices.IsConst)">
            <summary> Adjust path. </summary>
            <param name="fileType"> Type of the file. </param>
            <returns> A CString. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.MGPOverridden(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Flags the Machine Group Properties override case. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.IsMGPOverridden">
            <summary> Flags the Machine Group Properties override case. </summary>
            <returns> true if mgp overridden, false if not. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.Clear">
            <summary> Clears the file names and GUID in the map. </summary>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.SetValid(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets a valid flag to know the map is ready for use. </summary>
            <param name="valid"> The valid. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.GetValid">
            <summary> Gets the valid flag. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.SetSessionId(System.Int32)">
            <summary> Sets the identifier of the session that manipulates this machine. </summary>
            <param name="value"> The session identifier. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.GetSessionId">
            <summary> Gets the identifier of the session that manipulates this machine. </summary>
            <returns> The session identifier. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.SetMachineGroupId(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets machine group Id. </summary>
            <param name="machineGroupId"> Id of the machine group. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.GetMachineGroupId">
            <summary> Gets machine group Id. </summary>
            <returns> The machine group Id. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.SetMachineName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a name of the Machine. </summary>
            <param name="name"> The name. </param>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.GetMachineName">
            <summary> Gets the name of the Machine. </summary>
            <returns> The name. </returns>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.op_Assign(Cnc.MachineFileMgr.MachineFileMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Operator = to copy the Data from one map to another. </summary>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.MachineFileMgr.MachineFileMap.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="D:MdComponentIdVector">
            <summary> Alias for vector of component Id (i.e GUID) values. </summary>
        </member>
        <member name="D:MdComponentIdToPtrMap">
            <summary> Alias for map that maps MdComponentId (key) to the corresponding component's pointer. </summary>
        </member>
        <member name="M:UidEquals(MdComponentId*,MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Return true if the ID matches the one input. </summary>
            <param name="pUID"> If non-null, the UID. </param>
            <param name="id">   The identifier. </param>
            <returns> True if equal, false otherwise. </returns>
        </member>
        <member name="M:InitUid(MdComponentId**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N24],CCNCMachine*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initalize the unique ID. </summary>
            <param name="pUID">    If non-null, the UID. </param>
            <param name="id">	   The identifier. </param>
            <param name="machine"> The machine. </param>
        </member>
        <member name="M:MdComponentId.IsAttachedToThis(System.Byte!System.Runtime.CompilerServices.IsConst(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N24])">
            <summary> Indicate if this MDComponentId object is attached to the given component ID struct. </summary>
            <param name="src"> component ID object to test if connected. </param>
            <returns> true if attached to this, false if not. </returns>
        </member>
        <member name="M:MdComponentId.op_GreaterThan(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:MdComponentId.op_LessThan(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the first (this) Id is less than the right hand side. </returns>
        </member>
        <member name="M:MdComponentId.ToString(System.Boolean)">
            <summary> Convert this object into a string representation. </summary>
            <param name="encodeGroup"> true = encode the group Id in the string. 
						   if this option is enabled then the ComponentId can be
						   fully restored from the resulting string using the
						   FromString method.  false = don't encode the group ID in the
						   resulting string.  This only allows you to recover the GUID 
						   and not the group id when using FromString. </param>
            <returns> A CString that represents this object's ID. </returns>
        </member>
        <member name="M:MdComponentId.InitGroupFromMachine(CCNCMachine*)">
            <summary> Initialises the group from machine. </summary>
            <param name="pMachine"> If non-null, the machine. </param>
        </member>
        <member name="M:MdComponentId.InitGroupId(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Initialises the TP group identifier directly. </summary>
            <param name="idGrp"> Group the identifier the object getting the ID belongs to. </param>
        </member>
        <member name="M:MdComponentId.CanParseIntoGuid(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determine if the given string can be parsed into a Guid. </summary>
            <param name="text"> Text to check. </param>
            <returns> True if the string can be parsed into a Guid. </returns>
        </member>
        <member name="M:MdComponentId.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serialize this object to the given stream. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:MdComponentId.#ctor(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Initializes a new instance of the MdComponentId_E class. </summary>
            <param name="idString"> The identifier string. </param>
            <param name="idGrp">    (Optional) Machine group ID that the component belongs to. </param>
        </member>
        <member name="M:MdComponentId.#ctor(System.Byte(*)[N24],CCNCMachine*)">
            <summary> Initializes a new instance of the MdComponentId_E class. </summary>
            <param name="pSrc">	    If non-null, source to copy from. </param>
            <param name="pMachine"> (Optional) If non-null, (Optional) Machine to initialize group ID from. </param>
        </member>
        <member name="M:MdComponentId.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N24],CCNCMachine*)">
            <summary> Initializes a new instance of the MdComponentId_E class. </summary>
            <param name="src">	    Source to copy from. </param>
            <param name="pMachine"> (Optional) If non-null, (Optional) Machine to initialize group ID from. </param>
        </member>
        <member name="M:MdComponentId.#ctor(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="src"> Source to copy from. </param>
        </member>
        <member name="M:MdComponentId.#ctor">
            <summary> Initializes a new instance of the MdComponentId_E class. </summary>
        </member>
        <member name="D:IMdComponentUniquePtr">
            <summary> Defines an alias representing a std::unique_ptr to a IMdComponent. </summary>
        </member>
        <member name="D:IMdComponentPtr">
            <summary> Defines an alias representing a std::shared_ptr to a IMdComponent. </summary>
        </member>
        <member name="D:IMdComponentRawPtrVector">
            <summary> Defines an alias representing a vector of IMdComponent raw pointers. </summary>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetAttachedDbEntityIdn">
            <summary> Gets attached database entity's idn. </summary>
            <returns> The attached database entity's idn. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetOwningMachine">
            <summary> Gets owning machine. </summary>
            <returns> null if no owner, else the owning machine. </returns>
            <summary> Gets owning machine. </summary>
            <returns> null if no owner, else the owning machine. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetChildPtrs">
            <summary>	Gets a collection filled with the pointers to the component's children. </summary>
            <returns>	Pointers to the component's children. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetNextSiblingPtr">
            <summary> Gets the next sibling component pointer. </summary>
            <returns> null if it fails, else the next sibling component pointer. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.SetNextSiblingPtr(Cnc.MachineDef.Component.IMdComponent*)">
            <summary> Sets next sibling component pointer. </summary>
            <param name="component"> If non-null, the component pointer. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetPrevSiblingPtr">
            <summary> Gets the previous sibling component pointer. </summary>
            <returns> null if it fails, else the previous sibling component pointer. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.SetPrevSiblingPtr(Cnc.MachineDef.Component.IMdComponent*)">
            <summary> Sets previous sibling component pointer. </summary>
            <param name="component"> If non-null, the component pointer. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetFirstChildPtr">
            <summary> Gets the first child component pointer. </summary>
            <returns> null if it fails, else the first child component pointer. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.SetFirstChildPtr(Cnc.MachineDef.Component.IMdComponent*)">
            <summary> Sets first child component pointer. </summary>
            <param name="component"> If non-null, the component pointer. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetParentPtr">
            <summary> Gets the parent component pointer. </summary>
            <returns> null if it fails, else the parent component pointer. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.SetParentPtr(Cnc.MachineDef.Component.IMdComponent*)">
            <summary> Sets parent component pointer. </summary>
            <param name="component"> If non-null, the component pointer. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetCompId">
            <summary>	Gets component ID (GUID). </summary>
            <returns>	The component ID. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetType">
            <summary>	Gets the component type code. </summary>
            <returns>	The component type. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.SetDescription(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a description. </summary>
            <param name="name"> The name. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetDescription">
            <summary> Gets the description. </summary>
            <returns> The description. </returns>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a name. </summary>
            <param name="name"> The name. </param>
        </member>
        <member name="M:Cnc.MachineDef.Component.IMdComponent.GetName">
            <summary> Destructor. </summary>
            <summary> Gets the name. </summary>
            <returns> The name. </returns>
        </member>
        <member name="T:Cnc.MachineDef.Component.IMdComponent">
            <summary> Interface describing a machine definition component. </summary>
        </member>
        <member name="M:CreateCodeExpertLicenseCommandLineArguments">
            <summary> Creates Code Expert command line arguments that specify the type of license to use. </summary>
            <returns> Code Expert licensing command line arguments. </returns>
        </member>
        <member name="M:IsEvaluationLicense">

 @par Purpose:
			Determine whether the current license is an evaluation license (software licenses only)

 @return		true if this is a software evaluation license, otherwise false


</member>
        <member name="M:ChkSimCheckLicenses">

 @par Purpose:
		Run Automated Testing Framework test to check licensing

 @return			true		if the tests run

</member>
        <member name="M:GetMastercamHelpAboutInfo(mcHelpAboutInfo*)">

 @par Purpose:
			Return all pertinent information on Mastercam licensing

 @return			true				if all of the info in the struct is valid

 @param[in]		pMcHelpAboutInfo	pointer to the user allocated struct to store the "Help about" info in


</member>
        <member name="M:runningMastercamInSolidWorks">

 @par Purpose:
			Return whether or not the Mastercam session is running inside of Mastercam for SolidWorks

 @return			true		if the session is Mastercam in SolidWorks

</member>
        <member name="M:ReleaseMoriNetLicense">

 @par Purpose:
			Release a Mori Network license


</member>
        <member name="M:ShouldMoriRun(System.Boolean)">

 @par Purpose:
			Return whether or not Mori is available
			to the current user based on Product and SIM type


</member>
        <member name="M:IsMultiAxisFunctionEnabled(System.Int16)">

 @par Purpose:
			Return (silently) whether or not a Mastercam 5axis operation is enabled on whatever licensing is in use


</member>
        <member name="M:ShouldMultiAxisFunctionRun(System.Int16,System.Boolean)">

 @par Purpose:
			Return whether or not a Mastercam 5axis operation is available
			to the current user based on a set of rules defined by Sales which may depend on
			Operation Type, Product, Product Level, and/or User type.
			If it fails and 'warnUser' is 'true', it will report the reason to the user.


</member>
        <member name="M:ShouldSwarf5axRun(System.Boolean)">

 @par Purpose:
			Return whether or not Swarf5AX is available
			to the current user based on Product and SIM type


</member>
        <member name="M:ShouldCurveDrill5axRun(System.Boolean)">

 @par Purpose:
			Return whether or not Curve5AX/Drill5AX is available
			to the current user based on Product and SIM type


</member>
        <member name="M:ShouldUBVMachSimLiteRun(System.Boolean)">
            <summary> Determine if the UBVS MachSim Lite (3rd tab) is available to the current user based on Product and SIM type. </summary>
            <param name="displayFailMsg"> true to display fail message. </param>
            <returns> true if available, false if not </returns>
        </member>
        <member name="M:ShouldUBVVerifyRun">
            <summary> Determine if the UBVS Verify functionality is available to the current user based on Product and SIM type. </summary>
            <returns> true if available, false if not </returns>
        </member>
        <member name="M:ShouldUBVBackplotRun">
            <summary> Determine if the UBVS Backplot functionality is available to the current user based on Product and SIM type. </summary>
            <returns> true if available, false if not </returns>
        </member>
        <member name="M:ShouldClassicMachsimRun(System.Boolean)">
            <summary> Determine if MW's MachSim is available for running </summary>
            <param name="displayFailMsg"> true to display fail message. </param>
            <returns> true if available, false if not </returns>
        </member>
        <member name="M:ReleaseBladeExpertNetLicense">

 @par Purpose:
			After successfully accessing permission to run BladeExpert, and after
			executing the functionality, release the BladeExpert NetHASP license.
          This will do nothing if a local HASP is in use.


</member>
        <member name="M:ReleasePortExpertNetLicense">

 @par Purpose:
			After successfully accessing permission to run PortExpert, and after
			executing the functionality, release the PortExpert NetHASP license.
          This will do nothing if a local HASP is in use.


</member>
        <member name="M:IsBladeExpertBasic">
            <summary> Indicates if only Blade Expert Basic is licensed to run. </summary>
            <returns> Returns true if only Blade Expert Basic is licensed to run, otherwise false. </returns>
        </member>
        <member name="M:ShouldBladeExpertRun(System.Boolean)">

 @par Purpose:
			Return whether or not BladeExpert functionality is available
			to the current user based on Product and SIM type
			if true, user has a valid license, he is able to use BladeExpert
			and if a NetHASP is being used, a license will be checked out


</member>
        <member name="M:ShouldPortExpertRun(System.Boolean)">

 @par Purpose:
			Return whether or not PortExpert functionality is available
			to the current user based on Product and SIM type
			if true, user has a valid license, he is able to use PortExpert
			and if a NetHASP is being used, a license will be checked out


</member>
        <member name="M:ShouldMZXRun">

 @par Purpose:
			Return whether or not the MZX C-Hook is available
			to the current user based on Product and SIM type
			if true, user has a valid license, he is able to use MZX


</member>
        <member name="M:ShouldNestingRun(System.Boolean)">

 @par Purpose:
			Check that the Nesting add-on is enabled on the SIM.

 @return			true if Nesting is enabled on the SIM

 @param[in]		warn				put up warning dialog? (optional - default = false)


</member>
        <member name="M:ShouldArtMachineRun">

 @par Purpose:
			Return whether or not Art functionality is available
			to the current user based on Product and SIM type
			if true, user has a valid license, he is able to use ArtToolpaths


</member>
        <member name="M:ReleaseArtNetLicense">

 @par Purpose:
			Return whether or not Art functionality is available
			to the current user based on Product and SIM type
			doing art_product_logout


</member>
        <member name="M:AquireArtNetLicense">

 @par Purpose:
			Return whether or not Art functionality is available
			to the current user based on Product and SIM type
			doing art_product_login


</member>
        <member name="M:ShouldArtRun">

 @par Purpose:
			Return whether or not Art functionality is available
			to the current user based on Product and SIM type
			if true, user has a valid license, he is able to use ArtDesign


</member>
        <member name="M:IsArtAccessEnabled">

 @par Purpose:
			Return whether or not Art functionality is available
			to the current user based on Product and SIM type
			if true, we display Art Menu, otherwise we do not display it


</member>
        <member name="M:ShouldTxtchainRun">

 @par Purpose:
			Return whether or not the TxtChain functionality is available
			to the current user based on Product and SIM type


</member>
        <member name="M:ShouldRast2vecRun">

 @par Purpose:
			Return whether or not the Raster-to-Vector functionality is available
			to the current user based on Product and SIM type


</member>
        <member name="M:ShouldEngraveRun">

 @par Purpose:
			Return whether or not the Engrave funtionality is available
			to the current user based on Product and SIM type


</member>
        <member name="M:ShouldEpsRun">

 @par Purpose:
			Return whether or not the EPS file reader is available
			to the current user based on Product and SIM type


</member>
        <member name="M:GetMaintDate(System.Char*,System.Char*,System.Char*,System.Int32*)">

 @par Purpose:
			Get maintenance information - Is it on the SIM? If so, when does it expire?

 @param[out]		mm			character string showing the number of the month of expiration
 @param[out]		dd			character string showing the number of the day of expiration
 @param[out]		yyyy		character string showing the number of the year of expiration
 @param[out]		daysLeft	number of days until maintenance exprires

 @return			true		if Maintenance is enabled (if false, all return arguments are meaningless)

</member>
        <member name="M:EXEMaintenanceCheck(System.Boolean)">

 @par Purpose:
			Check the Mastercam .EXE against the SIM's maintenance date

 @param[in]		warnUser		warn the user? (optional - default = true)


</member>
        <member name="M:maintenance_check(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)">

 @par Purpose:
			Check a .DLL against the SIM's maintenance date

 @param[in]		appDllName		.DLL name
 @param[in]		warnUser		warn the user? (optional - default = true)


</member>
        <member name="M:GetLicenseInfo(MCLicenseInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,LicenseType,System.Boolean)">

 @par Purpose:
Let external users have access to license information

 @param[out]		info				the license info structure to be returned
 @param[in]		countLicenses		if it's a NetHASP or a software license, count all the licenses
 @param[in]		forceType			(Optional) Use the specified license type - don't hunt for others (default: Unknown)
 @param[in]		preferRetail		(Optional) If there are both retail and evaluation licenses, use the retail license (default: false)


</member>
        <member name="M:get_verify_level(System.Boolean*)">

 @par Purpose:
			Check what verification funtionality is available

 @param[in]		fiveAxis			false if the sim level is lower than the required level.


</member>
        <member name="M:product_level_ok_swarf5ax">

 @par Purpose:
			Check the SIM level against the minimum required Multiax level for Swarf 5 Axis.

 @note			this function WILL pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.


</member>
        <member name="M:product_level_ok_curve5ax">

 @par Purpose:
			Check the SIM level against the minimum required Multiax level for Curve 5 Axis.

 @note			this function WILL pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.


</member>
        <member name="M:product_level_ok_swarf5ax_no_warn">

 @par Purpose:
			Check the SIM level against the minimum required Multiax level for Swarf 5 Axis.

 @note			this function WILL NOT pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.


</member>
        <member name="M:product_level_ok_curve5ax_no_warn">

 @par Purpose:
			Check the SIM level against the minimum required Multiax level for Curve 5 Axis.

 @note			this function WILL NOT pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.


</member>
        <member name="M:mt_product_level_ok(System.Int16)">

 @par Purpose:
			Check the SIM level against the minimum required Mill-Turn level.

 @note			this function WILL pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.

 @param[in]		min_level			MT_LEV_E


</member>
        <member name="M:lathe_product_level_ok(System.Int16)">

 @par Purpose:
			Check the SIM level against the minimum required Lathe level.

 @note			this function WILL pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.

 @param[in]		min_level			LATHE_LEV_E or LATHE_LEV_1


</member>
        <member name="M:mt_product_level_ok_no_warn(System.Int16)">

 @par Purpose:
			Check the SIM level against the minimum required Mill-Turn level.

 @note			this function WILL NOT pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.

 @param[in]		min_level			MT_LEV_E


</member>
        <member name="M:lathe_product_level_ok_no_warn(System.Int16)">

 @par Purpose:
			Check the SIM level against the minimum required Lathe level.

 @note			this function WILL NOT pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.

 @param[in]		min_level			LATHE_LEV_E or LATHE_LEV_1


</member>
        <member name="M:wire_product_level_ok(System.Int16)">

 @par Purpose:
			Check the SIM level against the minimum required Wire level.

 @note			this function WILL pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.

 @param[in]		min_level			WIRE_LEV_E or WIRE_LEV_2


</member>
        <member name="M:wire_product_level_ok_no_warn(System.Int16)">

 @par Purpose:
			Check the SIM level against the minimum required Wire level.

 @note			this function WILL NOT pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.

 @param[in]		min_level			WIRE_LEV_E or WIRE_LEV_2


</member>
        <member name="M:product_level_1_or_design_enabled">

 @par Purpose:
			return true if the product level is not Entry (Design,
			Mill level 1, Lathe level 1 and Wire level 2 all qualify)

 @note			this function WILL pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.


</member>
        <member name="M:product_level_1_or_design_enabled_no_warning">

 @par Purpose:
			return true if the product level is not Entry (Design,
			Mill level 1, Lathe level 1 and Wire level 2 all qualify).

 @note			this function WILL NOT pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.


</member>
        <member name="M:product_level_ok(System.Int16)">

 @par Purpose:
			Check the SIM level against the minimum required level.

 @note			this function WILL pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level

 @param[in]		min_level			1 = Entry, 4-6 = Level 1-3


</member>
        <member name="M:product_level_ok_no_warn(System.Int16,System.Int16*)">

 @par Purpose:
			Check the SIM level against the minimum required level.

 @note			this function WILL NOT pop up an error dialog if the product level is not high enough

 @return			false if the sim level is lower than the required level.

 @param[in]		min_level			1 = Entry, 4-6 = Level 1-3
 @param[out]		cur_level			current level


</member>
        <member name="M:design_enabled">

 @par Purpose:
			Check that the SIM level allows design functions (C-Hooks,
			create surface, shading, etc.)

 @note			this function WILL pop up an error dialog if the product is not enabled

 @return			true if Design is enabled


</member>
        <member name="M:design_enabled_no_warn">

 @par Purpose:
			Check that the SIM level allows design functions (C-Hooks,
			create surface, shading, etc.)

 @note			this function WILL NOT pop up any error dialogs if the product is not enabled

 @return			true if Design is enabled


</member>
        <member name="M:IsMTUserAn(MtUserType!System.Runtime.CompilerServices.IsConst)">

 @par Purpose:
			Return true if the specified MT user level is currently enabled 
			one of: MT_USER_ADMIN, MT_USER_DEVELOPER, MT_USER_CONSUMER

 @param[in]		userTypeCode	 user type to check


</member>
        <member name="M:access_code_ok(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int16,System.Boolean)">

 @par Purpose:
			Makes sure that the access code for the given file checks out

 @param[in]		acc_fname			access code file name
 @param[in]		accessProductCode	product number imbedded in the access code
 @param[in]		prompt_acc			true = prompt for access code


</member>
        <member name="M:chk_probe_ok(System.Boolean)">

 @par Purpose:
			Check that the Probing add-on is enabled on the SIM.

 @return			true if Probing is enabled on the SIM

 @param[in]		warn				put up a warning dialog? (optional - default = false)


</member>
        <member name="M:chk_fiveaxis_ok(System.Boolean)">

 @par Purpose:
			Check that the 5-Axis add-on is enabled on the SIM.

 @return			true if 5-Axis is enabled on the SIM

 @param[in]		warn				put up warning dialog? (optional - default = false)


</member>
        <member name="M:chk_solids_ok(System.Boolean)">

 @par Purpose:
			Check that the Solids add-on is enabled on the SIM.

 @return			true if Solids is enabled on the SIM

 @param[in]		warn				put up warning dialog? (optional - default = false)


</member>
        <member name="M:get_sim_type_is_nethasp_local">

 @par Purpose:
			Check that the customer is currently using a Local NetHASP

 @return			true if the customer is currently using a Local NetHASP
					(Note that this now ALWAYS returns false)


</member>
        <member name="M:network_licensing">

 @par Purpose:
			Check that the customer is currently using a NetHASP

 @return			true if the customer is currently using a Networked NetHASP


</member>
        <member name="M:GetLegacyUserType">

 @par Purpose:
			Determines the type of user this SIM has been set up for

 @return		the user type (of types INDUSTRIAL, EDUCATIONAL, DEALER, etc)


</member>
        <member name="M:GetUserType">

 @par Purpose:
			Determines the type of user this license has been set up for

 @return		the user type (see the LicenseUserType enum for values)


</member>
        <member name="M:get_mcisw_version">

 @par Purpose:
			Determine the current version of the MCiSW product

 @return		currently only Version # 10; 0 if it is not enabled


</member>
        <member name="M:get_design_version">

 @par Purpose:
			Determine the current version of the DESIGN product

 @return		Version # 7, 8, 9, 10, etc; 0 if it is not enabled


</member>
        <member name="M:get_art_version">

 @par Purpose:
			Determine the current version of the ART product

 @return		currently only Version # 10; 0 if it is not enabled


</member>
        <member name="M:get_router_version">

 @par Purpose:
			Determine the current version of the ROUTER product

 @return		Version # 7, 8, 9, 10, etc; 0 if it is not enabled


</member>
        <member name="M:get_wire_version">

 @par Purpose:
			Determine the current version of the WIRE product

 @return		Version # 7, 8, 9, 10, etc; 0 if it is not enabled


</member>
        <member name="M:get_lathe_version">

 @par Purpose:
			Determine the current version of the LATHE product

 @return		Version # 7, 8, 9, 10, etc; 0 if it is not enabled


</member>
        <member name="M:get_mill_version">

 @par Purpose:
			Determine the current version of the MILL product

 @return		Version # 7, 8, 9, 10, etc; 0 if it is not enabled


</member>
        <member name="M:get_mcisw_product_on_sim(System.Int32)">

 @par Purpose:
			Determine whether the current SIM will allow us to run a particular product in MCiSW

 @param[in]		aeb_type		Application Enable Bits item (currently only AEB_MILL, AEB_LATHE, and AEB_ROUTER will return true)

 @return			true if it can be run; false if not


</member>
        <member name="M:get_mcisw_on_sim">

 @par Purpose:
			Determine whether the current SIM will allow us to run MCiSW

 @return		true if it can be run; false if not


</member>
        <member name="M:get_art_on_sim">

 @par Purpose:
			Determine whether the current SIM will allow us to run Art

 @return		true if it can be run; false if not


</member>
        <member name="M:get_router_on_sim">

 @par Purpose:
			Determine whether the current SIM will allow us to run Router

 @return		true if it can be run; false if not


</member>
        <member name="M:get_mt_on_sim">

 @par Purpose:
			Determine whether the current SIM will allow us to run Mill-Turn

 @return		true if it can be run; false if not


</member>
        <member name="M:get_lathe_on_sim">

 @par Purpose:
			Determine whether the current SIM will allow us to run Lathe

 @return		true if it can be run; false if not


</member>
        <member name="M:get_wire_on_sim">

 @par Purpose:
			Determine whether the current SIM will allow us to run Wire

 @return		true if it can be run; false if not


</member>
        <member name="M:get_mill_on_sim">

 @par Purpose:
			Determine whether the current SIM will allow us to run Mill

 @return		true if it can be run; false if not


</member>
        <member name="M:get_design_on_sim">

 @par Purpose:
			Determine whether the current SIM will allow us to run Design

 @return		true if it can be run; false if not


</member>
        <member name="M:get_mcisw_router_level">

 @par Purpose:
			Get the highest MCiSW Router product level available on the current SIM

 @return		MCiSW Router product level (of types ROUTER_LEV_E, ROUTER_LEV_2D, ROUTER_LEV_3D)


</member>
        <member name="M:get_mcisw_lathe_level">

 @par Purpose:
			Get the highest MCiSW Lathe product level available on the current SIM

 @return		MCiSW Lathe product level (of types LATHE_LEV_E, LATHE_LEV_1)


</member>
        <member name="M:get_mcisw_mill_level">

 @par Purpose:
			Get the highest MCiSW Mill product level available on the current SIM

 @return		MCiSW Mill product level (of types MILL_LEV_E, MILL_LEV_2D, MILL_LEV_3D)


</member>
        <member name="M:get_art_level">

 @par Purpose:
			Get the highest Art product level available on the current SIM

 @return		Art product level (of types ART_LEV_E, ART_LEV_1, ART_LEV_2, ART_LEV_3)


</member>
        <member name="M:get_router_level">

 @par Purpose:
			Get the highest Router product level available on the current SIM

 @return		Router product level (of types ROUTER_LEV_E, ROUTER_LEV_2D, ROUTER_LEV_3D)


</member>
        <member name="M:get_mt_level">

 @par Purpose:
			Get the highest Mill-Turn product level available on the current SIM

 @return		Lathe product level (of types MT_LEV_E)


</member>
        <member name="M:get_lathe_level">

 @par Purpose:
			Get the highest Lathe product level available on the current SIM

 @return		Lathe product level (of types LATHE_LEV_E, LATHE_LEV_1)


</member>
        <member name="M:get_wire_level">

 @par Purpose:
			Get the highest Wire product level available on the current SIM

 @return		Wire product level (of types WIRE_LEV_E, WIRE_LEV_2)


</member>
        <member name="M:get_mill_level">

 @par Purpose:
			Get the highest Mill product level available on the current SIM

 @return		Mill product level (of types MILL_LEV_E, MILL_LEV_2D, MILL_LEV_3D)


</member>
        <member name="M:get_sim_is_timed(System.Int32*)">

 @par Purpose:
			Check if the SIM is 'timed', and if so, how many days remain?.

 @return			true if the SIM is 'timed'

 @param[out]		nDaysLeft	   number of days until expiration


</member>
        <member name="M:GetLicenseType">

 @par Purpose:
			Get the type of license currently being used

 @return		type of License being used (see the LicenseType enum for values)


</member>
        <member name="M:GetLegacySimType">

 @par Purpose:
			Get the type of SIM currently being used as legacy values

 @return		legacy type of License being used (HASP, NETHASP, or WIBU)


</member>
        <member name="M:GetProdEnableBits">
@defgroup app_types Application Enable Bits
 * @{
@}

 @par Purpose:
			Get the application enable bits for the active machine.

 @return		application enable bits


</member>
        <member name="M:get_sim_ver_lev(System.Int16*)">

 @par Purpose:
			gotta get rid of this someday
 NOTE:
		0: Milling version number
		1: Milling level (1 = entry, 4 - 6 = level 1 - 3)
		2: Lathe version number
		3: Lathe level (0 = level 1, 1 = entry)
		4: Wire EDM version number
		5: Wire EDM level (1 = entry, 2 = level 2)
		6: Solids version number
		7: Solids level (0)
		8: Design version number
		9: User type (INDUSTRIAL, EDUCATIONAL, DEALER, etc)
		10: Start date (0 for no time limit)
		11: End date (0 for no time limit)

 @param[out]		ver_lev			12 element array containing levels and versions


</member>
        <member name="M:GetCustomerNumber">

 @par Purpose:
			For a software license, return the Customer Id in the COLI field,
			otherwise return the license number

 @return		the customer number or license number


</member>
        <member name="M:GetLicenseNumber">

 @par Purpose:
			Determines the license number of the license we are using

 @return		the license number


</member>
        <member name="T:MCLicenseInfo">
Structure containing Mastercam licensing information
* @{
</member>
        <member name="T:ProductCounts">
Structure for querying numbers of total and available licenses
* @{
</member>
        <member name="T:SearchStrategy">
License search strategies (only applies to software licensing).
* @{
</member>
        <member name="T:LicenseUserType">
Types of licensed users
* @{
</member>
        <member name="T:TimeLimitStatus">
Timed licenses will be in one of these states
* @{
</member>
        <member name="T:LicenseType">
@}
Types of licenses Mastercam recognizes
* @{
</member>
        <member name="T:MtUserType">
@defgroup SIMtype SIM types
 * @{
@}
@defgroup product_levels product levels
 * @{
@}
@defgroup user_types user levels
 * @{
@}
Permissions for current MT session
 * @{
</member>
        <member name="M:FindRelStkOrg(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16!System.Runtime.CompilerServices.IsConst,p_3d!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,MCReal*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCReal*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCReal*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCReal*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCReal*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCReal*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Computes the relative position of stock origin given the corner points of stock and origin in WCS.
			Also computes the size of bounding box</summary>
            <param name="selPt1">	Corner point 1. </param>
            <param name="selPt2">	Corner point 2. </param>
            <param name="viewNo">	View orientation. </param>
            <param name="origin">	The origin relative to which the function finds the stock center. </param>
            <param name="stockorg">		Stock origin defined by user. </param>
            <param name="cptxValED">	Stock origin defined by user. </param>
            <param name="cptyValED">	Stock origin defined by user. </param>
            <param name="cptzValED">	Stock origin defined by user. </param>
            <param name="blockXED">	Stock bounding box dimension in X direction. </param>
            <param name="blockYED">	Stock bounding box dimension in Y direction. </param>
            <param name="blockZED">	Stock bounding box dimension in Z direction. </param>
        </member>
        <member name="M:GetEptrsFromGroups(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;DB_LIST_ENT**,std.less&lt;DB_LIST_ENT**&gt;,std.allocator&lt;DB_LIST_ENT**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the eptrs contained in the specified groups. </summary>
            <param name="grpIds"> The group ID numbers. </param>
            <param name="eptrs">  Returned eptrs. </param>
            <returns> Number of returned eptrs. </returns>
        </member>
        <member name="P:Mastercam.Operations.Types.CoolantParams.OperationCoolant">
            <summary> Gets or sets the "old" style (Flood/Mist/Thru-Tool) coolant setting. </summary>
            <remarks> NOTE! This is only valid if <see cref="P:Mastercam.Operations.Types.CoolantParams.UseValuesFromPost" /> is true. </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.CoolantParams.Positions">
            <summary> Gets or sets a list of the coolant 'position' settings (Before/With/After). </summary>
            <remarks> NOTE! This is only valid if <see cref="P:Mastercam.Operations.Types.CoolantParams.UseValuesFromPost" />is NOT true. </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.CoolantParams.States">
            <summary> Gets or sets a list of the coolant 'state' settings (On/Off/Ignore). </summary>
            <remarks> NOTE! This is only valid if <see cref="P:Mastercam.Operations.Types.CoolantParams.UseValuesFromPost" /> is NOT true. </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.CoolantParams.UseValuesFromPost">
            <summary> Gets or sets a value indicating the state of the Machine Definition 'Coolant Mode' option. </summary>
            <remarks> If true, the "Support coolant using value in post processor" is checked, else false.
          If true, the active coolant mode is the "old style" - see CoolantMode.
          If false the active coolant mode is the "new style" - see CoolantParams. </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantParams.op_Inequality(Mastercam.Operations.Types.CoolantParams,Mastercam.Operations.Types.CoolantParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantParams.op_Equality(Mastercam.Operations.Types.CoolantParams,Mastercam.Operations.Types.CoolantParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj">  This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantParams.Equals(Mastercam.Operations.Types.CoolantParams,Mastercam.Operations.Types.CoolantParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantParams.#ctor(Mastercam.Operations.Types.CoolantStateType,Mastercam.Operations.Types.CoolantPositionType)">
            <summary> Initializes a new instance of the CoolantParams class. </summary>
            <param name="state">    The state to initialize all coolants to. </param>
            <param name="position"> The position settings to initialize all coolants to. </param>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantParams.#ctor">
            <summary> Initializes a new instance of the CoolantParams class. </summary>
            <remarks> All states are initialized to CoolantStateType::Ignore
   <para> All positions are initialized to CoolantPositionType::Before </para></remarks>
        </member>
        <member name="T:Mastercam.Operations.Types.CoolantParams">
            <summary> This class represents the data needed for Coolant in an operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantPosition.m_CoolantPositions">
            <summary> The list of Coolant (Before/With/After) Positions. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.CoolantPosition.default(Mastercam.Operations.Types.CoolantType)">
            <summary> Gets or sets the individual coolant Before/With/After position "by CoolantType name". </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.CoolantPosition.default(System.Int32)">
            <summary> Gets or sets the individual coolant Before/With/After position "by index". </summary>
            <remarks> There are 10 coolant position "slots" in the zero-based array. </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantPosition.op_Inequality(Mastercam.Operations.Types.CoolantPosition,Mastercam.Operations.Types.CoolantPosition)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantPosition.op_Equality(Mastercam.Operations.Types.CoolantPosition,Mastercam.Operations.Types.CoolantPosition)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantPosition.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantPosition.Equals(Mastercam.Operations.Types.CoolantPosition,Mastercam.Operations.Types.CoolantPosition)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantPosition.#ctor(Mastercam.Operations.Types.CoolantPositionType)">
            <summary> Initializes a new instance of the CoolantState class. </summary>
            <param name="position"> The position to initialize the coolants to. </param>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantPosition.#ctor">
            <summary> Initializes a new instance of the CoolantPosition class. </summary>
            <remarks> All positions are initialized to CoolantPositionType::Before</remarks>
        </member>
        <member name="T:Mastercam.Operations.Types.CoolantPosition">
            <summary> This class represents the data needed for the Before/With/After position of the
          coolant in an operation.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantState.m_CoolantStates">
            <summary> The list of Coolant (On/Off/Ignore) States. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.CoolantState.default(Mastercam.Operations.Types.CoolantType)">
            <summary> Gets or sets an individual coolant On/Off/Ignore state "by CoolantType name". </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.CoolantState.default(System.Int32)">
            <summary> Gets or sets an individual coolant On/Off/Ignore state "by index". </summary>
            <remarks> There are 10 coolant state "slots" in the zero-based array. </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantState.op_Inequality(Mastercam.Operations.Types.CoolantState,Mastercam.Operations.Types.CoolantState)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantState.op_Equality(Mastercam.Operations.Types.CoolantState,Mastercam.Operations.Types.CoolantState)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantState.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantState.Equals(Mastercam.Operations.Types.CoolantState,Mastercam.Operations.Types.CoolantState)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantState.#ctor(Mastercam.Operations.Types.CoolantStateType)">
            <summary> Initializes a new instance of the CoolantState class. </summary>
            <param name="state"> The state to initialize the coolants to. </param>
        </member>
        <member name="M:Mastercam.Operations.Types.CoolantState.#ctor">
            <summary> Initializes a new instance of the CoolantState class. </summary>
            <remarks> All states are initialized to CoolantStateType::Ignore</remarks>
        </member>
        <member name="T:Mastercam.Operations.Types.CoolantState">
            <summary> This class represents the data needed for the On/Off/Ignore state of the
          coolant in an operation.
           </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.CoolantIndices">
            <summary> Coolant indices used to define coolant within canned text </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.CoolantPositionType">
            <summary> An enumeration that specifies the different Coolant "positions". </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantPositionType.After">
            <summary> Coolant Position - After </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantPositionType.With">
            <summary> Coolant Position - With </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantPositionType.Before">
            <summary> Coolant Position - Before </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.CoolantStateType">
            <summary> An enumeration that specifies the different Coolant "states". </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantStateType.Ignore">
            <summary> Coolant State - Ignore </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantStateType.Off">
            <summary> Coolant State - Off </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantStateType.On">
            <summary> Coolant State - On </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.CoolantType">
            <summary> An enumeration that specifies the (10) different Coolant "types". </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant10">
            <summary> The 10th of 10 possible coolants. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant9">
            <summary> The 9th of 10 possible coolants. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant8">
            <summary> The 8th of 10 possible coolants. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant7">
            <summary> The 7th of 10 possible coolants. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant6">
            <summary> The 6th of 10 possible coolants. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant5">
            <summary> The 5th of 10 possible coolants. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant4">
            <summary> The 4th of 10 possible coolants. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant3">
            <summary> The 3rd of 10 possible coolants. (usually "Tool')</summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant2">
            <summary> The 2nd of 10 possible coolants. (usually 'Mist')</summary>
        </member>
        <member name="F:Mastercam.Operations.Types.CoolantType.Coolant1">
            <summary> The 1st of 10 possible coolants. (usually 'Flood')</summary>
        </member>
        <member name="P:Mastercam.Operations.Types.RotaryAxisParams.UnRollTolerance">
            <summary> Gets or sets the unroll tolerance. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.RotaryAxisParams.UnRoll">
            <summary> Gets or set a value indicating whether the UnRroll option is enabled. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.RotaryAxisParams.ZeroAngle">
            <summary> Gets the zero angle for the Rotary Axis. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.RotaryAxisParams.AxisSubstitution">
            <summary> Gets or sets the axis being substituted. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.RotaryAxisParams.Direction">
            <summary> Gets or set the Rotary Axis direction: (CCW or CW). </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.RotaryAxisParams.Diameter">
            <summary> Gets or sets the Rotary Axis diameter. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.RotaryAxisParams.Axis">
            <summary> Gets or sets the Rotary Axis. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.RotaryAxisParams.Type">
            <summary> Gets or sets the type of RotaryAxis. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.RotaryAxisParams.Enabled">
            <summary> Gets or sets a value indicating whether Rotary is enabled. </summary>
            <remarks> This is an 'internal' setting that does not appear on the dialogs!
          Its setting is based on the RotaryAxis.Type value.
          If Type != RotaryAxisPositionType.None, then Enabled = true, else it is false.
          </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.RotaryAxisParams.op_Inequality(Mastercam.Operations.Types.RotaryAxisParams,Mastercam.Operations.Types.RotaryAxisParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.RotaryAxisParams.op_Equality(Mastercam.Operations.Types.RotaryAxisParams,Mastercam.Operations.Types.RotaryAxisParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.RotaryAxisParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.RotaryAxisParams.Equals(Mastercam.Operations.Types.RotaryAxisParams,Mastercam.Operations.Types.RotaryAxisParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.RotaryAxisParams">
            <summary> Drill Cycle operation custom parameter values. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.RotaryAxisSubstitution">
            <summary> An enumeration that specifies the Rotary Axis Substitution "rotate ? axis" option.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotaryAxisSubstitution.SubsituteY">
            <summary> Rotary axis substitution of the Y axis. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotaryAxisSubstitution.SubsituteX">
            <summary> Rotary axis substitution of the X axis. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.RotaryAxisDirection">
            <summary> An enumeration that specifies the Rotary Axis direction. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotaryAxisDirection.CW">
            <summary> Rotation direction = CW. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotaryAxisDirection.CCW">
            <summary> Rotation direction = CCW. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.RotateAboutAxis">
            <summary> An enumeration that specifies the Rotary Axis "rotate about ? axis" options.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotateAboutAxis.RotateAboutZ">
            <summary> Rotation about the Z axis. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotateAboutAxis.RotateAboutY">
            <summary> Rotation about the Y axis. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotateAboutAxis.RotateAboutX">
            <summary> Rotation about the X axis. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.RotaryAxisPositionType">
            <summary> An enumeration that specifies the different Rotary Axis rotation types.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotaryAxisPositionType.Axis3">
            <summary> Rotary axis  - 3 axis. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotaryAxisPositionType.RotaryPositioning">
            <summary> Rotary axis positioning. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotaryAxisPositionType.AxisSubstitution">
            <summary> Rotary axis substitution. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RotaryAxisPositionType.None">
            <summary> No rotary axis. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.NCFileNameMode">
            <summary> An enumeration that specifies the different rules for how an NC file name is found and created.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.NCFileNameMode.UseUserDefinedName">
            <summary> Use an entirely user-defined NC file name. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.NCFileNameMode.UseLastOperationsNCFileName">
            <summary> Use the same name for the NC file that was used in the last modified operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.NCFileNameMode.UseToolpathGroupName">
            <summary> Use the name of the current toolpath group as the name of the NC file. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.NCFileNameMode.UseMachineName">
            <summary> Use the current machine's name as the name of the NC file. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.NCFileNameMode.UseMCXFileName">
            <summary> Use the existing current part file's name as the name of the NC file. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.RemainingStockMethodType">
            <summary> An enumeration that specifies the different rules for how an NC file name is found and created.
          </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RemainingStockMethodType.RoughingToolDiameter">
            <summary> Use the roughing tool diameter to compute the remaining stock. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RemainingStockMethodType.OnePreviousOperation">
            <summary> Use only the previous operation to compute the remaining stock. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.RemainingStockMethodType.AllPreviousOperations">
            <summary> Use all previous operations to compute the remaining stock. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.SpindleSpeed">
            <summary> Gets or sets the Spindle speed (override) value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.FeedRate">
            <summary> Gets or sets the Feed rate (override) value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.OverrideSpindleSpeed">
            <summary> Gets or sets a value indicating the on/off state of the Override 'Spindle speed' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.OverrideFeed">
            <summary> Gets or sets a value indicating the on/off state of the Override 'Feed rate' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.NumberOfFinishSpringPasses">
            <summary> Gets or sets the Finish - Number of Spring Passes value. </summary>
            <remarks> Thread Mill operation. </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.StepOverForFinishPasses">
            <summary> Gets or sets the Finish - Step Over Spacing value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.NumberOfFinishPasses">
            <summary> Gets or sets the Finish - Number of Passes value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.StepOverForRoughPasses">
            <summary> Gets or sets the Rough - Step Over Spacing value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.NumberOfRoughPasses">
            <summary> Gets or sets the Rough - Number of Passes value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MultiPassesParams.On">
            <summary> Gets or sets a value indicating the on/off state of the Multi Pass options. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.MultiPassesParams.op_Inequality(Mastercam.Operations.Types.MultiPassesParams,Mastercam.Operations.Types.MultiPassesParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MultiPassesParams.op_Equality(Mastercam.Operations.Types.MultiPassesParams,Mastercam.Operations.Types.MultiPassesParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MultiPassesParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MultiPassesParams.Equals(Mastercam.Operations.Types.MultiPassesParams,Mastercam.Operations.Types.MultiPassesParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.MultiPassesParams">
            <summary>
This class represents the Multi Passes specific parameters.
</summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MiscValuesParams.Reals">
            <summary> Gets or sets the (10) Misc. Reals. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MiscValuesParams.Integers">
            <summary> Gets or sets the (10) Misc. Integers. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MiscValuesParams.UseValuesFromPost">
            <summary> Gets or sets a value indicating the whether to use the values defined in the active
          Post Processor.
          </summary>
            <remarks> If true, then the integers/reals on the Misc Values page are disabled. </remarks>
            <value> true if use values from post, false if not. </value>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscValuesParams.op_Inequality(Mastercam.Operations.Types.MiscValuesParams,Mastercam.Operations.Types.MiscValuesParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscValuesParams.op_Equality(Mastercam.Operations.Types.MiscValuesParams,Mastercam.Operations.Types.MiscValuesParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscValuesParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj">  This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscValuesParams.Equals(Mastercam.Operations.Types.MiscValuesParams,Mastercam.Operations.Types.MiscValuesParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscValuesParams.#ctor(Mastercam.Operations.Types.MiscValuesParams)">
            <summary> Initializes a new instance of the MiscValuesParams class. </summary>
            <param name="item">  The MiscValuesParams to initialize the new object with. </param>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscValuesParams.#ctor">
            <summary> Initializes a new instance of the MiscValuesParams class. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.MiscValuesParams">
            <summary> This class represents the data needed for the Misc. Values in an operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.MiscReals.m_MiscReals">
            <summary> The list of Misc. Real values. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MiscReals.default(System.Int32)">
            <summary> Gets or sets the individual Misc. Real values. </summary>
            <remarks> There are 10 values in the array, accessed as usual - zero-based. </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscReals.op_Inequality(Mastercam.Operations.Types.MiscReals,Mastercam.Operations.Types.MiscReals)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscReals.op_Equality(Mastercam.Operations.Types.MiscReals,Mastercam.Operations.Types.MiscReals)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscReals.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscReals.Equals(Mastercam.Operations.Types.MiscReals,Mastercam.Operations.Types.MiscReals)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscReals.#ctor">
            <summary> Initializes a new instance of the MiscReals class. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.MiscReals">
            <summary> This class represents the data needed for the Misc Reals in an operation. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.MiscIntegers.m_MiscIntegers">
            <summary> The list of Misc. Integer values. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.MiscIntegers.default(System.Int32)">
            <summary> Gets or sets the individual Misc. Integer values. </summary>
            <remarks> There are 10 values in the array, accessed as usual - zero-based. </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscIntegers.op_Inequality(Mastercam.Operations.Types.MiscIntegers,Mastercam.Operations.Types.MiscIntegers)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscIntegers.op_Equality(Mastercam.Operations.Types.MiscIntegers,Mastercam.Operations.Types.MiscIntegers)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscIntegers.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscIntegers.Equals(Mastercam.Operations.Types.MiscIntegers,Mastercam.Operations.Types.MiscIntegers)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.MiscIntegers.#ctor">
            <summary> Initializes a new instance of the MiscIntegers class. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.MiscIntegers">
            <summary> This class represents the data needed for the Misc Integers in an operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.SmoothingParams.ShiftPointsRandomly">
            <summary> Gets or sets a value indicating the on/off state of the 'Shift Points Randomly' option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.SmoothingParams.MinimizeNumberOfPoints">
            <summary> Gets or sets a value indicating the on/off state of the 'Minimize number of points'
          option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.SmoothingParams.ArcsAsLineSegments">
            <summary> Gets or sets a value indicating the on/off state of the 'Present arcs as line segments'
          option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.SmoothingParams.SegmentLength">
            <summary> Gets or sets the Segment Length value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.SmoothingParams.UseFixedSegmentLength">
            <summary> Gets or sets a value indicating the on/off state of the 'Use fixed segment length' option.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.SmoothingParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the 'Smoothing Settings' option.
          </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.SmoothingParams.op_Inequality(Mastercam.Operations.Types.SmoothingParams,Mastercam.Operations.Types.SmoothingParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.SmoothingParams.op_Equality(Mastercam.Operations.Types.SmoothingParams,Mastercam.Operations.Types.SmoothingParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.SmoothingParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj">  This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.SmoothingParams.Equals(Mastercam.Operations.Types.SmoothingParams,Mastercam.Operations.Types.SmoothingParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.SmoothingParams">
            <summary> This class represents the data needed for Arc Filter Smoothing in an operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ArcFilterParams.ReducedTolerance">
            <summary> Gets or sets the Tolerance factor. </summary>
            <remarks> Only used if ReduceToleranceType is = 1 or 2 </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.ArcFilterParams.ReduceToleranceType">
            <summary> Gets or sets a value indicating selected Tolerance type. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ArcFilterParams.OneWay">
            <summary> Gets or sets a value indicating the on/off state of the 'One way filtering' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ArcFilterParams.CreateArcsYZ">
            <summary> Gets or sets a value indicating the on/off state of the 'Create Arcs in YZ' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ArcFilterParams.CreateArcsXZ">
            <summary> Gets or sets a value indicating the on/off state of the 'Create Arcs in XZ' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ArcFilterParams.CreateArcsXY">
            <summary> Gets or sets a value indicating the on/off state of the 'Create Arcs in XY' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ArcFilterParams.MaxRadius">
            <summary> Gets or sets the Maximum Arc Radius value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ArcFilterParams.MinRadius">
            <summary> Gets or sets the Minimum Arc Radius value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ArcFilterParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the 'Line/Arc Filter settings' option. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ArcFilterParams.op_Inequality(Mastercam.Operations.Types.ArcFilterParams,Mastercam.Operations.Types.ArcFilterParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ArcFilterParams.op_Equality(Mastercam.Operations.Types.ArcFilterParams,Mastercam.Operations.Types.ArcFilterParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ArcFilterParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ArcFilterParams.Equals(Mastercam.Operations.Types.ArcFilterParams,Mastercam.Operations.Types.ArcFilterParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ArcFilterParams">
            <summary> This class represents the data needed for using Line/Arc Filtering in an operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ToleranceParams.TotalTolerance">
            <summary> Gets the Total Tolerance value. </summary>
            <remarks> This is CutTolerance + LineArcTolerance + SmoothingTolerance </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.ToleranceParams.SmoothingTolerance">
            <summary> Gets or sets the Smoothing Tolerance value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ToleranceParams.LineArcTolerance">
            <summary> Gets or sets the Line/Arc Tolerance value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ToleranceParams.CutTolerance">
            <summary> Gets or sets the Cut Tolerance value. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ToleranceParams.op_Inequality(Mastercam.Operations.Types.ToleranceParams,Mastercam.Operations.Types.ToleranceParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ToleranceParams.op_Equality(Mastercam.Operations.Types.ToleranceParams,Mastercam.Operations.Types.ToleranceParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ToleranceParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ToleranceParams.Equals(Mastercam.Operations.Types.ToleranceParams,Mastercam.Operations.Types.ToleranceParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ToleranceParams">
            <summary> This class represents the data needed for using Tolerance Distribution
          used with Line/Arc Filtering in an operation. </summary>
        </member>
        <member name="T:Mastercam.Operations.Types.LineArcFilterToleranceMethodType">
            <summary> An enumeration that specifies the different tolerance rules for line/arc filtering.
          </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TightenArcFiltering">
            <summary> Tighten Arc Filtering tolerance. </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TightenLineFiltering">
            <summary> Tighten Line Filtering tolerance. </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.UseMaxToleranceForBoth">
            <summary> Use maximal tolerance value for both: Line and Arc. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ReferencePointsParams.Retract">
            <summary> Gets or sets the "retract" Reference Point data. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.ReferencePointsParams.Approach">
            <summary> Gets or sets the "approach" Reference Point data. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ReferencePointsParams.op_Inequality(Mastercam.Operations.Types.ReferencePointsParams,Mastercam.Operations.Types.ReferencePointsParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ReferencePointsParams.op_Equality(Mastercam.Operations.Types.ReferencePointsParams,Mastercam.Operations.Types.ReferencePointsParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ReferencePointsParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ReferencePointsParams.Equals(Mastercam.Operations.Types.ReferencePointsParams,Mastercam.Operations.Types.ReferencePointsParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ReferencePointsParams">
            <summary> This class represents the data needed for using break through in an operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ReferencePoint.Point">
            <summary> Gets or sets the Approach or Retract point coordinates. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ReferencePoint.PointOnZ">
            <summary> Gets or sets a value indicating the state of Z axis enabled (checkbox) option for this Reference Point. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ReferencePoint.PointOnY">
            <summary> Gets or sets a value indicating the state of Y axis enabled (checkbox) option for this Reference Point. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ReferencePoint.PointOnX">
            <summary> Gets or sets a value indicating the state of X axis enabled (checkbox) option for this Reference Point. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ReferencePoint.Incremental">
            <summary> Gets or sets a value indicating the state of the absolute/incremental (checkbox) option for this Reference Point. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ReferencePoint.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the Approach Reference Point (checkbox). </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ReferencePoint.op_Inequality(Mastercam.Operations.Types.ReferencePoint,Mastercam.Operations.Types.ReferencePoint)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ReferencePoint.op_Equality(Mastercam.Operations.Types.ReferencePoint,Mastercam.Operations.Types.ReferencePoint)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ReferencePoint.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ReferencePoint.Equals(Mastercam.Operations.Types.ReferencePoint,Mastercam.Operations.Types.ReferencePoint)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ReferencePoint">
            <summary> This class represents the data needed for a (approach/retract) reference point in an operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HomePositionParams.Point">
            <summary> Gets or sets the Home Position point. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HomePositionParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the Home Position. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.HomePositionParams.op_Inequality(Mastercam.Operations.Types.HomePositionParams,Mastercam.Operations.Types.HomePositionParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.HomePositionParams.op_Equality(Mastercam.Operations.Types.HomePositionParams,Mastercam.Operations.Types.HomePositionParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.HomePositionParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.HomePositionParams.Equals(Mastercam.Operations.Types.HomePositionParams,Mastercam.Operations.Types.HomePositionParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.HomePositionParams">
            <summary> This class represents the data needed for using bHome Positions in an operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.BreakThroughParams.BreakThroughAmount">
            <summary> Gets or sets the distance below the bottom of the stock to break through. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.BreakThroughParams.Enabled">
            <summary> Gets or sets a value indicating the on/off state of the BreakThrough option (checkbox). </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.BreakThroughParams.op_Inequality(Mastercam.Operations.Types.BreakThroughParams,Mastercam.Operations.Types.BreakThroughParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.BreakThroughParams.op_Equality(Mastercam.Operations.Types.BreakThroughParams,Mastercam.Operations.Types.BreakThroughParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.BreakThroughParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.BreakThroughParams.Equals(Mastercam.Operations.Types.BreakThroughParams,Mastercam.Operations.Types.BreakThroughParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.BreakThroughParams">
            <summary> This class represents the data needed for using break through in an operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeaveStockParams.OnFloors">
            <summary> Gets or sets the amount of stock to leave on floors. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeaveStockParams.OnWalls">
            <summary> Gets or sets the amount of stock to leave on walls. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.LeaveStockParams.op_Inequality(Mastercam.Operations.Types.LeaveStockParams,Mastercam.Operations.Types.LeaveStockParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LeaveStockParams.op_Equality(Mastercam.Operations.Types.LeaveStockParams,Mastercam.Operations.Types.LeaveStockParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LeaveStockParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LeaveStockParams.Equals(Mastercam.Operations.Types.LeaveStockParams,Mastercam.Operations.Types.LeaveStockParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.LeaveStockParams">
            <summary> This class represents the data needed for stock to leave (walls/floors) in an operation. </summary>
            <remarks> Many operation have these common settings parameter settings. </remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.LeadInOutParams.ContourEnd">
            <summary> Gets or sets the 'Adjust end of contour' settings. </summary>
            <remarks> Contour operation.</remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.LeadInOutParams.ContourStart">
            <summary> Gets or sets the 'Adjust start of contour' settings. </summary>
            <remarks> Contour operation.</remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutParams.GougeCheck">
            <summary> Gets or sets a value indicating if Gouge Check is enabled. </summary>
            <remarks> Contour operation.</remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutParams.EnterAtMidPt">
            <summary> Gets or sets a value indicating the 'Enter/Exit at midpoint in closed contours'
          option is enabled.
          </summary>
            <remarks> Contour operation.</remarks>
        </member>
        <member name="F:Mastercam.Operations.Types.LeadInOutParams.Exit">
            <summary> Gets or sets the Exit settings of the Lead In/Out settings. </summary>
        </member>
        <member name="F:Mastercam.Operations.Types.LeadInOutParams.Entry">
            <summary> Gets or sets the Entry settings of the Lead In/Out settings. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutParams.Enabled">
            <summary> Gets or sets a value indicating if the Lead In/Out parameters page is enabled. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutParams.OverLap">
            <summary> Gets or sets the Overlap distance. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.LeadInOutParams.op_Inequality(Mastercam.Operations.Types.LeadInOutParams,Mastercam.Operations.Types.LeadInOutParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LeadInOutParams.op_Equality(Mastercam.Operations.Types.LeadInOutParams,Mastercam.Operations.Types.LeadInOutParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LeadInOutParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LeadInOutParams.Equals(Mastercam.Operations.Types.LeadInOutParams,Mastercam.Operations.Types.LeadInOutParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.LeadInOutParams">
            <summary> This class represents the data needed to set up the Lead-In/Out on a
          </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.PlungeAfterFirstOrRetractBeforeLastMove">
            <summary> Gets or sets a value indicating (depending on Entry or Exit settings) whether to -
   <para> Entry settings = Plunge after first move. </para><para> Exit settings  = Retract before last move. </para></summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.Feedrate">
            <summary> Gets or sets the 'override' feedrate value. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.UseFeedOverride">
            <summary> Gets or sets a value indicating whether the 'Override feed rate' option is enabled. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.EnterFirstOrExitLastOnly">
            <summary> Gets or sets a value indicating whether to 'Enter on first' or 'Exit on last' Only. </summary>
            <remarks> Entry settings = Enter on first depth cut only.
   <para> Exit settings  = Exit on last depth cut only. </para></remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.UsePointDepth">
            <summary> Gets or sets a value indicating whether the 'Use point depth' option is enabled. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.UsePoint">
            <summary> Gets or sets a value indicating whether the 'Use Entry/Exit Point' option is enabled. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.OneDepth">
            <summary> Gets or sets a value indicating whether this option is enabled:
   <para> Enter on first depth cut only. </para><para> Exit on last depth cut only. </para></summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.HelixHeight">
            <summary> Gets the Helix height. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.ArcSweep">
            <summary> Gets or sets the arc sweep angle. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.ArcRadius">
            <summary> Gets or set the entry/exit arc radius. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.RampHeight">
            <summary> Gets or sets the ramp height. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.LineLength">
            <summary> Gets or sets the length of the entry/exit line. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.Perpendicular">
            <summary> Gets or sets a value indicating the state of the Perpendicular/Tangent option. </summary>
            <value> true = Perpendicular is enabled, else false = Tangent </value>
        </member>
        <member name="P:Mastercam.Operations.Types.LeadInOutEntryExitParams.Enabled">
            <summary> Gets or sets a value indicating if the Lead In/Out options are enabled. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.LeadInOutEntryExitParams.op_Inequality(Mastercam.Operations.Types.LeadInOutEntryExitParams,Mastercam.Operations.Types.LeadInOutEntryExitParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LeadInOutEntryExitParams.op_Equality(Mastercam.Operations.Types.LeadInOutEntryExitParams,Mastercam.Operations.Types.LeadInOutEntryExitParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LeadInOutEntryExitParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LeadInOutEntryExitParams.Equals(Mastercam.Operations.Types.LeadInOutEntryExitParams,Mastercam.Operations.Types.LeadInOutEntryExitParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.LeadInOutEntryExitParams">
            <summary> This class represents the data needed to set up the Entry/Exit settings
          for a Contour or Pocket operation.
          </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.ExtendShortenContourParams.Length">
            <summary> Gets or sets the length of the contour extend/shorten. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.ExtendShortenContourParams.Extend">
            <summary> Gets or sets a value indicating if the contour should be extended or shortened. </summary>
            <value> true = Extend, else false = Shorten </value>
        </member>
        <member name="P:Mastercam.Operations.Types.ExtendShortenContourParams.Enabled">
            <summary> Gets or sets a value indicating if Adjust Start/End of Contour is enabled. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.ExtendShortenContourParams.op_Inequality(Mastercam.Operations.Types.ExtendShortenContourParams,Mastercam.Operations.Types.ExtendShortenContourParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ExtendShortenContourParams.op_Equality(Mastercam.Operations.Types.ExtendShortenContourParams,Mastercam.Operations.Types.ExtendShortenContourParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ExtendShortenContourParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.ExtendShortenContourParams.Equals(Mastercam.Operations.Types.ExtendShortenContourParams,Mastercam.Operations.Types.ExtendShortenContourParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.ExtendShortenContourParams">
            <summary> This class represents the data needed to set up the Entry/Exit on a Pocket operation.
          </summary>
            <remarks> Mastercam X7 </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.DepthCutsParams.SubprogramIncremental">
            <summary> Gets or sets a value indicating the state of 'incremental' subprograms option. </summary>
            <value> true = incremental, else false = absolute subprograms. </value>
        </member>
        <member name="P:Mastercam.Operations.Types.DepthCutsParams.UseSubprogram">
            <summary> Gets or sets a value indicating the state of 'subprograms' will be used option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.DepthCutsParams.KeepToolDown">
            <summary> Gets or sets a value indicating the state of the 'keep tool down' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.DepthCutsParams.FinishStep">
            <summary> Gets or sets the finishing step value to use. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.DepthCutsParams.FinishNumberCuts">
            <summary> Gets or sets the number of finishing cuts to make. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.DepthCutsParams.MaxRoughStep">
            <summary> Gets or sets the maximum roughing step value to use. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.DepthCutsParams.Enabled">
            <summary> Gets or sets a value indicating the state of the 'Depth Cuts enabled' option. (true/false). </summary>
            <remarks> Enable/disable the entire 'Depth Cuts' page. </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.DepthCutsParams.op_Inequality(Mastercam.Operations.Types.DepthCutsParams,Mastercam.Operations.Types.DepthCutsParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.DepthCutsParams.op_Equality(Mastercam.Operations.Types.DepthCutsParams,Mastercam.Operations.Types.DepthCutsParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.DepthCutsParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.DepthCutsParams.Equals(Mastercam.Operations.Types.DepthCutsParams,Mastercam.Operations.Types.DepthCutsParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.DepthCutsParams">
            <summary> This class represents the data needed for depth cuts in an operation. </summary>
            <remarks> SlotMill, CircleMill and Facing toolpaths have common parameter settings. </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.HelicalEntryParams.SkipOnEntryFailure">
            <summary> Gets or sets a value that indicates what to do if the helical entry fails.
          If true, then a plunge, else skip the entry is skipped altogether.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HelicalEntryParams.Tolerance">
            <summary> Gets or sets the maximum tolerance uses if arc moves are not output by the operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HelicalEntryParams.OutputArcMoves">
            <summary> Gets or sets a value indicating the state of the 'Output arc moves' option. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HelicalEntryParams.PlungeAngle">
            <summary> Gets or sets the helical entry's plunge angle. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HelicalEntryParams.ClearanceZ">
            <summary> Gets or sets the Z clearance to be used in the helical entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HelicalEntryParams.ClearanceXY">
            <summary> Gets or sets the XY clearance to be used in the helical entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HelicalEntryParams.MaxRadius">
            <summary> Gets or sets the maximum radius to be used in the helical entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HelicalEntryParams.MinRadius">
            <summary> Gets or sets the minimum radius to be used in the helical entry. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.HelicalEntryParams.Enabled">
            <summary> Gets or sets a value indicating the state of the 'Helical Entry enabled' option. (true/false). </summary>
            <remarks> Enable/disable the entire Helical Entry (group). </remarks>
        </member>
        <member name="M:Mastercam.Operations.Types.HelicalEntryParams.op_Inequality(Mastercam.Operations.Types.HelicalEntryParams,Mastercam.Operations.Types.HelicalEntryParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.HelicalEntryParams.op_Equality(Mastercam.Operations.Types.HelicalEntryParams,Mastercam.Operations.Types.HelicalEntryParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.HelicalEntryParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.HelicalEntryParams.Equals(Mastercam.Operations.Types.HelicalEntryParams,Mastercam.Operations.Types.HelicalEntryParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.HelicalEntryParams">
            <summary> This class represents the data needed for the helical entry option used in toolpath
          roughing.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.CutterCompParams.ToTip">
            <summary> Gets or sets a value indicating the Cutter Compensation 'tip comp' setting (Tip or Center)
          to be used in the operation.
          </summary>
            <value> true if component to tip, false if not. </value>
        </member>
        <member name="P:Mastercam.Operations.Types.CutterCompParams.Optimize">
            <summary> Gets or sets a value indicating the Cutter Compensation 'optimize comp in control' setting (Tip or Center)
          to be used in the operation.
          </summary>
            <remarks> This is only valid when Comp in COntrols is active. </remarks>
            <value> true if optimize is on, else false if not. </value>
        </member>
        <member name="P:Mastercam.Operations.Types.CutterCompParams.RollCorners">
            <summary> Gets or sets a value indicating the Cutter Compensation 'roll around corners' setting (None,
          Sharp, All) to be used in the operation.
          </summary>
            <value> The component roll. </value>
        </member>
        <member name="P:Mastercam.Operations.Types.CutterCompParams.Direction">
            <summary> Gets or sets a value indicating the direction (side) of the Cutter Compensation (Right, Left,
          Auto) to be used in the operation.
          </summary>
            <value> The component direction. </value>
        </member>
        <member name="P:Mastercam.Operations.Types.CutterCompParams.Type">
            <summary> Gets or sets a value indicating the type of Cutter Compensation (Computer, Control, Wear,
          Reverse Wear) to be used in the operation.
          </summary>
            <value> The type of the component. </value>
        </member>
        <member name="M:Mastercam.Operations.Types.CutterCompParams.op_Inequality(Mastercam.Operations.Types.CutterCompParams,Mastercam.Operations.Types.CutterCompParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CutterCompParams.op_Equality(Mastercam.Operations.Types.CutterCompParams,Mastercam.Operations.Types.CutterCompParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CutterCompParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.CutterCompParams.Equals(Mastercam.Operations.Types.CutterCompParams,Mastercam.Operations.Types.CutterCompParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.CutterCompParams">
            <summary> This class represents the data needed for the helical entry option used in toolpath roughing.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.RapidRetractOn">
            <summary> Gets or sets a value indicating if rapid retract is on. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.DepthAssociativePoint">
            <summary> Gets the depth associative point. </summary>
            <remarks> To remove this associative point, set this to null.
          If DepthAssociative is false, or an associated Retract point has not been set, this could be a NULL value.
           Be sure to check for that before accessing the value returned! </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.DepthAssociative">
            <summary> Gets or sets a value indicating if the depth plane is associative or not. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.DepthIncremental">
            <summary> Gets or sets a value indicating if depth is to be used incrementally or not. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.TopStockAssociativePoint">
            <summary> Gets or sets the top of stock associative point. </summary>
            <remarks> To remove this associative point, set this to null.
          If TopStockAssociative is false, or an associated Retract point has not been set, this could be a NULL value.
          Be sure to check for that before accessing the value returned! </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.TopStockAssociative">
            <summary> Gets or sets a value indicating if the top of stock is associative or not. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.TopStockIncremental">
            <summary> Gets or sets a value indicating if the top of stock is to be used incrementally or not.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.FeedPlaneAssociativePoint">
            <summary> Gets or sets the feed plane associative point. </summary>
            <remarks> To remove this associative point, set this to null.
          If FeedPlaneAssociative is false, or an associated Retract point has not been set, this could be a NULL value.
          Be sure to check for that before accessing the value returned! </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.FeedPlaneAssociative">
            <summary> Gets or sets a value indicating if the feed plane is associative or not. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.FeedPlaneIncremental">
            <summary> Gets or sets a value indicating if the feed plane is to be used incrementally or not.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.RetractAssociativePoint">
            <summary> Gets or sets the retract associative point. </summary>
            <remarks> To remove this associative point, set this to null.
          If RetractAssociative is false, or an associated Retract point has not been set, this could be a NULL value.
          Be sure to check for that before accessing the value returned! </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.RetractAssociative">
            <summary> Gets or sets a value indicating if the retract is associative or not. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.RetractIncremental">
            <summary> Gets or sets a value indicating if retract is to be used incrementally or not. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.RetractOn">
            <summary> Gets or sets a value indicating if retract is on or not. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.ClearanceAssociativePoint">
            <summary> Gets or sets the clearance associative point. </summary>
            <remarks> To remove this associative point, set this to null.
          If ClearanceAssociative is false, or an associated Retract point has not been set, this could be a NULL value.
          Be sure to check for that before accessing the value returned! </remarks>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.ClearanceAssociative">
            <summary> Gets or sets a value indicating if the clearance is associative or not. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.ClearanceIncremental">
            <summary> Gets or sets a value indicating if clearance is to be used incrementally or not. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.ClearanceStartEndOnly">
            <summary> Gets or sets a value indicating whether or not clearance is only used on at the start and end
          of this operation.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.ClearanceOn">
            <summary> Gets or sets a value indicating whether or not clearance is turned on in this operation.
          </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.Depth">
            <summary> The depth value for this operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.TopStock">
            <summary> Gets or sets the top of stock height for this operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.FeedPlane">
            <summary> Gets or sets the feed plane height for this operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.Retract">
            <summary> Gets or sets the retract height for this operation. </summary>
        </member>
        <member name="P:Mastercam.Operations.Types.LinkingParams.Clearance">
            <summary> Gets or sets the clearance value for this operation. </summary>
        </member>
        <member name="M:Mastercam.Operations.Types.LinkingParams.op_Inequality(Mastercam.Operations.Types.LinkingParams,Mastercam.Operations.Types.LinkingParams)">
            <summary> This is a static inequality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LinkingParams.op_Equality(Mastercam.Operations.Types.LinkingParams,Mastercam.Operations.Types.LinkingParams)">
            <summary> This is a static equality operator overload for the purposes of comparing these objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LinkingParams.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this object to another one.
          </summary>
            <param name="obj"> This is the object to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Operations.Types.LinkingParams.Equals(Mastercam.Operations.Types.LinkingParams,Mastercam.Operations.Types.LinkingParams)">
            <summary> This is a static equality method for the purposes of comparing two objects.
          </summary>
            <param name="item1"> This is the first object to compare. </param>
            <param name="item2"> This is the second object to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="T:Mastercam.Operations.Types.LinkingParams">
            <summary> This class represents the data needed for the Linking Parameters in an operation. </summary>
        </member>
        <member name="M:Mastercam.Database.AssociativePointBuilder.CreateAssociativePoint(System.Int32!System.Runtime.CompilerServices.IsLong,Mastercam.Database.AssociativePoint.PointEntryCode,Mastercam.Math.Point3D)">
            <summary> Initializes a new instance of the AssociativePoint class. </summary>
            <remarks> This method is for internal use by the NET-Hook API. </remarks>
            <param name="id">		The database ID of the geometry entity. </param>
            <param name="pec">		The Point Entry Code. </param>
            <param name="position"> The point position coordinates. </param>
            <returns> nullptr if it fails, else the new associative point. </returns>
        </member>
        <member name="T:Mastercam.Database.AssociativePointBuilder">
            <summary> This class is for internal use by the NET-Hook API for creating Associative Points. </summary>
        </member>
        <member name="P:Mastercam.Database.AssociativePoint.AssociativeEntityId">
            <summary> Gets the database ID of the associative entity. </summary>
            <remarks> If this ID is 0, the Associative Point is NOT valid. </remarks>
        </member>
        <member name="P:Mastercam.Database.AssociativePoint.PointPosition">
            <summary> Gets the point position coordinates. </summary>
        </member>
        <member name="P:Mastercam.Database.AssociativePoint.PointEntryCodeType">
            <summary> Gets the type of the point entry code. </summary>
        </member>
        <member name="P:Mastercam.Database.AssociativePoint.AssociativePointEntity">
            <summary> Gets the referenced entity of the associative point. </summary>
            <remarks> This may be a null value, so be sure to check for that before accessing the value returned! </remarks>
        </member>
        <member name="M:Mastercam.Database.AssociativePoint.#ctor(Mastercam.Database.Geometry,Mastercam.Database.AssociativePoint.PointEntryCode,Mastercam.Math.Point3D)">
            <summary> Initializes a new instance of the AssociativePoint class. </summary>
            <param name="entity">   The geometry entity. </param>
            <param name="pec">      The Point Entry Code. </param>
            <param name="position"> The point position coordinates. </param>
        </member>
        <member name="M:Mastercam.Database.AssociativePoint.#ctor(Mastercam.BasicGeometry.PointGeometry)">
            <summary> Initializes a new instance of the AssociativePoint class. </summary>
            <param name="entity"> The Point geometry entity. </param>
        </member>
        <member name="T:Mastercam.Database.AssociativePoint.LinkingPointType">
            <summary> Values that represent linking associative point types. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.EndPoint2">
            <summary> A point representing the second endpoint of a geometry entity. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.EndPoint1">
            <summary> A point representing the first endpoint of a geometry entity. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.ArcCenterPoint">
            <summary> An arc center point. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.Entity">
            <summary> An entity. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.QuadrantPoint">
            <summary> A quadrant point on an arc or circle. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.Point">
            <summary> A point entity. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.MidPoint">
            <summary> The midpoint of a line or arc entity. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.EndPoint">
            <summary> An endpoint. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.Center">
            <summary> A center point. </summary>
        </member>
        <member name="F:Mastercam.Database.AssociativePoint.PointEntryCode.None">
            <summary> No specific point type. </summary>
        </member>
        <member name="T:Mastercam.Database.AssociativePoint.PointEntryCode">
            <summary> Values that represent Point Entry Codes. </summary>
        </member>
        <member name="T:Mastercam.Database.AssociativePoint">
            <summary> This class is used for creating and querying Associative Points used in operation linking parameters. </summary>
        </member>
        <member name="M:Mastercam.BasicGeometry.PointGeometry.ToString">
            <summary> Convert this object into a string representation. </summary>
            <returns> A text string that represents this object. </returns>
        </member>
        <member name="F:Mastercam.BasicGeometry.PointGeometry.Data">
            <summary> Gets or sets the 3D point data associated with this PointGeometry object. </summary>
        </member>
        <member name="M:Mastercam.BasicGeometry.PointGeometry.#ctor(System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the PointGeometry class. </summary>
            <remarks> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the PointGeometry
          object for it to be created <i>in Mastercam's geometry database</i>.
          </remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreatePoint3" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreatePoint3" language="vbnet" />
            </example>
            <param name="x"> The x coordinate value of the point geometry being created. </param>
            <param name="y"> The y coordinate value of the point geometry being created. </param>
            <param name="z"> The z coordinate value of the point geometry being created. </param>
        </member>
        <member name="M:Mastercam.BasicGeometry.PointGeometry.#ctor(Mastercam.Math.Point3D)">
            <summary> Initializes a new instance of the PointGeometry class. </summary>
            <remarks> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the PointGeometry
          object for it to be created <i>in Mastercam's geometry database</i>.
          </remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreatePoint2" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreatePoint2" language="vbnet" />
            </example>
            <param name="InitialData"> The 3D point coordinate data to create the point geometry with. </param>
        </member>
        <member name="M:Mastercam.BasicGeometry.PointGeometry.#ctor">
            <summary> Initializes a new instance of the PointGeometry class. </summary>
            <remarks> Creates a new point geometry object with a default location of (0,0,0). </remarks>
            <remarks> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the PointGeometry
          object for it to be created <i>in Mastercam's geometry database</i>.
          </remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreatePoint1" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreatePoint1" language="vbnet" />
            </example>
        </member>
        <member name="M:Mastercam.BasicGeometry.PointGeometry.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> LoadDefaults (Override).
          </summary>
            <param name="Ent"> [in,out] The entity to load the object's default values from. </param>
        </member>
        <member name="M:Mastercam.BasicGeometry.PointGeometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commit (Override).
          </summary>
            <param name="Ent"> [in,out] The entity that will hold all the data being sent to the
                   Mastercam database.
                   </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.BasicGeometry.PointGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the PointGeometry class. </summary>
            <remarks> Creates a new object from the ID of an entity in the Mastercam database. </remarks>
            <param name="ID"> The ID of the Mastercam entity to create the new object from. </param>
        </member>
        <member name="T:Mastercam.BasicGeometry.PointGeometry">
            <summary> Provides a mechanism for creating, editing, and deleting point geometry within Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Curves.ArcGeometry.ToString">
            <summary> Converts this object into a string representation. </summary>
            <returns> A text string that represents this object. </returns>
        </member>
        <member name="P:Mastercam.Curves.ArcGeometry.EndPoint2">
            <summary> Gets the second endpoint of this ArcGeometry object. </summary>
        </member>
        <member name="P:Mastercam.Curves.ArcGeometry.EndPoint1">
            <summary> Gets or sets the first endpoint of this ArcGeometry object. </summary>
        </member>
        <member name="F:Mastercam.Curves.ArcGeometry.Data">
            <summary> Gets the 3D arc data associated with this ArcGeometry object. </summary>
        </member>
        <member name="P:Mastercam.Curves.ArcGeometry.ViewNumber">
            <summary> The view number of this ArcGeometry object. </summary>
            <value> The view number. </value>
        </member>
        <member name="P:Mastercam.Curves.ArcGeometry.View">
            <summary> The view of this ArcGeometry object. </summary>
        </member>
        <member name="M:Mastercam.Curves.ArcGeometry.#ctor(Mastercam.Math.Point3D,Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> Initializes a new instance of the ArcGeometry class (Arc by 3 points). </summary>
            <remarks> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the ArcGeometry
          object for it to be created <i>in Mastercam's geometry database</i>.
          </remarks>
            <param name="Point1"> The first point. </param>
            <param name="Point2"> The second point. </param>
            <param name="Point3"> The third point. </param>
        </member>
        <member name="M:Mastercam.Curves.ArcGeometry.#ctor(Mastercam.Database.MCView,Mastercam.Math.Point3D,System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the ArcGeometry class. </summary>
            <remarks> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the ArcGeometry
          object for it to be created <i>in Mastercam's geometry database</i>.
          </remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreateArc4" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreateArc4" language="vbnet" />
            </example>
            <param name="View">              The view to create this arc geometry in. </param>
            <param name="CenterPoint">       The value of the center point of the arc geometry to be constructed.
                                 </param>
            <param name="Radius">            The radius of the arc geometry being created. </param>
            <param name="StartAngleDegrees"> The angle in degrees, from the origin, from which the arc starts.
                                 </param>
            <param name="EndAngleDegrees">   The angle in degrees, from the origin, from which the arc ends.
                                 </param>
        </member>
        <member name="M:Mastercam.Curves.ArcGeometry.#ctor(System.Int16,Mastercam.Math.Point3D,System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the ArcGeometry class. </summary>
            <remarks> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the ArcGeometry
          object for it to be created <i>in Mastercam's geometry database</i></remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreateArc3" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreateArc3" language="vbnet" />
            </example>
            <param name="ViewNumber">        The view number to create this arc geometry in.
                                 If the supplied View Number does identify a "valid" defined view,
                                 the view used will default to the active construction plane.
                                 </param>
            <param name="CenterPoint">       The value of the center point of the arc geometry to be constructed.
                                 </param>
            <param name="Radius">            The radius of the arc geometry being created. </param>
            <param name="StartAngleDegrees"> The angle in degrees, from the origin, from which the arc starts.
                                 </param>
            <param name="EndAngleDegrees">   The angle in degrees, from the origin, from which the arc ends.
                                 </param>
        </member>
        <member name="M:Mastercam.Curves.ArcGeometry.#ctor(Mastercam.Math.Arc3D)">
            <summary> Initializes a new instance of the ArcGeometry class. </summary>
            <remarks> Creates a new ArcGeometry object based off of the values in the specified arc math object.
   <para> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the ArceGeometry
          object for it to be created <i>in Mastercam's geometry database</i></para>.
          </remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreateArc2" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreateArc2" language="vbnet" />
            </example>
            <param name="ArcData">The 3D arc data to create this ArcGeometry object with.</param>
        </member>
        <member name="M:Mastercam.Curves.ArcGeometry.#ctor">
            <summary> Initializes a new instance of the ArcGeometry class. </summary>
            <remarks> Creates new arc geometry with default values -
          A radius of 1.0, a start angle of 0.0,
          an end angle of 360.0, a center point at the origin (0.0, 0.0, 0.0)
          and in the current construction view.
   <para> You must <see cref="M:Mastercam.Database.Geometry.Commit" /> the ArcGeometry
          object for it to be created <i>in Mastercam's geometry database</i></para>.
          </remarks>
            <example>
                <code source="Examples\CS\CreateGeometry.cs" region="CreateArc1" language="cs" />
                <code source="Examples\VB\CreateGeometry.vb" region="CreateArc1" language="vbnet" />
            </example>
        </member>
        <member name="F:Mastercam.Curves.ArcGeometry.m_View">
            <summary>The view of this arc geometry object stored in the database.</summary>
        </member>
        <member name="F:Mastercam.Curves.ArcGeometry.m_ViewNumber">
            <summary>The internal view number of this arc geometry object stored in the database.</summary>
        </member>
        <member name="M:Mastercam.Curves.ArcGeometry.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> LoadDefaults (Override).
          This handles the loading of defaults from a Mastercam entity.
          </summary>
            <param name="Ent"> [in,out] The entity to load the object's default values from. </param>
        </member>
        <member name="M:Mastercam.Curves.ArcGeometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commit (Override).
          This handles the committing of the object's data to the Mastercam database.
          </summary>
            <param name="Ent"> [in,out] The entity that will hold all the data being sent to the
                   Mastercam database.
                   </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Curves.ArcGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the ArcGeometry class. </summary>
            <remarks> Creates a new object from the ID of an entity in the Mastercam database. </remarks>
            <param name="ID"> The ID of the Mastercam entity to create the new object from. </param>
        </member>
        <member name="T:Mastercam.Curves.ArcGeometry">
            <summary> This class provides methods for creating, editing, and otherwise working with arc geometry
          within Mastercam.
          </summary>
        </member>
        <member name="P:Mastercam.Database.CurveGeometry.EndPoint2">
            <summary> The second endpoint in the given curve geometry object. </summary>
        </member>
        <member name="P:Mastercam.Database.CurveGeometry.EndPoint1">
            <summary> The first endpoint in the given curve geometry object. </summary>
        </member>
        <member name="M:Mastercam.Database.CurveGeometry.#ctor">
            <summary>Default Constructor. All members are given default values.</summary>
        </member>
        <member name="M:Mastercam.Database.CurveGeometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the abstract class. </summary>
            <remarks> Mastercam Database Constructor. Creates a new object from the ID of an entity
          in the Mastercam database.
          </remarks>
            <param name="ID"> The ID of the Mastercam entity to create the new object from. </param>
        </member>
        <member name="T:Mastercam.Database.CurveGeometry">
            <summary> This class handles the interaction between the NET-Hook and Mastercam for complex curve
          geometry objects.
          </summary>
        </member>
        <member name="P:Mastercam.Database.Geometry.PointStyle">
            <summary> Gets or sets the point style attribute of the current geometry object. </summary>
        </member>
        <member name="P:Mastercam.Database.Geometry.PenStyle">
            <summary> Gets or sets the pen style value of the current geometry object. </summary>
        </member>
        <member name="P:Mastercam.Database.Geometry.LineStyle">
            <summary> Gets or sets the line style attribute of the current geometry object. </summary>
        </member>
        <member name="P:Mastercam.Database.Geometry.LineWidth">
            <summary> Gets or sets the line width value (1-5) of the current geometry object. </summary>
            <remarks> Even though this is floating point value, only the integer part is used. </remarks>
        </member>
        <member name="P:Mastercam.Database.Geometry.Level">
            <summary> Gets or sets the level the current geometry object is on. </summary>
        </member>
        <member name="P:Mastercam.Database.Geometry.Color">
            <summary> Gets or sets the color value (0-255) of the geometry object. </summary>
        </member>
        <member name="F:Mastercam.Database.Geometry.Blanked">
            <summary> True if the current geometry object has been marked as blanked, else false if not.
          </summary>
            <remarks> Note that should you change the Blanked flag on an existing Geometry object and
          re-commit it, you may have to fully regenerate the graphics view in order
          to see the changed setting take effect. See GraphicsManager.Repaint() for
          details.
          </remarks>
        </member>
        <member name="F:Mastercam.Database.Geometry.Selected">
            <summary> True if the current geometry object is selected, else false if not. </summary>
        </member>
        <member name="M:Mastercam.Database.Geometry.Retrieve">
            <summary> Updates the current geometry entity object with any changes that have been made to
          the version in the Mastercam database.
          </summary>
            <returns> True if the entity was successfully updated, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Validate">
            <summary> Validates whether or not the current geometry entity object is a valid Mastercam
          database entry yet.
          </summary>
            <returns> True if the entity is already in the Mastercam database, else false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Delete">
            <summary> Deletes the geometry entity object from the Mastercam database. 
		  It does not delete any referenced items associated to this geometry entity.
		  See the <see cref="M:Mastercam.Database.Geometry.Delete(System.Boolean)" /> 
		  method override that allows for handling associated items if needed.
          </summary>
            <remarks> Note that once the entity object has been deleted from the Mastercam database it
          will still exist locally, and can be re-committed at a later time. </remarks>
            <returns> True if the entity was successfully deleted from the Mastercam database and false if not. </returns>
            <exception cref="T:Mastercam.App.Exceptions.EntityInvalidException"> This exception will be thrown if the object
                                          being deleted is already marked as an
                                          Invalid, indicating that it doesn't exist
                                          in the Mastercam database anyway.
                                          </exception>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown if for some reason this geometry object
                                       is supposed to be valid but the geometry is no
                                       longer in the Mastercam database.
                                       </exception>
        </member>
        <member name="M:Mastercam.Database.Geometry.Delete(System.Boolean)">
            <summary> Deletes the geometry entity object from the Mastercam database 
          and optionally any referenced items associated to this geometry entity.
		  If this entity is referenced by a Toolpath, Solid, and/or Plane, 
		  those "associated" items will be permanently altered. </summary>
            <remarks> Note that once the entity object has been deleted from the Mastercam database it will still exist locally,
		  and can be re-committed at a later time. </remarks>
            <exception cref="T:Mastercam.App.Exceptions.EntityInvalidException"> This exception will be thrown if the object being deleted is already
										  marked as an Invalid, indicating that it doesn't exist in the
										  Mastercam database anyway. </exception>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException">    Thrown if for some reason this geometry object is supposed to be valid
										  but the geometry is no longer in the Mastercam database. </exception>
            <param name="includeAssociated"> true to also delete any referenced items. </param>
            <returns> True if the entity was successfully deleted from the Mastercam database and false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Commit">
            <summary> Takes the current geometry entity object and commits it to the Mastercam database.
          </summary>
            <returns> True if the entity was successfully committed, else false if not. </returns>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown if for some reason this geometry object
                                       is supposed to be valid but the geometry is no
                                       longer in the Mastercam database.
                                       </exception>
            <exception cref="T:Mastercam.App.Exceptions.EntityWriteFailedException"> Thrown if Mastercam is unable to write the
                                              geometry entity to the database for
                                              some reason.
                                              </exception>
        </member>
        <member name="M:Mastercam.Database.Geometry.CopyAndRotate(Mastercam.Math.Point3D,System.Double,System.Int32)">
            <summary> Copies the current geometry object and then performs a rotation transform on the
       new geometry.
          </summary>
            <remarks> Note that with this method, the current geometry object will not be modified.
       </remarks>
            <param name="RotationOrigin">       The point of origin for the rotation transformation.
                                    </param>
            <param name="RotationAngleDegrees"> The angle in degrees that the geometry object is to be rotated.
                                    </param>
            <param name="ViewNumber">           The view number the rotation transform is to take place in.
                                    </param>
            <returns> The newly copied and rotated geometry object. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Rotate(Mastercam.Math.Point3D,System.Double,System.Int32)">
            <summary> Performs a rotation transform on the geometry object. </summary>
            <param name="RotationOrigin">       The point of origin for the rotation transformation.
                                    </param>
            <param name="RotationAngleDegrees"> The angle in degrees that the geometry object is to be rotated.
                                    </param>
            <param name="ViewNumber">           The view number the rotation transform is to take place in.
                                    </param>
            <returns> True if the rotation was completed successfully. else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.CopyAndMirror(Mastercam.Math.Line3D,System.Int32)">
            <summary> Copies the current geometry object and then performs a mirror transform on the new
          geometry.
          </summary>
            <remarks> Note that with this method, the current geometry object will not be modified.
          </remarks>
            <param name="Axis">       The axis the geometry is to be mirrored over. </param>
            <param name="ViewNumber"> The view number the mirroring transform is to take place in.
                          </param>
            <returns> The newly copied and mirrored geometry object. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Mirror(Mastercam.Math.Line3D,System.Int32)">
            <summary> Performs a mirror transform on the current geometry object. </summary>
            <param name="Axis">       The axis the geometry is to be mirrored over. </param>
            <param name="ViewNumber"> The view number the mirroring transform is to take place in.
                          </param>
            <returns> True if the mirror was completed successfully. else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.CopyAndTranslate(Mastercam.Math.Point3D,Mastercam.Math.Point3D,System.Int16,System.Int16)">
            <summary> Copies the current geometry object and then performs a translation transform on the
          new geometry.
          </summary>
            <remarks> Note that with this method, the current geometry object will not be modified.
          </remarks>
            <param name="From">           The starting point of the translation. </param>
            <param name="To">             The ending point of the translation. </param>
            <param name="FromViewNumber"> The view number the translation starts in. </param>
            <param name="ToViewNumber">   The view number the translation is to end in. </param>
            <returns> The newly copied and translated geometry object. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Translate(Mastercam.Math.Point3D,Mastercam.Math.Point3D,System.Int16,System.Int16)">
            <summary> Performs a translation transform on the current geometry object. </summary>
            <param name="From">           The starting point of the translation. </param>
            <param name="To">             The ending point of the translation. </param>
            <param name="FromViewNumber"> The view number the translation starts in. </param>
            <param name="ToViewNumber">   The view number the translation is to end in. </param>
            <returns> True if the translation was completed successfully. else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.ScaleAndCopy(Mastercam.Math.Point3D,System.Double)">
            <summary> Copies the current geometry object and then performs a scaling transform on the
          new geometry.
          </summary>
            <param name="ScalingOrigin"> The point of origin for the scaling transformation. </param>
            <param name="ScaleFactor">   The scale factor. </param>
            <returns> The newly copied and scaled geometry object. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Scale(Mastercam.Math.Point3D,System.Double)">
            <summary> Performs a scaling transform on the geometry object. </summary>
            <param name="ScalingOrigin"> The point of origin for the scaling transformation. </param>
            <param name="ScaleFactor">   The scale factor. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.CopyAndRotate(Mastercam.Math.Point3D,System.Double,Mastercam.Database.MCView)">
            <summary> Copies the current geometry object and then performs a rotation transform on the
          new geometry.
          </summary>
            <param name="RotationOrigin"> The point of origin for the rotation transformation. </param>
            <param name="RotationAngle">  The rotation angle. </param>
            <param name="View">           The View the rotation transform is to take place in. </param>
            <returns> The newly copied and rotated geometry object. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Rotate(Mastercam.Math.Point3D,System.Double,Mastercam.Database.MCView)">
            <summary> Performs a rotation transform on the geometry object. </summary>
            <param name="RotationOrigin"> The point of origin for the rotation transformation. </param>
            <param name="RotationAngle">  The rotation angle. </param>
            <param name="View">           The View the rotation transform is to take place in. </param>
            <returns> True if the rotation was completed successfully. else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.CopyAndMirror(Mastercam.Math.Line3D,Mastercam.Database.MCView)">
            <summary> Copies the current geometry object and then performs a mirror transform on the new
          geometry.
          </summary>
            <param name="Axis"> The line that defines the axis geometry is to be mirrored over. </param>
            <param name="View"> The View the mirroring transform is to take place in. </param>
            <returns> The newly copied and mirrored geometry object. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Mirror(Mastercam.Math.Line3D,Mastercam.Database.MCView)">
            <summary> Performs a mirror transform on the current geometry object. </summary>
            <param name="Axis"> The line that defined the axis the geometry is to be mirrored over. </param>
            <param name="View"> The View the mirroring transform is to take place in. </param>
            <returns> True if the mirror was completed successfully. else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.CopyAndTranslate(Mastercam.Math.Point3D,Mastercam.Math.Point3D,Mastercam.Database.MCView,Mastercam.Database.MCView)">
            <summary> Copies the current geometry object and then performs a translation transform on the
          new geometry.
          </summary>
            <remarks> Note that with this method, the current geometry object will not be modified.
          </remarks>
            <param name="From">     The starting point of the translation. </param>
            <param name="To">       The ending point of the translation. </param>
            <param name="FromView"> The View the translation starts in. </param>
            <param name="ToView">   The View the translation is to end in. </param>
            <returns> The newly copied and translated geometry object. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Translate(Mastercam.Math.Point3D,Mastercam.Math.Point3D,Mastercam.Database.MCView,Mastercam.Database.MCView)">
            <summary> Performs a translation transform on the current geometry object. </summary>
            <param name="From">     The starting point of the translation. </param>
            <param name="To">       The ending point of the translation. </param>
            <param name="FromView"> The View the translation starts in. </param>
            <param name="ToView">   The View the translation is to end in. </param>
            <returns> True if the translation was completed successfully. else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.XformScale(Mastercam.Math.Point3D,System.Double,System.Boolean)">
            <summary> Performs a scaling transform on the current geometry object. </summary>
            <param name="ScalingOrigin"> The point of origin for the scaling transformation. </param>
            <param name="ScaleFactor">   The scale factor. </param>
            <param name="Copy">          true to do make the result a copy, else do a move. </param>
            <returns> The newly copied (if Copy is true) and rotated geometry object . </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.XformRotate(Mastercam.Math.Point3D,System.Double,Mastercam.Database.MCView,System.Boolean)">
            <summary> Performs a rotation transform on the current geometry object. </summary>
            <param name="RotationOrigin"> The point of origin for the rotation transformation. </param>
            <param name="RotationAngle">  The rotation angle. </param>
            <param name="View">           The View the mirroring transform is to take place in. </param>
            <param name="Copy">           true to do make the result a copy, else do a move. </param>
            <returns> The newly copied (if Copy is true) and rotated geometry object . </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.XformMirror(Mastercam.Math.Line3D,Mastercam.Database.MCView,System.Boolean,System.Boolean@)">
            <summary> Performs a mirror transform on the current geometry object. </summary>
            <param name="Axis">   The line that defines the axis geometry is to be mirrored over.
                      </param>
            <param name="View">   The View the mirroring transform is to take place in. </param>
            <param name="Copy">   true to do make the result a copy, else do a move. </param>
            <param name="Result"> [out] The result (true if successful, else false if errors occurred).
                      </param>
            <returns> The newly copied (if Copy is true) and rotated geometry object . </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.XformTranslate(Mastercam.Math.Point3D,Mastercam.Math.Point3D,Mastercam.Database.MCView,Mastercam.Database.MCView,System.Boolean)">
            <summary> Performs a translation transform on the current geometry object. </summary>
            <param name="From">     The starting point of the translation. </param>
            <param name="To">       The ending point of the translation. </param>
            <param name="FromView"> The View the translation starts in. </param>
            <param name="ToView">   The View the translation is to end in. </param>
            <param name="Copy">     true to do make the result a copy, else do a move. </param>
            <returns> The newly copied (if Copy is true) and rotated geometry object . </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.LoadDefaults(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given geometry object from the geometry entity
          passed in.
          </summary>
            <param name="Ent"> [in,out] The geometry entity to use as defaults for this geometry
                   object.
                   </param>
        </member>
        <member name="M:Mastercam.Database.Geometry.Retrieve(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves a geometry entity from the Mastercam database. </summary>
            <param name="Ent"> [in,out] The geometry entity to be retrieved. </param>
            <returns> True if the geometry entity was retrieved from the database successfully; false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Validate(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validates that a given geometry entity is already in the Mastercam database.
          </summary>
            <param name="Ent"> The geometry entity to be validated. </param>
            <returns> True if the geometry entity is already in the database; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Delete(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Deletes a geometry entity from the Mastercam database. </summary>
            <param name="Ent">				 The geometry entity to be deleted. </param>
            <param name="includeAssociated"> True to include associated items (Toolpath, Solid and/or Plane). </param>
            <returns> True if the geometry entity was deleted from the database successfully, false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.Commit(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a geometry entity to the Mastercam database. </summary>
            <param name="Ent"> The geometry entity to be committed. </param>
            <returns> True if the commit was successful, false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Geometry.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the abstract class. </summary>
            <remarks> Attempts to retrieve a geometry entity with the given ID from the Mastercam
          database and use that to initialize this geometry object.
          If no matching geometry entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID"> The ID of the geometry entity to look up in the Mastercam database.
                  </param>
        </member>
        <member name="M:Mastercam.Database.Geometry.#ctor">
            <summary> Initializes a new instance of the abstract Geometry class. </summary>
            <remarks> All members are given default values. </remarks>
        </member>
        <member name="M:Mastercam.Database.Geometry.LoadDefaults">
            <summary> Loads the default values for a given geometry object. </summary>
        </member>
        <member name="T:Mastercam.Database.Geometry">
            <summary> This class handles all of the interaction for Geometry objects within Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Math.Line3D.op_Inequality(Mastercam.Math.Line3D,Mastercam.Math.Line3D)">
            <summary> This is a static inequality operator overload for the purposes of comparing these math
          objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Line1"> This is the first line to compare. </param>
            <param name="Line2"> This is the second line to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Line3D.op_Equality(Mastercam.Math.Line3D,Mastercam.Math.Line3D)">
            <summary> This is a static equality operator overload for the purposes of comparing these math
          objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Line1"> This is the first line to compare. </param>
            <param name="Line2"> This is the second line to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Line3D.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this math object to another
          one.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="obj"> This is the line to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Line3D.Equals(Mastercam.Math.Line3D,Mastercam.Math.Line3D)">
            <summary> This is a static equality method for the purposes of comparing these math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Line1"> This is the first line to compare. </param>
            <param name="Line2"> This is the second line to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="P:Mastercam.Math.Line3D.default(System.Int32)">
            <summary> Gets or sets the specified endpoint of this Line3D.
          This is the bracket operator overload so that the points within this line can be
          accessed via an array-like interface.
          </summary>
            <param name="index"> The index used within the brackets must be either 0 or 1 to access either
                     the first or the second endpoint.
                     </param>
            <exception cref="T:System.IndexOutOfRangeException"> Thrown if an index is passed in that is out of the allowed range.
                                            </exception>
        </member>
        <member name="M:Mastercam.Math.Line3D.ToString">
            <summary> Converts this object into a string representation. </summary>
            <returns> A text string that represents this object. </returns>
        </member>
        <member name="F:Mastercam.Math.Line3D.Point2">
            <summary> Gets or sets the second endpoint of the specified line object. </summary>
        </member>
        <member name="F:Mastercam.Math.Line3D.Point1">
            <summary> Gets or sets the first endpoint of the specified line object. </summary>
        </member>
        <member name="M:Mastercam.Math.Line3D.#ctor(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> Initializes a new instance of the Line3D class. </summary>
            <remarks>  This construction method takes two 3D points and constructs a line object from them.
          </remarks>
            <param name="Point1Input"> The point to become the first endpoint. </param>
            <param name="Point2Input"> The point to become the second endpoint. </param>
        </member>
        <member name="M:Mastercam.Math.Line3D.ConvertMastercam(l_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> "Converts" this NET-Hook type to the corresponding Mastercam math type. </summary>
            <param name="MCamLine"> [out] The Mastercam math type. </param>
        </member>
        <member name="M:Mastercam.Math.Line3D.#ctor(l_3d)">
            <summary> Initializes a new instance of the Line3D class. </summary>
            <param name="LineGeometry"> The Mastercam 3D line geometry data. </param>
        </member>
        <member name="T:Mastercam.Math.Line3D">
            <summary> This class is used as a mathematical representation of a 3D Line. </summary>
        </member>
        <member name="M:Mastercam.Math.Arc3D.op_Inequality(Mastercam.Math.Arc3D,Mastercam.Math.Arc3D)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Arc1"> This is the first arc to compare. </param>
            <param name="Arc2"> This is the second arc to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Arc3D.op_Equality(Mastercam.Math.Arc3D,Mastercam.Math.Arc3D)">
            <summary> This is a static equality operator overload for the purposes of comparing these
       math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Arc1"> This is the first arc to compare. </param>
            <param name="Arc2"> This is the second arc to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Arc3D.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this math object to
       another one.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="obj"> [in,out] This is the arc to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Arc3D.Equals(Mastercam.Math.Arc3D,Mastercam.Math.Arc3D)">
            <summary> This is a static equality method for the purposes of comparing these math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Arc1"> This is the first arc to compare. </param>
            <param name="Arc2"> This is the second arc to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Arc3D.ToString">
            <summary> Converts this object into a string representation. </summary>
            <returns> A text string that represents this object. </returns>
        </member>
        <member name="P:Mastercam.Math.Arc3D.EndAngleDegrees">
            <summary> Gets or sets the location of the ending point of this arc,
          an angle, in degrees, from the (3 O'Clock) base point.
          </summary>
        </member>
        <member name="P:Mastercam.Math.Arc3D.StartAngleDegrees">
            <summary> Gets or sets the location of the starting point of this arc,
          an angle, in degrees, from the (3 O'Clock) base point.
          </summary>
        </member>
        <member name="P:Mastercam.Math.Arc3D.Radius">
            <summary> Gets or sets the radius of this arc. </summary>
        </member>
        <member name="F:Mastercam.Math.Arc3D.CenterPoint">
            <summary> Gets or sets the center point of this arc. </summary>
        </member>
        <member name="M:Mastercam.Math.Arc3D.#ctor(Mastercam.Math.Point3D,System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the Arc3D class. </summary>
            <remarks> This takes all of the necessary data to construct this arc object .
       </remarks>
            <param name="CenterPoint">       The center point of the arc to be created. </param>
            <param name="Radius">            The radius (distance from the center point to the outer
                                 edge of the arc) of the arc to be created.
                                 </param>
            <param name="StartAngleDegrees"> The angle in degrees, from the origin, from which the arc starts.
                                 </param>
            <param name="EndAngleDegrees">   The angle in degrees, from the origin, from which the arc ends.
                                 </param>
        </member>
        <member name="M:Mastercam.Math.Arc3D.ConvertMastercam(a_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> "Converts" this NET-Hook type to the corresponding Mastercam math type. </summary>
            <param name="MCamArc"> [out] The Mastercam math type. </param>
        </member>
        <member name="M:Mastercam.Math.Arc3D.#ctor(a_3d)">
            <summary> Initializes a new instance of the Arc3D class. </summary>
            <param name="ArcGeometry"> The arc geometry. </param>
        </member>
        <member name="T:Mastercam.Math.Arc3D">
            <summary> This class is used as a mathematical representation of a 3D Arc. </summary>
        </member>
        <member name="F:Mastercam.Database.MCView.m_ViewComment">
            <summary>The internal view comment data member.</summary>
        </member>
        <member name="F:Mastercam.Database.MCView.m_ViewName">
            <summary> The internal view name data member. </summary>
        </member>
        <member name="F:Mastercam.Database.MCView.m_WorkOffsetNumber">
            <summary> The internal view work offset number data member. </summary>
        </member>
        <member name="F:Mastercam.Database.MCView.m_ViewNumber">
            <summary> The internal view number data member. </summary>
        </member>
        <member name="F:Mastercam.Database.MCView.m_ViewOrigin">
            <summary> The internal view origin data member. </summary>
        </member>
        <member name="F:Mastercam.Database.MCView.m_ViewMatrix">
            <summary> The internal view matrix data member. </summary>
        </member>
        <member name="M:Mastercam.Database.MCView.EnsureNameValid">
            <summary> Validates that the view name member is valid.
          If not, it iterates through names until it finds a valid one.
          </summary>
        </member>
        <member name="M:Mastercam.Database.MCView.InitView(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes a Mastercam view structure with default values. </summary>
            <param name="ViewEnt"> The view structure to be initialized. </param>
        </member>
        <member name="M:Mastercam.Database.MCView.LoadDefaults(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the default values for a given view object from the view structure passed in.
          </summary>
            <param name="ViewEnt"> The view structure to use as defaults for this view object. </param>
        </member>
        <member name="M:Mastercam.Database.MCView.Retrieve(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves an view structure from the Mastercam database. </summary>
            <param name="ViewEnt"> The view structure to be retrieved. </param>
            <returns> True if the view structure was retrieved from the database successfully; false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.MCView.Delete(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes a view structure from the Mastercam database. </summary>
            <remarks> Note that trying to delete locked system views will fail and return a false return code.
          </remarks>
            <param name="ViewEnt"> The view structure to be deleted. </param>
            <returns> True if the view structure was deleted from the database successfully; false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.MCView.Validate(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validates that a given view structure is already in the Mastercam database. </summary>
            <param name="ViewEnt"> The view structure to be validated. </param>
            <returns> True if the view structure is already in the database; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.MCView.Commit(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a view structure to the Mastercam database. </summary>
            <remarks> Note that trying to commit locked system views will fail and return a false return code.
          </remarks>
            <param name="ViewEnt"> The view structure to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.MCView.#ctor(System.Int16)">
            <summary> ID Lookup Constructor. Attempts to retrieve a view entity with the given ID from the
          Mastercam database and use that to initialize this view object.
          </summary>
            <remarks> If no matching view entity is found in the Mastercam database, the object is
          initialized to default values.
          </remarks>
            <param name="ViewID"> The ID of the view entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Database.MCView.LoadDefaults">
            <summary> Loads the default values for a given view object. </summary>
        </member>
        <member name="P:Mastercam.Database.MCView.IsInUseView">
            <summary> Gets the a value indicating if the view is "in use" by the system and
          thus cannot be deleted. </summary>
            <remarks> "In Use" could mean that it is the current CPlane,TPlane, WCS, etc. </remarks>
        </member>
        <member name="P:Mastercam.Database.MCView.IsLockedView">
            <summary> Gets the a value indicating if the view object is a locked ("reserved") system view. </summary>
        </member>
        <member name="P:Mastercam.Database.MCView.ViewID">
            <summary> Gets the ID of the view object.
          To be used in certain API methods that require view IDs.
          </summary>
        </member>
        <member name="P:Mastercam.Database.MCView.ViewNumber">
            <summary> Gets the view number of the current view object. </summary>
        </member>
        <member name="P:Mastercam.Database.MCView.ViewComment">
            <summary> Gets ot sets the comment on the current view object.</summary>
            <remarks> Maximum length is 255 characters. </remarks>
        </member>
        <member name="P:Mastercam.Database.MCView.ViewName">
            <summary> Gets or sets the name of the current view object. </summary>
            <remarks> Note that a changed view name may not exactly match the supplied text string if
          the name used does not meet the view name eligibility requirements.
          See the <see cref="M:Mastercam.Database.MCView.IsViewNameOkay(System.String)" /> method documentation for a more details.
          </remarks>
        </member>
        <member name="P:Mastercam.Database.MCView.WorkOffsetNumber">
            <summary> Gets or sets the work offset number of this view object. </summary>
        </member>
        <member name="P:Mastercam.Database.MCView.ViewOrigin">
            <summary> Gets or sets the origin of this view object. </summary>
        </member>
        <member name="P:Mastercam.Database.MCView.ViewMatrix">
            <summary> Gets or sets the view matrix of this view object. </summary>
        </member>
        <member name="M:Mastercam.Database.MCView.IsViewNameOkay(System.String)">
            <summary> Tests to see if a string can be used as a possible view name. </summary>
            <remarks> This utility function is designed to test possible view names since view names have to
          be unique amongst views, case-insensitive. They also have to be 40 characters or
          less.
          </remarks>
            <param name="CandidateViewName"> The view name to be checked. </param>
            <returns> true if view name is okay, false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.MCView.Retrieve">
            <summary> Updates the current view object with any changes that have been made to the version in
          the Mastercam database.
          </summary>
            <returns> True if the view was successfully updated, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.MCView.Delete">
            <summary> Deletes the current view object from the Mastercam database. </summary>
            <remarks> Note that once the view object has been deleted from the Mastercam database it will
          still exist locally, and can be re-committed at a later time. Also note that trying
          to delete locked system views will fail and will return a false return code.
          </remarks>
            <returns> True if the view was successfully deleted from the Mastercam database, else false if
          not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.MCView.Validate">
            <summary> Validates whether or not the current view object is a valid Mastercam database entry
          yet.
          </summary>
            <returns> True if the view is already in the Mastercam database, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.MCView.Commit">
            <summary> Takes the current view object and commits it to the Mastercam database. </summary>
            <remarks> Note that trying to commit locked system views will fail and return a false return code.
          </remarks>
            <returns> True if the view was successfully committed, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.MCView.DatabaseReinitialize">
            <summary> Takes the current view object and cuts it's ties with the current Mastercam database.
          This makes the view invalid, like a newly created view object.
          </summary>
            <remarks> Once you've called this, the view object will be an entirely independent object. As
          such, it can be committed to the current database as an entirely new object or
          committed to an entirely new database. This also means that the Delete and
          Regenerate methods will fail until the object has been re-committed to a database.
          </remarks>
        </member>
        <member name="M:Mastercam.Database.MCView.#ctor">
            <summary> Default Constructor. All members are given default values. </summary>
        </member>
        <member name="T:Mastercam.Database.MCView">
            <summary> This class is used for modifying and creating view entities in Mastercam. </summary>
        </member>
        <member name="M:Mastercam.Math.Matrix3D.#ctor(Mastercam.Math.Point3D,Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> Initializes a new instance of the Matrix3D class. </summary>
            <remarks> This construction method takes three 3D points as row values
          and constructs a matrix object from them.
          </remarks>
            <param name="Row1Input"> The data to construct the first row with. </param>
            <param name="Row2Input"> The data to construct the second row with. </param>
            <param name="Row3Input"> The data to construct the third row with. </param>
        </member>
        <member name="M:Mastercam.Math.Matrix3D.op_Inequality(Mastercam.Math.Matrix3D,Mastercam.Math.Matrix3D)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Matrix1"> This is the first matrix to compare. </param>
            <param name="Matrix2"> This is the second matrix to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Matrix3D.op_Equality(Mastercam.Math.Matrix3D,Mastercam.Math.Matrix3D)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Matrix1"> This is the first matrix to compare. </param>
            <param name="Matrix2"> This is the second matrix to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Matrix3D.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this math object to
          another one.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="obj"> [in,out] This is the matrix to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Matrix3D.Equals(Mastercam.Math.Matrix3D,Mastercam.Math.Matrix3D)">
            <summary> This is a static equality method for the purposes of comparing these math objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Matrix1"> This is the first matrix to compare. </param>
            <param name="Matrix2"> This is the second matrix to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="P:Mastercam.Math.Matrix3D.default(System.Int32,System.Int32)">
            <summary> Gets or sets the specified value within this Matrix3D.
          This is the bracket operator overload so that individual values within this matrix
          can be accessed via an array-like interface.
          Note that the syntax for this operator is - 
          Read:  var myValue = matrix[row#, col#];
          Write: matrix[row#, col#] = myValue;
          </summary>
            <param name="index"> The row and col values within the brackets must be either 0, 1 or 2 to access
                     the specific data "cell" of the matrix.
                     </param>
            <exception cref="T:System.IndexOutOfRangeException"> Thrown if an index is passed in that is out of the allowed range.
                                            </exception>
        </member>
        <member name="P:Mastercam.Math.Matrix3D.default(System.Int32)">
            <summary> Gets or sets the specified row of this Matrix3D.
          This is the bracket operator overload so that the data rows within this matrix can be
          accessed via an array-like interface.
          </summary>
            <param name="index"> The index used within the brackets must be either 0, 1 or 2 to access
                     the specific row.
                     </param>
            <exception cref="T:System.IndexOutOfRangeException"> Thrown if an index is passed in that is out of the allowed range.
                                            </exception>
        </member>
        <member name="F:Mastercam.Math.Matrix3D.Row3">
            <summary> Gets or sets the 3D point object that represents the third row within the matrix. </summary>
        </member>
        <member name="F:Mastercam.Math.Matrix3D.Row2">
            <summary> Gets or sets the 3D point object that represents the second row within the matrix. </summary>
        </member>
        <member name="F:Mastercam.Math.Matrix3D.Row1">
            <summary> Gets or sets the 3D point object that represents the first row within the matrix. </summary>
        </member>
        <member name="M:Mastercam.Math.Matrix3D.ConvertMastercam(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> "Converts" this NET-Hook type to the corresponding Mastercam math type. </summary>
            <param name="MCamMatrix"> [in,out] The Mastercam matrix. </param>
        </member>
        <member name="M:Mastercam.Math.Matrix3D.#ctor(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes a new instance of the Matrix3D class. </summary>
            <param name="Matrix"> The Mastercam 3x3 matrix data. </param>
        </member>
        <member name="T:Mastercam.Math.Matrix3D">
            <summary> This class is used as a mathematical representation of a 3x3 Matrix. </summary>
        </member>
        <member name="M:Mastercam.Math.Point3D.op_Inequality(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is a static inequality operator overload for the purposes of comparing these math
          objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Point1"> This is the first point to compare. </param>
            <param name="Point2"> This is the second point to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.op_Equality(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is a static equality operator overload for the purposes of comparing these math
          objects.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="Point1"> This is the first point to compare. </param>
            <param name="Point2"> This is the second point to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this math object to another
          one.
          </summary>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <param name="obj"> This is the point to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.Equals(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is a static equality method for the purposes of comparing these math objects.
          </summary>
            <param name="Point1"> This is the first point to compare. </param>
            <param name="Point2"> This is the second point to compare. </param>
            <remarks> Note that the comparison is done with respect to the internal Mastercam
          <see cref="P:Mastercam.IO.SettingsManager.SystemTolerance" /> value,
          so small differences between two objects that are less than the tolerances
          will still be considered equal. </remarks>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="P:Mastercam.Math.Point3D.default(System.Int32)">
            <summary> Get or sets the specified coordinate of this Point3D.
          This is the bracket operator overload so that the X, Y, and Z values within this point
          can be accessed via an array-like interface.
          </summary>
            <param name="index"> The index used within the brackets must be either 0, 1, or 2 to access
                     either the X, Y, or Z value within this Point3D.
                     </param>
            <exception cref="T:System.IndexOutOfRangeException"> Thrown if an index is passed in that is out of the allowed range.
                                            </exception>
        </member>
        <member name="M:Mastercam.Math.Point3D.Dot(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is the dot product method so that two points can have their dot products
          calculated.
          </summary>
            <param name="Point1"> This is the first point in the dot product operation. </param>
            <param name="Point2"> This is the second point in the dot product operation. </param>
            <returns> The value of the dot product between the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.op_Multiply(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is the dot product operator overload so that two points can have their dot
          products calculated.
          </summary>
            <param name="Point1"> This is the first point in the dot product operation. </param>
            <param name="Point2"> This is the second point in the dot product operation. </param>
            <returns> The value of the dot product between the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.Cross(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is a cross product method so that two points can have their cross product
          calculated.
          </summary>
            <param name="Point1"> This is the first point in the cross product operation. </param>
            <param name="Point2"> This is the second point in the cross product operation. </param>
            <returns> The cross product between the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.op_Division(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is the cross product operator overload so that two points can have their cross
          product calculated.
          </summary>
            <param name="Point1"> This is the first point in the cross product operation. </param>
            <param name="Point2"> This is the second point in the cross product operation. </param>
            <returns> The cross product between the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.Subtract(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is a subtraction method so that two points can be subtracted from one another.
          </summary>
            <param name="Point1"> This is the point that will be subtracted from. </param>
            <param name="Point2"> This is the point whose values will be subtracted. </param>
            <returns> A new point representing the vector subtraction of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.op_Subtraction(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is the subtraction operator overload so that two points can be subtracted from one
          another.
          </summary>
            <param name="Point1"> This is the point that will be subtracted from. </param>
            <param name="Point2"> This is the point whose values will be subtracted. </param>
            <returns> A new point representing the vector subtraction of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.Add(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is an addition method so that two points can be added. </summary>
            <param name="Point1"> This is the first point in the point addition operation. </param>
            <param name="Point2"> This is the second point in the point addition operation. </param>
            <returns> A new point representing the vector addition of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.op_Addition(Mastercam.Math.Point3D,Mastercam.Math.Point3D)">
            <summary> This is the addition operator overload so that two points can be added using an
          intuitive, mathematical method.
          </summary>
            <param name="Point1"> This is the first point in the point addition operation. </param>
            <param name="Point2"> This is the second point in the point addition operation. </param>
            <returns> A new point representing the vector addition of the two input points. </returns>
        </member>
        <member name="M:Mastercam.Math.Point3D.ToString">
            <summary> Convert this object into a string representation. </summary>
            <returns> A text string that represents this object. </returns>
        </member>
        <member name="F:Mastercam.Math.Point3D.z">
            <summary> Gets or sets the Z value of the point object. </summary>
        </member>
        <member name="F:Mastercam.Math.Point3D.y">
            <summary> Gets or sets the Y value of the point object. </summary>
        </member>
        <member name="F:Mastercam.Math.Point3D.x">
            <summary> Gets or sets the X value of the point object. </summary>
        </member>
        <member name="M:Mastercam.Math.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the Point3D class. </summary>
            <param name="XValue"> The value to become this point's X value. </param>
            <param name="YValue"> The value to become this point's Y value. </param>
            <param name="ZValue"> The value to become this point's Z value. </param>
        </member>
        <member name="M:Mastercam.Math.Point3D.ConvertMastercam(System.Double*)">
            <summary> "Converts" this NET-Hook type to the corresponding Mastercam math type. </summary>
            <param name="mcamPoint"> [in,out] The Mastercam math type. </param>
        </member>
        <member name="M:Mastercam.Math.Point3D.ConvertMastercam(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> "Converts" this NET-Hook type to the corresponding Mastercam math type. </summary>
            <param name="MCamPoint"> [out] The Mastercam math type. </param>
        </member>
        <member name="M:Mastercam.Math.Point3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Initializes a new instance of the Point3D class. </summary>
            <param name="pointGeometry"> The Mastercam 3D point geometry data. </param>
        </member>
        <member name="M:Mastercam.Math.Point3D.#ctor(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes a new instance of the Point3D class. </summary>
            <param name="PointGeometry"> The Mastercam 3D point geometry data. </param>
        </member>
        <member name="T:Mastercam.Math.Point3D">
            <summary> This class is used as a mathematical representation of a 3D Point. </summary>
            <remarks> The operator overloads in this class utilize the VectorManager class for their operations.
          </remarks>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.ConstructionView3D">
            <summary> Gets or sets a value indicating whether the construction mode is set to 3D. </summary>
            <value> true if the construction view is 3D, else, false if it is set to 2D. </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.GradientBackground">
            <summary> Gets or sets the Gradient Background 'direction' setting within Mastercam. </summary>
            <remarks> Changing the this setting may need to be followed by a
          graphics repaint in order to take effect.
          Valid settings are:
          0 = GRADIENT_NONE (Use the Graphics background color)
          1 = GRADIENT_HORIZONTAL
          2 = GRADIENT_VERTICAL
          3 = GRADIENT_DIAGONAL
          </remarks>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.GradientBackgroundEndColor">
            <summary> Gets or sets the Gradient Background 'ending' color within Mastercam. </summary>
            <remarks> Changing the this setting may need to be followed by a graphics repaint
          in order to take effect. </remarks>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0-255) of the gradient background start. </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.GradientBackgroundStartColor">
            <summary> Gets the Gradient Background 'starting' color within Mastercam. </summary>
            <remarks> Note that this setting is now the same as BackgroundColor.
		  Changing the this setting may need to be followed by a graphics repaint
          in order to take effect. </remarks>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0-255) of the gradient background start. </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.BackgroundColor">
            <summary> Gets or sets the Graphics Screen Background color within Mastercam. </summary>
            <remarks> Note that this setting is now the same as GradientBackgroundStartColor.
		  Changing the current background color may need to be followed by a
          graphics repaint in order to take effect.
          </remarks>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.PlaneColor">
            <summary> Gets the active 'Default Plane Color' (for new Planes) within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.AxisColor">
            <summary> Gets or sets the active 'Axis Color' within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.LiveEntityColor">
            <summary> Gets or sets the active 'Live Entity Color' within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.SelectColor">
            <summary> Gets or sets the active 'Select Color' within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.ResultColor">
            <summary> Gets or sets the active 'Result Color' within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.GroupColor">
            <summary> Gets or sets the active 'Group Color' within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.SolidsColor">
            <summary> Gets or sets the active 'Solids Color' within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.SurfaceEdgeColor">
            <summary> Gets or sets the active 'Surface Edge Color' within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.SurfaceFrontColor">
            <summary> Gets or sets the active 'Surface Front Color' within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.MainColor">
            <summary> Gets or sets the active 'Wireframe' geometry color within Mastercam. </summary>
            <remarks> Note there is more colors data available in the <see cref="T:Mastercam.Support.Colors" /> class. </remarks>
            <value> The color# (0 - 255). </value>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.CurveChordalDeviation">
            <summary> Gets the current Curve Chordal Deviation used within Mastercam. </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.SystemTolerance">
            <summary> Gets the current system tolerance used within Mastercam. </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.Metric">
            <summary> Gets or sets the metric flag within Mastercam. </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.MainLevel">
            <summary> Gets or sets the currently active "main" geometry level within Mastercam. </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.TempDirectory">
            <summary> Gets the location of the temp directory Mastercam is using. </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.UserDirectory">
            <summary> Gets the user files directory from Mastercam. </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.SharedDirectory">
            <summary> Gets the shared user directory from Mastercam. </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.MainDirectory">
            <summary> Gets the main directory (install or working dir) from Mastercam. </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.CurrentDirectory">
            <summary> Gets the current file directory within Mastercam. </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.LineWidth">
            <summary> Gets or sets the property the current line width within Mastercam.
          Valid settings are: 1 - 5
          </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.LineStyle">
            <summary> Gets or sets the current line style type within Mastercam.
          </summary>
        </member>
        <member name="P:Mastercam.IO.SettingsManager.PointStyle">
            <summary> Gets or sets the current point style type within Mastercam.
          </summary>
        </member>
        <member name="M:Mastercam.IO.SettingsManager.#ctor">
            <summary> Initializes a new instance of the SettingsManager class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.IO.SettingsManager">
            <summary> This class is used to modify common settings within the Mastercam environment. </summary>
        </member>
        <member name="M:Mastercam.Support.Colors.GetRecentColorIndexes(Mastercam.Support.Colors.ColorId)">
            <summary> Gets the Recent Colors list for a specific "named" color. </summary>
            <param name="colorId"> The ID of the "named" color. </param>
            <returns> A list of the recent color indexes. </returns>
        </member>
        <member name="M:Mastercam.Support.Colors.AddRecentColorIndex(Mastercam.Support.Colors.ColorId,System.Byte)">
            <summary> Adds a ColorIndex to the Recent Colors list for a specific "named" color. </summary>
            <param name="colorId">    The ID of the "named" color. </param>
            <param name="colorIndex"> The new index value. </param>
        </member>
        <member name="M:Mastercam.Support.Colors.SetColorIndex(Mastercam.Support.Colors.ColorId,System.Byte)">
            <summary> Sets the index for a specific "named" color. </summary>
            <param name="colorId"> The ID of the "named" color. </param>
            <param name="value">   The new index value. </param>
        </member>
        <member name="M:Mastercam.Support.Colors.GetColorIndex(Mastercam.Support.Colors.ColorId)">
            <summary> Gets the index for a specific "named" color. </summary>
            <param name="colorId"> The ID of the "named" color. </param>
            <returns> The index if the specified color. </returns>
        </member>
        <member name="M:Mastercam.Support.Colors.SetColorAtIndex(System.Byte,System.Drawing.Color)">
            <summary> Sets the Color data at a specific index. </summary>
            <param name="index"> Zero-based index of the color (0-255). </param>
            <param name="color"> The (RGB) Color data to set for the color at this index. </param>
        </member>
        <member name="M:Mastercam.Support.Colors.GetColorAtIndex(System.Byte)">
            <summary> Gets the Color data at a specific index. </summary>
            <param name="index"> Zero-based index of the color (0-255). </param>
            <returns> The Color data for the color at this index. </returns>
        </member>
        <member name="M:Mastercam.Support.Colors.GetColorCount">
            <summary> Gets the count of entries in the Color Table. </summary>
            <returns> The count. </returns>
        </member>
        <member name="T:Mastercam.Support.Colors.ColorId">
            <summary> IDs for all of the "named" colors in the system. </summary>
        </member>
        <member name="M:Mastercam.Support.Colors.#ctor">
            <summary> Initializes a new instance of the Colors class. </summary>
            <remarks> Private Constructor.
          Made private so as not to allow anyone to create an instance of it.
          </remarks>
        </member>
        <member name="T:Mastercam.Support.Colors">
            <summary> This class handles the manipulation of Mastercam Color settings. </summary>
        </member>
        <member name="M:Cnc.GetColorTableManager">
            <summary> Accessor for the Singleton instance of IColorTableManager. </summary>
            <returns> The singleton. </returns>
        </member>
        <member name="M:Cnc.IColorTableManager.GetRecentColorIndexes(Cnc.IColorTableManager.ColorId)">
            <summary> Gets the Recent Colors list for a specific ColorId. </summary>
            <param name="colorId"> Id of the color. </param>
        </member>
        <member name="M:Cnc.IColorTableManager.AddRecentColorIndex(Cnc.IColorTableManager.ColorId,System.Byte)">
            <summary> Adds a ColorIndex to the Recent Colors list for a specific ColorId. </summary>
            <param name="colorId"> Id of the color. </param>
            <param name="colorIndex"> The new value. </param>
        </member>
        <member name="M:Cnc.IColorTableManager.SetColorIndex(Cnc.IColorTableManager.ColorId,System.Byte)">
            <summary> Sets the ColorIndex for a specific ColorId. </summary>
            <param name="colorId"> Id of the color. </param>
            <param name="value"> The new value. </param>
        </member>
        <member name="M:Cnc.IColorTableManager.GetColorIndex(Cnc.IColorTableManager.ColorId)">
            <summary> Gets the ColorIndex for a specific ColorId. </summary>
            <param name="colorId"> Id of the color. </param>
            <returns> The value. </returns>
        </member>
        <member name="M:Cnc.IColorTableManager.SetColorAtIndex(System.Byte,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the Color at a specific index. </summary>
            <param name="index"> Zero-based index of the color. </param>
            <param name="color"> The color. </param>
        </member>
        <member name="M:Cnc.IColorTableManager.GetColorAtIndex(System.Byte)">
            <summary> Gets the Color at a specific index. </summary>
            <param name="index"> Zero-based index of the color. </param>
            <returns> The color at index. </returns>
        </member>
        <member name="M:Cnc.IColorTableManager.GetColorCount">
            <summary> Gets count of entries in the Color Table. </summary>
            <returns> The count. </returns>
        </member>
        <member name="T:Cnc.IColorTableManager.ColorId">
            <summary> Ids for all named colors in the system. </summary>
        </member>
        <member name="M:Cnc.IColorTableManager.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="T:Cnc.IColorTableManager">
            <summary> Interface for ColorTableManager. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.ViewType">
            <summary> Values that represent View (aka. Plane) types. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.EventLogFileType">
            <summary>This enumeration specifies the types of file ext to save the contents of the event logger to disk. </summary>&gt;
</member>
        <member name="F:Mastercam.IO.Types.EventLogFileType.CSV">
            <summary> Comma Delimited (CSV) file </summary>
        </member>
        <member name="F:Mastercam.IO.Types.EventLogFileType.XML">
            <summary> XML file. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.MessageLogAction">
            <summary>This enumeration specifies the types of message logging used by the event logger. </summary>&gt;
</member>
        <member name="F:Mastercam.IO.Types.MessageLogAction.LogMessageAndDisplay">
            <summary> Log a message and display a message box. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.MessageLogAction.LogMessageOnly">
            <summary> Log a message only. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.MessageSeverityType">
            <summary>  This enumeration specifies the types of message severities used by the event logger.  </summary>m&gt;
</member>
        <member name="F:Mastercam.IO.Types.MessageSeverityType.ErrorMessage">
            <summary> An event to be logged with a error notification. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.MessageSeverityType.WarningMessage">
            <summary> An event to be logged with a warning notification. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.MessageSeverityType.InformationalMessage">
            <summary> An event to be logged with an informational notification. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.GradientOption">
            <summary>  This enumeration specifies the different gradient background options in Mastercam. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GradientOption.Diagonal">
            <summary> The gradient background is on and set to a diagonal gradient. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GradientOption.Vertical">
            <summary> The gradient background is on and set to a vertical gradient. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GradientOption.Horizontal">
            <summary> The gradient background is on and set to a horizontal gradient. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GradientOption.Off">
            <summary> Gradient background is off (use the background color only). </summary>
        </member>
        <member name="T:Mastercam.IO.Types.GraphicsViewType">
            <summary>  This enumeration specifies the different types of Mastercam graphics views.  </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GraphicsViewType.Trimetric">
            <summary> A trimetric graphics view. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GraphicsViewType.IsoReverse">
            <summary> A 'reverse' isometric graphics view. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GraphicsViewType.Iso">
            <summary> An isometric graphics view, which looks at the part from a combined view
		  of the top, front, and left sides. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GraphicsViewType.Left">
            <summary> A graphics view looking leftward from the left side of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GraphicsViewType.Right">
            <summary> A graphics view looking rightward from the right side of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GraphicsViewType.Bottom">
            <summary> A graphics view looking up from the bottom of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GraphicsViewType.Back">
            <summary> A graphics view looking backwards from the back of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GraphicsViewType.Front">
            <summary> A graphics view looking forward from the front of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.GraphicsViewType.Top">
            <summary> A graphics view looking down from the top of the WCS. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.SystemPlaneType">
            <summary> This enumeration which specifies the different types of Mastercam "reserved" (system) Planes. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.SystemPlaneType.Trimetric">
            <summary> The Trimetric plane. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.SystemPlaneType.IsoReverse">
            <summary> The 'reverse' Isometric plane. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.SystemPlaneType.Iso">
            <summary> An Isometric plane, which looks at the part from a combined view of the top, front, and left sides. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.SystemPlaneType.Left">
            <summary> The Left side plane, looking leftward from the left side of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.SystemPlaneType.Right">
            <summary> The Right side plane, looking rightward from the right side of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.SystemPlaneType.Bottom">
            <summary> The Bottom plane, looking up from the bottom of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.SystemPlaneType.Back">
            <summary> The Back plane, looking backwards from the back of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.SystemPlaneType.Front">
            <summary> The Front plane, looking forward from the front of the WCS. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.SystemPlaneType.Top">
            <summary> The Top plane, looking down from the top of the WCS.. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.QuickMaskType">
            <summary> This enumeration specifies the different types of a QuickMask selection mode. </summary>
            <remarks> Used with SelectGeometryByMask(QuickMaskType Mask) </remarks>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.PolygonalMeshes">
            <summary> Select all Meshes. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.NamedGroups">
            <summary> This requires the user to select the Named Group. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Result">
            <summary> Select all entities in the active Xform Result. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Group">
            <summary> Select all entities in the active Xform Group. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Level">
            <summary> This requires the user to select the Level. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Color">
            <summary> This requires the user to select the Color. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Wireframe">
            <summary> Select all Wireframe type geometry. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Solids">
            <summary> Select all Solids. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Surfaces">
            <summary> Select all Surfaces. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.SurfaceCurves">
            <summary> Select all SurfaceCurves. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Splines">
            <summary> Select all Splines. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Arcs">
            <summary> Select all Arcs. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Lines">
            <summary> Select all Lines. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.QuickMaskType.Points">
            <summary> Select all Points. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.PreSelectionType">
            <summary>  This enumeration specifies the different types of pre-selection within Mastercam. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PreSelectionType.Only">
            <summary> Use only preselected geometry. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PreSelectionType.On">
            <summary> Use preselected geometry. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PreSelectionType.Clear">
            <summary> Clear all preselected geometry. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PreSelectionType.Off">
            <summary> Don't use pre-selection at all. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.BoxSelectionType">
            <summary>  This enumeration specifies the different box selection modes within Mastercam. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.BoxSelectionType.Outside">
            <summary> Select only geometry completely outside of the box. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.BoxSelectionType.OutsideAndIntersecting">
            <summary> Select only geometry outside of and intersecting the box. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.BoxSelectionType.Intersecting">
            <summary> Select only geometry intersecting the box. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.BoxSelectionType.InsideAndIntersecting">
            <summary> Select geometry only completely within and intersecting the box. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.BoxSelectionType.Inside">
            <summary> Select only geometry completely within the box. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.PointMask">
            <summary>  This enumeration specifies the different types of points within Mastercam. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.EndPoint2">
            <summary> A point representing the second endpoint of some geometry. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.EndPoint1">
            <summary> A point representing the first endpoint of some geometry. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.GridPoint">
            <summary> A grid point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.BoltPoint">
            <summary> A bolt-circle point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.ArcPoint">
            <summary> An arc point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.Entity">
            <summary> Any point entity. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.Values">
            <summary> A point with valid values. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.Sketch">
            <summary> A sketcher point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.QuadPoint">
            <summary> A point on a quad. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.Relative">
            <summary> A relative point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.Last">
            <summary> A last point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.PointGeometry">
            <summary> Simple point geometry. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.MidPoint">
            <summary> A midpoint. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.Intersect">
            <summary> An intersection point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.EndPoint">
            <summary> An endpoint. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.Center">
            <summary> A center point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.Origin">
            <summary> An origin point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointMask.Null">
            <summary> No specific point type. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.LineStyleType">
            <summary> This enumeration specifies the different line geometry styles within Mastercam. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.LineStyleType.ZBreak">
            <summary> A line style where there are multi-directional grooves along the line. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.LineStyleType.Phantom">
            <summary> A phantom line style. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.LineStyleType.Centerline">
            <summary> A center-line line style. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.LineStyleType.Hidden">
            <summary> A line style where the line is hidden. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.LineStyleType.Solid">
            <summary> A solid line style. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.PointStyleType">
            <summary> This enumeration specifies the different styles of point geometry available in Mastercam.
          </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointStyleType.WireCut">
            <summary> A wire cut point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointStyleType.WireThread">
            <summary> A wire thread point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointStyleType.Square">
            <summary> A square shaped point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointStyleType.Circle">
            <summary> A circle shaped point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointStyleType.XPoint">
            <summary> An X shaped point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointStyleType.Cross">
            <summary> A cross shaped point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointStyleType.Dot">
            <summary> A simple dot shaped point. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.PointStyleType.Star">
            <summary> A star shaped point. </summary>
        </member>
        <member name="T:Mastercam.IO.Types.DialogReturnType">
            <summary> This enumeration specifies the different return types of dialogs within Mastercam. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.DialogReturnType.No">
            <summary> Dialog returned because the no button was pushed. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.DialogReturnType.Yes">
            <summary> Dialog returned because the yes button was pushed. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.DialogReturnType.Okay">
            <summary> Dialog returned because the okay button was pushed. </summary>
        </member>
        <member name="F:Mastercam.IO.Types.DialogReturnType.Cancel">
            <summary> Dialog returned because the cancel button was pushed. </summary>
        </member>
        <member name="M:SaveMastercamEventLog(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamEventLogFileType)">
            <summary> Saves the Mastercam event log file to disk. </summary>
            <param name="fileName"> The name of the file to save. </param>
            <param name="fileType">  The type of the file to save, xml (default) or comma delimetered. </param>
        </member>
        <member name="M:ShowMastercamEventLog">
            <summary> 
Send MCLogr a message to have it show the Mastercam event log file. 
</summary>
        </member>
        <member name="T:MastercamEventLogFileType">
            <summary> 
Values that represent the type of file to save the event log to disk. 
</summary>
        </member>
        <member name="T:Mastercam.Math.IMathObject3D">
            <summary> Interface for IMathObject3D. </summary>
        </member>
        <member name="T:Mastercam.Math.IMathObject2D">
            <summary> Interface for IMathObject2D. </summary>
        </member>
        <member name="T:Mastercam.Math.IMathObjectBase">
            <summary> Interface for IMathObjectBase. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_TipAngle">
            <summary> The tip angle on the tool (if applicable). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_Diameter">
            <summary> The diameter of the tool. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_CornerRadius">
            <summary> The corner radius on the tool (if applicable). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_Length">
            <summary> The (overall) length of the tool. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_ShoulderLength">
            <summary> The length of the shoulder of the tool. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_FluteLength">
            <summary> The length of the flutes on the tool. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_Chuck">
            <summary> The chuck (description) on the tool. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_MfgToolCode">
            <summary> The manufacturers tool code data on the tool. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_Name">
            <summary> The name (description) on the tool. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_Slot">
            <summary> The slot # of the tool. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_PilotDia">
            <summary> The pilot diameter on the tool (if applicable). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_toolTypeID">
            <summary> The tool type identifier. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_TaperLength">
            <summary> The taper length on the tool (if applicable). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_ShoulderDia">
            <summary> The should diameter of the tool (if applicable). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_ShankDia">
            <summary> The shank diameter of the tool (if applicable). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_HolderLength">
            <summary> The tool holder length. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_HolderDia">
            <summary> The tool holder diameter. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_ToolDisplay">
            <summary> The tool display mode. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_Flutes">
            <summary> The number of flutes on the tool (if applicable). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_RadiusType">
            <summary> The radius type on the tool (if applicable). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_LevelNumber">
            <summary> The level number of the tool profile (if applicable). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_DrillToolAttribs">
            <summary> Attributes specific to drill type tools. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.m_MillToolAttribs">
            <summary> Attributes specific to mill type tools. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.DrillToolAttributes">
            <summary> Tool parameters that are 'Drill type' tool specific. </summary>
            <remarks> Use the <see cref="P:Mastercam.Database.Tool.IsDrillTool" /> property to determine if this data is "active". </remarks>
            <value> The data structure containing these Drill type tool only values. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.MillToolAttributes">
            <summary> Gets or sets the Tool parameters that are 'Mill type' tool specific. </summary>
            <remarks> Use the <see cref="P:Mastercam.Database.Tool.IsMillTool" />  property to determine if this data is "active". </remarks>
            <value> The data structure containing these Mill type tool only values. </value>
        </member>
        <member name="F:Mastercam.Database.Tool.DrillToolSpecificAttribs.FineBoreShift">
            <summary> The Drill Tool 'shift' value (% of tool diameter shift value (for fine boring). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.DrillToolSpecificAttribs.TapRootDia">
            <summary> The Drill Tool 'root_dia' value (tap: root of threads). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.DrillToolSpecificAttribs.SpotShldrAngle">
            <summary> The Drill Tool 'angle' value (spot: shoulder angle). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.DrillToolSpecificAttribs.Dwell">
            <summary> The Drill Tool 'dwell' value (pre-stored dwell in seconds). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.DrillToolSpecificAttribs.ChipBreak">
            <summary> The Drill Tool 'chip_break' value (% of tool diameter). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.DrillToolSpecificAttribs.PeckClear">
            <summary> The Drill Tool 'peck_clr' value (% of tool diameter). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.DrillToolSpecificAttribs.Peck2">
            <summary> The Drill Tool 'peck2' value (% of tool diameter). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.DrillToolSpecificAttribs.Peck1">
            <summary> The Drill Tool 'peck1' value (% of tool diameter). </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.DrillToolSpecificAttribs.DrillCycle">
            <summary>The Drill 'cycle' type. </summary>
        </member>
        <member name="T:Mastercam.Database.Tool.DrillToolSpecificAttribs">
            <summary> Tool parameters that are 'Drill type' tool specific. </summary>
            <remarks> Use the <see cref="P:Mastercam.Database.Tool.IsDrillTool" /> property to determine if this data is "active". </remarks>
        </member>
        <member name="F:Mastercam.Database.Tool.MillToolSpecificAttribs.ThrdMillFaceAngle">
            <summary>Thread mill : thread face angle (usually 1/2 included angle).</summary>
        </member>
        <member name="F:Mastercam.Database.Tool.MillToolSpecificAttribs.ThrdMillRootDia">
            <summary> Thread mill : root diameter of threads. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.MillToolSpecificAttribs.TipDia">
            <summary> Chamfer mill: diameter at tip of tool. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.MillToolSpecificAttribs.FinishZ">
            <summary> All mills: % of tool diameter for Z step-over in finishing. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.MillToolSpecificAttribs.FinishXY">
            <summary> All mills: % of tool diameter for XY step-over in finishing. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.MillToolSpecificAttribs.RoughZ">
            <summary> All mills: % of tool diameter for Z step-over in roughing. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.MillToolSpecificAttribs.RoughXY">
            <summary> All mills: % of tool diameter for XY step-over in finishing. </summary>
        </member>
        <member name="F:Mastercam.Database.Tool.MillToolSpecificAttribs.CapableOf">
            <summary> All mills: capable of ROUGH, FINISH or BOTH </summary>
        </member>
        <member name="T:Mastercam.Database.Tool.MillToolSpecificAttribs">
            <summary> Tool parameters that are 'Mill type' tool specific. </summary>
            <remarks> Use the <see cref="P:Mastercam.Database.Tool.IsMillTool" /> property to determine if this data is "active". </remarks>
        </member>
        <member name="P:Mastercam.Database.Tool.IsMetric">
            <summary> Gets or sets a value indicating whether the values are Metric. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.Threads">
            <summary> Gets or sets the Threads per inch or thread pitch (mm). </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.HolderLength">
            <summary> Gets or sets the Holder Length for the tool. </summary>
            <value> Cannot be less than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.HolderDia">
            <summary> Gets or sets the Holder Diameter for the tool .</summary>
            <value> Cannot be less than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.ShankDia">
            <summary> Gets or sets the Shank Diameter for the tool. </summary>
            <value> Cannot be less than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.TaperLength">
            <summary> Gets or sets the portion of tool length that is tapered, beginning at top of shoulder and
          proceeding up.
          </summary>
            <value> Cannot be less than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.ShoulderDia">
            <summary> Gets or sets the Shoulder Diameter for the tool. </summary>
            <value> Cannot be less than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.LevelNumber">
            <summary> Gets or sets the Level Number for the tool profile. </summary>
            <value> Cannot be less than one!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.TipAngle">
            <summary> Gets or sets the tool's Tip Angle. </summary>
            <value> Cannot be less than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.Flutes">
            <summary> Gets or sets the number of flutes on the tool. </summary>
            <value> Cannot be less than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.RadiusType">
            <summary> Gets or sets the ToolRadiusType; None, Corner or Full. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.RPM">
            <summary> Gets or sets the spindle RPM. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.RetractFeed">
            <summary> Gets or sets the retract feedrate. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.PlungeFeed">
            <summary> Gets or sets the plunge feedrate. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.Feed">
            <summary> Gets or sets the feedrate. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.ToolTypeID">
            <summary> Gets the tool's Type ID code .</summary>
        </member>
        <member name="P:Mastercam.Database.Tool.Chuck">
            <summary> Gets or sets the Chuck (comment string). </summary>
            <remarks> Maximum length of 120 characters. </remarks>
        </member>
        <member name="P:Mastercam.Database.Tool.MfgToolCode">
            <summary> Gets or sets the Mfg's tool code (comment string). </summary>
            <remarks> Maximum length of 120 characters. </remarks>
        </member>
        <member name="P:Mastercam.Database.Tool.FileName">
            <summary> Gets or sets the custom tool reference file. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.ToolDisplay">
            <summary> Gets or sets the tool display mode: auto=0, file=1, level=2, custom stored=3. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.PilotDia">
            <summary> Gets or sets the pilot diameter: &lt;=0.0 center cutting, &gt; 0 required 'pre-drilled' hole. </summary>
            <value> Cannot be less than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.MatlFeedPerTooth">
            <summary> Gets or sets the percentage of material feed per tooth/rev value. (for feed calc.) </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.MatlSFM">
            <summary> Gets or sets the percentage of material sfm value. (for feed calc.) </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.SpindleRotation">
            <summary> Gets or sets the Spindle rotation direction: 0=CW or 1=CCW </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.Slot">
            <summary> Gets the Internal tool ID# </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.Material">
            <summary> Gets or sets the tool Material: HSS, CAR, etc. (see assocvar.h) </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.Coolant">
            <summary> Gets or sets the Coolant Mode; Off, Flood, Mist, Tool (Spindle). </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.Name">
            <summary> Gets or sets the "name" of the tool. </summary>
            <remarks> Maximum length of 120 characters. </remarks>
        </member>
        <member name="P:Mastercam.Database.Tool.ShoulderLength">
            <summary> Gets or sets the shoulder length of the tool. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.FluteLength">
            <summary> Gets or sets the flute length of the tool .</summary>
        </member>
        <member name="P:Mastercam.Database.Tool.Length">
            <summary> Gets or sets the (over-all) length of the tool (NOT including the holder). </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.DiameterOffset">
            <summary> Gets or sets the diameter offset register of the tool. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.LengthOffset">
            <summary> Gets or sets the length offset register of the tool. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.Number">
            <summary> Gets or sets the tool number. </summary>
        </member>
        <member name="P:Mastercam.Database.Tool.CornerRadius">
            <summary>Gets or sets the corner radius of the current tool. </summary>
            <value> Cannot be less than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.Diameter">
            <summary> Gets or sets the tool diameter. </summary>
            <value> Must be greater than zero!. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.IsMillTool">
            <summary> Gets a value indicating if this tool a "Mill type" tool. </summary>
            <remarks> Use to determine if the <see cref="P:Mastercam.Database.Tool.MillToolAttributes" /> data is "active". </remarks>
            <value> true if this object is mill type tool, false if not. </value>
        </member>
        <member name="P:Mastercam.Database.Tool.IsDrillTool">
            <summary> Gets a value indicating if this tool a "Drill type" tool. </summary>
            <remarks> Use to determine if the <see cref="P:Mastercam.Database.Tool.DrillToolAttributes" /> data is "active". </remarks>
            <value> true if this object is drill type tool, false if not. </value>
        </member>
        <member name="M:Mastercam.Database.Tool.EditTool">
            <summary> Launches the dialog to allow a user to edit the current tool object. </summary>
            <returns> True if the tool was successfully edited and false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Tool.Retrieve">
            <summary> Updates the current tool object with any changes that have been made to the version
          in the Mastercam database.
          </summary>
            <returns> True if the tool was successfully updated and false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Tool.Delete">
            <summary> Deletes the current tool object from the Mastercam database. </summary>
            <remarks> Note that once the tool object has been deleted from the Mastercam database it will
          still exist locally, and can be re-committed at a later time.
          </remarks>
            <returns> True if the tool was successfully deleted from the Mastercam database and false if not.
          </returns>
            <exception cref="T:Mastercam.App.Exceptions.EntityInvalidException">    This exception will be thrown if the object
                                              being deleted is already marked as an
                                              Invalid, indicating that it doesn't exist
                                              in the Mastercam database anyway.
                                              </exception>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException">        Thrown if for some reason this object is
                                              supposed to be valid but the entity is
                                              no longer in the Mastercam database.
                                              </exception>
            <exception cref="T:Mastercam.App.Exceptions.EntityWriteFailedException"> Thrown if Mastercam is unable to write the
                                              entity changes to the database for some
                                              reason.
                                              </exception>
        </member>
        <member name="M:Mastercam.Database.Tool.Validate">
            <summary> Validates whether or not the current tool object is a valid Mastercam database entity.
          </summary>
            <returns> True if the tool is already in the Mastercam database and false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Tool.Commit">
            <summary> Takes the current tool object and commits it to the Mastercam database. </summary>
            <returns> True if the tool was successfully committed and false if not. </returns>
            <exception cref="T:Mastercam.App.Exceptions.IDNotFoundException"> Thrown if for some reason this object is
                                       supposed to be valid but the entity is no
                                       longer in the Mastercam database.
                                       </exception>
            <exception cref="T:Mastercam.App.Exceptions.EntityWriteFailedException"> Thrown if Mastercam is unable to write the
                                              entity changes to the database for some
                                              reason.
                                              </exception>
        </member>
        <member name="M:Mastercam.Database.Tool.ValidateToolData">
            <summary> Makes sure the data is "valid" for the various tool types before Committing.
          </summary>
        </member>
        <member name="M:Mastercam.Database.Tool.ToolIsDrill">
            <summary> Is this tool a "Drill type" tool? </summary>
            <remarks> Used to determine if the <see cref="P:Mastercam.Database.Tool.DrillToolAttributes" /> data is "active". </remarks>
            <returns> true or false. </returns>
        </member>
        <member name="M:Mastercam.Database.Tool.ToolIsMill">
            <summary> Is this tool a "Mill type" tool? </summary>
            <remarks> Used to determine if the MillToolAttributes data is "active". </remarks>
            <returns> true or false. </returns>
        </member>
        <member name="M:Mastercam.Database.Tool.SettingsTo(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Uploads the current object's settings to this Mastercam type. </summary>
            <param name="Tl"> The tool object to upload object settings to. </param>
        </member>
        <member name="M:Mastercam.Database.Tool.SettingsFrom(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Loads the current object's settings from this Mastercam type. </summary>
            <param name="Tl"> The tool object to load object settings from. </param>
        </member>
        <member name="M:Mastercam.Database.Tool.InitTool(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes a Mastercam tool structure with default values. </summary>
            <param name="Tl"> The tool structure to be initialized. </param>
        </member>
        <member name="M:Mastercam.Database.Tool.LoadDefaults(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads the default values for a given tool object from the tool structure passed in.</summary>
            <param name="Tl">The tool structure to use as defaults for this tool object.</param>
        </member>
        <member name="M:Mastercam.Database.Tool.Retrieve(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves a tool structure from the Mastercam database. </summary>
            <param name="Tl"> The tool structure to be retrieved. </param>
            <returns> True if the tool was retrieved from the database successfully; false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Tool.Delete(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes a tool structure from the Mastercam database. </summary>
            <param name="Tl"> The tool structure to be deleted. </param>
            <returns> True if the tool was deleted from the database successfully; false if not.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Tool.Validate(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Validates that a given tool structure is already in the Mastercam database.</summary>
            <param name="Tl">The tool structure to be validated.</param>
            <returns>True if the tool is already in the database; false if not.</returns>
        </member>
        <member name="M:Mastercam.Database.Tool.Commit(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Commits a tool structure to the Mastercam database. </summary>
            <param name="Tl"> The tool structure to be committed. </param>
            <returns> True if the commit was successful; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Tool.#ctor(System.Int32)">
            <summary> ID Lookup Constructor. Attempts to retrieve a tool with the given ID from the
          Mastercam database and use that to initialize this tool object.
          </summary>
            <remarks> If no matching tool is found in the Mastercam database, the object is initialized
          to default values.
          </remarks>
            <param name="ID"> The ID of the tool to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Database.Tool.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String,Mastercam.Database.Types.ToolType)">
            <summary> Initialize a new Tool object
          All members are initialized to the values passed in.
          </summary>
            <param name="Diameter">       The tool diameter value to initialize this object to. </param>
            <param name="CornerRadius">   The tool corner radius value to initialize this object to.
                              </param>
            <param name="Number">         The tool number to initialize this object to. </param>
            <param name="LengthOffset">   The tool length offset value to initialize this object to.
                              </param>
            <param name="DiameterOffset"> The tool diameter offset value to initialize this object to.
                              </param>
            <param name="Length">         The tool length to initialize this object to. </param>
            <param name="FluteLength">    The tool flute length value to initialize this object to.
                              </param>
            <param name="ShoulderLength"> The tool shoulder length value to initialize this object to.
                              </param>
            <param name="Name">           The tool name to initialize this object to. </param>
            <param name="ToolTypeID">     The tool Type ID code. </param>
        </member>
        <member name="M:Mastercam.Database.Tool.#ctor(Mastercam.Database.Types.ToolType)">
            <summary> Initialize a new Tool object.
          All members are given default values. </summary>
            <param name="toolTypeID"> Identifier for the tool type. </param>
        </member>
        <member name="M:Mastercam.Database.Tool.LoadDefaults(Mastercam.Database.Types.ToolType)">
            <summary> Loads the default values for a given tool object. </summary>
            <param name="toolTypeID"> Identifier for the tool type. </param>
        </member>
        <member name="M:Mastercam.Database.Tool.LoadDefaults">
            <summary> Loads the default values for a given tool object. </summary>
        </member>
        <member name="T:Mastercam.Database.Tool">
            <summary> This class handles Tool object interaction between the NET-Hook operation objects
          and Mastercam operations.
          </summary>
        </member>
        <member name="F:Mastercam.Database.Entity.m_ViewID">
            <summary> This member represents the view ID of this entity in the Mastercam database
           if it's a view object.
          </summary>
        </member>
        <member name="F:Mastercam.Database.Entity.m_OpID">
            <summary> This member represents the operation ID of this entity in the Mastercam database
          if it's an operation object.
          </summary>
        </member>
        <member name="F:Mastercam.Database.Entity.m_SlotID">
            <summary> This member represents the tool ID of this entity in the Mastercam database
          if it's a tool object.
          </summary>
        </member>
        <member name="F:Mastercam.Database.Entity.m_ID">
            <summary> This member represents the geometry ID of this entity in the Mastercam database
          if it's a geometry object.
          </summary>
        </member>
        <member name="F:Mastercam.Database.Entity.m_EntityType">
            <summary> This member specifies what type of entity this object is. </summary>
        </member>
        <member name="F:Mastercam.Database.Entity.m_Valid">
            <summary> This member dictates whether this entity is considered 'valid' or not.
          (ie. whether or not it's already in the Mastercam database).
          </summary>
        </member>
        <member name="M:Mastercam.Database.Entity.LoadDefaults">
            <summary> Loads the default values for a given database entity object. </summary>
            <remarks> Abstract Declaration. </remarks>
        </member>
        <member name="M:Mastercam.Database.Entity.#ctor(System.Int16,Mastercam.Database.Types.EntityIDType)">
            <summary> Initializes a new instance of the abstract class. </summary>
            <remarks> Attempts to retrieve an entity of the given type with the given ID from the
          Mastercam database and use that to initialize this object.
          If no matching entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID">     The ID of the entity to look up in the Mastercam database. </param>
            <param name="IDType"> The type of entity to look up and initialize this object to. </param>
        </member>
        <member name="M:Mastercam.Database.Entity.#ctor(System.Int32,Mastercam.Database.Types.EntityIDType)">
            <summary> Initializes a new instance of the abstract Entity class. </summary>
            <remarks> Attempts to retrieve an entity of the given type with the given ID from the
          Mastercam database and use that to initialize this object.
          If no matching entity is found in the Mastercam database,
          the object is initialized to default values.
          </remarks>
            <param name="ID">     The ID of the entity to look up in the Mastercam database. </param>
            <param name="IDType"> The type of entity to look up and initialize this object to. </param>
        </member>
        <member name="M:Mastercam.Database.Entity.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes a new instance of the abstract Entity class. </summary>
            <remarks> Attempts to retrieve an entity with the given ID from the Mastercam database and
          use that to initialize this object.
          </remarks>
            <param name="ID"> The ID of the entity to look up in the Mastercam database. </param>
        </member>
        <member name="M:Mastercam.Database.Entity.GetView(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves a view structure from the database based on this object's ID. </summary>
            <param name="ViewEnt"> [out] The view structure that receives the resulting view data
                       found in the database.
                       </param>
            <returns> True if the entity was found successfully; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Entity.GetOp(operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves an operation structure from the database based on this object's ID.
          </summary>
            <param name="Op"> [out] The operation structure that takes all of the data if a matching
                  entity was found in the database.
                  </param>
            <returns> True if the entity was found successfully; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Entity.GetTool(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves a tool structure from the database based on this object's ID. </summary>
            <param name="Tl"> [in,out] The tool structure that takes all of the data if a matching entity
                  was found in the database.
                  </param>
            <returns> True if the entity was found successfully; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Entity.GetEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves an entity from the database based on this object's ID. </summary>
            <param name="EntityToGet"> [out] The entity structure that takes all of the data if a
                           matching entity was found in the database.
                           </param>
            <returns> True if the entity was found successfully; false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Entity.GetGeometryEptr">
            <summary> Returns the eptr of this object if it happens to be a geometry object. </summary>
            <returns> The eptr of this object if it's of the right type; a NULL value if it's the wrong
          type.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Entity.GetGeometryID">
            <summary> Returns the ID of this object if it happens to be a geometry object. </summary>
            <returns> The ID of this object if it's of the right type; a NULL value if it's the wrong
          type.
          </returns>
        </member>
        <member name="M:Mastercam.Database.Entity.GetToolID">
            <summary> Returns the ID of this object if it happens to be a tool object. </summary>
            <returns> The ID of this object if it's of the right type; a -1 if it's the wrong type.
          </returns>
        </member>
        <member name="P:Mastercam.Database.Entity.EntityType">
            <summary> This flag specifies the entity type for the current entity object. </summary>
        </member>
        <member name="P:Mastercam.Database.Entity.TimeStamp">
            <summary> Gets the database Time Stamp for this entity. </summary>
            <remarks> The entity must have already been committed to Mastercam's database for this to be valid!
          <para>
          If not, the DateTime returned is the "dawn of time" for a .NET DateTime - (midnight), January 1, 0001.
          You can check for this by comparing the TimeStamp to the .NET DateTime.MinValue.
          </para></remarks>
        </member>
        <member name="M:Mastercam.Database.Entity.Retrieve">
            <summary> Updates the current entity object with any changes that have been made to the
          version in the Mastercam database.
          </summary>
            <returns> True if the entity was successfully updated, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Entity.Delete">
            <summary> Deletes the current entity object from the Mastercam database. </summary>
            <returns> True if the entity was successfully deleted from the Mastercam database and
          false if not.
          </returns>
            <remarks> Note that once the entity object has been deleted from the Mastercam database
          it will still exist locally, and can be re-committed at a later time.
          </remarks>
        </member>
        <member name="M:Mastercam.Database.Entity.Validate">
            <summary> Validates whether or not the current entity object is a valid Mastercam database
          entry yet.
          </summary>
            <returns> True if the entity is already in the Mastercam database, else false if not.
       </returns>
        </member>
        <member name="M:Mastercam.Database.Entity.Commit">
            <summary> Takes the current entity object and commits it to the Mastercam database.
          </summary>
            <returns> True if the entity was successfully committed, else false if not. </returns>
        </member>
        <member name="M:Mastercam.Database.Entity.DatabaseReinitialize">
            <summary> Takes the current entity object and cuts it's ties with the current Mastercam
          database. This makes the entity invalid, like a newly created entity object.
          </summary>
            <remarks> Once you've called this, the entity object will be an entirely independent
          object. As such, it can be committed to the current database as an entirely
          new object or committed to an entirely new database. This also means that
          the Delete and Regenerate methods will fail until the object has been re-
          committed to a database.
          </remarks>
        </member>
        <member name="M:Mastercam.Database.Entity.#ctor">
            <summary> Initializes a new instance of the abstract Entity class. </summary>
        </member>
        <member name="T:Mastercam.Database.Entity">
            <summary> This is the base class for all database entities.
          It's methods provide generic access to database objects.
          </summary>
        </member>
        <member name="T:Mastercam.Database.Types.SolidType">
            <summary> Mask flags for selecting a Solid; Body, Face, or Edge. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.LevelsConstraints">
            <summary> The Min/Max allowable Level# in Mastercam. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.MillCutterCapableOf">
            <summary> The settings for the 'CapableOf' parameter of a Mill type tool.
   <para> See "Mastercam.Database.Tool.MillToolSpecificAttribs"for the parameters that are
          Mill "type" tool specific.</para></summary>
        </member>
        <member name="F:Mastercam.Database.Types.MillCutterCapableOf.FINISH_CUTTING">
            <summary> capable of finishing only </summary>
        </member>
        <member name="F:Mastercam.Database.Types.MillCutterCapableOf.ROUGH_CUTTING">
            <summary> capable of roughing only </summary>
        </member>
        <member name="F:Mastercam.Database.Types.MillCutterCapableOf.ROUGH_FINISH_CUTTING">
            <summary> capable of roughing and finishing </summary>
        </member>
        <member name="T:Mastercam.Database.Types.CoolantMode">
            <summary> The Coolant 'types' that can be assigned in a Tool. </summary>
        </member>
        <member name="M:Mastercam.Database.Types.GroupSelectionMask.op_Inequality(Mastercam.Database.Types.GroupSelectionMask,Mastercam.Database.Types.GroupSelectionMask)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <param name="Mask1"> This is the first mask to compare. </param>
            <param name="Mask2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Database.Types.GroupSelectionMask.op_Equality(Mastercam.Database.Types.GroupSelectionMask,Mastercam.Database.Types.GroupSelectionMask)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <param name="Mask1"> This is the first mask to compare. </param>
            <param name="Mask2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Database.Types.GroupSelectionMask.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this mask object to
          another one.
          </summary>
            <param name="obj"> [in,out] This is the mask to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Database.Types.GroupSelectionMask.Equals(Mastercam.Database.Types.GroupSelectionMask,Mastercam.Database.Types.GroupSelectionMask)">
            <summary> This is a static equality method for the purposes of comparing mask objects.
          </summary>
            <param name="Mask1"> This is the first mask to compare. </param>
            <param name="Mask2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="P:Mastercam.Database.Types.GroupSelectionMask.Result">
            <summary> Gets or sets the Result entities flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.GroupSelectionMask.Group">
            <summary> Gets or sets the Group entities flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.GroupSelectionMask.All">
            <summary> Gets or sets the Group and Result entities flag. </summary>
        </member>
        <member name="M:Mastercam.Database.Types.GroupSelectionMask.#ctor(System.Boolean,System.Boolean)">
            <summary> Initializes a new instance of the GroupSelectionMask class. </summary>
            <remarks> Sets all of the geometry type flags to the respective boolean values passed in.
          </remarks>
            <param name="Group">  The value to set the Group entities flag to. </param>
            <param name="Result"> The value to set the Result entities flag to. </param>
        </member>
        <member name="M:Mastercam.Database.Types.GroupSelectionMask.#ctor(System.Boolean)">
            <summary> Initializes a new instance of the GroupSelectionMask class. </summary>
            <remarks> Sets the selection type flags so that it would either return all geometry or no geometry.
       </remarks>
            <param name="AllTypes"> The boolean value representing the whether the mask should allow
                        all geometry or no geometry types.
                        </param>
        </member>
        <member name="M:Mastercam.Database.Types.GroupSelectionMask.BitValue">
            <summary> Used to output the Mastercam bit value representing this object's internal data.
          </summary>
            <returns> A short value with the corresponding bits set to act as a Mastercam (entity) Group
          selection Mask.
          </returns>
        </member>
        <member name="T:Mastercam.Database.Types.GroupSelectionMask">
            <summary> A masking type used for indicating Group and/or Result selection flags. </summary>
        </member>
        <member name="M:Mastercam.Database.Types.SelectionMask.op_Inequality(Mastercam.Database.Types.SelectionMask,Mastercam.Database.Types.SelectionMask)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <param name="Mask1"> This is the first mask to compare. </param>
            <param name="Mask2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Database.Types.SelectionMask.op_Equality(Mastercam.Database.Types.SelectionMask,Mastercam.Database.Types.SelectionMask)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <param name="Mask1"> This is the first mask to compare. </param>
            <param name="Mask2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Database.Types.SelectionMask.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this mask object to
          another one.
          </summary>
            <param name="obj"> [in,out] This is the mask to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Database.Types.SelectionMask.Equals(Mastercam.Database.Types.SelectionMask,Mastercam.Database.Types.SelectionMask)">
            <summary> This is a static equality method for the purposes of comparing mask objects.
          </summary>
            <param name="Mask1"> This is the first mask to compare. </param>
            <param name="Mask2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="P:Mastercam.Database.Types.SelectionMask.Blanked">
            <summary> Gets or sets the Blanked entities flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.SelectionMask.Selected">
            <summary> Gets or sets the Selected entities flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.SelectionMask.All">
            <summary> Gets or sets the All entities flag. </summary>
        </member>
        <member name="M:Mastercam.Database.Types.SelectionMask.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary> Initializes a new instance of the SelectionMask class. </summary>
            <remarks> Sets all of the geometry type flags to the respective boolean values passed in.
          </remarks>
            <param name="All">      The value to set the All Alive entities flag to. </param>
            <param name="Selected"> The value to set the Selected entities flag to. </param>
            <param name="Blanked">  The value to set the Blanked entities flag to. </param>
        </member>
        <member name="M:Mastercam.Database.Types.SelectionMask.#ctor(System.Boolean)">
            <summary> Initializes a new instance of the SelectionMask class. </summary>
            <remarks> Sets the selection type flags so that it would either return all geometry or no geometry.
       </remarks>
            <param name="AllTypes"> The boolean value representing the whether the mask should allow
                        all geometry or no geometry.
                        </param>
        </member>
        <member name="M:Mastercam.Database.Types.SelectionMask.BitValue">
            <summary> Used to output the Mastercam bit value representing this object's internal data.
          </summary>
            <returns> A short value with the corresponding bits set to act as a Mastercam selection Mask.
          </returns>
        </member>
        <member name="T:Mastercam.Database.Types.SelectionMask">
            <summary> A masking type used for indicating any combination of selection flags. </summary>
        </member>
        <member name="M:Mastercam.Database.Types.GeometryMask.op_Inequality(Mastercam.Database.Types.GeometryMask,Mastercam.Database.Types.GeometryMask)">
            <summary> This is a static inequality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <param name="Mask1"> This is the first mask to compare. </param>
            <param name="Mask2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered not equal. </returns>
        </member>
        <member name="M:Mastercam.Database.Types.GeometryMask.op_Equality(Mastercam.Database.Types.GeometryMask,Mastercam.Database.Types.GeometryMask)">
            <summary> This is a static equality operator overload for the purposes of comparing these
          math objects.
          </summary>
            <param name="Mask1"> This is the first mask to compare. </param>
            <param name="Mask2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Database.Types.GeometryMask.Equals(System.Object)">
            <summary> This is an equality method for the purposes of comparing this mask object to
          another one.
          </summary>
            <param name="obj"> This is the mask to compare against. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="M:Mastercam.Database.Types.GeometryMask.Equals(Mastercam.Database.Types.GeometryMask,Mastercam.Database.Types.GeometryMask)">
            <summary> This is a static equality method for the purposes of comparing mask objects.
          </summary>
            <param name="Mask1"> This is the first mask to compare. </param>
            <param name="Mask2"> This is the second mask to compare. </param>
            <returns> True if the two objects are considered equal. </returns>
        </member>
        <member name="P:Mastercam.Database.Types.GeometryMask.PMeshes">
            <summary> Gets or sets the Polygonal Mesh geometry flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.GeometryMask.Solids">
            <summary> Gets or sets the Solids geometry flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.GeometryMask.Surfs">
            <summary> Gets or sets the Surfaces geometry flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.GeometryMask.NBSplines">
            <summary> Gets or sets the NURBS Splines geometry flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.GeometryMask.PSplines">
            <summary> Gets or sets the Parametric Splines geometry flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.GeometryMask.Arcs">
            <summary> Gets or sets the Arcs geometry flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.GeometryMask.Lines">
            <summary> Gets or sets the Lines geometry flag. </summary>
        </member>
        <member name="P:Mastercam.Database.Types.GeometryMask.Points">
            <summary> Gets or sets the Points geometry flag. </summary>
        </member>
        <member name="M:Mastercam.Database.Types.GeometryMask.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Initializes a new instance of the GeometryMask class. </summary>
            <remarks> Sets all of the geometry type flags to the respective boolean values passed in.
          </remarks>
            <param name="Points">    true for points. </param>
            <param name="Lines">     true for lines. </param>
            <param name="Arcs">      true for arcs. </param>
            <param name="PSplines">  true for parametric type splines. </param>
            <param name="NBSplines"> true for nurbs type splines. </param>
            <param name="Surfs">     true for surfs. </param>
            <param name="Solids">    true for solids. </param>
            <param name="PMeshes">   true for polygonal meshes. </param>
        </member>
        <member name="M:Mastercam.Database.Types.GeometryMask.#ctor(System.Boolean)">
            <summary> Initializes a new instance of the GeometryMask class. </summary>
            <remarks> Sets all of the geometry type flags to the same boolean value. </remarks>
            <param name="AllOn"> The boolean value to set the geometry flags to. </param>
        </member>
        <member name="M:Mastercam.Database.Types.GeometryMask.BitValue">
            <summary> Used to output the Mastercam bit value representing this object's internal data. </summary>
            <returns> A long value with the corresponding bits set to act as a Mastercam geometry Mask. </returns>
        </member>
        <member name="T:Mastercam.Database.Types.GeometryMask">
            <summary> A masking type used for indicating any combination of geometry types. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.DrillCycleCustomParameter">
            <summary> Values that represent the (10) custom parameter values on a Drill type operation . </summary>
        </member>
        <member name="T:Mastercam.Database.Types.DrillCycleType">
            <summary> This enum specifies the different types of Drill Cycles. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillCycleType.Misc2">
            <summary> Misc. (style2) cycle. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillCycleType.Misc1">
            <summary> Misc. (style1) cycle. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillCycleType.Bore2">
            <summary> Bore (style2) cycle. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillCycleType.Bore1">
            <summary> Bore (style1) cycle. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillCycleType.Tap">
            <summary> Tapping cycle. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillCycleType.ChipBreak">
            <summary> Chip Break Drilling cycle. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillCycleType.PeckDrill">
            <summary> Peck Drilling cycle. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillCycleType.Drill">
            <summary> Standard Drill cycle. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.ToolRadiusType">
            <summary> Values that represent a tool's Radius Type; None, Corner, Full . </summary>
            <remarks> For Mill/Router type tools. </remarks>
        </member>
        <member name="T:Mastercam.Database.Types.ToolType">
            <summary> The types of tools that can be used in an operation. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.OperationType">
            <summary> The types of operations used in NET-Hook API </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.Facing">
            <summary> A (mill) Facing milling operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.ThreadMill">
            <summary> A thread milling operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.SlotMill">
            <summary> A circle milling operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.Engrave">
            <summary> An engraving operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.CircleMill">
            <summary> A circle milling operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.HelixBore">
            <summary> A helix bore operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.OnionSkinning">
            <summary> An onion-skinning operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.Nesting">
            <summary> A nesting operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.BlockDrill">
            <summary> A block drilling operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.Pocket">
            <summary> A simple pocketing operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.Drill">
            <summary> A simple drilling operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.Contour">
            <summary> A contour operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OperationType.Undefined">
            <summary> An undefined or unknown operation type. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.MachiningDirectionType">
            <summary> The types of machining direction that be applied to an operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.MachiningDirectionType.Climb">
            <summary> Climb cutting direction. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.MachiningDirectionType.Conventional">
            <summary> Conventional cutting direction. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.CutterCompRoll">
            <summary> The types of cutter compensation corner rolling that can be applied to an operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompRoll.CutterCompRollAll">
            <summary> Cutter compensation corner rolling for all corners in the operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompRoll.CutterCompRollSharp">
            <summary> Only sharp cutter compensation corner rolling in the operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompRoll.CutterCompRollNone">
            <summary> No cutter compensation rolling in the operation. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.CutterCompDir">
            <summary> The direction of cutter compensation that can be applied to an operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompDir.CutterCompDirNull">
            <summary> The value returned if an error occurred while determining the cutter compensation type. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompDir.CutterCompInvalid">
            <summary> An invalid cutter compensation type. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompDir.CutterCompAuto">
            <summary> Automatic cutter compensation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompDir.CutterCompRight">
            <summary> Right-hand cutter compensation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompDir.CutterCompLeft">
            <summary> Left-hand cutter compensation. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.CutterCompType">
            <summary> The type of cutter compensation that can be applied to an operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompType.CutterCompOptionNull">
            <summary> The value returned if an error occurred while determining the cutter compensation type. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompType.CutterCompOff">
            <summary> No adjustment for wear, no output compensation codes. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompType.CutterCompReverseWear">
            <summary> Same as wear, except the wear value is positive. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompType.CutterCompWear">
            <summary> Mastercam calculates compensation, and outputs G41/G42 codes. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompType.CutterCompControl">
            <summary> The control will calculation compensation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.CutterCompType.CutterCompComputer">
            <summary> Mastercam will automatically calculate compensation. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.DrillSortMethod">
            <summary> The different methods of sorting drill points in a drill-based operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.ZzpCcw">
            <summary> zig z plus, counter-clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.ZzmCcw">
            <summary> zig z minus, counter-clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.ZzpCw">
            <summary> zig z plus, clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.ZzmCw">
            <summary> zig z minus, clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.ZpCcw">
            <summary> z plus, counter-clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.ZmCcw">
            <summary> z minus, counter-clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.ZpCw">
            <summary> z plus, clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.ZmCw">
            <summary> z minus, clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CcwzZp">
            <summary> counter-clockwise, zig z plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CcwzZm">
            <summary> counter-clockwise, zig z minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CcwZp">
            <summary> counter-clockwise, z plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CcwZm">
            <summary> counter-clockwise, z minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CwzZp">
            <summary> clockwise, zig z plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CwzZm">
            <summary> clockwise, zig z minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CwZp">
            <summary> clockwise, z plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CwZm">
            <summary> clockwise, z minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.RzpCcw">
            <summary> rotate zig plus, counter-clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.RzmCcw">
            <summary> rotate zig minus, counter-clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.RzpCw">
            <summary> rotate zig plus, clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.RzmCw">
            <summary> rotate zig minus, clockwise </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CcwzRp">
            <summary> counter-clockwise around z, rotate plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CcwzRm">
            <summary> counter-clockwise around z, rotate minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CcwRp">
            <summary> counter-clockwise, rotate plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CcwRm">
            <summary> counter-clockwise, rotate minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CwzRp">
            <summary> clockwise, zig rotate plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CwzRm">
            <summary> clockwise, zig rotate minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CwRp">
            <summary> clockwise, rotate plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.CwRm">
            <summary> clockwise, rotate minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.PtToPt">
            <summary> point to point </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.YzmXm">
            <summary> y zig minus, x minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.YzmXp">
            <summary> y zig minus, x plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.YzpXm">
            <summary> y zig plus, x minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.YzpXp">
            <summary> y zig plus, x plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.YmXm">
            <summary> y minus, x minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.YmXp">
            <summary> y minus, x plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.YpXm">
            <summary> y plus, x minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.YpXp">
            <summary> y plus, x plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.XzmYm">
            <summary> x zig minus, y minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.XzmYp">
            <summary> x zig minus, y plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.XzpYm">
            <summary> x zig plus, y minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.XzpYp">
            <summary> x zig plus, y plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.XmYm">
            <summary> x minus, y minus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.XmYp">
            <summary> x minus, y plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.XpYm">
            <summary> x plus, y  </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.XpYp">
            <summary> x plus, y plus </summary>
        </member>
        <member name="F:Mastercam.Database.Types.DrillSortMethod.Off">
            <summary> Sorting off </summary>
        </member>
        <member name="T:Mastercam.Database.Types.PocketCutTypes">
            <summary> The different methods of cutting a pocketing toolpath. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.PocketCutTypes.HighSpeed">
            <summary> High Speed cutting. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.PocketCutTypes.OneWayCut">
            <summary> One-Way cutting. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.PocketCutTypes.TrueSpiral">
            <summary> True Spiral cutting. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.PocketCutTypes.MorphSpiral">
            <summary> Morph Spiral </summary>
        </member>
        <member name="F:Mastercam.Database.Types.PocketCutTypes.ParallelSpiral_CleanCorners">
            <summary> Parallel Spiral (with Clean Corners) </summary>
        </member>
        <member name="F:Mastercam.Database.Types.PocketCutTypes.ParallelSpiral">
            <summary> Parallel Spiral </summary>
        </member>
        <member name="F:Mastercam.Database.Types.PocketCutTypes.ConstantOverlapSpiral">
            <summary> Constant Overlap Spiral cutting. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.PocketCutTypes.ZigZagCut">
            <summary> Zig-Zag cutting. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.ChainTypes">
            <summary> The different types of chains that can be used by Chain Manager methods. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainTypes.CurveChains">
            <summary> Only curve-based chains. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainTypes.ToolContainChains">
            <summary> Only chains within the tool containment boundary. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainTypes.ToolAxisChains">
            <summary> Only chains on the tool axis. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainTypes.DriveChains">
            <summary> Only drive chains. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainTypes.AllChains">
            <summary> All chains. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.ChainManagerMode">
            <summary> The different pieces of functionality that the Chain Manager method can perform. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.GetOperationChains">
            <summary> Returns an array of the given operation's chains. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.ChangeStartPoint">
            <summary> Launches the dialog to let the user change the starting point in the chain. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.ModifyChainPoint">
            <summary> Launches the dialog to let the user change parameters at a given point in the operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.FlipCutterCompOnChains">
            <summary> Flips the cutter compensation direction in all of the chains in the specified Operation object. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.ReplaceAllChains">
            <summary> Launches the dialog to let the user replace all of the given chains in a specified Operation. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.ReplaceChains">
            <summary> Launches the dialog to let the user replace one or more chains. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.ReverseChains">
            <summary> Reverses all of the chains in the specified Operation object. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.DeleteChains">
            <summary> Deletes all of the chains from the specified Operation object. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.AddChains">
            <summary> Adds chains from the passed in array of Chain objects to the specified Operation object. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainManagerMode.DisplayDialog">
            <summary> Displays the chaining dialog for the given Operation object. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.OffsetSideType">
            <summary> The 'offset side' modes available when offsetting a Chain. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OffsetSideType.Right">
            <summary> Offset to the Right side. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OffsetSideType.Left">
            <summary> Offset to the Left side. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.OffsetRollCornerType">
            <summary> The 'roll corner' modes available when offsetting a Chain. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OffsetRollCornerType.All">
            <summary> Roll all corners. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OffsetRollCornerType.Sharp">
            <summary> Only roll sharp corners. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.OffsetRollCornerType.None">
            <summary> Do not roll any corners. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.ChainDirectionType">
            <summary> The different possible directions a chain can be created in. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainDirectionType.CounterClockwise">
            <summary> A chain with a counter-clockwise direction. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainDirectionType.Clockwise">
            <summary> A chain with a clockwise direction. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ChainDirectionType.Undefined">
            <summary> A chain with an undefined direction, or a chain where the direction could not be determined. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.UserType">
            <summary>The different user types that Mastercam can be running as.</summary>
        </member>
        <member name="F:Mastercam.Database.Types.UserType.Dealer">
            <summary> Dealer user. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.UserType.Educational">
            <summary> Educational user. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.UserType.Industrial">
            <summary> Industrial user. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.UserType.ErrorType">
            <summary> Indicates an error or bad user type value. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.ProductType">
            <summary>The different product modes that Mastercam can be in at any given time</summary>
        </member>
        <member name="F:Mastercam.Database.Types.ProductType.MillTurn">
            <summary>Mastercam Mill-Turn machine mode.</summary>
        </member>
        <member name="F:Mastercam.Database.Types.ProductType.Wire">
            <summary>Mastercam Wire machine mode.</summary>
        </member>
        <member name="F:Mastercam.Database.Types.ProductType.Lathe">
            <summary>Mastercam Lathe machine mode.</summary>
        </member>
        <member name="F:Mastercam.Database.Types.ProductType.Router">
            <summary> Mastercam Router machine mode. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ProductType.Mill">
            <summary> Mastercam Mill machine mode. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ProductType.Design">
            <summary> Mastercam Design mode. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ProductType.Draft">
            <summary> Mastercam Draft mode. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.ProductType.ErrorType">
            <summary> Indicates an error or bad product type value. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.GeometryMaskCommonTypes">
            <summary> A collection of commonly used Mastercam geometry mask permutations. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.GeometryMaskCommonTypes.AllGeometryNoSolidsMask">
            <summary> All geometry types, omitting Solid types. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.GeometryMaskCommonTypes.AllGeometryMask">
            <summary> All geometry types. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.GeometryMaskCommonTypes.NullID">
            <summary> No entity types at all. </summary>
        </member>
        <member name="T:Mastercam.Database.Types.EntityIDType">
            <summary> The different types of base database entities types represented in the API. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.EntityIDType.ViewID">
            <summary> Mastercam view type. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.EntityIDType.GeometryID">
            <summary> Mastercam geometry type. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.EntityIDType.ToolID">
            <summary> Mastercam tool type. </summary>
        </member>
        <member name="F:Mastercam.Database.Types.EntityIDType.OperationID">
            <summary> Mastercam operation type. </summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.Tool.LATHEFR'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:coolant_cmd_str'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile.Printf(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile.ReadLine(System.Char*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile.ReadString(System.Char*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile.WriteString(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile.ReadNarrowLine(System.Char*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile.ReadNarrowString(System.Char*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile.WriteNarrowString(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile._APrintf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile._AReadLine(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile._AReadString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile._AWriteString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile._WPrintf(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile._WReadLine(System.Char*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile._WReadString(System.Char*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile._WWriteString(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SysFile.GetError'. -->
        <!-- Discarding badly formed XML document comment for member 'M:surface_manager(System.Int32!System.Runtime.CompilerServices.IsLong,CHAIN**,System.Int16,System.Int16,System.Boolean*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpMatMgr.GetMainMatList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpGrpList.GetProductCodes(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpGrpMgr.GetMainGrpList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpGrpMgr.GetReadGrpList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpOpMgr.GetMainOpList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetPreXCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetTotalHolderLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetToolProjection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.Tool.TlAssembly.GetGaugeLength'. -->
        <!-- Discarding badly formed XML document comment for member 'M:set_chain_closed(CHAIN*,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetSaveAsVersion(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetReadPMeshData(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetReadMtable(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetSkipMtable(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetMergeMtable(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetDumpBitmap(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetDumpDescriptor(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetDumpFont(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetDumpLevels(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetDumpWorksheets(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetDumpFileLockHist(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetDumpGroups(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFileBase.SetDumpEntAllocations(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MCFile.IsMastercamFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:get_ent(Cnc.Db.DbPtr<Cnc.Db.DbLegacyEntRef<ent>!System.Runtime.CompilerServices.IsConst>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Db.DbPtr<Cnc.Db.DbLegacyEntRef<ent>!System.Runtime.CompilerServices.IsConst>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:store_ent(ent*,Cnc.Db.DbPtr<Cnc.Db.DbLegacyEntRef<ent>!System.Runtime.CompilerServices.IsConst>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Byte,System.Int32,attributes,System.Boolean*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:put_special_undo(System.Int16,DB_LIST_ENT*,ent*,System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:copy_p_3dx(System.Double*,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:constr_arc_new(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d*,System.Boolean*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:scale_silent_non_uniform(DB_LIST_ENT**,System.Boolean,System.Boolean,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Boolean*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CBnciReadWrite.FindGcode(NCI_GCODE,System.Int64,CBnciReadWrite.SearchDirection,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:BnciCache.OpViewsMustMatchNci(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:MastercamPlanes.AssignmentPriority'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MastercamPlanes.op_Assign(std.vector<Plane,std.allocator<Plane>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MastercamPlanes.op_Assign(std.vector<Plane!System.Runtime.CompilerServices.IsConst**,std.allocator<Plane!System.Runtime.CompilerServices.IsConst**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:MastercamPlanes.AppendInfoMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MastercamPlanes.FindPlane(MastercamPlanes.FindPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MastercamPlanes.Find(MastercamPlanes.FindPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MastercamPlanes.FindOrAdd(MastercamPlanes.FindPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:MastercamPlanes.PlaneUsageInfo'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MastercamPlanes.PlaneUsage(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,CInterrogateMastercamFile*,std.vector<std.tuple<System.Boolean,PlaneID,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>>,std.allocator<std.tuple<System.Boolean,PlaneID,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>>>>*,MastercamPlanes.PLANE_USAGE_MESSAGE_BOX,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MastercamPlanes.GetReservedPlanes(std.vector<Plane!System.Runtime.CompilerServices.IsConst**,std.allocator<Plane!System.Runtime.CompilerServices.IsConst**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:MastercamPlanes.SaveRestoreActivePlanes'. -->
        <!-- Discarding badly formed XML document comment for member 'M:PlanesFollowRules.GraphicsViewWasChanged'. -->
        <!-- Discarding badly formed XML document comment for member 'M:PlanesFollowRules.TplaneWasChanged(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:PlanesFollowRules.WcsWasChanged'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SetAllowViewSnapping(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SetSnapAngleTolerance(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SetSpaceBallAttraction(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMastercamInterface.GetMastercamInstallLanguageBasedSubFolder(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:dump_mmalloc(System.Char*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:notepad_mmalloc(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:create_nurbs_from_points(System.Int32!System.Runtime.CompilerServices.IsLong,p_3d*,System.Byte,System.Int32,System.Int16,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DB_LIST_ENT**)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:SldHoleTaperParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:SldHoleCounterboreParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:SldHoleCountersinkParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:SldHoleCounterdrillParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:SldHoleParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CWorkSheetTabControl.GetWorksheetArray(VArray<WorkSheetEntry**>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MTMachineGroupOK(op_group!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Cnc.MachineFileMgr.MachineFileMap'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOff(CCNCMachine*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CMachineInterfaceParams.ImportGeoLevelOn(CCNCMachine*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ValidGeoDlgIndex(System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsMisc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.IsGroupClassAndType(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindNamedView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT<System.Char,StrTraitMFC_DLL<System.Char,ATL.ChTraitsCRT{System.Char}>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindParentComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.FindComponentByID(MdComponentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CMachineComponent.LocateFromLatheTCABdry(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(component_group_type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32,System.Int32,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentGroupFactory.MakeComponentGroup(System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,CCNCMachine*,Cnc.MachineDef.Component.CComponentGroup*,System.Boolean,component_group_type*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.CComponentGroup.FindComponentsByType(std.vector<Cnc.MachineDef.Component.CMachineComponent**,std.allocator<Cnc.MachineDef.Component.CMachineComponent**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:VX7_axis_combination_type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:VX7_axis_combination_type.group_ent_idns'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Cnc.MachineDef.Component.ComponentFactory.MakeComponent(CCNCMachine*,Cnc.MachineDef.Component.CMachineComponent*,Cnc.MachineDef.Component.CComponentGroup*,machine_component_type*,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,eTreeFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AutoLoadTools'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.FixCtrlNCPaths(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MaxLinearFeedrate(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteSpindleSolids'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.DeleteMachine(System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.CreateMachine(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.SaveToDb(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MCSolidMenuDisplay(std.vector<Cnc.MachineDef.Component.IMdComponent**,std.allocator<Cnc.MachineDef.Component.IMdComponent**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboIDFromAxisComboID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MappedAxisComboFromAxisComboUIDString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.MachiningModeFromUID(MdComponentId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.AxisComboFromLatheToolInfo(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WldXYZToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CCNCMachine.WCSXYToNCXZ(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32)'. -->
    </members>
</doc>